<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://javaguide.cn/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://javaguide.cn/rss.xml" rel="self" type="application/rss+xml"/>
    <title>勇哥Java实战</title>
    <link>https://javaguide.cn/</link>
    <description>Java基础知识、缓存、消息队列、分库分表等高并发解决方案！</description>
    <language>zh-CN</language>
    <pubDate>Thu, 29 Jun 2023 09:34:10 GMT</pubDate>
    <lastBuildDate>Thu, 29 Jun 2023 09:34:10 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>计算机书籍</category>
    <category>走近作者</category>
    <category>知识星球</category>
    <category>数据库</category>
    <category>分布式</category>
    <category>高性能</category>
    <category>高可用</category>
    <category>走近项目</category>
    <category>面试准备</category>
    <category>开源项目</category>
    <category>系统设计</category>
    <category>Java面试指北</category>
    <category>计算机基础</category>
    <item>
      <title>勇哥Java实战</title>
      <link>https://javaguide.cn/home.html</link>
      <guid>https://javaguide.cn/home.html</guid>
      <source url="https://javaguide.cn/rss.xml">勇哥Java实战</source>
      <description>友情提示 面试专版：准备 Java 面试的小伙伴可以考虑面试专版：《Java 面试指北 》 (质量很高，专为面试打造，配合 JavaGuide 食用)。 知识星球：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 JavaGuide 知识星球（点击链接即可查看星球的详细介绍，一定确定自己真的需要再加入）。 使用建议 ：有水平的面试官都是顺着项目经历挖掘技术问题。一定不要死记硬背技术八股文！详细的学习建议请参考：JavaGuide 使用建议。 求个Star：如果觉得 JavaGuide 的内容对你有帮助的话，还请点个免费的 Star，这是对我最大的鼓励，感谢各位一起同行，共勉！Github 地址：https://github.com/Snailclimb/JavaGuide 。 转载须知：以下所有文章如非文首说明为转载皆为 JavaGuide 原创，转载请在文首注明出处。如发现恶意抄袭/搬运，会动用法律武器维护自己的权益。让我们一起维护一个良好的技术创作环境！</description>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<hr>
<div class="hint-container tip">
<p class="hint-container-title">友情提示</p>
<ul>
<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北 》</a></strong> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li>
<li><strong>知识星球</strong>：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 <strong><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">JavaGuide 知识星球</a></strong>（点击链接即可查看星球的详细介绍，一定确定自己真的需要再加入）。</li>
<li><strong>使用建议</strong> ：有水平的面试官都是顺着项目经历挖掘技术问题。一定不要死记硬背技术八股文！详细的学习建议请参考：<a href="/javaguide/use-suggestion.html" target="blank">JavaGuide 使用建议</a>。</li>
<li><strong>求个Star</strong>：如果觉得 JavaGuide 的内容对你有帮助的话，还请点个免费的 Star，这是对我最大的鼓励，感谢各位一起同行，共勉！Github 地址：<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener noreferrer">https://github.com/Snailclimb/JavaGuide</a> 。</li>
<li><strong>转载须知</strong>：以下所有文章如非文首说明为转载皆为 JavaGuide 原创，转载请在文首注明出处。如发现恶意抄袭/搬运，会动用法律武器维护自己的权益。让我们一起维护一个良好的技术创作环境！</li>
</ul>
</div>
<div align="center">
<figure><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener noreferrer"><img src="https://oss.javaguide.cn/github/javaguide/csdn/1c00413c65d1995993bf2b0daf7b4f03.png" alt="logo" tabindex="0"></a><figcaption>logo</figcaption></figure>
<p><a href="https://javaguide.cn/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/阅读-read-brightgreen.svg" alt="阅读"></a>
<img src="https://img.shields.io/github/stars/Snailclimb/JavaGuide" alt="Stars">
<img src="https://img.shields.io/github/forks/Snailclimb/JavaGuide" alt="forks">
<img src="https://img.shields.io/github/issues/Snailclimb/JavaGuide" alt="issues"></p>
<p><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener noreferrer">GitHub</a> | <a href="https://gitee.com/SnailClimb/JavaGuide" target="_blank" rel="noopener noreferrer">Gitee</a></p>
</div>
<figure><a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"><img src="https://oss.javaguide.cn/xingqiu/xingqiu.png" alt="Banner" tabindex="0"></a><figcaption>Banner</figcaption></figure>
<h2> Java</h2>
<h3> 基础</h3>
<p><strong>知识点/面试题总结</strong> : (必看👍 )：</p>
<ul>
<li><a href="/java/basis/java-basic-questions-01.html" target="blank">Java 基础常见知识点&amp;面试题总结(上)</a></li>
<li><a href="/java/basis/java-basic-questions-02.html" target="blank">Java 基础常见知识点&amp;面试题总结(中)</a></li>
<li><a href="/java/basis/java-basic-questions-03.html" target="blank">Java 基础常见知识点&amp;面试题总结(下)</a></li>
</ul>
<p><strong>重要知识点详解</strong>：</p>
<ul>
<li><a href="/java/basis/why-there-only-value-passing-in-java.html" target="blank">为什么 Java 中只有值传递？</a></li>
<li><a href="/java/basis/serialization.html" target="blank">Java 序列化详解</a></li>
<li><a href="/java/basis/generics-and-wildcards.html" target="blank">泛型&amp;通配符详解</a></li>
<li><a href="/java/basis/reflection.html" target="blank">Java 反射机制详解</a></li>
<li><a href="/java/basis/proxy.html" target="blank">Java 代理模式详解</a></li>
<li><a href="/java/basis/bigdecimal.html" target="blank">BigDecimal 详解</a></li>
<li><a href="/java/basis/unsafe.html" target="blank">Java 魔法类 Unsafe 详解</a></li>
<li><a href="/java/basis/spi.html" target="blank">Java SPI 机制详解</a></li>
<li><a href="/java/basis/syntactic-sugar.html" target="blank">Java 语法糖详解</a></li>
</ul>
<h3> 集合</h3>
<p><strong>知识点/面试题总结</strong>：</p>
<ul>
<li><a href="/java/collection/java-collection-questions-01.html" target="blank">Java 集合常见知识点&amp;面试题总结(上)</a> (必看 👍)</li>
<li><a href="/java/collection/java-collection-questions-02.html" target="blank">Java 集合常见知识点&amp;面试题总结(下)</a> (必看 👍)</li>
<li><a href="/java/collection/java-collection-precautions-for-use.html" target="blank">Java 容器使用注意事项总结</a></li>
</ul>
<p><strong>源码分析</strong>：</p>
<ul>
<li><a href="/java/collection/arraylist-source-code.html" target="blank">ArrayList 核心源码+扩容机制分析</a></li>
<li><a href="/java/collection/linkedlist-source-code.html" target="blank">LinkedList 核心源码分析</a></li>
<li><a href="/java/collection/hashmap-source-code.html" target="blank">HashMap 核心源码+底层数据结构分析</a></li>
<li><a href="/java/collection/concurrent-hash-map-source-code.html" target="blank">ConcurrentHashMap 核心源码+底层数据结构分析</a></li>
<li><a href="/java/collection/copyonwritearraylist-source-code.html" target="blank">CopyOnWriteArrayList 核心源码分析</a></li>
<li><a href="/java/collection/arrayblockingqueue-source-code.html" target="blank">ArrayBlockingQueue 核心源码分析</a></li>
</ul>
<h3> IO</h3>
<ul>
<li><a href="/java/io/io-basis.html" target="blank">IO 基础知识总结</a></li>
<li><a href="/java/io/io-design-patterns.html" target="blank">IO 设计模式总结</a></li>
<li><a href="/java/io/io-model.html" target="blank">IO 模型详解</a></li>
<li><a href="/java/io/nio-basis.html" target="blank">NIO 核心知识总结</a></li>
</ul>
<h3> 并发</h3>
<p><strong>知识点/面试题总结</strong> : (必看 👍)</p>
<ul>
<li><a href="/java/concurrent/java-concurrent-questions-01.html" target="blank">Java 并发常见知识点&amp;面试题总结（上）</a></li>
<li><a href="/java/concurrent/java-concurrent-questions-02.html" target="blank">Java 并发常见知识点&amp;面试题总结（中）</a></li>
<li><a href="/java/concurrent/java-concurrent-questions-03.html" target="blank">Java 并发常见知识点&amp;面试题总结（下）</a></li>
</ul>
<p><strong>重要知识点详解</strong>：</p>
<ul>
<li><a href="/java/concurrent/jmm.html" target="blank">JMM（Java 内存模型）详解</a></li>
<li><strong>线程池</strong>：<a href="/java/concurrent/java-thread-pool-summary.html" target="blank">Java 线程池详解</a>、<a href="/java/concurrent/java-thread-pool-best-practices.html" target="blank">Java 线程池最佳实践</a></li>
<li><a href="/java/concurrent/threadlocal.html" target="blank">ThreadLocal 详解</a></li>
<li><a href="/java/concurrent/java-concurrent-collections.html" target="blank">Java 并发容器总结</a></li>
<li><a href="/java/concurrent/atomic-classes.html" target="blank">Atomic 原子类总结</a></li>
<li><a href="/java/concurrent/aqs.html" target="blank">AQS 详解</a></li>
<li><a href="/java/concurrent/completablefuture-intro.html" target="blank">CompletableFuture 详解</a></li>
</ul>
<h3> JVM (必看 👍)</h3>
<p>JVM 这部分内容主要参考 <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener noreferrer">JVM 虚拟机规范-Java8</a> 和周志明老师的<a href="https://book.douban.com/subject/34907497/" target="_blank" rel="noopener noreferrer">《深入理解 Java 虚拟机（第 3 版）》</a> （强烈建议阅读多遍！）。</p>
<ul>
<li><strong><a href="/java/jvm/memory-area.html" target="blank">Java 内存区域</a></strong></li>
<li><strong><a href="/java/jvm/jvm-garbage-collection.html" target="blank">JVM 垃圾回收</a></strong></li>
<li><a href="/java/jvm/class-file-structure.html" target="blank">类文件结构</a></li>
<li><strong><a href="/java/jvm/class-loading-process.html" target="blank">类加载过程</a></strong></li>
<li><a href="/java/jvm/classloader.html" target="blank">类加载器</a></li>
<li><a href="/java/jvm/jvm-parameters-intro.html" target="blank">【待完成】最重要的 JVM 参数总结（翻译完善了一半）</a></li>
<li><a href="/java/jvm/jvm-intro.html" target="blank">【加餐】大白话带你认识 JVM</a></li>
<li><a href="/java/jvm/jdk-monitoring-and-troubleshooting-tools.html" target="blank">JDK 监控和故障处理工具</a></li>
</ul>
<h3> 新特性</h3>
<ul>
<li><strong>Java 8</strong>：<a href="/java/new-features/java8-tutorial-translate.html" target="blank">Java 8 新特性总结（翻译）</a>、<a href="/java/new-features/java8-common-new-features.html" target="blank">Java8 常用新特性总结</a></li>
<li><a href="/java/new-features/java9.html" target="blank">Java 9 新特性概览</a></li>
<li><a href="/java/new-features/java10.html" target="blank">Java 10 新特性概览</a></li>
<li><a href="/java/new-features/java11.html" target="blank">Java 11 新特性概览</a></li>
<li><a href="/java/new-features/java12-13.html" target="blank">Java 12 &amp; 13 新特性概览</a></li>
<li><a href="/java/new-features/java14-15.html" target="blank">Java 14 &amp; 15 新特性概览</a></li>
<li><a href="/java/new-features/java16.html" target="blank">Java 16 新特性概览</a></li>
<li><a href="/java/new-features/java17.html" target="blank">Java 17 新特性概览</a></li>
<li><a href="/java/new-features/java18.html" target="blank">Java 18 新特性概览</a></li>
<li><a href="/java/new-features/java19.html" target="blank">Java 19 新特性概览</a></li>
<li><a href="/java/new-features/java20.html" target="blank">Java 20 新特性概览</a></li>
</ul>
<h2> 计算机基础</h2>
<h3> 操作系统</h3>
<ul>
<li><a href="/cs-basics/operating-system/operating-system-basic-questions-01.html" target="blank">操作系统常见知识点&amp;面试题总结(上)</a></li>
<li><a href="/cs-basics/operating-system/operating-system-basic-questions-02.html" target="blank">操作系统常见知识点&amp;面试题总结(下)</a></li>
<li><strong>Linux</strong>：
<ul>
<li><a href="/cs-basics/operating-system/linux-intro.html" target="blank">后端程序员必备的 Linux 基础知识总结</a></li>
<li><a href="/cs-basics/operating-system/shell-intro.html" target="blank">Shell 编程基础知识总结</a></li>
</ul>
</li>
</ul>
<h3> 网络</h3>
<p><strong>知识点/面试题总结</strong>：</p>
<ul>
<li><a href="/cs-basics/network/other-network-questions.html" target="blank">计算机网络常见知识点&amp;面试题总结(上)</a></li>
<li><a href="/cs-basics/network/other-network-questions2.html" target="blank">计算机网络常见知识点&amp;面试题总结(下)</a></li>
<li><a href="/cs-basics/network/computer-network-xiexiren-summary.html" target="blank">谢希仁老师的《计算机网络》内容总结（补充）</a></li>
</ul>
<p><strong>重要知识点详解</strong>：</p>
<ul>
<li><a href="/cs-basics/network/osi-and-tcp-ip-model.html" target="blank">OSI 和 TCP/IP 网络分层模型详解（基础）</a></li>
<li><a href="/cs-basics/network/application-layer-protocol.html" target="blank">应用层常见协议总结（应用层）</a></li>
<li><a href="/cs-basics/network/http-vs-https.html" target="blank">HTTP vs HTTPS（应用层）</a></li>
<li><a href="/cs-basics/network/http1.0-vs-http1.1.html" target="blank">HTTP 1.0 vs HTTP 1.1（应用层）</a></li>
<li><a href="/cs-basics/network/http-status-codes.html" target="blank">HTTP 常见状态码（应用层）</a></li>
<li><a href="/cs-basics/network/dns.html" target="blank">DNS 域名系统详解（应用层）</a></li>
<li><a href="/cs-basics/network/tcp-connection-and-disconnection.html" target="blank">TCP 三次握手和四次挥手（传输层）</a></li>
<li><a href="/cs-basics/network/tcp-reliability-guarantee.html" target="blank">TCP 传输可靠性保障（传输层）</a></li>
<li><a href="/cs-basics/network/arp.html" target="blank">ARP 协议详解(网络层)</a></li>
<li><a href="/cs-basics/network/nat.html" target="blank">NAT 协议详解(网络层)</a></li>
<li><a href="/cs-basics/network/network-attack-means.html" target="blank">网络攻击常见手段总结（安全）</a></li>
</ul>
<h3> 数据结构</h3>
<p><strong>图解数据结构：</strong></p>
<ul>
<li><a href="/cs-basics/data-structure/linear-data-structure.html" target="blank">线性数据结构 :数组、链表、栈、队列</a></li>
<li><a href="/cs-basics/data-structure/graph.html" target="blank">图</a></li>
<li><a href="/cs-basics/data-structure/heap.html" target="blank">堆</a></li>
<li><a href="/cs-basics/data-structure/tree.html" target="blank">树</a>：重点关注<a href="/cs-basics/data-structure/red-black-tree.html" target="blank">红黑树</a>、B-，B+，B*树、LSM 树</li>
</ul>
<p>其他常用数据结构：</p>
<ul>
<li><a href="/cs-basics/data-structure/bloom-filter.html" target="blank">布隆过滤器</a></li>
</ul>
<h3> 算法</h3>
<p>算法这部分内容非常重要，如果你不知道如何学习算法的话，可以看下我写的：</p>
<ul>
<li><a href="https://www.zhihu.com/question/323359308/answer/1545320858" target="_blank" rel="noopener noreferrer">算法学习书籍+资源推荐</a> 。</li>
<li><a href="https://www.zhihu.com/question/31092580/answer/1534887374" target="_blank" rel="noopener noreferrer">如何刷 Leetcode?</a></li>
</ul>
<p><strong>常见算法问题总结</strong>：</p>
<ul>
<li><a href="/cs-basics/algorithms/string-algorithm-problems.html" target="blank">几道常见的字符串算法题总结</a></li>
<li><a href="/cs-basics/algorithms/linkedlist-algorithm-problems.html" target="blank">几道常见的链表算法题总结</a></li>
<li><a href="/cs-basics/algorithms/the-sword-refers-to-offer.html" target="blank">剑指 offer 部分编程题</a></li>
<li><a href="/cs-basics/algorithms/10-classical-sorting-algorithms.html" target="blank">十大经典排序算法</a></li>
</ul>
<p>另外，<a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/" target="_blank" rel="noopener noreferrer">GeeksforGeeks</a> 这个网站总结了常见的算法 ，比较全面系统。</p>
<h2> 数据库</h2>
<h3> 基础</h3>
<ul>
<li><a href="/database/basis.html" target="blank">数据库基础知识总结</a></li>
<li><a href="/database/nosql.html" target="blank">NoSQL 基础知识总结</a></li>
<li><a href="/database/character-set.html" target="blank">字符集详解</a></li>
<li>SQL :
<ul>
<li><a href="/database/sql/sql-syntax-summary.html" target="blank">SQL 语法基础知识总结</a></li>
<li><a href="/database/sql/sql-questions-01.html" target="blank">SQL 常见面试题总结</a></li>
</ul>
</li>
</ul>
<h3> MySQL</h3>
<p><strong>知识点/面试题总结：</strong></p>
<ul>
<li><strong><a href="/database/mysql/mysql-questions-01.html" target="blank">MySQL 常见知识点&amp;面试题总结</a></strong> (必看 👍)</li>
<li><a href="/database/mysql/mysql-high-performance-optimization-specification-recommendations.html" target="blank">MySQL 高性能优化规范建议总结</a></li>
</ul>
<p><strong>重要知识点：</strong></p>
<ul>
<li><a href="/database/mysql/mysql-index.html" target="blank">MySQL 索引详解</a></li>
<li><a href="/database/mysql/transaction-isolation-level.html" target="blank">MySQL 事务隔离级别图文详解)</a></li>
<li><a href="/database/mysql/mysql-logs.html" target="blank">MySQL 三大日志(binlog、redo log 和 undo log)详解</a></li>
<li><a href="/database/mysql/innodb-implementation-of-mvcc.html" target="blank">InnoDB 存储引擎对 MVCC 的实现</a></li>
<li><a href="/database/mysql/how-sql-executed-in-mysql.html" target="blank">SQL 语句在 MySQL 中的执行过程</a></li>
<li><a href="/database/mysql/mysql-query-cache.html" target="blank">MySQL 查询缓存详解</a></li>
<li><a href="/database/mysql/mysql-query-execution-plan.html" target="blank">MySQL 执行计划分析</a></li>
<li><a href="/database/mysql/mysql-auto-increment-primary-key-continuous.html" target="blank">MySQL 自增主键一定是连续的吗</a></li>
<li><a href="/database/mysql/some-thoughts-on-database-storage-time.html" target="blank">MySQL 时间类型数据存储建议</a></li>
<li><a href="/database/mysql/index-invalidation-caused-by-implicit-conversion.html" target="blank">MySQL 隐式转换造成索引失效</a></li>
</ul>
<h3> Redis</h3>
<p><strong>知识点/面试题总结</strong> : (必看👍 )：</p>
<ul>
<li><a href="/database/redis/redis-questions-01.html" target="blank">Redis 常见知识点&amp;面试题总结(上)</a></li>
<li><a href="/database/redis/redis-questions-02.html" target="blank">Redis 常见知识点&amp;面试题总结(下)</a></li>
</ul>
<p><strong>重要知识点：</strong></p>
<ul>
<li><a href="/database/redis/3-commonly-used-cache-read-and-write-strategies.html" target="blank">3 种常用的缓存读写策略详解</a></li>
<li><a href="/database/redis/redis-data-structures-01.html" target="blank">Redis 5 种基本数据结构详解</a></li>
<li><a href="/database/redis/redis-data-structures-02.html" target="blank">Redis 3 种特殊数据结构详解</a></li>
<li><a href="/database/redis/redis-persistence.html" target="blank">Redis 持久化机制详解</a></li>
<li><a href="/database/redis/redis-memory-fragmentation.html" target="blank">Redis 内存碎片详解</a></li>
<li><a href="/database/redis/redis-common-blocking-problems-summary.html" target="blank">Redis 常见阻塞原因总结</a></li>
<li><a href="/database/redis/redis-cluster.html" target="blank">Redis 集群详解</a></li>
</ul>
<h3> MongoDB</h3>
<ul>
<li><a href="/database/mongodb/mongodb-questions-01.html" target="blank">MongoDB 常见知识点&amp;面试题总结(上)</a></li>
<li><a href="/database/mongodb/mongodb-questions-02.html" target="blank">MongoDB 常见知识点&amp;面试题总结(下)</a></li>
</ul>
<h2> 搜索引擎</h2>
<p><a href="/database/elasticsearch/elasticsearch-questions-01.html" target="blank">Elasticsearch 常见面试题总结(付费)</a></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号" tabindex="0"><figcaption>JavaGuide 官方公众号</figcaption></figure>
<h2> 开发工具</h2>
<h3> Maven</h3>
<p><a href="/tools/maven/maven-core-concepts.html" target="blank">Maven 核心概念总结</a></p>
<h3> Gradle</h3>
<p><a href="/tools/gradle/gradle-core-concepts.html" target="blank">Gradle 核心概念总结</a>（可选，目前国内还是使用 Maven 普遍一些）</p>
<h3> Docker</h3>
<ul>
<li><a href="/tools/docker/docker-intro.html" target="blank">Docker 核心概念总结</a></li>
<li><a href="/tools/docker/docker-in-action.html" target="blank">Docker 实战</a></li>
</ul>
<h3> Git</h3>
<ul>
<li><a href="/tools/git/git-intro.html" target="blank">Git 核心概念总结</a></li>
<li><a href="/tools/git/github-tips.html" target="blank">GitHub 实用小技巧总结</a></li>
</ul>
<h2> 系统设计</h2>
<ul>
<li><a href="/system-design/system-design-questions.html" target="blank">系统设计常见面试题总结</a></li>
<li><a href="/system-design/design-pattern.html" target="blank">设计模式常见面试题总结</a></li>
</ul>
<h3> 基础</h3>
<ul>
<li><a href="/system-design/basis/RESTfulAPI.html" target="blank">RestFul API 简明教程</a></li>
<li><a href="/system-design/basis/software-engineering.html" target="blank">软件工程简明教程简明教程</a></li>
<li><a href="/system-design/basis/naming.html" target="blank">代码命名指南</a></li>
<li><a href="/system-design/basis/refactoring.html" target="blank">代码重构指南</a></li>
<li><a href="/system-design/basis/unit-test.html" target="blank">单元测试指南</a></li>
</ul>
<h3> 常用框架</h3>
<h4> Spring/SpringBoot (必看 👍)</h4>
<p><strong>知识点/面试题总结</strong> :</p>
<ul>
<li><a href="/system-design/framework/spring/spring-knowledge-and-questions-summary.html" target="blank">Spring 常见知识点&amp;面试题总结</a></li>
<li><a href="/system-design/framework/spring/springboot-knowledge-and-questions-summary.html" target="blank">SpringBoot 常见知识点&amp;面试题总结</a></li>
<li><a href="/system-design/framework/spring/spring-common-annotations.html" target="blank">Spring/Spring Boot 常用注解总结</a></li>
<li><a href="https://github.com/Snailclimb/springboot-guide" target="_blank" rel="noopener noreferrer">SpringBoot 入门指南</a></li>
</ul>
<p><strong>重要知识点详解</strong>：</p>
<ul>
<li><a href="/system-design/framework/spring/spring-transaction.html" target="blank">Spring 事务详解</a></li>
<li><a href="/system-design/framework/spring/spring-design-patterns-summary.html" target="blank">Spring 中的设计模式详解</a></li>
<li><a href="/system-design/framework/spring/spring-boot-auto-assembly-principles.html" target="blank">SpringBoot 自动装配原理详解</a></li>
</ul>
<h4> MyBatis</h4>
<p><a href="/system-design/framework/mybatis/mybatis-interview.html" target="blank">MyBatis 常见面试题总结</a></p>
<h3> 安全</h3>
<h4> 认证授权</h4>
<ul>
<li><a href="/system-design/security/basis-of-authority-certification.html" target="blank">认证授权基础概念详解</a></li>
<li><a href="/system-design/security/jwt-intro.html" target="blank">JWT 基础概念详解</a></li>
<li><a href="/system-design/security/advantages-and-disadvantages-of-jwt.html" target="blank">JWT 优缺点分析以及常见问题解决方案</a></li>
<li><a href="/system-design/security/sso-intro.html" target="blank">SSO 单点登录详解</a></li>
<li><a href="/system-design/security/design-of-authority-system.html" target="blank">权限系统设计详解</a></li>
</ul>
<h4> 数据脱敏</h4>
<p>数据脱敏说的就是我们根据特定的规则对敏感信息数据进行变形，比如我们把手机号、身份证号某些位数使用 * 来代替。</p>
<h4> 敏感词过滤</h4>
<p><a href="/system-design/security/sentive-words-filter.html" target="blank">敏感词过滤方案总结</a></p>
<h3> 定时任务</h3>
<p><a href="/system-design/schedule-task.html" target="blank">Java 定时任务详解</a></p>
<h3> Web 实时消息推送</h3>
<p><a href="/system-design/web-real-time-message-push.html" target="blank">Web 实时消息推送详解</a></p>
<h2> 分布式</h2>
<h3> 理论&amp;算法&amp;协议</h3>
<ul>
<li><a href="/distributed-system/protocol/cap-and-base-theorem.html" target="blank">CAP 理论和 BASE 理论解读</a></li>
<li><a href="/distributed-system/protocol/paxos-algorithm.html" target="blank">Paxos 算法解读</a></li>
<li><a href="/distributed-system/protocol/raft-algorithm.html" target="blank">Raft 算法解读</a></li>
<li><a href="/distributed-system/protocol/gossip-protocl.html" target="blank">Gossip 协议详解</a></li>
</ul>
<h3> RPC</h3>
<ul>
<li><a href="/distributed-system/rpc/rpc-intro.html" target="blank">RPC 基础知识总结</a></li>
<li><a href="/distributed-system/rpc/dubbo.html" target="blank">Dubbo 常见知识点&amp;面试题总结</a></li>
</ul>
<h3> ZooKeeper</h3>
<blockquote>
<p>这两篇文章可能有内容重合部分，推荐都看一遍。</p>
</blockquote>
<ul>
<li><a href="/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.html" target="blank">ZooKeeper 相关概念总结(入门)</a></li>
<li><a href="/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.html" target="blank">ZooKeeper 相关概念总结(进阶)</a></li>
</ul>
<h3> API 网关</h3>
<ul>
<li><a href="/distributed-system/api-gateway.html" target="blank">API 网关基础知识总结</a></li>
<li><a href="/distributed-system/spring-cloud-gateway-questions.html" target="blank">Spring Cloud Gateway 常见知识点&amp;面试题总结</a></li>
</ul>
<h3> 分布式 ID</h3>
<ul>
<li><a href="/distributed-system/distributed-id.html" target="blank">分布式 ID 常见知识点&amp;面试题总结</a></li>
<li><a href="/distributed-system/distributed-id-design.html" target="blank">分布式 ID 设计指南</a></li>
</ul>
<h3> 分布式锁</h3>
<ul>
<li><a href="https://javaguide.cn/distributed-system/distributed-lock.html" target="_blank" rel="noopener noreferrer">分布式锁介绍</a></li>
<li><a href="https://javaguide.cn/distributed-system/distributed-lock-implementations.html" target="_blank" rel="noopener noreferrer">分布式锁常见实现方案总结</a></li>
</ul>
<h3> 分布式事务</h3>
<p><a href="/distributed-system/distributed-transaction.html" target="blank">分布式事务常见知识点&amp;面试题总结</a></p>
<h3> 分布式配置中心</h3>
<p><a href="/distributed-system/distributed-configuration-center.html" target="blank">分布式配置中心常见知识点&amp;面试题总结</a></p>
<h2> 高性能</h2>
<h3> 数据库读写分离&amp;分库分表</h3>
<p><a href="/high-performance/read-and-write-separation-and-library-subtable.html" target="blank">数据库读写分离和分库分表常见知识点&amp;面试题总结</a></p>
<h3> 负载均衡</h3>
<p><a href="/high-performance/load-balancing.html" target="blank">负载均衡常见知识点&amp;面试题总结</a></p>
<h3> SQL 优化</h3>
<p><a href="/high-performance/sql-optimization.html" target="blank">常见 SQL 优化手段总结</a></p>
<h3> CDN</h3>
<p><a href="/high-performance/cdn.html" target="blank">CDN（内容分发网络）常见知识点&amp;面试题总结</a></p>
<h3> 消息队列</h3>
<ul>
<li><a href="/high-performance/message-queue/message-queue.html" target="blank">消息队列基础知识总结</a></li>
<li><a href="/high-performance/message-queue/disruptor-questions.html" target="blank">Disruptor 常见知识点&amp;面试题总结</a></li>
<li><a href="/high-performance/message-queue/rabbitmq-questions.html" target="blank">RabbitMQ 常见知识点&amp;面试题总结</a></li>
<li><a href="/high-performance/message-queue/rocketmq-questions.html" target="blank">RocketMQ 常见知识点&amp;面试题总结</a></li>
<li><a href="/high-performance/message-queue/kafka-questions-01.html" target="blank">Kafka 常常见知识点&amp;面试题总结</a></li>
</ul>
<h2> 高可用</h2>
<p><a href="/high-availability/high-availability-system-design.html" target="blank">高可用系统设计指南</a></p>
<h3> 冗余设计</h3>
<p><a href="/high-availability/redundancy.html" target="blank">冗余设计详解</a></p>
<h3> 限流</h3>
<p><a href="/high-availability/limit-request.html" target="blank">服务限流详解</a></p>
<h3> 降级&amp;熔断</h3>
<p><a href="/high-availability/fallback-and-circuit-breaker.html" target="blank">降级&amp;熔断详解</a></p>
<h3> 超时&amp;重试</h3>
<p><a href="/high-availability/timeout-and-retry.html" target="blank">超时&amp;重试详解</a></p>
<h3> 集群</h3>
<p>相同的服务部署多份，避免单点故障。</p>
<h3> 灾备设计和异地多活</h3>
<p><strong>灾备</strong> = 容灾 + 备份。</p>
<ul>
<li><strong>备份</strong>：将系统所产生的的所有重要数据多备份几份。</li>
<li><strong>容灾</strong>：在异地建立两个完全相同的系统。当某个地方的系统突然挂掉，整个应用系统可以切换到另一个，这样系统就可以正常提供服务了。</li>
</ul>
<p><strong>异地多活</strong> 描述的是将服务部署在异地并且服务同时对外提供服务。和传统的灾备设计的最主要区别在于“多活”，即所有站点都是同时在对外提供服务的。异地多活是为了应对突发状况比如火灾、地震等自然或者人为灾害。</p>
<h2> Star 趋势</h2>
<figure><img src="https://api.star-history.com/svg?repos=Snailclimb/JavaGuide&amp;type=Date" alt="Stars" tabindex="0"><figcaption>Stars</figcaption></figure>
<h2> 公众号</h2>
<p>如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号“<strong>JavaGuide</strong>”。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号" tabindex="0"><figcaption>JavaGuide 官方公众号</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/csdn/1c00413c65d1995993bf2b0daf7b4f03.png" type="image/png"/>
    </item>
    <item>
      <title>计算机基础必读经典书籍</title>
      <link>https://javaguide.cn/books/cs-basics.html</link>
      <guid>https://javaguide.cn/books/cs-basics.html</guid>
      <source url="https://javaguide.cn/rss.xml">计算机基础必读经典书籍</source>
      <description>考虑到很多同学比较喜欢看视频，因此，这部分内容我不光会推荐书籍，还会顺便推荐一些我觉得不错的视频教程和各大高校的 Project。 操作系统 为什么要学习操作系统？ 从对个人能力方面提升来说，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。比如说我们开发的系统使用的缓存（比如 Redis）和操作系统的高速缓存就很像。CPU 中的高速缓存有很多种，不过大部分都是为了解决 CPU 处理速度和内存处理速度不对等的问题。我们还可以把内存可以看作外存的高速缓存，程序运行的时候我们把外存的数据复制到内存，由于内存的处理速度远远高于外存，这样提高了处理速度。同样地，我们使用的 Redis 缓存就是为了解决程序处理速度和访问常规关系型数据库速度不对等的问题。高速缓存一般会按照局部性原理（2-8 原则）根据相应的淘汰算法保证缓存中的数据是经常会被访问的。我们平常使用的 Redis 缓存很多时候也会按照 2-8 原则去做，很多淘汰算法都和操作系统中的类似。既说了 2-8 原则，那就不得不提命中率了，这是所有缓存概念都通用的。简单来说也就是你要访问的数据有多少能直接在缓存中直接找到。命中率高的话，一般表明你的缓存设计比较合理，系统处理速度也相对较快。</description>
      <category>计算机书籍</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>考虑到很多同学比较喜欢看视频，因此，这部分内容我不光会推荐书籍，还会顺便推荐一些我觉得不错的视频教程和各大高校的 Project。</p>
<h2> 操作系统</h2>
<p><strong>为什么要学习操作系统？</strong></p>
<p><strong>从对个人能力方面提升来说</strong>，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。比如说我们开发的系统使用的缓存（比如 Redis）和操作系统的高速缓存就很像。CPU 中的高速缓存有很多种，不过大部分都是为了解决 CPU 处理速度和内存处理速度不对等的问题。我们还可以把内存可以看作外存的高速缓存，程序运行的时候我们把外存的数据复制到内存，由于内存的处理速度远远高于外存，这样提高了处理速度。同样地，我们使用的 Redis 缓存就是为了解决程序处理速度和访问常规关系型数据库速度不对等的问题。高速缓存一般会按照局部性原理（2-8 原则）根据相应的淘汰算法保证缓存中的数据是经常会被访问的。我们平常使用的 Redis 缓存很多时候也会按照 2-8 原则去做，很多淘汰算法都和操作系统中的类似。既说了 2-8 原则，那就不得不提命中率了，这是所有缓存概念都通用的。简单来说也就是你要访问的数据有多少能直接在缓存中直接找到。命中率高的话，一般表明你的缓存设计比较合理，系统处理速度也相对较快。</p>
<p><strong>从面试角度来说</strong>，尤其是校招，对于操作系统方面知识的考察是非常非常多的。</p>
<p><strong>简单来说，学习操作系统能够提高自己思考的深度以及对技术的理解力，并且，操作系统方面的知识也是面试必备。</strong></p>
<p>如果你要系统地学习操作系统的话，最硬核最权威的书籍是 <strong><a href="https://book.douban.com/subject/33463930/" target="_blank" rel="noopener noreferrer">《操作系统导论》</a></strong> 。你可以再配套一个 <strong><a href="https://book.douban.com/subject/1230413/" target="_blank" rel="noopener noreferrer">《深入理解计算机系统》</a></strong> 加深你对计算机系统本质的认识，美滋滋！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20201012191645919.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>另外，去年新出的一本国产的操作系统书籍也很不错：<strong><a href="https://book.douban.com/subject/35208251/" target="_blank" rel="noopener noreferrer">《现代操作系统：原理与实现》</a></strong> （夏老师和陈老师团队的力作，值得推荐）。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210406132050845.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>如果你比较喜欢动手，对于理论知识比较抵触的话，我推荐你看看 <strong><a href="https://book.douban.com/subject/11530329/" target="_blank" rel="noopener noreferrer">《30 天自制操作系统》</a></strong> ，这本书会手把手教你编写一个操作系统。</p>
<p>纸上学来终觉浅 绝知此事要躬行！强烈推荐 CS 专业的小伙伴一定要多多实践！！！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409123802972.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>其他相关书籍推荐：</p>
<ul>
<li><strong><a href="https://book.douban.com/subject/1422377/" target="_blank" rel="noopener noreferrer">《自己动手写操作系统》</a></strong>：不光会带着你详细分析操作系统原理的基础，还会用丰富的实例代码，一步一步地指导你用 C 语言和汇编语言编写出一个具备操作系统基本功能的操作系统框架。</li>
<li><strong><a href="https://book.douban.com/subject/3852290/" target="_blank" rel="noopener noreferrer">《现代操作系统》</a></strong>：内容很不错，不过，翻译的一般。如果你是精读本书的话，建议把课后习题都做了。</li>
<li><strong><a href="https://book.douban.com/subject/26745156/" target="_blank" rel="noopener noreferrer">《操作系统真象还原》</a></strong>：这本书的作者毕业于北京大学，前百度运维高级工程师。因为在大学期间曾重修操作系统这一科，后对操作系统进行深入研究，著下此书。</li>
<li><strong><a href="https://book.douban.com/subject/25743846/" target="_blank" rel="noopener noreferrer">《深度探索 Linux 操作系统》</a></strong>：跟着这本书的内容走，可以让你对如何制作一套完善的 GNU/Linux 系统有了清晰的认识。</li>
<li><strong><a href="https://book.douban.com/subject/2044818/" target="_blank" rel="noopener noreferrer">《操作系统设计与实现》</a></strong>：操作系统的权威教学教材。</li>
<li><strong><a href="https://book.douban.com/subject/3735649/" target="_blank" rel="noopener noreferrer">《Orange'S:一个操作系统的实现》</a></strong>：从只有二十行的引导扇区代码出发，一步一步地向读者呈现一个操作系统框架的完成过程。配合《操作系统设计与实现》一起食用更佳！</li>
</ul>
<p>如果你比较喜欢看视频的话，推荐哈工大李治军老师主讲的慕课 <a href="https://www.icourse163.org/course/HIT-1002531008" target="_blank" rel="noopener noreferrer">《操作系统》</a>，内容质量吊打一众国家精品课程。</p>
<p>课程的大纲如下：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220414144527747.png" alt="课程大纲" tabindex="0"><figcaption>课程大纲</figcaption></figure>
<p>主要讲了一个基本操作系统中的六个基本模块：CPU 管理、内存管理、外设管理、磁盘管理与文件系统、用户接口和启动模块 。</p>
<p>课程难度还是比较大的，尤其是课后的 lab。如果大家想要真正搞懂操作系统底层原理的话，对应的 lab 能做尽量做一下。正如李治军老师说的那样：“纸上得来终觉浅，绝知此事要躬行”。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220414145210679.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>如果你能独立完成几个 lab 的话，我相信你对操作系统的理解绝对要上升几个台阶。当然了，如果你仅仅是为了突击面试的话，那就不需要做 lab 了。</p>
<p>说点心里话，我本人非常喜欢李治军老师讲的课，我觉得他是国内不可多得的好老师。他知道我们国内的教程和国外的差距在哪里，也知道国内的学生和国外学生的差距在哪里，他自己在努力着通过自己的方式来缩小这个差距。真心感谢，期待李治军老师的下一个课程。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220414145249714.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>还有下面这个国外的课程 <a href="https://www.bilibili.com/video/av31289365?from=search&amp;seid=16298868573410423104" target="_blank" rel="noopener noreferrer">《深入理解计算机系统 》</a> 也很不错。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20201204140653318.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 计算机网络</h2>
<p>计算机网络是一门系统性比较强的计算机专业课，各大名校的计算机网络课程打磨的应该都比较成熟。</p>
<p>要想学好计算机网络，首先要了解的就是 OSI 七层模型或 TCP/IP 五层模型，即应用层（应用层、表示层、会话层）、传输层、网络层、数据链路层、物理层。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksosi七层模型2.png" alt="osi七层模型" tabindex="0"><figcaption>osi七层模型</figcaption></figure>
<p>关于这门课，首先强烈推荐参考书是<strong>机械工业出版社的《计算机网络——自顶向下方法》</strong>。该书目录清晰，按照 TCP/IP 五层模型逐层讲解，对每层涉及的技术都展开了详细讨论，基本上高校里开设的课程的教学大纲就是这本书的目录了。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409123250570.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>如果你觉得上面这本书看着比较枯燥的话，我强烈推荐+安利你看看下面这两本非常有趣的网络相关的书籍：</p>
<ul>
<li><a href="https://book.douban.com/subject/25863515/" title="《图解 HTTP》" target="_blank" rel="noopener noreferrer">《图解 HTTP》</a>：讲漫画一样的讲 HTTP，很有意思，不会觉得枯燥，大概也涵盖也 HTTP 常见的知识点。因为篇幅问题，内容可能不太全面。不过，如果不是专门做网络方向研究的小伙伴想研究 HTTP 相关知识的话，读这本书的话应该来说就差不多了。</li>
<li><a href="https://book.douban.com/subject/26941639/" title="《网络是怎样连接的》" target="_blank" rel="noopener noreferrer">《网络是怎样连接的》</a>：从在浏览器中输入网址开始，一路追踪了到显示出网页内容为止的整个过程，以图配文，讲解了网络的全貌，并重点介绍了实际的网络设备和软件是如何工作的。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20201011215144139.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>除了理论知识之外，学习计算机网络非常重要的一点就是：“<strong>动手实践</strong>”。这点和我们编程差不多。</p>
<p>GitHub 上就有一些名校的计算机网络试验/Project：</p>
<ul>
<li><a href="https://github.com/rccoder/HIT-Computer-Network" target="_blank" rel="noopener noreferrer">哈工大计算机网络实验</a></li>
<li><a href="https://github.com/moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES" target="_blank" rel="noopener noreferrer">《计算机网络－自顶向下方法(原书第 6 版)》编程作业，Wireshark 实验文档的翻译和解答。</a></li>
<li><a href="https://github.com/KevinWang15/network-pj-chatroom" target="_blank" rel="noopener noreferrer">计算机网络的期末 Project，用 Python 编写的聊天室</a></li>
<li><a href="https://computer-networks.github.io/sp19/lectures.html" target="_blank" rel="noopener noreferrer">CMU 的计算机网络课程</a></li>
</ul>
<p>我知道，还有很多小伙伴可能比较喜欢边看视频边学习。所以，我这里再推荐几个顶好的计算机网络视频讲解。</p>
<p><strong>1、<a href="http://www.icourse163.org/course/HIT-154005" target="_blank" rel="noopener noreferrer">哈工大的计算机网络课程</a></strong>：国家精品课程，截止目前已经开了 10 次课了。大家对这门课的评价都非常高！所以，非常推荐大家看一下！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20201218141241911.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>2、<a href="https://www.bilibili.com/video/BV19E411D78Q?from=search&amp;seid=17198507506906312317" target="_blank" rel="noopener noreferrer">王道考研的计算机网络</a></strong>：非常适合 CS 专业考研的小朋友！这个视频目前在哔哩哔哩上已经有 1.6w+ 的点赞。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20201218141652837.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 算法</h2>
<p>先来看三本入门书籍。 这三本入门书籍中的任何一本拿来作为入门学习都非常好。</p>
<ol>
<li><a href="https://book.douban.com/subject/30357170/" target="_blank" rel="noopener noreferrer">《我的第一本算法书》</a></li>
<li><a href="https://book.douban.com/subject/26979890/" target="_blank" rel="noopener noreferrer">《算法图解》</a></li>
<li><a href="https://book.douban.com/subject/25894685/" target="_blank" rel="noopener noreferrer">《啊哈!算法》</a></li>
</ol>
<figure><img src="https://oss.javaguide.cn/java-guide-blog/image-20210327104418851.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>我个人比较倾向于 <strong><a href="https://book.douban.com/subject/30357170/" target="_blank" rel="noopener noreferrer">《我的第一本算法书》</a></strong> 这本书籍，虽然它相比于其他两本书集它的豆瓣评分略低一点。我觉得它的配图以及讲解是这三本书中最优秀，唯一比较明显的问题就是没有代码示例。但是，我觉得这不影响它是一本好的算法书籍。因为本身下面这三本入门书籍的目的就不是通过代码来让你的算法有多厉害，只是作为一本很好的入门书籍让你进入算法学习的大门。</p>
<p>再推荐几本比较经典的算法书籍。</p>
<p><strong><a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener noreferrer">《算法》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409123422140.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这本书内容非常清晰易懂，适合数据结构和算法小白阅读。书中把一些常用的数据结构和算法都介绍到了！</p>
<p>我在大二的时候被我们的一个老师强烈安利过！自己也在当时购买了一本放在宿舍，到离开大学的时候自己大概看了一半多一点。因为内容实在太多了！另外，这本书还提供了详细的 Java 代码，非常适合学习 Java 的朋友来看，可以说是 Java 程序员的必备书籍之一了。</p>
<blockquote>
<p><strong>下面这些书籍都是经典中的经典，但是阅读起来难度也比较大，不做太多阐述，神书就完事了！</strong></p>
<p><strong>如果你仅仅是准备算法面试的话，不建议你阅读下面这些书籍。</strong></p>
</blockquote>
<p><strong><a href="https://book.douban.com/subject/3227098/" target="_blank" rel="noopener noreferrer">《编程珠玑》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409145334093.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>经典名著，ACM 冠军、亚军这种算法巨佬都强烈推荐的一本书籍。这本书的作者也非常厉害，Java 之父 James Gosling 就是他的学生。</p>
<p>很多人都说这本书不是教你具体的算法，而是教你一种编程的思考方式。这种思考方式不仅仅在编程领域适用，在其他同样适用。</p>
<p><strong><a href="https://book.douban.com/subject/4048566/" target="_blank" rel="noopener noreferrer">《算法设计手册》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409145411049.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这是一本被 GitHub 上的爆火的计算机自学项目 <a href="https://link.zhihu.com/?target=https%3A//teachyourselfcs.com/" target="_blank" rel="noopener noreferrer">Teach Yourself Computer Science</a> 强烈推荐的一本算法书籍。</p>
<p>类似的神书还有 <a href="https://book.douban.com/subject/20432061/" target="_blank" rel="noopener noreferrer">《算法导论》</a>、<a href="https://book.douban.com/subject/1130500/" target="_blank" rel="noopener noreferrer">《计算机程序设计艺术（第 1 卷）》</a> 。</p>
<p><strong>如果说你要准备面试的话，下面这几本书籍或许对你有帮助！</strong></p>
<p><strong><a href="https://book.douban.com/subject/6966465/" target="_blank" rel="noopener noreferrer">《剑指 Offer》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409145506482.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这本面试宝典上面涵盖了很多经典的算法面试题，如果你要准备大厂面试的话一定不要错过这本书。</p>
<p>《剑指 Offer》 对应的算法编程题部分的开源项目解析：<a href="https://link.zhihu.com/?target=https%3A//github.com/gatieme/CodingInterviews" target="_blank" rel="noopener noreferrer">CodingInterviews</a> 。</p>
<p><strong><a href="https://book.douban.com/subject/30422021/" target="_blank" rel="noopener noreferrer">《程序员代码面试指南（第 2 版）》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409145622758.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>《程序员代码面试指南（第 2 版）》里的大部分题目相比于《剑指 offer》 来说要难很多，题目涵盖面相比于《剑指 offer》也更加全面。全书一共有将近 300 道真实出现过的经典代码面试题。</p>
<p>视频的话，推荐北京大学的国家精品课程—<strong><a href="https://www.icourse163.org/course/PKU-1001894005" target="_blank" rel="noopener noreferrer">程序设计与算法（二）算法基础</a></strong>，讲的非常好！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/22ce4a17dc0c40f6a3e0d58002261b7a.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这个课程把七种基本的通用算法（枚举、二分、递归、分治、动态规划、搜索、贪心）都介绍到了。各种复杂算法问题的解决，都可能用到这些基本的思想。并且，这个课程的一部分的例题和 ACM 国际大学生程序设计竞赛中的中等题相当，如果你能够解决这些问题，那你的算法能力将超过绝大部分的高校计算机专业本科毕业生。</p>
<h2> 数据结构</h2>
<p>其实，上面提到的很多算法类书籍（比如 <strong>《算法》</strong> 和 <strong>《算法导论》</strong>）都详细地介绍了常用的数据结构。</p>
<p>我这里再另外补充基本和数据结构相关的书籍。</p>
<p><strong><a href="https://book.douban.com/subject/6424904/" target="_blank" rel="noopener noreferrer">《大话数据结构》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409145803440.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>入门类型的书籍，读起来比较浅显易懂，适合没有数据结构基础或者说数据结构没学好的小伙伴用来入门数据结构。</p>
<p><strong><a href="https://book.douban.com/subject/3351237/" target="_blank" rel="noopener noreferrer">《数据结构与算法分析：Java 语言描述》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409145823973.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>质量很高，介绍了常用的数据结构和算法。</p>
<p>类似的还有 <strong><a href="https://book.douban.com/subject/1139426/" target="_blank" rel="noopener noreferrer">《数据结构与算法分析：C 语言描述》</a></strong>、<strong><a href="https://book.douban.com/subject/1971825/" target="_blank" rel="noopener noreferrer">《数据结构与算法分析：C++ 描述》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/d9c450ccc5224a5fba77f4fa937f7b9c.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>视频的话推荐你看浙江大学的国家精品课程—<strong><a href="https://www.icourse163.org/course/ZJU-93001#/info" target="_blank" rel="noopener noreferrer">《数据结构》</a></strong> 。</p>
<p>姥姥的数据结构讲的非常棒！不过，还是有一些难度的，尤其是课后练习题。</p>
<h2> 计算机专业基础课</h2>
<p>数学和英语属于通用课，一般在大一和大二两学年就可以全部修完，大二大三逐渐接触专业课。通用课作为许多高中生升入大学的第一门课，算是高中阶段到本科阶段的一个过渡，从职业生涯重要性上来说，远不及专业课重要，但是在本科阶段的学习生活规划中，有着非常重要的地位。由于通用课的课程多，学分重，占据了本科阶段绩点的主要部分，影响到学生在前两年的专业排名，也影响到大三结束时的推免资格分配，也就是保研。而从升学角度来看，对于攻读研究生和博士生的小伙伴来说，数学和英语这两大基础课，还是十分有用的。</p>
<h3> 数学</h3>
<h4> 微积分（高等数学）</h4>
<p>微积分，即传说中的高数，成为了无数新大一心中的痛。但好在，大学的课程考核没那么严格，期末想要拿高分，也不至于像高中那样刷题刷的那么狠。微积分对于计算机专业学生的重要性，主要体现在计算机图形学中的函数变换，机器学习中的梯度算法，信号处理等领域。</p>
<p>微积分的知识体系包括微分和积分两部分，一般会先学微分，再学积分，也有的学校把高数分为两个学期。微分就是高中的导数的升级版，对于大一萌新来说还算比较友好。积分恰好是微分的逆运算，思想上对大一萌新来说比较新，一时半会可能接受不了。不过这门课所有的高校都有开设，而且大部分的名校都有配套的网课，教材也都打磨的非常出色，结合网课和教材的“啃书”学习模式，这门课一定不会落下。</p>
<p>书籍的话，推荐《普林斯顿微积分读本》。这本书详细讲解了微积分基础、极限、连续、微分、导数的应用、积分、无穷级数、泰勒级数与幂级数等内容。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409155056751.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h4> 线性代数（高等代数）</h4>
<p>线性代数的思维模式就更加复杂了一些，它定义了一个全新的数学世界，所有的符号、定理都是全新的，唯一能尝试的去理解的方式，大概就是用几何的方式去理解线性代数了。由于线性代数和几何学有着密不可分的关系，比如空间变换的理论支撑就是线性代数，因此，网上有着各种“可视化学习线性代数”的学习资源，帮助理解线性代数的意义，有助于公式的记忆。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409153940473.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>书籍的话，推荐中科大李尚志老师的 <strong><a href="https://book.douban.com/subject/26390093/" target="_blank" rel="noopener noreferrer">《线性代数学习指导》</a></strong> 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409155325251.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h4> 概率论与数理统计</h4>
<p>对于计算机专业的小伙伴来说，这门课可能是概率论更有用一点，而非数理统计。可能某些学校只开设概率论课程，也可能数理统计也教，但仅仅是皮毛。概率论的学习路线和微积分相似，就是一个个公式辅以实例，不像线性代数那么抽象，比较贴近生活。在现在的就业形势下，概率论与数理统计专业的学生，应该是数学专业最好就业的了，他们通常到岗位上会做一些数据分析的工作，因此，<strong>这门课程确实是数据分析的重要前置课程，概率论在机器学习中的重要性也就不言而喻了。</strong></p>
<p>书籍的话，推荐 <strong><a href="https://book.douban.com/subject/34897672/" target="_blank" rel="noopener noreferrer">《概率论与数理统计教程》</a></strong> 。这本书共八章，前四章为概率论部分，主要叙述各种概率分布及其性质，后四章为数理统计部分，主要叙述各种参数估计与假设检验。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409155738505.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h4> 离散数学（集合论、图论、近世代数等）</h4>
<p>离散数学是计算机专业的专属数学，但实际上对于本科毕业找工作的小伙伴来说，离散数学还并没有发挥它的巨大作用。离散数学的作用主要在在图研究等领域，理论性极强，需要读研深造的小伙伴尽可能地扎实掌握。</p>
<h3> 英语</h3>
<p>英语算是大学里面比较灵活的一项技能了，有的人会说，“英语学的越好，对个人发展越有利”，此话说的没错，但是对于一些有着明确发展目标的小伙伴，可能英语技能并不在他们的技能清单内。接下来的这些话只针对计算机专业的小伙伴们哦。</p>
<p>英语课在大学本科一般只有前两年开设，小伙伴们可以记住，<strong>想用英语课来提升自己的英语水平的，可以打消这个念头了。</strong> 英语水平的提高全靠自己平时的积累和练习，以及有针对性的刷题。</p>
<p><strong>英语的大学四六级一定要过。</strong> 这是必备技能，绝大部分就业岗位都要看四六级水平的，最起码要通过的。四级比高中英语稍微难一些，一般的小伙伴可能会卡在六级上，六级需要针对性的训练一下，因为大学期间能接触英语的实在太少了，每学期一门英语课是不足以保持自己的英语水平的。对于一些来自于偏远地区，高中英语基础薄弱的，考四六级会更加吃力。建议考前集中训练一下历年真题，辅以背一下高频词汇，四六级通过只需要 425 分，这个分数线还是比较容易达到的。稍微好一点的小伙伴可能冲一下 500 分，要是能考到 600 分的话，那是非常不错的水平了，算是简历上比较有亮点的一项。</p>
<p>英语的雅思托福考试只限于想要出国的小伙伴，以及应聘岗位对英语能力有特殊要求的。雅思托福考试裸考不容易通过，花钱去比较靠谱的校外补课班应该是一个比较好的选择。</p>
<p>对于计算机专业的小伙伴来说，英语能力还是比较重要的，虽然应聘的时候不会因为没有雅思托福成绩卡人，但是你起码要能够：</p>
<ul>
<li><strong>熟练使用英文界面的软件、系统等</strong></li>
<li><strong>对于外网的一些博客、bug 解决方案等，阅读无压力</strong></li>
<li><strong>熟练阅读英文文献</strong></li>
<li><strong>具备一定的英文论文的撰写能力</strong></li>
</ul>
<p>毕竟计算机语言就是字符语言，听说读写中最起码要满足<strong>读写</strong>这两项不过分吧。</p>
<h3> 编译原理</h3>
<p>编译原理相比于前面介绍的专业课，地位显得不那么重要了。编译原理的重要性主要体现在：</p>
<ul>
<li>底层语言、引擎或高级语言的开发，如 MySQL，Java 等</li>
<li>操作系统或嵌入式系统的开发</li>
<li>词法、语法、语义的思想，以及自动机思想</li>
</ul>
<p><strong>编译原理的重要前置课程就是形式语言与自动机，自动机的思想在词法分析当中有着重要应用，学习了这门课后，应该就会发现许多场景下，自动机算法的妙用了。</strong></p>
<p>总的来说，这门课对于各位程序员的职业发展来说，相对不那么重要，但是从难度上来说，学习这门课可以对编程思想有一个较好的巩固。学习资源的话，除了课堂上的幻灯片课件以外，还可以把 《编译原理》 这本书作为参考书，用以辅助自己学不懂的地方（大家口中的龙书，想要啃下来还是有一定难度的）。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210406152148373.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>其他书籍推荐:</p>
<ul>
<li><strong><a href="https://book.douban.com/subject/30191414/" target="_blank" rel="noopener noreferrer">《现代编译原理》</a></strong>：编译原理的入门书。</li>
<li><strong><a href="https://book.douban.com/subject/20436488/" target="_blank" rel="noopener noreferrer">《编译器设计》</a></strong>：覆盖了编译器从前端到后端的全部主题。</li>
</ul>
<p>我上面推荐的书籍的难度还是比较高的，真心很难坚持看完。这里强烈推荐<a href="https://www.icourse163.org/course/HIT-1002123007" target="_blank" rel="noopener noreferrer">哈工大的编译原理视频课程</a>，真心不错，还是国家精品课程，关键还是又漂亮有温柔的美女老师讲的！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210406152847824.png" alt="" tabindex="0"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/booksimage-20201012191645919.png" type="image/png"/>
    </item>
    <item>
      <title>数据库必读经典书籍</title>
      <link>https://javaguide.cn/books/database.html</link>
      <guid>https://javaguide.cn/books/database.html</guid>
      <source url="https://javaguide.cn/rss.xml">数据库必读经典书籍</source>
      <description>数据库基础 数据库基础这块，如果你觉得书籍比较枯燥，自己坚持不下来的话，我推荐你可以先看看一些不错的视频，北京师范大学的《数据库系统原理》、哈尔滨工业大学的《数据库系统（下）：管理与技术》就很不错。</description>
      <category>计算机书籍</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 数据库基础</h2>
<p>数据库基础这块，如果你觉得书籍比较枯燥，自己坚持不下来的话，我推荐你可以先看看一些不错的视频，北京师范大学的<a href="https://www.icourse163.org/course/BNU-1002842007" target="_blank" rel="noopener noreferrer">《数据库系统原理》</a>、哈尔滨工业大学的<a href="https://www.icourse163.org/course/HIT-1001578001" target="_blank" rel="noopener noreferrer">《数据库系统（下）：管理与技术》</a>就很不错。</p>
<p><a href="https://www.icourse163.org/course/BNU-1002842007" target="_blank" rel="noopener noreferrer">《数据库系统原理》</a>这个课程的老师讲的非常详细，而且每一小节的作业设计的也与所讲知识很贴合，后面还有很多配套实验。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-e113c726a41874ef5fb19f7ac14e38e16ce.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>如果你比较喜欢动手，对于理论知识比较抵触的话，推荐你看看<a href="https://cstack.github.io/db_tutorial/" target="_blank" rel="noopener noreferrer">《如何开发一个简单的数据库》</a> ，这个 project 会手把手教你编写一个简单的数据库。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-11de8cb239aa7201cc8d78fa28928b9ec7d.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>GitHub 上也已经有大佬用 Java 实现过一个简易的数据库，介绍的挺详细的，感兴趣的朋友可以去看看。地址：<a href="https://github.com/alchemystar/Freedom" target="_blank" rel="noopener noreferrer">https://github.com/alchemystar/Freedom</a> 。</p>
<p>除了这个用 Java 写的之外，<strong><a href="https://github.com/cstack/db_tutorial" target="_blank" rel="noopener noreferrer">db_tutorial</a></strong> 这个项目是国外的一个大佬用 C 语言写的，朋友们也可以去瞅瞅。</p>
<p><strong>只要利用好搜索引擎，你可以找到各种语言实现的数据库玩具。</strong></p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-d32d853f847633ac7ed0efdecf56be1f1d2.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>纸上学来终觉浅 绝知此事要躬行！强烈推荐 CS 专业的小伙伴一定要多多实践！！！</strong></p>
<h3> 《数据库系统概念》</h3>
<p><a href="https://book.douban.com/subject/10548379/" target="_blank" rel="noopener noreferrer">《数据库系统概念》</a>这本书涵盖了数据库系统的全套概念，知识体系清晰，是学习数据库系统非常经典的教材！不是参考书！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409150441742.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 《数据库系统实现》</h3>
<p>如果你也想要研究 MySQL 底层原理的话，我推荐你可以先阅读一下<a href="https://book.douban.com/subject/4838430/" target="_blank" rel="noopener noreferrer">《数据库系统实现》</a>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/database-system-implementation.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>不管是 MySQL 还是 Oracle ，它们总体的架子是差不多的，不同的是其内部的实现比如数据库索引的数据结构、存储引擎的实现方式等等。</p>
<p>这本书有些地方还是翻译的比较蹩脚，有能力看英文版的还是建议上手英文版。</p>
<p>《数据库系统实现》 这本书是斯坦福的教材，另外还有一本<a href="https://book.douban.com/subject/3923575/" target="_blank" rel="noopener noreferrer">《数据库系统基础教程》</a>是前置课程，可以带你入门数据库。</p>
<h2> MySQL</h2>
<p>我们网站或者 APP 的数据都是需要使用数据库来存储数据的。</p>
<p>一般企业项目开发中，使用 MySQL 比较多。如果你要学习 MySQL 的话，可以看下面这 3 本书籍：</p>
<ul>
<li><strong><a href="https://book.douban.com/subject/3354490/" target="_blank" rel="noopener noreferrer">《MySQL 必知必会》</a></strong>：非常薄！非常适合 MySQL 新手阅读，很棒的入门教材。</li>
<li><strong><a href="https://book.douban.com/subject/23008813/" target="_blank" rel="noopener noreferrer">《高性能 MySQL》</a></strong>：MySQL 领域的经典之作！学习 MySQL 必看！属于进阶内容，主要教你如何更好地使用 MySQL 。既有有理论，又有实践！如果你没时间都看一遍的话，我建议第 5 章（创建高性能的索引）、第 6 章（查询性能优化） 你一定要认真看一下。</li>
<li><strong><a href="https://book.douban.com/subject/24708143/" target="_blank" rel="noopener noreferrer">《MySQL 技术内幕》</a></strong>：你想深入了解 MySQL 存储引擎的话，看这本书准没错！</li>
</ul>
<figure><img src="https://oscimg.oschina.net/oscnet/up-3d31e762933f9e50cc7170b2ebd8433917b.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>视频的话，你可以看看动力节点的 <a href="https://www.bilibili.com/video/BV1fx411X7BD" target="_blank" rel="noopener noreferrer">《MySQL 数据库教程视频》</a>。这个视频基本上把 MySQL 的相关一些入门知识给介绍完了。</p>
<p>另外，强推一波 <strong><a href="https://book.douban.com/subject/35231266/" target="_blank" rel="noopener noreferrer">《MySQL 是怎样运行的》</a></strong> 这本书，内容很适合拿来准备面试。讲的很细节，但又不枯燥，内容非常良心！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/20210703120643370.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> PostgreSQL</h2>
<p>和 MySQL 一样，PostgreSQL 也是开源免费且功能强大的关系型数据库。PostgreSQL 的 Slogan 是“<strong>世界上最先进的开源关系型数据库</strong>” 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220702144954370.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>最近几年，由于 PostgreSQL 的各种新特性过于优秀，使用 PostgreSQL 代替 MySQL 的项目越来越多了。</p>
<p>如果你还在纠结是否尝试一下 PostgreSQL 的话，建议你看看这个知乎话题：<a href="https://www.zhihu.com/question/20010554" target="_blank" rel="noopener noreferrer">PostgreSQL 与 MySQL 相比，优势何在？ - 知乎</a> 。</p>
<h3> 《PostgreSQL 指南：内幕探索》</h3>
<p><a href="https://book.douban.com/subject/33477094/" target="_blank" rel="noopener noreferrer">《PostgreSQL 指南：内幕探索》</a>这本书主要介绍了 PostgreSQL 内部的工作原理，包括数据库对象的逻辑组织与物理实现，进程与内存的架构。</p>
<p>刚工作那会需要用到 PostgreSQL ，看了大概 1/3 的内容，感觉还不错。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/PostgreSQL-Guide.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 《PostgreSQL 技术内幕：查询优化深度探索》</h3>
<p><a href="https://book.douban.com/subject/30256561/" target="_blank" rel="noopener noreferrer">《PostgreSQL 技术内幕：查询优化深度探索》</a>这本书主要讲了 PostgreSQL 在查询优化上的一些技术实现细节，可以让你对 PostgreSQL 的查询优化器有深层次的了解。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/PostgreSQL-TechnologyInsider.png" alt="《PostgreSQL 技术内幕：查询优化深度探索》" tabindex="0"><figcaption>《PostgreSQL 技术内幕：查询优化深度探索》</figcaption></figure>
<h2> Redis</h2>
<p><strong>Redis 就是一个使用 C 语言开发的数据库</strong>，不过与传统数据库不同的是 <strong>Redis 的数据是存在内存中的</strong> ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。</p>
<p>如果你要学习 Redis 的话，强烈推荐下面这两本书：</p>
<ul>
<li><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="noopener noreferrer">《Redis 设计与实现》</a> ：主要是 Redis 理论知识相关的内容，比较全面。我之前写过一篇文章 <a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247507030&amp;idx=1&amp;sn=0a5fd669413991b30163ab6f5834a4ad&amp;chksm=cea1939df9d61a8b93925fae92f4cee0838c449534e60731cfaf533369831192e296780b32a6&amp;token=709354671&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">《7 年前，24 岁，出版了一本 Redis 神书》</a> 来介绍这本书。</li>
<li><a href="https://book.douban.com/subject/26612779/" target="_blank" rel="noopener noreferrer">《Redis 核心原理与实践》</a>：主要是结合源码来分析 Redis 的重要知识点比如各种数据结构和高级特性。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/redis-books.png" alt="《Redis 设计与实现》和《Redis 设计与实现》" tabindex="0"><figcaption>《Redis 设计与实现》和《Redis 设计与实现》</figcaption></figure>
<p>另外，<a href="https://book.douban.com/subject/26971561/" target="_blank" rel="noopener noreferrer">《Redis 开发与运维》</a> 这本书也非常不错，既有基础介绍，又有一线开发运维经验分享。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/redis-kaifa-yu-yunwei.png" alt="《Redis 开发与运维》" tabindex="0"><figcaption>《Redis 开发与运维》</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oscimg.oschina.net/oscnet/up-e113c726a41874ef5fb19f7ac14e38e16ce.png" type="image/png"/>
    </item>
    <item>
      <title>分布式必读经典书籍</title>
      <link>https://javaguide.cn/books/distributed-system.html</link>
      <guid>https://javaguide.cn/books/distributed-system.html</guid>
      <source url="https://javaguide.cn/rss.xml">分布式必读经典书籍</source>
      <description>《深入理解分布式系统》 《深入理解分布式系统》 是今年 3 月份刚出的一本分布式中文原创书籍，主要讲的是分布式领域的基本概念、常见挑战以及共识算法。</description>
      <category>计算机书籍</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 《深入理解分布式系统》</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/deep-understanding-of-distributed-system.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong><a href="https://book.douban.com/subject/35794814/" target="_blank" rel="noopener noreferrer">《深入理解分布式系统》</a></strong> 是今年 3 月份刚出的一本分布式中文原创书籍，主要讲的是分布式领域的基本概念、常见挑战以及共识算法。</p>
<p>作者用了大量篇幅来介绍分布式领域中非常重要的共识算法，并且还会基于 Go 语言带着你从零实现了一个共识算法的鼻祖 Paxos 算法。</p>
<p>实话说，我还没有开始看这本书。但是！这本书的作者的博客上的分布式相关的文章我几乎每一篇都认真看过。</p>
<p>作者从 2019 年开始构思《深入理解分布式系统》，2020 年开始动笔，花了接近两年的时间才最终交稿。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220706121952258.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>作者专门写了一篇文章来介绍这本书的背后的故事，感兴趣的小伙伴可以自行查阅：<a href="https://zhuanlan.zhihu.com/p/487534882" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/487534882</a> 。</p>
<p>最后，放上这本书的代码仓库和勘误地址：<a href="https://github.com/tangwz/DistSysDeepDive" target="_blank" rel="noopener noreferrer">https://github.com/tangwz/DistSysDeepDive</a> 。</p>
<h2> 《数据密集型应用系统设计》</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/ddia.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>强推一波 <strong><a href="https://book.douban.com/subject/30329536/" target="_blank" rel="noopener noreferrer">《Designing Data-Intensive Application》</a></strong> （DDIA，数据密集型应用系统设计），值得读很多遍！豆瓣有接近 90% 的人看了这本书之后给了五星好评。</p>
<p>这本书主要讲了分布式数据库、数据分区、事务、分布式系统等内容。</p>
<p>书中介绍的大部分概念你可能之前都听过，但是在看了书中的内容之后，你可能会豁然开朗：“哇塞！原来是这样的啊！这不是某技术的原理么？”。</p>
<p>这本书我之前专门写过知乎回答介绍和推荐，没看过的朋友可以看看：<a href="https://www.zhihu.com/question/50408698/answer/2278198495" target="_blank" rel="noopener noreferrer">有哪些你看了以后大呼过瘾的编程书？</a> 。</p>
<p>另外，如果你在阅读这本书的时候感觉难度比较大，很多地方读不懂的话，我这里推荐一下《深入理解分布式系统》作者写的<a href="https://ddia.qtmuniao.com" target="_blank" rel="noopener noreferrer">《DDIA 逐章精读》小册</a>。</p>
<h2> 《深入理解分布式事务》</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/In-depth-understanding-of-distributed-transactions-xiaoyu.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong><a href="https://book.douban.com/subject/35626925/" target="_blank" rel="noopener noreferrer">《深入理解分布式事务》</a></strong> 这本书是的其中一位作者是 Apache ShenYu（incubating）网关创始人、Hmily、RainCat、Myth 等分布式事务框架的创始人。</p>
<p>学习分布式事务的时候，可以参考一下这本书。虽有一些小错误以及逻辑不通顺的地方，但对于各种分布式事务解决方案的介绍，总体来说还是不错的。</p>
<h2> 《从 Paxos 到 Zookeeper》</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20211216161350118.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong><a href="https://book.douban.com/subject/26292004/" target="_blank" rel="noopener noreferrer">《从 Paxos 到 Zookeeper》</a></strong> 是一本带你入门分布式理论的好书。这本书主要介绍几种典型的分布式一致性协议，以及解决分布式一致性问题的思路，其中重点讲解了 Paxos 和 ZAB 协议。</p>
<h2> 《微服务架构设计模式》</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/microservices-patterns.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong><a href="https://book.douban.com/subject/33425123/" target="_blank" rel="noopener noreferrer">《微服务架构设计模式》</a></strong> 的作者 Chris Richardson 被评为世界十大软件架构师之一、微服务架构先驱。这本书主要讲的是如何开发和部署生产级别的微服务架构应用，示例代码使用 Java 语言和 Spring 框架。</p>
<h2> 《凤凰架构》</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/f5bec14d3b404ac4b041d723153658b5.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong><a href="https://book.douban.com/subject/35492898/" target="_blank" rel="noopener noreferrer">《凤凰架构》</a></strong> 这本书是周志明老师多年架构和研发经验的总结，内容非常干货，深度与广度并存，理论结合实践！</p>
<p>正如书名的副标题“构建可靠的大型分布式系统”所说的那样，这本书的主要内容就是讲：“如何构建一套可靠的分布式大型软件系统” ，涵盖了下面这些方面的内容：</p>
<ul>
<li>软件架构从单体到微服务再到无服务的演进之路。</li>
<li>架构师应该在架构设计时应该注意哪些问题，有哪些比较好的实践。</li>
<li>分布式的基石比如常见的分布式共识算法 Paxos、Multi Paxos。</li>
<li>不可变基础设施比如虚拟化容器、服务网格。</li>
<li>向微服务迈进的避坑指南。</li>
</ul>
<p>这本书我推荐过很多次了。详见历史文章：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247505254&amp;idx=1&amp;sn=04faf3093d6002354f06fffbfc2954e0&amp;chksm=cea19aadf9d613bbba7ed0e02ccc4a9ef3a30f4d83530e7ad319c2cc69cd1770e43d1d470046&amp;scene=178&amp;cur_album_id=1646812382221926401#rd" target="_blank" rel="noopener noreferrer">周志明老师的又一神书！发现宝藏！</a></li>
<li><a href="https://mp.weixin.qq.com/s/9nbzfZGAWM9_qIMp1r6uUQ" target="_blank" rel="noopener noreferrer">Java 领域的又一神书！周志明老师 YYDS！</a></li>
</ul>
<h2> 《架构解密》</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/jiagoujiemi.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><a href="https://book.douban.com/subject/35093373/" target="_blank" rel="noopener noreferrer">《架构解密》</a>这本书和我渊源颇深，在大三的时候，我曾经在图书馆借阅过这本书的第一版，大概了花了不到一周就看完了。</p>
<p>这本书的第二版在 2020 年就已经出来了，总共也才 15 个评价，算得上是一本非常小众的技术书籍了。</p>
<p>书籍质量怎么说呢，各个知识点介绍的都比较泛，匆忙结束，一共 9 章，总共 331 页。如果你只是想初步了解一些分布式相关的概念的话，可以看看这本书，快速概览一波分布式相关的技术。</p>
<h2> 其他</h2>
<ul>
<li><a href="https://book.douban.com/subject/21624776/" target="_blank" rel="noopener noreferrer">《分布式系统 : 概念与设计》</a>：偏教材类型，内容全而无趣，可作为参考书籍；</li>
<li><a href="https://book.douban.com/subject/35689350/" target="_blank" rel="noopener noreferrer">《分布式架构原理与实践》</a>：2021 年出版的，没什么热度，我也还没看过。</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/books/deep-understanding-of-distributed-system.png" type="image/png"/>
    </item>
    <item>
      <title>Java 必读经典书籍</title>
      <link>https://javaguide.cn/books/java.html</link>
      <guid>https://javaguide.cn/books/java.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 必读经典书籍</source>
      <description>Java 基础 《Head First Java》 《Head First Java》-豆瓣</description>
      <category>计算机书籍</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Java 基础</h2>
<p><strong><a href="https://book.douban.com/subject/2000732/" target="_blank" rel="noopener noreferrer">《Head First Java》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424103035793.png" alt="《Head First Java》-豆瓣" tabindex="0"><figcaption>《Head First Java》-豆瓣</figcaption></figure>
<p>《Head First Java》这本书的内容很轻松有趣，可以说是我学习编程初期最喜欢的几本书之一了。同时，这本书也是我的 Java 启蒙书籍。我在学习 Java 的初期多亏了这本书的帮助，自己才算是跨进 Java 语言的大门。</p>
<p>我觉得我在 Java 这块能够坚持下来，这本书有很大的功劳。我身边的的很多朋友学习 Java 初期都是看的这本书。</p>
<p>有很多小伙伴就会问了：<strong>这本书适不适合编程新手阅读呢？</strong></p>
<p>我个人觉得这本书还是挺适合编程新手阅读的，毕竟是 “Head First” 系列。</p>
<p><strong><a href="https://book.douban.com/subject/34898994/" target="_blank" rel="noopener noreferrer">《Java 核心技术卷 1 + 卷 2》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424101217849.png" alt="《Java 核心技术卷 1》-豆瓣" tabindex="0"><figcaption>《Java 核心技术卷 1》-豆瓣</figcaption></figure>
<p>这两本书也非常不错。不过，这两本书的内容很多，全看的话比较费时间。我现在是把这两本书当做工具书来用，就比如我平时写文章的时候，碰到一些 Java 基础方面的问题，经常就翻看这两本来当做参考！</p>
<p>我当时在大学的时候就买了两本放在寝室，没事的时候就翻翻。建议有点 Java 基础之后再读，介绍的还是比较深入和全面的，非常推荐。</p>
<p><strong><a href="https://book.douban.com/subject/2130190/" target="_blank" rel="noopener noreferrer">《Java 编程思想》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424103124893.png" alt="《Java 编程思想》-豆瓣" tabindex="0"><figcaption>《Java 编程思想》-豆瓣</figcaption></figure>
<p>这本书被很多人称之为 Java 领域的圣经（<em>感觉有点过了~~~</em>）。不太推荐编程初学者阅读，有点劝退的味道，稍微有点基础后阅读更好。</p>
<p>我第一次看的时候还觉得有点枯燥，那时候还在上大二，看了 1/3 就没看下去了。</p>
<p><strong><a href="https://book.douban.com/subject/26772632/" target="_blank" rel="noopener noreferrer">《Java 8 实战》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424103202625.png" alt="《Java 8实战》-豆瓣" tabindex="0"><figcaption>《Java 8实战》-豆瓣</figcaption></figure>
<p>Java 8 算是一个里程碑式的版本，现在一般企业还是用 Java 8 比较多。掌握 Java 8 的一些新特性比如 Lambda、Stream API 还是挺有必要的。这块的话，我推荐 <strong><a href="https://book.douban.com/subject/26772632/" target="_blank" rel="noopener noreferrer">《Java 8 实战》</a></strong> 这本书。</p>
<h2> Java 并发</h2>
<p><strong><a href="https://book.douban.com/subject/30351286/" target="_blank" rel="noopener noreferrer">《Java 并发编程之美》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424112413660.png" alt="《Java 并发编程之美》-豆瓣" tabindex="0"><figcaption>《Java 并发编程之美》-豆瓣</figcaption></figure>
<p><em>这本书还是非常适合我们用来学习 Java 多线程的。这本书的讲解非常通俗易懂，作者从并发编程基础到实战都是信手拈来。</em></p>
<p>另外，这本书的作者加多自身也会经常在网上发布各种技术文章。这本书也是加多大佬这么多年在多线程领域的沉淀所得的结果吧！他书中的内容基本都是结合代码讲解，非常有说服力！</p>
<p><strong><a href="https://book.douban.com/subject/30358019/" target="_blank" rel="noopener noreferrer">《实战 Java 高并发程序设计》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424112554830.png" alt="《实战 Java 高并发程序设计》-豆瓣" tabindex="0"><figcaption>《实战 Java 高并发程序设计》-豆瓣</figcaption></figure>
<p>这个是我第二本要推荐的书籍，比较适合作为多线程入门/进阶书籍来看。这本书内容同样是理论结合实战，对于每个知识点的讲解也比较通俗易懂，整体结构也比较清。</p>
<p><strong><a href="https://github.com/RedSpider1/concurrent" target="_blank" rel="noopener noreferrer">《深入浅出 Java 多线程》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424112927759.png" alt="《深入浅出 Java 多线程》在线阅读" tabindex="0"><figcaption>《深入浅出 Java 多线程》在线阅读</figcaption></figure>
<p>这本开源书籍是几位大厂的大佬开源的。这几位作者为了写好《深入浅出 Java 多线程》这本书阅读了大量的 Java 多线程方面的书籍和博客，然后再加上他们的经验总结、Demo 实例、源码解析，最终才形成了这本书。</p>
<p>这本书的质量也是非常过硬！给作者们点个赞！这本书有统一的排版规则和语言风格、清晰的表达方式和逻辑。并且每篇文章初稿写完后，作者们就会互相审校，合并到主分支时所有成员会再次审校，最后再通篇修订了三遍。</p>
<p>在线阅读：<a href="https://redspider.gitbook.io/concurrent/" target="_blank" rel="noopener noreferrer">https://redspider.gitbook.io/concurrent/</a> 。</p>
<p><strong><a href="https://book.douban.com/subject/35013531/" target="_blank" rel="noopener noreferrer">《Java 并发实现原理：JDK 源码剖析》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/0b1b046af81f4c94a03e292e66dd6f7d.png" alt="《Java 并发实现原理：JDK 源码剖析》-豆瓣" tabindex="0"><figcaption>《Java 并发实现原理：JDK 源码剖析》-豆瓣</figcaption></figure>
<p>这本书是 2020 年新出的，所以，现在知道的人还不是很多。</p>
<p>这本书主要是对 Java Concurrent 包中一些比较重要的源码进行了讲解，另外，像 JMM、happen-before、CAS 等等比较重要的并发知识这本书也都会一并介绍到。</p>
<p>不论是你想要深入研究 Java 并发，还是说要准备面试，你都可以看看这本书。</p>
<h2> JVM</h2>
<p><strong><a href="https://book.douban.com/subject/34907497/" target="_blank" rel="noopener noreferrer">《深入理解 Java 虚拟机》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210710104655705.png" alt="《深入理解 Java 虚拟机》-豆瓣" tabindex="0"><figcaption>《深入理解 Java 虚拟机》-豆瓣</figcaption></figure>
<p>这本书就一句话形容：<strong>国产书籍中的战斗机，实实在在的优秀！</strong> （真心希望国内能有更多这样的优质书籍出现！加油！💪）</p>
<p>这本书的第 3 版 2019 年底已经出来了，新增了很多实在的内容比如 ZGC 等新一代 GC 的原理剖析。目前豆瓣上是 9.5 的高分，🐂 不 🐂 我就不多说了！</p>
<p>不论是你面试还是你想要在 Java 领域学习的更深，你都离不开这本书籍。这本书不光要看，你还要多看几遍，里面都是干货。这本书里面还有一些需要自己实践的东西，我建议你也跟着实践一下。</p>
<p>类似的书籍还有 <strong><a href="https://book.douban.com/subject/26354292/" target="_blank" rel="noopener noreferrer">《实战 Java 虚拟机》</a></strong>、<strong><a href="https://book.douban.com/subject/34935105/" target="_blank" rel="noopener noreferrer">《虚拟机设计与实现:以 JVM 为例》</a></strong> ，这两本都是非常不错的！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113158144.png" alt="《实战 Java 虚拟机》-豆瓣" tabindex="0"><figcaption>《实战 Java 虚拟机》-豆瓣</figcaption></figure>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113210153.png" alt="《虚拟机设计与实现:以 JVM 为例》-豆瓣" tabindex="0"><figcaption>《虚拟机设计与实现:以 JVM 为例》-豆瓣</figcaption></figure>
<p>如果你对实战比较感兴趣，想要自己动手写一个简易的 JVM 的话，可以看看 <strong><a href="https://book.douban.com/subject/26802084/" target="_blank" rel="noopener noreferrer">《自己动手写 Java 虚拟机》</a></strong> 这本书。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113445246.png" alt="《自己动手写 Java 虚拟机》-豆瓣" tabindex="0"><figcaption>《自己动手写 Java 虚拟机》-豆瓣</figcaption></figure>
<p>书中的代码是基于 Go 语言实现的，搞懂了原理之后，你可以使用 Java 语言模仿着写一个，也算是练练手！ 如果你当前没有能力独立使用 Java 语言模仿着写一个的话，你也可以在网上找到很多基于 Java 语言版本的实现，比如<a href="https://zachaxy.github.io/tags/JVM/" target="_blank" rel="noopener noreferrer">《zachaxy 的手写 JVM 系列》</a> 。</p>
<p>这本书目前在豆瓣有 8.2 的评分，我个人觉得张秀宏老师写的挺好的，这本书值得更高的评分。</p>
<p>另外，R 大在豆瓣发的<a href="https://www.douban.com/doulist/2545443/" target="_blank" rel="noopener noreferrer">《从表到里学习 JVM 实现》</a>这篇文章中也推荐了很多不错的 JVM 相关的书籍，推荐小伙伴们去看看。</p>
<p>再推荐两个视频给喜欢看视频学习的小伙伴。</p>
<p>第 1 个是尚硅谷的宋红康老师讲的<a href="https://www.bilibili.com/video/BV1PJ411n7xZ" target="_blank" rel="noopener noreferrer">《JVM 全套教程》</a>。这个课程的内容非常硬，一共有接近 400 小节。</p>
<p>课程的内容分为 3 部分：</p>
<ol>
<li>《内存与垃圾回收篇》</li>
<li>《字节码与类的加载篇》</li>
<li>《性能监控与调优篇》</li>
</ol>
<p>第 2 个是你假笨大佬的 <strong><a href="https://club.perfma.com/course/438755/list" target="_blank" rel="noopener noreferrer">《JVM 参数【Memory 篇】》</a></strong> 教程，很厉害了！</p>
<figure><img src="https://oss.javaguide.cn/java-guide-blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 常用工具</h2>
<p>非常重要！非常重要！特别是 Git 和 Docker。</p>
<ul>
<li><strong>IDEA</strong>：熟悉基本操作以及常用快捷。你可以通过 GitHub 上的开源教程 <a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="noopener noreferrer">《IntelliJ IDEA 简体中文专题教程》</a> 来学习 IDEA 的使用。</li>
<li><strong>Maven</strong>：强烈建议学习常用框架之前可以提前花几天时间学习一下<strong>Maven</strong>的使用。（到处找 Jar 包，下载 Jar 包是真的麻烦费事，使用 Maven 可以为你省很多事情）。</li>
<li><strong>Git</strong>：基本的 Git 技能也是必备的，试着在学习的过程中将自己的代码托管在 Github 上。你可以看看这篇 Github 上开源的 <a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Git" target="_blank" rel="noopener noreferrer">《Git 极简入门》</a> 。</li>
<li><strong>Docker</strong>：学着用 Docker 安装学习中需要用到的软件比如 MySQL ,这样方便很多，可以为你节省不少时间。你可以看看这篇 Github 上开源的 <a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Docker" target="_blank" rel="noopener noreferrer">《Docker 基本概念解读》</a> 、<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Docker-Image" target="_blank" rel="noopener noreferrer">《一文搞懂 Docker 镜像的常用操作！》</a></li>
</ul>
<p>除了这些工具之外，我强烈建议你一定要搞懂 GitHub 的使用。一些使用 GitHub 的小技巧，你可以看<a href="https://snailclimb.gitee.io/javaguide/#/docs/tools/Github%E6%8A%80%E5%B7%A7" target="_blank" rel="noopener noreferrer">《GitHub 小技巧》</a>这篇文章。</p>
<h2> 常用框架</h2>
<p>框架部分建议找官方文档或者博客来看。</p>
<h3> Spring/SpringBoot</h3>
<p><strong>Spring 和 SpringBoot 真的很重要！</strong></p>
<p>一定要搞懂 AOP 和 IOC 这两个概念。Spring 中 bean 的作用域与生命周期、SpringMVC 工作原理详解等等知识点都是非常重要的，一定要搞懂。</p>
<p>企业中做 Java 后端，你一定离不开 SpringBoot ，这个是必备的技能了！一定一定一定要学好！</p>
<p>像 SpringBoot 和一些常见技术的整合你也要知识怎么做，比如 SpringBoot 整合 MyBatis、 ElasticSearch、SpringSecurity、Redis 等等。</p>
<p>下面是一些比较推荐的书籍/专栏。</p>
<p><strong><a href="https://book.douban.com/subject/34949443/" target="_blank" rel="noopener noreferrer">《Spring 实战》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113512453.png" alt="《Spring 实战》-豆瓣" tabindex="0"><figcaption>《Spring 实战》-豆瓣</figcaption></figure>
<p>不建议当做入门书籍读，入门的话可以找点国人的书或者视频看。这本定位就相当于是关于 Spring 的一个概览，只有一些基本概念的介绍和示例，涵盖了 Spring 的各个方面，但都不够深入。就像作者在最后一页写的那样：“学习 Spring，这才刚刚开始”。</p>
<p><strong><a href="https://book.douban.com/subject/30452637/" target="_blank" rel="noopener noreferrer">《Spring 5 高级编程》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210328171223638.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>对于 Spring5 的新特性介绍的比较详细，也说不上好。另外，感觉全书翻译的有一点蹩脚的味道，还有一点枯燥。全书的内容比较多，我一般拿来当做工具书参考。</p>
<p><strong><a href="https://book.douban.com/subject/33390560/" target="_blank" rel="noopener noreferrer">《Spring Boot 编程思想（核心篇）》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113546513.png" alt="《Spring Boot 编程思想（核心篇）》-豆瓣" tabindex="0"><figcaption>《Spring Boot 编程思想（核心篇）》-豆瓣</figcaption></figure>
<p><em>稍微有点啰嗦，但是原理介绍的比较清楚。</em></p>
<p>SpringBoot 解析，不适合初学者。我是去年入手的，现在就看了几章，后面没看下去。书很厚，感觉很多很多知识点的讲解过于啰嗦和拖沓，不过，这本书对于 SpringBoot 内部原理讲解的还是很清楚。</p>
<p><strong><a href="https://book.douban.com/subject/26857423/" target="_blank" rel="noopener noreferrer">《Spring Boot 实战》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113614768.png" alt="《Spring Boot 实战》-豆瓣" tabindex="0"><figcaption>《Spring Boot 实战》-豆瓣</figcaption></figure>
<p>比较一般的一本书，可以简单拿来看一下。</p>
<h3> Netty</h3>
<p><strong><a href="https://book.douban.com/subject/27038538/" target="_blank" rel="noopener noreferrer">《Netty 实战》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113715369.png" alt="《Netty 实战》-豆瓣" tabindex="0"><figcaption>《Netty 实战》-豆瓣</figcaption></figure>
<p>这本书可以用来入门 Netty ，内容从 BIO 聊到了 NIO、之后才详细介绍为什么有 Netty、Netty 为什么好用以及 Netty 重要的知识点讲解。</p>
<p>这本书基本把 Netty 一些重要的知识点都介绍到了，而且基本都是通过实战的形式讲解。</p>
<p><strong><a href="https://book.douban.com/subject/30381214/" target="_blank" rel="noopener noreferrer">《Netty 进阶之路：跟着案例学 Netty》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113747345.png" alt="《Netty 进阶之路：跟着案例学 Netty》-豆瓣" tabindex="0"><figcaption>《Netty 进阶之路：跟着案例学 Netty》-豆瓣</figcaption></figure>
<p>内容都是关于使用 Netty 的实践案例比如内存泄露这些东西。如果你觉得你的 Netty 已经完全入门了，并且你想要对 Netty 掌握的更深的话，推荐你看一下这本书。</p>
<p><strong><a href="https://book.douban.com/subject/35752082/" target="_blank" rel="noopener noreferrer">《跟闪电侠学 Netty：Netty 即时聊天实战与底层原理》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/open-source-project/image-20220503085034268.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>2022 年 3 月刚刚出版的一本书。这本书分为上下两篇，上篇通过一个即时聊天系统的实战案例带你入门 Netty，下篇通过 Netty 源码分析带你搞清 Netty 比较重要的底层原理。</p>
<h2> 性能调优</h2>
<p><strong><a href="https://book.douban.com/subject/26740520/" target="_blank" rel="noopener noreferrer">《Java 性能权威指南》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/image-20220424113809644.png" alt="《Java 性能权威指南》-豆瓣" tabindex="0"><figcaption>《Java 性能权威指南》-豆瓣</figcaption></figure>
<p><em>希望能有更多这 Java 性能优化方面的好书！</em></p>
<p>O'Reilly 家族书，性能调优的入门书，我个人觉得性能调优是每个 Java 从业者必备知识。</p>
<p>这本书介绍的实战内容很不错，尤其是 JVM 调优，缺点也比较明显，就是内容稍微有点老。市面上这种书很少。这本书不适合初学者，建议对 Java 语言已经比价掌握了再看。另外，阅读之前，最好先看看周志明大佬的《深入理解 Java 虚拟机》。</p>
<h2> 网站架构</h2>
<p>看过很多网站架构方面的书籍，比如《大型网站技术架构：核心原理与案例分析》、《亿级流量网站架构核心技术》、《架构修炼之道——亿级网关、平台开放、分布式、微服务、容错等核心技术修炼实践》等等。</p>
<p>目前我觉得能推荐的只有李运华老师的 <strong><a href="https://book.douban.com/subject/30335935/" target="_blank" rel="noopener noreferrer">《从零开始学架构》</a></strong> 和 余春龙老师的 <strong><a href="https://book.douban.com/subject/30443578/" title="《软件架构设计：大型网站技术架构与业务架构融合之道》" target="_blank" rel="noopener noreferrer">《软件架构设计：大型网站技术架构与业务架构融合之道》</a></strong> 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210412224443177.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>《从零开始学架构》这本书对应的有一个极客时间的专栏—《从零开始学架构》，里面的很多内容都是这个专栏里面的，两者买其一就可以了。我看了很小一部分，内容挺全面的，是一本真正在讲如何做架构的书籍。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210412232441459.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>事务与锁、分布式（CAP、分布式事务......）、高并发、高可用 《软件架构设计：大型网站技术架构与业务架构融合之道》 这本书都有介绍到。</p>
<h2> 面试</h2>
<p><strong>《JavaGuide 面试突击版》</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide-mianshituji/image-20220830103023493.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/github/javaguide-mianshituji/image-20220830102925775.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><a href="https://javaguide.cn/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的面试版本，涵盖了 Java 后端方面的大部分知识点比如 集合、JVM、多线程还有数据库 MySQL 等内容。</p>
<p>公众号后台回复：“<strong>面试突击</strong>” 即可免费获取，无任何套路。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号" tabindex="0"><figcaption>JavaGuide 官方公众号</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/books/image-20220424103035793.png" type="image/png"/>
    </item>
    <item>
      <title>技术书籍精选</title>
      <link>https://javaguide.cn/books/</link>
      <guid>https://javaguide.cn/books/</guid>
      <source url="https://javaguide.cn/rss.xml">技术书籍精选</source>
      <description>这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版：《Java 面试指北 》 (质量很高，专为面试打造，配合 JavaGuide 食用)。 知识星球：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 JavaGuide 知识星球（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</description>
      <category>计算机书籍</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">这是一则或许对你有用的小广告</p>
<ul>
<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北 》</a></strong> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li>
<li><strong>知识星球</strong>：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 <strong><a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球</a></strong>（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</li>
</ul>
</div>
<p>精选优质计算机书籍。</p>
<p>开源的目的是为了大家能一起完善，如果你觉得内容有任何需要完善/补充的地方，欢迎大家在项目 <a href="https://github.com/CodingDocs/awesome-cs/issues" target="_blank" rel="noopener noreferrer">issues 区</a> 推荐自己认可的技术书籍，让我们共同维护一个优质的技术书籍精选集！</p>
<ul>
<li>GitHub 地址：<a href="https://github.com/CodingDocs/awesome-cs" target="_blank" rel="noopener noreferrer">https://github.com/CodingDocs/awesome-cs</a></li>
<li>Gitee 地址：<a href="https://gitee.com/SnailClimb/awesome-cs" target="_blank" rel="noopener noreferrer">https://gitee.com/SnailClimb/awesome-cs</a></li>
</ul>
<p>如果内容对你有帮助的话，欢迎给本项目点个 Star。我会用我的业余时间持续完善这份书单，感谢！</p>
<p>本项目推荐的大部分书籍的 PDF 版本我已经整理到了云盘里，你可以在公众号“<strong>GitHub 掘金计划</strong>” 后台回复“<strong>书籍</strong>”获取到。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/booksimage-20220409153638398.png" alt="" tabindex="0"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/booksimage-20220409153638398.png" type="image/png"/>
    </item>
    <item>
      <title>搜索引擎必读经典书籍</title>
      <link>https://javaguide.cn/books/search-engine.html</link>
      <guid>https://javaguide.cn/books/search-engine.html</guid>
      <source url="https://javaguide.cn/rss.xml">搜索引擎必读经典书籍</source>
      <description>Lucene Elasticsearch 在 Apache Lucene 的基础上开发而成，学习 ES 之前，建议简单了解一下 Lucene 的相关概念。 《Lucene 实战》 是国内为数不多的中文版本讲 Lucene 的书籍，适合用来学习和了解 Lucene 相关的概念和常见操作。 《Lucene实战》-实战</description>
      <category>计算机书籍</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Lucene</h2>
<p>Elasticsearch 在 Apache Lucene 的基础上开发而成，学习 ES 之前，建议简单了解一下 Lucene 的相关概念。</p>
<p><strong><a href="https://book.douban.com/subject/6440615/" target="_blank" rel="noopener noreferrer">《Lucene 实战》</a></strong> 是国内为数不多的中文版本讲 Lucene 的书籍，适合用来学习和了解 Lucene 相关的概念和常见操作。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/vAJkdYEyol4e6Nr.png" alt="《Lucene实战》-实战" tabindex="0"><figcaption>《Lucene实战》-实战</figcaption></figure>
<h2> Elasticsearch</h2>
<p>极客时间的<a href="http://gk.link/a/10bcT" title="《Elasticsearch 核心技术与实战》" target="_blank" rel="noopener noreferrer">《Elasticsearch 核心技术与实战》</a>这门课程基于 Elasticsearch 7.1 版本讲解，还算比较新。并且，作者是 eBay 资深技术专家，有 20 年的行业经验，课程质量有保障！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/20210420231125225.png" alt="《Elasticsearch 核心技术与实战》-极客时间" tabindex="0"><figcaption>《Elasticsearch 核心技术与实战》-极客时间</figcaption></figure>
<p>如果你想看书的话，可以考虑一下 <strong><a href="https://book.douban.com/subject/30380439/" target="_blank" rel="noopener noreferrer">《Elasticsearch 实战》</a></strong> 这本书。不过，需要说明的是，这本书中的 Elasticsearch 版本比较老，你可以将其作为一个参考书籍来看，有一些原理性的东西可以在上面找找答案。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8b7fa83490e466aa212382cd323d37f~tplv-k3u1fbpfcp-zoom-1.image" alt="《Elasticsearch 实战》-豆瓣" tabindex="0"><figcaption>《Elasticsearch 实战》-豆瓣</figcaption></figure>
<p>如果你想进一步深入研究 Elasticsearch 原理的话，可以看看张超老师的 <strong><a href="https://book.douban.com/subject/30386800/" target="_blank" rel="noopener noreferrer">《Elasticsearch 源码解析与优化实战》</a></strong> 这本书。这是市面上唯一一本写 Elasticsearch 源码的书。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f856485931a945639d5c23aaed74fb38~tplv-k3u1fbpfcp-zoom-1.image" alt="《Elasticsearch 源码解析与优化实战》-豆瓣" tabindex="0"><figcaption>《Elasticsearch 源码解析与优化实战》-豆瓣</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/books/vAJkdYEyol4e6Nr.png" type="image/png"/>
    </item>
    <item>
      <title>软件质量必读经典书籍</title>
      <link>https://javaguide.cn/books/software-quality.html</link>
      <guid>https://javaguide.cn/books/software-quality.html</guid>
      <source url="https://javaguide.cn/rss.xml">软件质量必读经典书籍</source>
      <description>下面推荐都是我看过并且我觉得值得推荐的书籍。 不过，这些书籍都比较偏理论，只能帮助你建立一个写优秀代码的意识标准。 如果你想要编写更高质量的代码、更高质量的软件，还是应该多去看优秀的源码，多去学习优秀的代码实践。 代码整洁之道 《重构》</description>
      <category>计算机书籍</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>下面推荐都是我看过并且我觉得值得推荐的书籍。</p>
<p>不过，这些书籍都比较偏理论，只能帮助你建立一个写优秀代码的意识标准。 如果你想要编写更高质量的代码、更高质量的软件，还是应该多去看优秀的源码，多去学习优秀的代码实践。</p>
<h2> 代码整洁之道</h2>
<p><strong><a href="https://book.douban.com/subject/30468597/" target="_blank" rel="noopener noreferrer">《重构》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210328174841577.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>必看书籍！无需多言。编程书籍领域的瑰宝。</p>
<p>世界顶级、国宝级别的 Martin Fowler 的书籍，可以说是软件开发领域最经典的几本书之一。目前已经出了第二版。</p>
<p>这是一本值得你看很多遍的书籍。</p>
<p><strong><a href="https://book.douban.com/subject/4199741/" target="_blank" rel="noopener noreferrer">《Clean Code》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210328174824891.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>《Clean Code》是 Bob 大叔的一本经典著作，强烈建议小伙伴们一定要看看。</p>
<p>Bob 大叔将自己对整洁代码的理解浓缩在了这本书中，真可谓是对后生的一大馈赠。</p>
<p><strong><a href="https://book.douban.com/subject/30412517/" target="_blank" rel="noopener noreferrer">《Effective Java 》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/82d510c951384383b325080428af6c0a.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>《Effective Java 》这本书是 Java 领域国宝级别的书，非常经典。Java 程序员必看！</p>
<p>这本书主要介绍了在 Java 编程中很多极具实用价值的经验规则，这些经验规则涵盖了大多数开发人员每天所面临的问题的解决方案。这篇文章能够非常实际地帮助你写出更加清晰、健壮和高效的代码。本书中的每条规则都以简短、独立的小文章形式出现，并通过例子代码加以进一步说明。</p>
<p><strong><a href="https://book.douban.com/subject/1477390/" target="_blank" rel="noopener noreferrer">《代码大全》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210314173253221.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>其实，《代码大全（第 2 版）》这本书我本身是不太想推荐给大家了。但是，看在它的豆瓣评分这么高的份上，还是拿出来说说吧！</p>
<p>这也是一本非常经典的书籍，第二版对第一版进行了重写。</p>
<p>我简单地浏览过全书的内容，感觉内容总体比较虚，对于大部分程序员的作用其实不大。如果你想要切实地提高自己的代码质量，《Clean Code》和 《编写可读代码的艺术》我觉得都要比《代码大全》这本书更好。</p>
<p>不过，最重要的还是要多看优秀的源码，多学习优秀的代码实践。</p>
<p><strong><a href="https://book.douban.com/subject/10797189/" target="_blank" rel="noopener noreferrer">《编写可读代码的艺术》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210314175536443.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>《编写可读代码的艺术》这本书要表达的意思和《Clean Code》很像，你看它俩的目录就可以看出来了。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309230739963.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>在我看来，如果你看过 《Clean Code》 的话，就不需要再看这本书了。当然，如果你有时间和精力，也可以快速过一遍。</p>
<p>另外，我这里还要推荐一个叫做 <strong><a href="https://github.com/biezhi/write-readable-code" target="_blank" rel="noopener noreferrer">write-readable-code</a></strong> 的仓库。这个仓库的作者免费分享了一系列基于《编写可读代码的艺术》这本书的视频。这一系列视频会基于 Java 语言来教你如何优化咱们的代码。</p>
<p>在实践中学习的效果肯定会更好！推荐小伙伴们都抓紧学起来啊！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309230743258.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 程序员职业素养</h2>
<p><strong><a href="https://book.douban.com/subject/26919457/" target="_blank" rel="noopener noreferrer">《The Clean Coder》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/20210314191210273.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>《 The Clean Coder》是 Bob 大叔的又一经典著作。</p>
<p>《Clean Code》和《 The Clean Coder》这两本书在国内都翻译为 《代码整洁之道》，我觉得这个翻译还是不够优雅的。</p>
<p>另外，两者的内容差异也很大。《Clean Code》这本书从代码层面来讲解如何提高自己的代码质量。而《The Clean Coder》这本书则是从如何成为一名更优秀的开发者的角度来写的，比如这书会教你如何在自己的领域更专业、如何说不、如何做时间管理、如何处理压力等等。</p>
<h2> 架构整洁之道</h2>
<p><strong><a href="https://book.douban.com/subject/30333919/" target="_blank" rel="noopener noreferrer">《架构整洁之道》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books/2021031412342771.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>你没看错，《架构整洁之道》这本书又是 Bob 大叔的经典之作。</p>
<p>这本书我强烈安利！认真读完之后，我保证你对编程本质、编程语言的本质、软件设计、架构设计可以有进一步的认识。</p>
<p>国内的很多书籍和专栏都借鉴了《架构整洁之道》 这本书。毫不夸张地说，《架构整洁之道》就是架构领域最经典的书籍之一。</p>
<p>正如作者说的那样：</p>
<blockquote>
<p>如果深入研究计算机编程的本质，我们就会发现这 50 年来，计算机编程基本没有什么大的变化。编程语言稍微进步了一点，工具的质量大大提升了，但是计算机程序的基本构造没有什么变化。</p>
<p>虽然我们有了新的编程语言、新的编程框架、新的编程范式，但是软件架构的规则仍然和 1946 年阿兰·图灵写下第一行机器代码的时候一样。</p>
<p>这本书就是为了把这些永恒不变的软件架构规则展现出来。</p>
</blockquote>
<h2> 项目管理</h2>
<p><strong><a href="https://book.douban.com/subject/1102259/" target="_blank" rel="noopener noreferrer">《人月神话》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/2021/03/8ece325c-4491-4ffd-9d3d-77e95159ec40.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这本书主要描述了软件开发的基本定律：<strong>一个需要 10 天才能干完的活，不可能让 10 个人在 1 天干完！</strong></p>
<p>看书名的第一眼，感觉不像是技术类的书籍。但是，就是这样一个看似和编程不沾边的书名，却成了编程领域长久相传的经典。</p>
<p><strong>这本书对于现代软件尤其是复杂软件的开发的规范化有深刻的意义。</strong></p>
<p><strong><a href="https://book.douban.com/subject/5344973/" target="_blank" rel="noopener noreferrer">《领域驱动设计:软件核心复杂性应对之道》</a></strong></p>
<figure><img src="https://oss.javaguide.cn/2021/03/7e80418d-20b1-4066-b9af-cfe434b1bf1a.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这本领域驱动设计方面的经典之作一直被各种推荐，但是我还来及读。</p>
<h2> 其他</h2>
<ul>
<li><a href="https://book.douban.com/subject/24536403/" target="_blank" rel="noopener noreferrer">《代码的未来》</a>：这本书的作者是 Ruby 之父松本行弘，算是一本年代比较久远的书籍（13 年出版），不过，还是非常值得一读。这本书的内容主要介绍是编程/编程语言的本质。我个人还是比较喜欢松本行弘的文字风格，并且，你看他的文章也确实能够有所收获。</li>
<li><a href="https://book.douban.com/subject/1488876/" target="_blank" rel="noopener noreferrer">《深入浅出设计模式》</a>：比较有趣的风格，适合设计模式入门。</li>
<li><a href="https://book.douban.com/subject/30443578/" target="_blank" rel="noopener noreferrer">《软件架构设计:大型网站技术架构与业务架构融合之道》</a>：内容非常全面。适合面试前突击一些比较重要的理论知识，也适合拿来扩充/完善自己的技术广度。</li>
<li><a href="https://book.douban.com/subject/33425123/" target="_blank" rel="noopener noreferrer">《微服务架构设计模式》</a>：这本书是世界十大软件架构师之一、微服务架构先驱 Chris Richardson 亲笔撰写，豆瓣评分 9.6。示例代码使用 Java 语言和 Spring 框架。帮助你设计、实现、测试和部署基于微服务的应用程序。</li>
</ul>
<p>最后再推荐两个相关的文档：</p>
<ul>
<li><strong>阿里巴巴 Java 开发手册</strong>：<a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/p3c</a></li>
<li><strong>Google Java 编程风格指南</strong>：<a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="noopener noreferrer">http://www.hawstein.com/posts/google-java-style.html</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/books/20210328174841577.png" type="image/png"/>
    </item>
    <item>
      <title>抄袭狗，你冬天睡觉脚必冷！！！</title>
      <link>https://javaguide.cn/about-the-author/dog-that-copies-other-people-essay.html</link>
      <guid>https://javaguide.cn/about-the-author/dog-that-copies-other-people-essay.html</guid>
      <source url="https://javaguide.cn/rss.xml">抄袭狗，你冬天睡觉脚必冷！！！</source>
      <description>抄袭狗真的太烦了。。。 听朋友说我的文章在知乎又被盗了，原封不动地被别人用来引流。 而且！！！这还不是最气的。 这人还在文末注明的原出处还不是我的。。。</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>抄袭狗真的太烦了。。。</p>
<p>听朋友说我的文章在知乎又被盗了，原封不动地被别人用来引流。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39f223bd8d8240b8b7328f7ab6edbc57~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>而且！！！这还不是最气的。</p>
<p>这人还在文末注明的原出处还不是我的。。。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa47e0752f4b4b57af424114bc6bc558~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>也就是说 CSDN 有另外一位抄袭狗盗了我的这篇文章并声明了原创，知乎抄袭狗又原封不动地搬运了这位 CSDN 抄袭狗的文章。</p>
<p>真可谓离谱他妈给离谱开门，离谱到家了。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f8d281579224b13ad235c28e1d7790e~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>我打开知乎抄袭狗注明的原出处链接，好家伙，一模一样的内容，还表明了原创。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a6d7b206b6a43ec9b0055a8f47a30be~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>看了一下 CSDN 这位抄袭狗的文章，好家伙，把我高赞回答搬运了一个遍。。。真是很勤奋了。。。</p>
<p>CSDN 我就不想多说了，就一大型文章垃圾场，都是各种不规范转载，各种收费下载的垃圾资源。这号称国内流量最大的技术网站贼恶心，吃香太难看，能不用就不要用吧！</p>
<p>像我自己平时用 Google 搜索的时候，都是直接屏蔽掉 CSDN 这个站点的。只需要下载一个叫做 Personal Blocklist 的 Chrome 插件，然后将 blog.csdn.net 添加进黑名单就可以了。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be151d93cd024c6e911d1a694212d91c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>我的文章基本被盗完了，关键是我自己发没有什么流量，反而是盗我文章的那些人比我这个原作者流量还大。</p>
<p>这是什么世道，是人性的扭曲还是道德的沦丧？</p>
<p>不过，也没啥，CSDN 这垃圾网站不去发文也无妨。</p>
<p>看看 CSDN 热榜上的文章都是一些什么垃圾，不是各种广告就是一些毫无质量的拼凑文。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd07efe86af74ea0a07d29236718ddc8~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>当然了，也有极少部分的高质量文章，比如涛哥、二哥、冰河、微观技术等博主的文章。</p>
<p>还有很多视频平台（比如抖音、哔哩哔哩）上面有很多博主直接把别人的原创拿来做个视频，用来引流或者吸粉。</p>
<p>今天提到的这篇被盗的文章曾经就被一个培训机构拿去做成了视频用来引流。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9dda1e36ceff4cbb9b0bf9501b279be5~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>作为个体，咱也没啥办法，只能遇到一个举报一个。。。</p>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39f223bd8d8240b8b7328f7ab6edbc57~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>入职培训一个月后的感受</title>
      <link>https://javaguide.cn/about-the-author/feelings-after-one-month-of-induction-training.html</link>
      <guid>https://javaguide.cn/about-the-author/feelings-after-one-month-of-induction-training.html</guid>
      <source url="https://javaguide.cn/rss.xml">入职培训一个月后的感受</source>
      <description>不知不觉已经入职一个多月了，在入职之前我没有在某个公司实习过或者工作过，所以很多东西刚入职工作的我来说还是比较新颖的。学校到职场的转变，带来了角色的转变，其中的差别因人而异。对我而言，在学校的时候课堂上老师课堂上教的东西，自己会根据自己的兴趣选择性接受，甚至很多课程你不想去上的话，还可以逃掉。到了公司就不一样了，公司要求你会的技能你不得不学，除非你不想干了。在学校的时候大部分人编程的目的都是为了通过考试或者找到一份好工作，真正靠自己兴趣支撑起来的很少，到了工作岗位之后我们编程更多的是因为工作的要求，相比于学校的来说会一般会更有挑战而且压力更大。在学校的时候，我们最重要的就是对自己负责，我们不断学习知识去武装自己，但是到了公司之后我们不光要对自己负责，更要对公司负责，毕竟公司出钱请你过来，不是让你一直 on beach 的。</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>不知不觉已经入职一个多月了，在入职之前我没有在某个公司实习过或者工作过，所以很多东西刚入职工作的我来说还是比较新颖的。学校到职场的转变，带来了角色的转变，其中的差别因人而异。对我而言，在学校的时候课堂上老师课堂上教的东西，自己会根据自己的兴趣选择性接受，甚至很多课程你不想去上的话，还可以逃掉。到了公司就不一样了，公司要求你会的技能你不得不学，除非你不想干了。在学校的时候大部分人编程的目的都是为了通过考试或者找到一份好工作，真正靠自己兴趣支撑起来的很少，到了工作岗位之后我们编程更多的是因为工作的要求，相比于学校的来说会一般会更有挑战而且压力更大。在学校的时候，我们最重要的就是对自己负责，我们不断学习知识去武装自己，但是到了公司之后我们不光要对自己负责，更要对公司负责，毕竟公司出钱请你过来，不是让你一直 on beach 的。</p>
<p>刚来公司的时候，因为公司要求，我换上了 Mac 电脑。由于之前一直用的是 Windows 系统，所以非常不习惯。刚开始用 Mac 系统的时候笨手笨脚，自己会很明显的感觉自己的编程效率降低了至少 3 成。当时内心还是挺不爽的，心里也总是抱怨为什么不直接用 Windows 系统或者 Linux 系统。不过也挺奇怪，大概一个星期之后，自己就开始慢慢适应使用 Mac 进行编程，甚至非常喜欢。我这里不想对比 Mac 和 Windows 编程体验哪一个更好，我觉得还是因人而异，相同价位的 Mac 的配置相比于 Windows 确实要被甩几条街。不过 Mac 的编程和使用体验确实不错，当然你也可以选择使用 Linux 进行日常开发，相信一定很不错。 另外，Mac 不能玩一些主流网络游戏，对于一些克制不住自己想玩游戏的朋友是一个不错的选择。</p>
<p>不得不说 ThoughtWorks 的培训机制还是很不错的。应届生入职之后一般都会安排培训，与往年不同的是，今年的培训多了中国本地班（TWU-C）。作为本地班的第一期学员，说句心里话还是很不错。8 周的培训，除了工作需要用到的基本技术比如 ES6、SpringBoot 等等之外，还会增加一些新员工基本技能的培训比如如何高效开会、如何给别人正确的提 Feedback、如何对代码进行重构、如何进行 TDD 等等。培训期间不定期的有活动，比如 Weekend Trip、 City Tour、Cake time 等等。最后三周还会有一个实际的模拟项目，这个项目基本和我们正式工作的实际项目差不多，我个人感觉很不错。目前这个项目已经正式完成了一个迭代，我觉得在做项目的过程中，收获最大的不是项目中使用的技术，而是如何进行团队合作、如何正确使用 Git 团队协同开发、一个完成的迭代是什么样子的、做项目的过程中可能遇到那些问题、一个项目运作的完整流程等等。</p>
<p>ThoughtWorks 非常提倡分享、提倡帮助他人成长，这一点在公司的这段时间深有感触。培训期间，我们每个人会有一个 Trainer 负责，Trainer 就是日常带我们上课和做项目的同事，一个 Trainer 大概会负责 5 - 6 个人。Trainer 不定期都会给我们最近表现的 Feedback (反馈) ，我个人觉得这个并不是这是走走形式，Trainer 们都很负责，很多时候都是在下班之后找我们聊天。同事们也都很热心，如果你遇到问题，向别人询问，其他人如果知道的话一般都会毫无保留的告诉你，如果遇到大部分都不懂的问题，甚至会组织一次技术 Session 分享。上周五我在我们小组内进行了一次关于 Feign 远程调用的技术分享，因为 team 里面大家对这部分知识都不太熟悉，但是后面的项目进展大概率会用到这部分知识。我刚好研究了这部分内容，所以就分享给了组内的其他同事，以便于项目更好的进行。</p>
<p>另外，ThoughtWorks 也是一家非常提倡 Feedback (反馈) 文化的公司，反馈是告诉人们我们对他们的表现的看法以及他们应该如何更好地做到这一点。刚开始我并没有太在意，慢慢地自己确实感觉到正确的进行反馈对他人会有很大的帮助。因为人在做很多事情的时候，会很难发现别人很容易看到的一些小问题。就比如一个很有趣的现象一样，假如我们在做项目的时候没有测试这个角色，如果你完成了自己的模块，并且自己对这个模块测试了很多遍，你发现已经没啥问题了。但是，到了实际使用的时候会很大概率出现你之前从来没有注意的问题。解释这个问题的说法是：每个人的视野或多或少都是有盲点的，这与我们的关注点息息相关。对于自己做的东西，很多地方自己测试很多遍都不会发现，但是如果让其他人帮你进行测试的话，就很大可能会发现很多显而易见的问题。</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/feedback.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>工作之后，平时更新公众号、专栏还有维护 Github 的时间变少了。实际上，很多时候下班回来后，都有自己的时间来干自己的事情，但是自己也总是找工作太累或者时间比较零散的接口来推掉了。到了今天，翻看 Github 突然发现 14 天前别人在 Github 上给我提的 PR 我还没有处理。这一点确实是自己没有做好的地方，没有合理安排好自己的时间。实际上自己有很多想写的东西，后面会慢慢将他们提上日程。工作之后，更加发现下班后的几个小时如何度过确实很重要 ，如果你觉得自己没有完成好自己白天该做的工作的话，下班后你可以继续忙白天没有忙完的工作，如果白天的工作对于你游刃有余的话，下班回来之后，你大可去干自己感兴趣的事情，学习自己感兴趣的技术。做任何事情都要基于自身的基础，切不可好高骛远。</p>
<p>工作之后身边也会有很多厉害的人，多从他人身上学习我觉得是每个职场人都应该做的。这一届和我们一起培训的同事中，有一些技术很厉害的，也有一些技术虽然不是那么厉害，但是组织能力以及团队协作能力特别厉害的。有一个特别厉害的同事，在我们还在学 SpringBoot 各种语法的时候，他自己利用业余时间写了一个简化版的 SpringBoot ，涵盖了 Spring 的一些常用注解比如 <code>@RestController</code>、<code>@Autowried</code>、<code>@Pathvairable</code>、<code>@RestquestParam</code>等等（已经联系这位同事，想让他开源一下，后面会第一时间同步到公众号，期待一下吧！）。我觉得这位同事对于编程是真的有兴趣，他好像从初中就开始接触编程了，对于各种底层知识也非常感兴趣，自己写过实现过很多比较底层的东西。他的梦想是在 Github 上造一个 20k Star 以上的轮子。我相信以这位同事的能力一定会达成目标的，在这里祝福这位同事，希望他可以尽快实现这个目标。</p>
<p>这是我入职一个多月之后的个人感受，很多地方都是一带而过，后面我会抽时间分享自己在公司或者业余学到的比较有用的知识给各位，希望看过的人都能有所收获。</p>
]]></content:encoded>
      <enclosure url="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/feedback.png" type="image/png"/>
    </item>
    <item>
      <title>从毕业到入职半年的感受</title>
      <link>https://javaguide.cn/about-the-author/feelings-of-half-a-year-from-graduation-to-entry.html</link>
      <guid>https://javaguide.cn/about-the-author/feelings-of-half-a-year-from-graduation-to-entry.html</guid>
      <source url="https://javaguide.cn/rss.xml">从毕业到入职半年的感受</source>
      <description>如果大家看过我之前的介绍的话，就会知道我是 19 年毕业的几百万应届毕业生中的一员。这篇文章主要讲了一下我入职大半年的感受，文中有很多自己的主观感受，如果你们有任何不认同的地方都可以直接在评论区说出来，会很尊重其他人的想法。 简单说一下自己的情况吧！我目前是在一家外企，每天的工作和大部分人一样就是做开发。毕业到现在，差不多也算是工作半年多了，也已经过了公司 6 个月的试用期。目前在公司做过两个偏向于业务方向的项目，其中一个正在做。你很难想象我在公司做的两个业务项目的后端都没有涉及到分布式/微服务，没有接触到 Redis、Kafka 等等比较“高大上”的技术在项目中的实际运用。</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>如果大家看过我之前的介绍的话，就会知道我是 19 年毕业的几百万应届毕业生中的一员。这篇文章主要讲了一下我入职大半年的感受，文中有很多自己的主观感受，如果你们有任何不认同的地方都可以直接在评论区说出来，会很尊重其他人的想法。</p>
<p>简单说一下自己的情况吧！我目前是在一家外企，每天的工作和大部分人一样就是做开发。毕业到现在，差不多也算是工作半年多了，也已经过了公司 6 个月的试用期。目前在公司做过两个偏向于业务方向的项目，其中一个正在做。你很难想象我在公司做的两个业务项目的后端都没有涉及到分布式/微服务，没有接触到 Redis、Kafka 等等比较“高大上”的技术在项目中的实际运用。</p>
<p>第一个项目做的是公司的内部项目——员工成长系统。抛去员工成长系统这个名字，实际上这个系统做的就是绩效考核比如你在某个项目组的表现。这个项目的技术是 Spring Boot+ JPA + Spring Security + K8S + Docker + React。第二个目前正在做的是一个集成游戏 (cocos)、Web 管理端 (Spring Boot + Vue) 和小程序 (Taro) 项目。</p>
<p>是的，我在工作中的大部分时间都和 CRUD 有关，每天也会写前端页面。之前我认识的一个朋友 ，他听说我做的项目中大部分内容都是写业务代码之后就非常纳闷，他觉得单纯写业务代码得不到提升？what?你一个应届生，连业务代码都写不好你给我说这个！所以，<strong>我就很纳闷不知道为什么现在很多连业务代码都写不好的人为什么人听到 CRUD 就会反感？至少我觉得在我工作这段时间我的代码质量得到了提升、定位问题的能力有了很大的改进、对于业务有了更深的认识，自己也可以独立完成一些前端的开发了。</strong></p>
<p>其实，我个人觉得能把业务代码写好也没那么容易，抱怨自己天天做 CRUD 工作之前，看看自己 CRUD 的代码写好没。再换句话说，单纯写 CRUD 的过程中你搞懂了哪些你常用的注解或者类吗？这就像一个只会 <code>@Service</code>、<code>@Autowired</code>、<code>@RestController</code>等等最简单的注解的人说我已经掌握了 Spring Boot 一样。</p>
<p>不知道什么时候开始大家都会觉得有实际使用 Redis、MQ 的经验就很牛逼了，这可能和当前的面试环境有关系。你需要和别人有差异，你想进大厂的话，好像就必须要这些技术比较在行，好吧，没有好像，自信点来说对于大部分求职者这些技术都是默认你必备的了。</p>
<p><strong>实话实说，我在大学的时候就陷入过这个“伪命题”中</strong>。在大学的时候，我大二因为加入了一个学校的偏技术方向的校媒才接触到 Java ，当时我们学习 Java 的目的就是开发一个校园通。 大二的时候，编程相当于才入门水平的我才接触 Java，花了一段时间才掌握 Java 基础。然后，就开始学习安卓开发。</p>
<p>到了大三上学期，我才真正确定要走 Java 后台的方向，找 Java 后台的开发工作。学习了 3 个月左右的 WEB 开发基础之后，我就开始学习分布式方面内容比如 Redis、Dubbo 这些。我当时是通过看书 + 视频 + 博客的方式学习的，自学过程中通过看视频自己做过两个完整的项目，一个普通的业务系统，一个是分布式的系统。<strong>我当时以为自己做完之后就很牛逼了，我觉得普通的 CRUD 工作已经不符合我当前的水平了。哈哈！现在看来，当时的我过于哈皮！</strong></p>
<p>这不！到了大三暑假跟着老师一起做项目的时候就出问题了。大三的时候，我们跟着老师做的是一个绩效考核系统，业务复杂程度中等。这个项目的技术用的是：SSM + Shiro + JSP。当时，做这个项目的时候我遇到各种问题，各种我以为我会写的代码都不会写了，甚至我写一个简单的 CRUD 都要花费好几天的时间。所以，那时候我都是边复习边学习边写代码。虽然很累，但是，那时候学到了很多，也让我在技术面前变得更加踏实。我觉得这“<strong>这个项目已经没有维护的可能性</strong>”这句话是我对我过的这个项目最大的否定了。</p>
<p>技术千变万化，掌握最核心的才是王道。我们前几年可能还在用 Spring 基于传统的 XML 开发，现在几乎大家都会用 Spring Boot 这个开发利器来提升开发速度，再比如几年前我们使用消息队列可能还在用 ActiveMQ，到今天几乎都没有人用它了，现在比较常用的就是 Rocket MQ、Kafka 。技术更新换代这么快的今天，你是无法把每一个框架/工具都学习一遍的。</p>
<p><strong>很多初学者上来就想通过做项目学习，特别是在公司，我觉得这个是不太可取的。</strong> 如果的 Java 基础或者 Spring Boot 基础不好的话，建议自己先提前学习一下之后再开始看视频或者通过其他方式做项目。 <strong>还有一点就是，我不知道为什么大家都会说边跟着项目边学习做的话效果最好，我觉得这个要加一个前提是你对这门技术有基本的了解或者说你对编程有了一定的了解。</strong></p>
<p><strong>划重点！！！在自己基础没打牢的情况下，单纯跟着视频做一点用没有。你会发现你看完视频之后，让你自己写代码的时候又不会写了。</strong></p>
<p>不知道其他公司的程序员是怎么样的？我感觉技术积累很大程度在乎平时，单纯依靠工作绝大部分情况只会加快自己做需求的熟练度，当然，写多了之后或多或少也会提升你对代码质量的认识（前提是你有这个意识）。</p>
<p>工作之余，我会利用业余时间来学习自己想学的东西。工作中的例子就是我刚进公司的第一个项目用到了 Spring Security + JWT ，因为当时自己对于这个技术不太了解，然后就在工作之外大概花了一周的时间学习写了一个 Demo 分享了出来，GitHub 地址：<a href="https://github.com/Snailclimb/spring-security-jwt-guide" target="_blank" rel="noopener noreferrer">https://github.com/Snailclimb/spring-security-jwt-guide</a> 。以次为契机，我还分享了</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485626&amp;idx=1&amp;sn=3247aa9000693dd692de8a04ccffeec1&amp;chksm=cea24771f9d5ce675ea0203633a95b68bfe412dc6a9d05f22d221161147b76161d1b470d54b3&amp;token=684071313&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">《一问带你区分清楚 Authentication、Authorization 以及 Cookie、Session、Token》</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485655&amp;idx=1&amp;sn=583eeeb081ea21a8ec6347c72aa223d6&amp;chksm=cea2471cf9d5ce0aa135f2fb9aa32d98ebb3338292beaccc1aae43d1178b16c0125eb4139ca4&amp;token=1737409938&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">JWT 身份认证优缺点分析以及常见问题解决方案</a></li>
</ul>
<p>另外一个最近的例子是因为肺炎疫情在家的这段时间，自学了 Kafka，并且正在准备写一系列的入门文章，目前已经完成了：</p>
<ol>
<li>大白话 Kafka 入门；</li>
<li>Kafka 安装和基本功能体验；</li>
<li>Spring Boot 整合 Kafka 发送和接受消息；</li>
<li>Spring Boot 整合 Kafka 发送和接受消息的一些事务、错误消息处理等等。</li>
</ol>
<p>还没完成的：</p>
<ol>
<li>
<p>Kafka 高级特性比如工作流程、Kafka 为什么快等等的分析；</p>
</li>
<li>
<p>源码阅读分析；</p>
</li>
<li>
<p>......</p>
</li>
</ol>
<p><strong>所以，我觉得技术的积累和沉淀很大程度在乎工作之外的时间(大佬和一些本身就特别厉害的除外)。</strong></p>
<p><strong>未来还有很长的路要走，即使再有精力也学不完你想学的所有技术，适当取舍、适当妥协，适当娱乐。</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>我曾经也是网瘾少年</title>
      <link>https://javaguide.cn/about-the-author/internet-addiction-teenager.html</link>
      <guid>https://javaguide.cn/about-the-author/internet-addiction-teenager.html</guid>
      <source url="https://javaguide.cn/rss.xml">我曾经也是网瘾少年</source>
      <description>这篇文章写入 2021 年高考前夕。 聊到高考，无数人都似乎有很多话说。今天就假借高考的名义，简单来聊聊我的高中求学经历吧！ 说实话，我自己的高中求学经历真的还不算平淡，甚至有点魔幻，所以还是有很多话想要说的。 这篇文章大概会从我的初中一直介绍到高中，每一部分我都不会花太多篇幅，就简单聊聊吧！ 以下所有内容皆是事实，没有任何夸大的地方，稍微有一点点魔幻。 刚开始接触电脑 最开始接触电脑是在我刚上五年级的时候，那时候家里没电脑，刚开始上网都是在黑网吧玩的。</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>这篇文章写入 2021 年高考前夕。</p>
</blockquote>
<p>聊到高考，无数人都似乎有很多话说。今天就假借高考的名义，简单来聊聊我的高中求学经历吧！</p>
<p>说实话，我自己的高中求学经历真的还不算平淡，甚至有点魔幻，所以还是有很多话想要说的。</p>
<p>这篇文章大概会从我的初中一直介绍到高中，每一部分我都不会花太多篇幅，就简单聊聊吧！</p>
<p><strong>以下所有内容皆是事实，没有任何夸大的地方，稍微有一点点魔幻。</strong></p>
<h2> 刚开始接触电脑</h2>
<p>最开始接触电脑是在我刚上五年级的时候，那时候家里没电脑，刚开始上网都是在黑网吧玩的。</p>
<p>在黑网吧上网的经历也是一波三折，经常会遇到警察来检查或者碰到大孩子骚扰。在黑网吧上网的一年多中，我一共两次碰到警察来检查，主要是看有没有未成年人（当时黑网吧里几乎全是未成年人），实际感觉像是要问黑网吧老板要点好处。碰到大孩子骚扰的次数就比较多，大孩子经常抢我电脑，还威胁我把身上所有的钱给他们。我当时一个人也比较怂，被打了几次之后，就尽量避开大孩子来玩的时间去黑网吧，身上也只带很少的钱。小时候的性格就比较独立，在外遇到事情我一般也不会给家里人说。</p>
<p>我现在已经记不太清当时是被我哥还是我姐带进网吧的，好像是我姐。</p>
<p>起初的时候，自己就是玩玩流行蝴蝶剑、单机摩托之类的单机游戏。但是，也没有到沉迷的地步，只是觉得这东西确实挺好玩的，一玩就可以玩一下午，恋恋不舍。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books2a6021b9-e7a0-41c4-b69e-a652f7bc3e12-20200802173601289.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 小学毕业后开始有网瘾</h2>
<p>开始有网瘾是在小学毕业的时候，在我玩了一款叫做 <strong>QQ 飞车</strong> 的游戏之后（好像是六年级末就开始玩了）。我艹，当时真的被这游戏吸引了。<strong>每天上课都幻想自己坐在车里面飘逸，没错，当时就觉得秋名山车神就是我啦！</strong></p>
<p>我当时技术还是挺不错的，整个网吧玩这个游戏的貌似还没有可以打败我的（我们当时经常会开放切磋）。</p>
<p>QQ 飞车这款戏当时还挺火的，很多 90 后的小伙伴应该比较熟悉。</p>
<p>我记得，那时候上网还不要身份证，10 元办一张网卡就行了，网费也是一元一小时。我就经常不吃早饭，攒钱用来上网。只要口袋里有钱，我都会和我的小伙伴奔跑到网吧一起玩 QQ 飞车。青回啊！</p>
<blockquote>
<p>说到这，我情不自禁地打开自己的 Windows 电脑，下载了 Wegame ，然后下载了 QQ 飞车。</p>
</blockquote>
<p>到了初二的时候，就没玩 QQ 飞车了。我的等级也永久定格在了 <strong>120</strong> 级，这个等级在当时那个升级难的一匹的年代，算的上非常高的等级了。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/b488618c-3c25-4bc9-afd4-7324e27553bd-20200802175534614.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 初二网瘾爆发</h2>
<p>网瘾爆发是在上了初中之后。初二的时候，最为猖狂，自己当时真的是太痴迷于 <strong>穿越火线</strong> 这款游戏了，比 QQ 飞车还要更痴迷一些。每天上课都在想像自己拿起枪横扫地方阵营的场景，心完全不在学习上。</p>
<p>我经常每天早上起早去玩别人包夜留下的机子，毕竟那时候上学也没什么钱嘛！我几乎每个周五晚上都会趁家人睡着之后，偷偷跑出去通宵。整个初二我通宵了无数次，我的眼睛就是这样近视的。</p>
<p>有网瘾真的很可怕，为了上网什么都敢做。当时我家住在顶楼的隔热层，我每次晚上偷偷出去上网，为了不被家里人发现，要从我的房间的窗户爬出去，穿过几栋楼，经过几间无人居住的顶楼隔热层之后再下楼。现在想想，还是比较危险的。而且，我天生比较怕黑。当时为了上网，每次穿过这么多没人居住的顶层隔热层都没怕过。你让我现在再去，我都不敢，实在是佩服当年的自己的啊！</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/image-20230429114622340.png" alt="我家楼顶拍的雪景" tabindex="0"><figcaption>我家楼顶拍的雪景</figcaption></figure>
<p>周五晚上通宵完之后，我会睡到中午，然后下午继续去网吧玩。到了周日，基本都是直接从早上 8 点玩到晚上 9 点 10 点。那时候精力是真旺盛，真的完全不会感觉比较累，反而乐在其中。</p>
<p>我的最终军衔停留在了两个钻石，玩过的小伙伴应该清楚这在当时要玩多少把（现在升级比较简单）。</p>
<p>那时候成绩挺差的。这样说吧！我当时在很普通的一个县级市的高中，全年级有 500 来人，我基本都是在 280 名左右。而且，整个初二我都没有学物理，上物理课就睡觉，考试就交白卷。</p>
<p>为什么对物理这么抵触呢？这是因为开学不久的一次物理课，物理老师误会我在上课吃东西还狡辩，扇了我一巴掌。那时候心里一直记仇到大学，想着以后自己早晚有时间把这个物理老师暴打一顿。</p>
<h2> 初三开启学习模式</h2>
<p>初三上学期的时候突然觉悟，像是开窍了一样，当时就突然意识到自己马上就要升高中了，要开始好好搞搞学习了。</p>
<p>诶，其实也不算是开窍，主要还是为了让自己能在家附近上学，这样上网容易一些。因为当时我家就在我们当地的二中附近，附近有特别特别多的网吧，上网特别特别容易，加上我又能走读。</p>
<p>像我初中在的那个学校，年级前 80 的话基本才有可能考得上二中。经过努力，初三上学期的第一次月考，我直接从 280 多名进步到了年级 50 多名，有机会考入二中。当时还因为进步太大，被当作 <strong>进步之星</strong> 在讲台上给整个年级做演讲，分享经验。这也是我第一次在这么多人面前讲话，挺紧张的，但是挺爽的，在暗恋对象面前赚足了面子。</p>
<p>其实在初三的时候，我的网瘾还是很大。不过，我去玩游戏的前提都是自己把所有任务做完，并且上课听讲也相对比较认真的听。</p>
<p>初三那会，我通宵的次数变少了一些，但会经常晚上趁着家人睡觉了，偷偷跑出去玩到凌晨 2 点多回来。</p>
<p>当时，我们当地的高中有一个政策是每个学校的成绩比较优秀的学生可以参加 <strong>高中提前招生考试</strong> ，只要考上了就不用参加中考了。我当时也有幸参加了这次考试并成功进入了我们当地的二中。</p>
<p>在我参加高中提前考试前的一个晚上，我半夜 12 点趁着妈妈睡着，跑去了网吧玩 CF 到凌晨 3 点多回来。就那一次我被抓了现行，到家之后发现妈妈就坐在客厅等我，训斥一顿后，我就保证以后不再晚上偷偷跑出去了。</p>
<blockquote>
<p>这里要说明一点：我的智商我自己有自知之明的，属于比较普通的水平吧！前进很大的主要原因是自己基础还行，特别是英语和物理。英语是因为自己喜欢，加上小学就学了很多初中的英语课程。物理的话就很奇怪，虽然初二也不怎么听物理课，也不会物理，但是到了初三之后自己就突然开窍了。真的！我现在都感觉很奇怪。然后，到了高中之后，我的英语和物理依然是我最好的两门课。大学的兼职，我出去做家教都是教的高中物理。</p>
</blockquote>
<h2> 高中从小班掉到平行班</h2>
<p>由于参加了高中提前招生考试，我提前 4 个月就来到了高中，进入了小班，开始学习高中的课程。</p>
<p>上了高中的之后，我上课就偷偷看小说，神印王座、斗罗大陆、斗破苍穹很多小说都是当时看的。中午和晚上回家之后，就在家里玩几把 DNF。当时家里也买了电脑，姥爷给买的，是对自己顺利进入二中的奖励。到我卸载 DNF 的时候，已经练了 4 个满级的号，两个接近满级的号。</p>
<p>当时我的空间专门有一个相册里面放的全是 DNF 的一些照片和截图，无比痴迷于练级和刷图。</p>
<p>在高中待了不到一个月，我上体育课的时候不小心把腿摔断了，这也是我第一次感受到骨头断裂的头疼，实在是太难受了！</p>
<p>于是，我就开始休学养病。直到高中正式开学一个月之后，我才去上学，也没有参加军训。</p>
<p>由于我耽误了几个月的课程，因此没办法再进入小班，只能转到奥赛班。到了奥赛班之后，我继续把时间和经历都投入在游戏和小说上，于是我的成绩在奥赛班快接近倒数了。等到高二分班的时候，我成功被踢出奥赛班来到了最普通的平行班。</p>
<p><strong>我成功把自己从学校最好的小班玩到奥赛班，然后再到平行班。有点魔幻吧！</strong></p>
<h2> 高二开始奋起直追</h2>
<p>高中觉悟是在高二下学期的时候，当时是真的觉悟了，就突然觉得游戏不香了，觉得 DNF 也不好玩了，什么杀怪打装备不过是虚无，练了再多满级的 DNF 账号也屁用没有，没钱都是浮云。</p>
<p>我妈妈当时还很诧异，还奇怪地问我：“怎么不玩游戏了？”（我妈属于不怎么管我玩游戏的，她觉得这东西还是要靠自觉）。</p>
<p>于是，我便开始牟足劲学习，每天都沉迷学习无法自拔（豪不夸张），乐在其中。虽然晚自习上完回到家已经差不多 11 点了，但也并不感觉累，反而感觉很快乐，很充实。</p>
<p><strong>我的付出也很快得到了回报，我顺利返回了奥赛班。</strong> 当时，理科平行班大概有 7 个，每次考试都是平行班之间会单独排一个名次，小班和奥赛班不和我们一起排名次。后面的话，自己基本每次都能在平行班得第一，并且很多时候都是领先第二名 30 来分。由于成绩还算亮眼，高三上学期快结束的时候，我就向年级主任申请去了奥赛班。</p>
<h2> 高考前的失眠</h2>
<blockquote>
<p><strong>失败之后，不要抱怨外界因素，自始至终实际都是自己的问题，自己不够强大！</strong> 然后，高考前的失眠也是我自己问题，要怪只能怪自己，别的没有任何接口。</p>
</blockquote>
<p>我的高考经历其实还蛮坎坷的，毫不夸张的说，高考那今天可能是我到现在为止，经历的最难熬的时候，特别是在晚上。</p>
<p>我在高考那几天晚上都经历了失眠，想睡都睡不着那种痛苦想必很多人或许都体验过。</p>
<p>其实我在之前是从来没有过失眠的经历的。高考前夕，因为害怕自己睡不着，所以，我提前让妈妈去买了几瓶老师推荐的安神补脑液。我到现在还记得这个安神补脑液是敖东牌的。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/internet-addiction-teenager/image-20220625194714247.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>高考那几天的失眠，我觉得可能和我喝了老师推荐的安神补脑液有关系，又或者是我自己太过于紧张了。因为那几天睡觉总会感觉有很多蚂蚁在身上爬一样，身上还起了一些小痘痘。</p>
<p>然后，这里要格外说明一点，避免引起误导：<strong>睡不着本身就是自身的问题，上述言论并没有责怪这个补脑液的意思。</strong> 另外， 这款安神补脑液我去各个平台都查了一下，发现大家对他的评价都挺好，和我们老师当时推荐的理由差不多。如果大家需要改善睡眠的话，可以咨询相关医生之后尝试一下。</p>
<h2> 大学生活</h2>
<p>大学生活过的还是挺丰富的，我会偶尔通宵敲代码，也会偶尔半夜发疯跑出去和同学一起走走古城墙、去网吧锤一夜的 LOL。</p>
<p>大学生活专门写过一篇文章介绍：<a href="/about-the-author/my-college-life.html" target="blank">害，毕业三年了！</a> 。</p>
<h2> 总结</h2>
<p>整个初中我都属于有点网瘾少年的状态，不过初三的时候稍微克制一些。到了高二下学期的时候，自己才对游戏真的没有那么沉迷了。</p>
<p>对游戏不那么沉迷，也是因为自己意识到游戏终究只是消遣，学习才是当时最重要的事情。而且，我的游戏技术又不厉害，又不能靠游戏吃饭，什么打怪升级到最后不过是电脑中的二进制数据罢了！</p>
<p><strong>这玩意必须你自己意识到，不然，单纯靠父母监督真的很难改变！如果心不在学习上面的话，那同时是不可能学好的！</strong></p>
<p>我真的很反对父母过于干涉孩子的生活，强烈谴责很多父母把自己孩子的网瘾归咎于网络游戏，把自己孩子的暴力归咎于影视媒体。</p>
<p><strong>时刻把自己的孩子保护起来不是一件靠谱的事情，他终究要独自面对越来越多的诱惑。到了大学，很多被父母保护太好的孩子就直接废了。他们没有独立意识，没有抗拒诱惑的定力！</strong></p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/books2a6021b9-e7a0-41c4-b69e-a652f7bc3e12-20200802173601289.png" type="image/png"/>
    </item>
    <item>
      <title>JavaGuide 开源项目 100K Star 了！</title>
      <link>https://javaguide.cn/about-the-author/javaguide-100k-star.html</link>
      <guid>https://javaguide.cn/about-the-author/javaguide-100k-star.html</guid>
      <source url="https://javaguide.cn/rss.xml">JavaGuide 开源项目 100K Star 了！</source>
      <description>2021-03-21，晚上 12 点，肝完了我正在做的一个项目的前端的某块功能，我随手打开了我的 GitHub 主页。 好家伙！几天没注意，JavaGuide 这个项目直接上了 100K star。 JavaGuide 100k 里程碑</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>2021-03-21，晚上 12 点，肝完了我正在做的一个项目的前端的某块功能，我随手打开了<a href="https://github.com/Snailclimb" target="_blank" rel="noopener noreferrer">我的 GitHub 主页</a>。</p>
<p>好家伙！几天没注意，<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener noreferrer">JavaGuide</a> 这个项目直接上了 100K star。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/1&amp;e=1643644799&amp;token=kIxbL07-8jAj8w1n4s9zv64FuZZNEATmlU_Vm6zD:zANqh9HQEvvLPm6smyrjvjAt-Ik=.png" alt="JavaGuide 100k 里程碑" tabindex="0"><figcaption>JavaGuide 100k 里程碑</figcaption></figure>
<p>其实，这个真没啥好嘚瑟的。因为，教程类的含金量其实是比较低的，Star 数量比较多主要也是因为受众面比较广，大家觉得不错，点个 star 就相当于收藏了。很多特别优秀的框架，star 数量可能只有几 K。所以，单纯看 star 数量没啥意思，就当看个笑话吧！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/about-the-author/20210323132635635.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>维护这个项目的过程中，也被某些人 diss 过：“md 项目，没啥含金量，给国人丢脸！”。</p>
<p>对于说这类话的人，我觉得对我没啥影响，就持续完善，把 JavaGuide 做的更好吧！其实，国外的很多项目也是纯 MD 啊！就比如外国的朋友发起的 awesome 系列、求职面试系列。无需多说，行动自证！凎！</p>
<p>开源非常重要的一点就是协作。如果你开源了一个项目之后，就不再维护，别人给你提交 issue/pr，你都不处理，那开源也没啥意义了！</p>
<p>我的公号的小伙伴都是通过这个项目关注我的，趁着午休，简单复盘一下，也算是对关注这个项目的小伙伴负责。</p>
<p>我在大三开始准备秋招面试的时候，创建了 JavaGuide 这个项目，<strong>2018-05-07</strong> 这一天我提交了<strong>第 1 个 commit</strong>。</p>
<p>到今天（2021-03-23）为止，这个仓库已经累计有 <strong>2933</strong> 次 commit，累计有 <strong>207</strong> 位朋友参与到了项目中来。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/about-the-author/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>累计有 <strong>511</strong> 个 <strong>issue</strong> 和 <strong>575</strong> 个 <strong>PR</strong>。所有的 PR 都已经被处理，仅有 15 个左右的 issue 我还未抽出时间处理。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/about-the-author/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309224044850.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>其实，相比于 star 数量，你看看仓库的 issue 和 PR 更能说明你的项目是否有价值。</p>
<p>那些到处骗 star 甚至是 刷 star 的行为，我就不多说了，有点丢人。人家觉得你的项目还不错，能提供价值，自然就给你点 star 了。</p>
<p><strong>未来几年，我还是会持续完善 JavaGuide。</strong></p>
<p><strong>希望自己以后能开源一些有价值的轮子吧！继续加油！</strong></p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/1&amp;e=1643644799&amp;token=kIxbL07-8jAj8w1n4s9zv64FuZZNEATmlU_Vm6zD:zANqh9HQEvvLPm6smyrjvjAt-Ik=.png" type="image/png"/>
    </item>
    <item>
      <title>某培训机构盗我文章做成视频还上了B站热门</title>
      <link>https://javaguide.cn/about-the-author/my-article-was-stolen-and-made-into-video-and-it-became-popular.html</link>
      <guid>https://javaguide.cn/about-the-author/my-article-was-stolen-and-made-into-video-and-it-became-popular.html</guid>
      <source url="https://javaguide.cn/rss.xml">某培训机构盗我文章做成视频还上了B站热门</source>
      <description>时间回到 2021-02-25，我在刷哔哩哔哩的时候发现，哔哩哔哩某 UP 主（某培训机构），擅自将我在知乎的一个回答做成了视频。 原滋原味啊！我艹。甚至，连我开头的自我调侃还加上了！真的牛皮！ 你盗我原创，视频你用心做好点也行啊！至少也可以让这么优质的内容得到传播嘛！ 结果，好家伙，视频做的像坨屎一样，配音也贼违和! 麻烦这个培训机构看到这篇文章之后可以考虑换一个人做类似恶心的事情哈！这人完全没脑子啊！</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>时间回到 2021-02-25，我在刷哔哩哔哩的时候发现，哔哩哔哩某 UP 主（某培训机构），擅自将我在知乎的一个回答做成了视频。</p>
<p>原滋原味啊！我艹。甚至，连我开头的自我调侃还加上了！真的牛皮！</p>
<p>你盗我原创，视频你用心做好点也行啊！至少也可以让这么优质的内容得到传播嘛！</p>
<p>结果，好家伙，视频做的像坨屎一样，配音也贼违和!</p>
<p>麻烦这个培训机构看到这篇文章之后可以考虑换一个人做类似恶心的事情哈！这人完全没脑子啊！</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-db6b9cf323930786fa2bec8b1e1bfaad732.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oscimg.oschina.net/oscnet/up-6395603ab441b74511c6eda28efee8937d7.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oscimg.oschina.net/oscnet/up-921f60a5c7cee2c5c2eb30f4f7048f648e1.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oscimg.oschina.net/oscnet/up-acc82a797bd01e27f5b7d5d327b32a21d4e.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>我随便找了一个视频看，发现也还是盗用别人的原创。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-48d0c5ab086265ae19b7396bc59de2c2daf.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oscimg.oschina.net/oscnet/up-366abf0656007ff96551064104e60740a41.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>其他的视频就不用多看了，是否还是剽窃别人的原创，原封不动地做成视频，大家心里应该有数。</p>
<p>他们这样做的目的就是一个：<strong>引流到自己的 QQ 群，然后忽悠你买课程。</strong></p>
<p>我并不认为是这完全都是培训机构的问题。培训机构的员工为了流量而做这种恶心的事情，也导致了现在这种事情被越来越频繁地发生。</p>
<p>所以，你会发现，哔哩哔哩和知乎上有越来越多培训机构的小号，到处剽窃原创，盗发。</p>
<p>我身边很多原创号主的文章都经常被某些培训机构盗发。</p>
<p>有时候真的会比较生气，毕竟你自己辛辛苦苦的原创，别人复制粘贴一下就白嫖了！</p>
<p>但是，我相信，这种靠剽窃别人原创来吸引流量的行为，终究只是跳梁小丑的行为罢了！</p>
<p>只有那些用心输出内容的创作者，才能走的更远，更安稳！</p>
<p>后来，我在我的公众号上发了一篇名为<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247500005&amp;idx=1&amp;sn=7351e22619654492d3cf567bff9d87f0&amp;chksm=cea18f2ef9d606384e0265b9318e004646c03b8a69f2801698d2f9e0e6bdfec0a1185ac3ab17&amp;token=2146952532&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">《好家伙！某培训机构盗我文章做成视频还上了热门》</a> 的文章，吐槽自己的原创被某机构白嫖。</p>
<p>谁能想到，培训机构的人竟然找人来让我删文章了！讲真，这俩人是真的奇葩啊！</p>
<figure><img src="https://oss.javaguide.cn/javaguide/8f8ccafcf5b764a2289a9c276c30728d.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/javaguide/a0a4a45d7ec7b1a2622b2a38629e9b09.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>还让我格局大点？我去你丫的！明明就是我的原创，你自己不删，反而找人联系我删除！有脑子不？</p>
<p>其实，我这人是比较好说话的，现实生活中脾气也是出了名的好（前提是没有触犯到我的原则的情况）。</p>
<p>搞笑的是！他们在让我删文的同时，他们 B 站盗发的视频还都在，还在继续为他们引流。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/86f659a93ce5b639526c8d2bd20b2fbe.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/github/javaguide/about-the-author/be6e0fd23146de3f6224b4d853c59ce7.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>如果他们把账号注销了，我或许还能考虑放一手。但是，文章是肯定不会删的。</p>
<p>现在，看后续情况吧！我随时可以动用法律来维护自己的权益，只是看我想不想，毕竟也挺麻烦对吧！</p>
<p>大家不用担心，这都是小事，我女朋友就是学法律的，国内的某法学双一流学校。</p>
<p>咱不怕事！凎！！！</p>
]]></content:encoded>
      <enclosure url="https://oscimg.oschina.net/oscnet/up-db6b9cf323930786fa2bec8b1e1bfaad732.png" type="image/png"/>
    </item>
    <item>
      <title>害，毕业三年了！</title>
      <link>https://javaguide.cn/about-the-author/my-college-life.html</link>
      <guid>https://javaguide.cn/about-the-author/my-college-life.html</guid>
      <source url="https://javaguide.cn/rss.xml">害，毕业三年了！</source>
      <description>关于初高中的生活，可以看 2020 年我写的 我曾经也是网瘾少年 这篇文章。 2019 年 6 月份毕业，距今已经过去了 3 年。趁着高考以及应届生毕业之际，简单聊聊自己的大学生活。 下面是正文。 我本科毕业于荆州校区的长江大学，一所不起眼的双非一本。 在这里度过的四年大学生活还是过的挺开心的，直到现在，我依然非常怀念！</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>关于初高中的生活，可以看 2020 年我写的 <a href="/about-the-author/internet-addiction-teenager.html" target="blank">我曾经也是网瘾少年</a> 这篇文章。</p>
</blockquote>
<p>2019 年 6 月份毕业，距今已经过去了 3 年。趁着高考以及应届生毕业之际，简单聊聊自己的大学生活。</p>
<p>下面是正文。</p>
<p>我本科毕业于荆州校区的长江大学，一所不起眼的双非一本。</p>
<p>在这里度过的四年大学生活还是过的挺开心的，直到现在，我依然非常怀念！</p>
<p>在学校的这几年的生活，总体来说，还算是比较丰富多彩的。我会偶尔通宵敲代码，也会偶尔半夜发疯跑出去和同学一起走走古城墙、去网吧锤一夜的 LOL。</p>
<p>写下这篇杂文，记录自己逝去的大学生活！希望未来继续砥砺前行，不忘初心！</p>
<h2> 大一</h2>
<p>大一那会，我没有把精力放在学习编程上，大部分时间都在参加课外活动。</p>
<p>或许是因为来到了一座新鲜的城市，对周围的一切都充满了兴趣。又或许是因为当时的我还比较懵懂，也没有任何学习方向。</p>
<p>这一年，我和班里的一群新同学去逛了荆州的很多地方比如荆州博物馆、长江大桥、张居正故居、关帝庙。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/41239dd7d18642f7af201292ead94f1a~tplv-k3u1fbpfcp-zoom-1.image.png" alt="大一的一次班级出行" tabindex="0"><figcaption>大一的一次班级出行</figcaption></figure>
<p>即使如此，我当时还是对未来充满了希望，憧憬着工作之后的生活。</p>
<p>我还记得当时我们 6 个室友那会一起聊天的时候，其他 5 个室友都觉得说未来找工作能找一个 6k 的就很不错了。我当时就说：“怎么得至少也要 8k 吧！”。他们无言，觉得我的想法太天真。</p>
<p>其实，我当时内心想的是至少是月薪 1w 起步，只是不太好意思直接说出来。</p>
<p>我不爱出风头，性格有点内向。刚上大学那会，内心还是有一点不自信，干什么事情都畏畏缩缩，还是迫切希望改变自己的！</p>
<p>于是，凭借着一腔热血，我尝试了很多我之前从未尝试过的事情：<strong>露营</strong>、<strong>户外烧烤</strong>、<strong>公交车演讲</strong>、<strong>环跑古城墙</strong>、<strong>徒步旅行</strong>、<strong>异地求生</strong>、<strong>圣诞节卖苹果</strong>、<strong>元旦晚会演出</strong>...。</p>
<p>下面这些都是我和社团的小伙伴利用课外时间自己做的，在圣诞节那周基本都卖完了。我记得，为了能够多卖一些，我们还挨个去每一个寝室推销了一遍。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/7cf1a2da505249a58e1f29834dbac435~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>我还参加了大一元旦晚会，不过，那次演出我还是没放开，说实话，感觉没有表现出应该有的那味。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/850cae1f8c644c5d920140f66ae9303d~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>经过这次演出之后，我发现我是真的没有表演的天赋，很僵硬。并且，这种僵硬呆板是自己付出努力之后也没办法改变的。</p>
<p>下图是某一次社团聚餐，我喝的有点小醉之后，被朋友拍下的。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/82a503e365354bd1bf190540fbf1039a~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>那时候，还经常和和社团的几位小伙伴一起去夜走荆州古城墙。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/007a83e6d26c43b9aa6e0b0266c3314b~tplv-k3u1fbpfcp-zoom-1.image.png" alt="某一次要去夜走古城墙的路上我拍的" tabindex="0"><figcaption>某一次要去夜走古城墙的路上我拍的</figcaption></figure>
<p>不知道社团的大家现在过得怎么样呢？</p>
<p>虽然这些经历对于我未来的工作和发展其实没有任何帮助，但却让我的大学生活更加完整，经历了更多有趣的事情，有了更多可以回忆的经历。</p>
<p>我的室友们都窝在寝室玩游戏、玩手机的时候，我很庆幸自己做了这些事情。</p>
<p>个人感觉，大一的时候参加一些不错的社团活动，认识一些志同道合的朋友还是很不错的！</p>
<p><strong>参加课外活动之余，CS 专业的小伙伴，尽量早一点养成一个好的编程习惯，学好一门编程语言，然后平时没事就刷刷算法题。</strong></p>
<h3> 办补习班</h3>
<p>大一暑假的时候，我作为负责人，在孝感的小乡镇上办过 5 个补习班（本来是 7 个，后来砍掉了 2 个） 。</p>
<p>从租房子、租借桌椅再到招生基本都是从零开始做的。</p>
<p>每个周末我都会从荆州坐车跑到孝感，在各个县城之间来回跑。绝大部分时候，只有我一个人，偶尔也会有几个社团的小伙伴陪我一起。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/6ee6358c236144d8a8a205cc6bc99b9b~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>记忆犹新，那一年孝感也是闹洪水，还挺严重的。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/image-20210820201908759.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>有一次我差点回不去学校参加期末考试。虽然没有备考，但是也没有挂过任何一门课，甚至很多科目考的还不错。不过，这还是对我绩点产生了比较大的影响，导致我后面没有机会拿到奖学金。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/3c5fe7af43ba4e348244df1692500fce~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这次比较赶时间，所以就坐的是火车回学校。在火车上竟然还和别人撞箱子了！</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/570f5791aeb54fa1a76892b69e46fec2~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>当时去小乡镇上的时候，自己最差的时候住过 15 元的旅馆。真的是 15 元，你没看错。就那种老旧民房的小破屋，没有独卫，床上用品也很不卫生，还不能洗澡。</p>
<p>下面这个还是我住过最豪华的一个，因为当时坐客车去了孝感之后，突然下大雨，我就在车站附近找了一个相对便宜点的。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/687c3ede3f094c65a72d812ca0f06bb4~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>为了以更低的价钱租到房子，我经常和房东砍价砍的面红耳赤。</p>
<p>说句心里话，这些都是我不太愿意去做的事情，我本身属于比较爱面子而且不那么自信的人。</p>
<p>当时，我需要在各个乡镇来回跑，每天就直接顶着太阳晒 。每次吃饭都特别香，随便炒个蔬菜都能吃几碗米饭。</p>
<p>我本身是比较挑食的，这次经历让我真正体会到人饿了之后吃嘛嘛香!</p>
<p>我一个人给 6 个老师加上 10 来个学生和房东们一家做了一个多月的饭，我的厨艺也因此得到了很大的锻炼。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/2e3b6101abcd46a8a213c08782aeac33~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这些学生有小学的，也有初中的，都比较听话。有很多还是留守儿童，爸爸妈妈在外打工，跟着爷爷奶奶一起生活。</p>
<p>加上我的话，我们一共有 4 位老师，我主要讲的是初中和高中的物理课。</p>
<p>学生们都挺听话，没有出现和我们几个老师闹过矛盾。只有两个调皮的小学生被我训斥之后，怀恨在心，写下了一些让我忍俊不禁的话！哈哈哈哈！太可爱了！</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/3680cead2c0f4165bb4865f038326b61~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>离开之前的前一天的晚上，我和老师们商量请一些近点的同学们来吃饭。我们一大早就出去买菜了，下图是做成后的成品。虽然是比较简单的一顿饭，但我们吃的特别香。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/f36bfd719b9b4463b2f1d3edc51faa97~tplv-k3u1fbpfcp-zoom-1.image.png" alt="补习班的最后一顿晚餐" tabindex="0"><figcaption>补习班的最后一顿晚餐</figcaption></figure>
<p>那天晚上还有几个家长专门跑过来看我做饭，家长们说他们的孩子非常喜欢我做的饭，哈哈哈！我表面淡然说自己做的不好，实则内心暗暗自喜，就很“闷骚”的一个人，哈哈哈！</p>
<p>不知道这些学生们，现在怎么样呢？怀念啊！</p>
<p>培训班结束，我回家之后，我爸妈都以为我是逃荒回来的。</p>
<h3> 自己赚钱去孤儿院</h3>
<p>大一尾声的时候，还做了一件非常有意义的事情。我和我的朋友们去了一次孤儿院（荆州私立孤儿教养院）。这个孤儿院曾经还被多家电视台报道过，目前也被百度百科收录。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/db8f5c276f4d4a7c9d7bd1e6100de301~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>孤儿院的孩子们，大多是一些无父无母或者本身有一些疾病被父母遗弃的孩子。</p>
<p>去之前，我们买了很多小孩子的玩具、文具、零食这些东西。这些钱的来源也比较有意义，都是我和社团的一些小伙伴自己去外面兼职赚的一些钱。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/cf43853c49bd489a9fc0ee437a2af432~tplv-k3u1fbpfcp-zoom-1.image.png" alt="离开之前和创建孤儿院的老爷爷的一张合照" tabindex="0"><figcaption>离开之前和创建孤儿院的老爷爷的一张合照</figcaption></figure>
<p>勿以善小而不为！引用《爱的风险》这首歌的一句歌词：“只要人人都献出一点爱，世界将变成美好的人间” 。</p>
<p>我想看看这个孤儿院的现状，于是在网上有搜了一下，看到了去年 1 月份荆州新闻网的一份报道。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/0ac27206389c498882dd7f6f440c6abb~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>孤儿教养院创办 33 年来，累计收养孤儿 85 人，其中有 5 人参军入伍报效祖国，20 人上大学，有的早已参加工作并成家立业。</p>
<p>叔叔也慢慢老了，白发越来越多。有点心酸，想哭，希望有机会再回去看看您！一定会的！</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/ea803a99c08149f892ca29e784653503~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 徒步旅行</h3>
<p>大一那会还有一件让我印象非常深刻的事情——徒步旅行。</p>
<p>我和一群社团的小伙伴，徒步走了接近 45 公里。我们从学校的西校区，徒步走到了枝江那边的一个沙滩。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/94ca5b6c5ea84dfb9e12b7a718587ea3~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>是真的全程步行，这还是我第一次走这么远。</p>
<p>走到目的地的时候，我的双腿已经不听使唤，脚底被磨了很多水泡。</p>
<p>我们在沙滩上露营，烧烤，唱歌跳舞，一直到第二天早上才踏上回学校的路程。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/8120d45d30254c908f9db20b3c00f514~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 大二</h2>
<p>到了大二，我开始把自己的重点转移到编程知识的学习上。</p>
<p>不过，我遇到一个让我比较纠结的问题：社团里玩的最好的几个朋友为了能让社团能继续延续下去，希望我和他们一起来继续带这个团队。</p>
<p>但是，我当时已经规划好了自己大二要做的事情，真的想把精力都放在编程学习上，想要好好沉淀一下自己的技术。</p>
<p>迫于无奈，我最终还是妥协，选择了和朋友一起带社团。毕竟，遇到几个真心的朋友属实不易！</p>
<h3> 带社团</h3>
<p>带社团确实需要花费很多业余时间，除了每周要从东校区打车到西校区带着他们跑步之外，我们还需要经常带着他们组织一些活动。</p>
<p>比如我们一起去了长江边上烧烤露营。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/8a6945ccc087017c1f96ee93f3af8178-20220608154206500.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>再比如我们一起去环跑了古城墙。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/2cfba22049e8b99e11955bcb7662d790.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>大学那会，我还是非常热爱运动的！</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/2dd503a60f814a7a953816bc3b5194cd~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>大二那会，我就已经环跑了 3 次古城墙。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/949543b550e847d5a7314b7e1842489b~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 加入长大在线</h3>
<p>在大二的时候，我还加入了学校党委宣传部下的组织——长大在线。这是一个比较偏技术性质的组织，主要负责帮学校做做网站、APP 啥的。</p>
<p>在百度上，还能搜索到长大在线的词条。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/34ecf650120a4289a68b7549eb7d00cc~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>莫名其妙还被发了一个记者证，哈哈哈！</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20220606121111042.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>我选的是安卓组，然后我就开始了学习安卓开发的旅程。</p>
<p>刚加入这个组织的时候，我连 HTML、CSS、JS、Java、Linux 这些名词都不知道啥意思。</p>
<p>再到后面，我留下来当了副站长，继续为组织服务了大半年多。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20220608121413761.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 第一次参加比赛</h3>
<p>那会也比较喜欢去参加一些学校的比赛，也获得过一些不错的名次，让我印象最深的是一次 PPT 大赛，这也是我第一次参加学校的比赛。</p>
<p>参加比赛之前，自己也是一个 PPT 小白，苦心学了一周多之后，我的一个作品竟然顺利获得了第一名。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20220608121446529.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>也正是因为这次比赛，我免费拥有了自己的第一个机械键盘，这个键盘陪我度过了后面的大学生活。</p>
<h3> 确定技术方向</h3>
<p>在大二上学期末，我最终确定了自己以后要走的技术方向是走 Java 后端。于是，我就开始制定学习计划，开始了自己的 Java 后端领域的打怪升级之路。</p>
<p>每次忙到很晚，一个人走在校园的时候还是很爽的！非常喜欢这种安静的感觉。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/336fd489ce314d259d6090194f237e1b~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>当时身体素质真好，熬夜之后第二天照常起来上课学习。现在熬个夜，后面两天直接就废了！</p>
<p>到了大三，我基本把 Java 后端领域一些必备的技术都给过了一遍，还用自己学的东西做了两个实战项目。</p>
<p>由于缺少正确的人指导，我当时学的时候也走了很多弯路，浪费了不少时间（我很羡慕大家能有我，就很厚脸皮！）。</p>
<p>那个时候还贼自恋，没事就喜欢自拍一张。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20210820202341008.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>国庆节的时候也不回家，继续在学校刷 Java 视频和书籍。</p>
<p>我记得那次国庆节的时候效率还是非常高的，学习起来也特别有动力。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/WX20210820-203458.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 大三</h2>
<p>整个大三，我依然没有周末，基本没有什么娱乐时间。绝大部分时间都是一个人在寝室默默学习，平时偶尔也会去图书馆和办公室。</p>
<p>虽然室友经常会玩游戏和看剧什么的，但是我对我并没有什么影响。一个人戴上耳机之后，世界仿佛都是自己的。</p>
<p>和很多大佬可能不太一样，比起图书馆和办公室，我在寝室的学习效率更高一些。</p>
<h3> JavaGuide 诞生</h3>
<p>我的开源项目 JavaGuide 和公众号都是这一年启动的。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/the-birth-of-javaguide.jpeg" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>目前的话，JavaGuide 也已经 100k star ，我的公众号也已经有 15w+ 的关注。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20210820211926742.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 接私活赚钱</h3>
<p>一些机遇也让我这一年也接了一些私活赚钱。为了能够顺利交付，偶尔也会熬夜。当时的心态是即使熬夜也还是很开心、充实。每次想到自己通过技术赚到了钱，就会非常有动力。</p>
<p>我也曾写过文章分享过接私活的经历：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247499539&amp;idx=1&amp;sn=ff153f9bd98bb3109b1f14e58ed9a785&amp;chksm=cea1b0d8f9d639cee4744f845042df6b1fc319f4383b87eba76a944c2648c81a51c28d25e3b6&amp;token=2114015135&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">唠唠嗑！大学那会接私活赚了 3w+</a> 。</p>
<p>不过，我接的几个私活也是比较杂的，并不太适合作为简历上的项目经历。</p>
<p>于是，为了能让简历上的项目经历看着更好看一些，我自己也找了两个项目做。一个是我跟着视频一起做的，是一个商城类型的项目。另外一个是自己根据自己的想法做的，是一个视频网站类型的项目。</p>
<p>商城类型的项目大概的架构图如下（没有找到当时自己画的原图）：</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/206fab84bf5b4c048f8a88bc68c942f6~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>那会商城项目貌似也已经烂大街了，用的人比较多。为了让自己的商城项目更有竞争力，对照着视频教程做完之后，我加入了很多自己的元素比如更换消息队列 ActiveMQ 为 Kafka、增加二级缓存。</p>
<p>在暑假的时候，还和同学老师一起做了一个员工绩效管理的企业真实项目。这个项目和我刚进公司做的项目，非常非常相似，不过公司做得可能更高级点 ，代码质量也要更高一些。实在是太巧了！</p>
<p>我记得当时自己独立做项目的时候，遇到了很多问题。<strong>就很多时候，你看书很容易就明白的东西，等到你实践的时候，总是会遇到一些小问题。我一般都是通过 Google 搜索解决的，用好搜索引擎真的能解决自己 99% 的问题。</strong></p>
<h3> 参加软件设计大赛</h3>
<p>大三这一年也有遗憾吧！我和几位志同道合的朋友一起参加过一个软件设计大赛，我们花了接近两个月做的系统顺利进入了复赛。</p>
<p>不过，我后面因为自己个人觉得再花时间做这个系统学不到什么东西还浪费时间就直接退出了。然后，整个团队就散了。</p>
<p>其实，先来回头看也是可以学到东西的，自己当时的心态有点飘了吧，心态有一些好高骛远。</p>
<p>现在想来，还是挺对不起那些一起奋斗到深夜的小伙伴。</p>
<p>人生就是这样，一生很长，任何时候你回头看过去的自己，肯定都会有让自己后悔的事情。</p>
<h3> 放弃读研</h3>
<p>当时，我也有纠结过是否读研，毕竟学校确实一般，读个研确实能够镀点金，提升一下学历。</p>
<p>不过，我最终还是放弃了读研。当时比较自信，心里就觉得自己不需要读研也能够找到好工作。</p>
<h3> 实习</h3>
<p>大三还找了一家离学校不远的公司实习，一位老学长创办的。不过，说实话哈，总体实习体验很差，没有学到什么东西不说，还耽误了自己很多已经计划好的事情。</p>
<p>我记得当时这个公司很多项目还是在用 JSP，用的技术很老。如果是老项目还好，我看几个月前启动的项目也还是用的 JSP，就很离谱。。。</p>
<p>当时真的很难受，而且一来就想着让你上手干活，活还贼多，干不完还想让你免费加班。。。</p>
<p>当时也没办法，因为荆州实在是找不到其他公司可以让你实习，你又没办法跑到其他城市去实习。这也是放弃选择一二线城市的学校带来的问题吧！</p>
<h2> 大四</h2>
<h3> 开始找工作</h3>
<p>找实习找工作时候，才知道大学所在的城市的重要性。</p>
<p>由于，我的学校在荆州，而且本身学校就很一般，因此，基本没有什么比较好的企业来招人。</p>
<p>当时，唯一一个还算可以的就是苏宁，不过，我遇到的那个苏宁的 HR 还挺恶心的，第一轮面试的时候就开始压薪资了，问我能不能加班。然后，我也就对苏宁没有了想法。</p>
<p>秋招我犯了一个比较严重的问题，那就是投递简历开始的太晚。我是把学校的项目差不多做完之后，才开始在网上投递简历。这个时候，暑假差不多已经结束了，秋招基本已经尾声了。</p>
<p>可能也和学校环境有一些关系，当时，身边的同学没有参加秋招的。大三暑假的时候，都跑去搞学院组织的实习。我是留在学校做项目，没有去参加那次实习。</p>
<p>我觉得学校还是非常有必要提醒学生们把握住秋招这次不错的机会的！</p>
<p>在网上投递了一些简历之后，很多笔试我觉得做的还可以的都没有回应。</p>
<p>我有点慌了！于是，我就从荆州来到武汉，想在武大华科这些不错的学校参加一些宣讲会。</p>
<p>到了武汉之后，我花了一天时间找了一个蛋壳公寓住下。第二天，我就跑去武汉理工大学参加宣讲会。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20210820204919942.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>当天，我就面试了自己求职过程中的第一家公司—<strong>玄武科技</strong>。</p>
<p>就是这样一家中小型的公司，当时来求职面试的很多都是武大华科的学生。不过，他们之中一定有很多人和我一样，就是单纯来刷一波经验，找找信心。</p>
<p>整个过程也就持续了 3 天左右，我就顺利的拿下了玄武科技的 offer。不过，最终没有签约。</p>
<h3> 拿到 Offer</h3>
<p>来武汉之前，我实际上已经在网上投递了 <strong>ThoughtWorks</strong>，并且，作业也已经通过了。</p>
<p>当时，我对 ThoughtWorks 是最有好感的，内心的想法就是：“拿下了 ThoughtWorks，就不再面试其他公司了”。</p>
<p>奈何 ThoughtWorks 的进度太慢，担心之余，才来武汉面试其他公司留个保底。</p>
<p>不过，我最终如愿以偿获得了 ThoughtWorks 的 offer。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/9ad97dcc5038499b96239dd826c471b7~tplv-k3u1fbpfcp-zoom-1.image.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>面试 ThoughtWorks 的过程就不多说了，我在<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484842&amp;idx=1&amp;sn=4489dfab0ef2479122b71407855afc71&amp;chksm=cea24a61f9d5c3774a8ed67c5fcc3234cb0741fbe831152986e5d1c8fb4f36a003f4fb2f247e&amp;scene=178&amp;cur_album_id=1323354342556057602#rd" target="_blank" rel="noopener noreferrer">《结束了我短暂的秋招，说点自己的感受》</a>这篇文章中有提到。</p>
<h2> 几点建议</h2>
<p>说几点自己的建议，虽然我不优秀，但毕竟你可以更优秀：</p>
<ol>
<li>确定好自己的方向，搞清你是要考研还是要找工作。如果你要考研的话，好好上每一门可能是考研的科目，平时有时间也要敲代码，最好也能做一个项目，对你复试还有能力提升都有帮助。找工作的话，尽早确定好自己的方向，心里有一个规划，搞清自己的优势和劣势。</li>
<li>尽可能早一点以求职为导向来学习，这样更有针对性，并且可以大概率减己处在迷茫的时间，很大程度上还可以让自己少走很多弯路。</li>
<li>自学很重要，养成自学的习惯，学会学习。</li>
<li>不要觉得逃课就是坏学生。我大学逃了很多课，逃课的大部分时间都是在学自己觉得更重要的东西，逃的大部分也是不那么重要并且不会影响我毕业的课。</li>
<li>大学恋爱还是相对来说很纯粹的，遇到合适的可以尝试去了解一下， 别人不喜欢你的话不要死缠烂打，这种东西强求不来。你不得不承认，你了解一个人欲望还是始于他的长相而并不是有趣的灵魂。</li>
<li>管理自己的身材，没事去跑跑步，别当油腻男。</li>
<li>别太看重绩点。我觉得绩点对于找工作还有考研实际的作用都可以忽略不计，不过不挂科还是比较重要的。但是，绩点确实在奖学金评选和保研名额选取上占有最大的分量。</li>
<li>别太功利性。做事情以及学习知识都不要奢求它能立马带给你什么，坚持和功利往往是成反比的。</li>
<li>......</li>
</ol>
<h2> 后记</h2>
<p>我们在找工作的过程中难免会遇到卡学历的情况，特别是我们这种学校本身就比较一般的。我觉得这真的不可厚非，没有什么不公平，要怪就只能怪自己没有考上好的学校。</p>
<p><strong>考虑到招聘成本和时间，公司一定更愿意在学校本身比较好的人中选拔人才。</strong></p>
<p>我也曾抱怨过自己为什么不在 211 或者 985 的学校。但，其实静下心来想一想，本来考不上 211 或者 985 就是自己的问题，而且在我们计算机这个领域，学历本身就相对于其他专业稍微要更加公平一点。</p>
<p>我身边专科、三本毕业就进大厂的人也比比皆是。我这句话真不是鸡汤，为了鼓励一些学校出身不太好的朋友。</p>
<p><strong>多行动，少抱怨。</strong></p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/about-the-author/college-life/41239dd7d18642f7af201292ead94f1a~tplv-k3u1fbpfcp-zoom-1.image.png" type="image/png"/>
    </item>
    <item>
      <title>个人介绍 Q&amp;A</title>
      <link>https://javaguide.cn/about-the-author/</link>
      <guid>https://javaguide.cn/about-the-author/</guid>
      <source url="https://javaguide.cn/rss.xml">个人介绍 Q&amp;A</source>
      <description>这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版：《Java 面试指北 》 (质量很高，专为面试打造，配合 JavaGuide 食用)。 知识星球：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 JavaGuide 知识星球（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">这是一则或许对你有用的小广告</p>
<ul>
<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北 》</a></strong> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li>
<li><strong>知识星球</strong>：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 <strong><a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球</a></strong>（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</li>
</ul>
</div>
<p>这篇文章我会通过 Q&amp;A 的形式简单介绍一下我自己。</p>
<h2> 我是什么时候毕业的？</h2>
<p>很多老读者应该比较清楚，我是 19 年本科毕业的，刚毕业就去了某家外企“养老”。</p>
<p>我的学校背景是比较差的，高考失利，勉强过了一本线 20 来分，去了荆州的一所很普通的双非一本。不过，还好我没有因为学校而放弃自己，反倒是比身边的同学都要更努力，整个大学还算过的比较充实。</p>
<p>下面这张是当时拍的毕业照（后排最中间的就是我）：</p>
<figure><img src="https://oss.javaguide.cn/javaguide/个人介绍.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 我坚持写了多久博客？</h2>
<p>时间真快啊！我自己是从大二开始写博客的。那时候就是随意地在博客平台上发发自己的学习笔记和自己写的程序。就比如 <a href="/cs-basics/network/computer-network-xiexiren-summary.html" target="blank">谢希仁老师的《计算机网络》内容总结</a> 这篇文章就是我在大二学习计算机网络这门课的时候对照着教材总结的。</p>
<p>身边也有很多小伙伴经常问我：“我现在写博客还晚么？”</p>
<p>我觉得哈！如果你想做什么事情，尽量少问迟不迟，多问自己值不值得，只要你觉得有意义，就尽快开始做吧！人生很奇妙，我们每一步的重大决定，都会对自己未来的人生轨迹产生影响。是好还是坏，也只有我们自己知道了！</p>
<p>对我自己来说，坚持写博客这一项决定对我人生轨迹产生的影响是非常正面的！所以，我也推荐大家养成坚持写博客的习惯。</p>
<h2> 我在大学期间赚了多少钱？</h2>
<p>在校期间，我还通过办培训班、接私活、技术培训、编程竞赛等方式变现 20w+，成功实现“经济独立”。我用自己赚的钱去了重庆、三亚、恩施、青岛等地旅游，还给家里补贴了很多，减轻了父母的负担。</p>
<p>下面这张是我大一下学期办补习班的时候拍的（离开前的最后一顿饭）：</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f36bfd719b9b4463b2f1d3edc51faa97~tplv-k3u1fbpfcp-zoom-1.image" alt="补习班的最后一顿晚餐" tabindex="0"><figcaption>补习班的最后一顿晚餐</figcaption></figure>
<p>下面这张是我大三去三亚的时候拍的：</p>
<figure><img src="https://oss.javaguide.cn/javaguide/psc.jpeg" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>其实，我在大学就这么努力地开始赚钱，也主要是因为家庭条件太一般，父母赚钱都太辛苦了！也正是因为我自己迫切地想要减轻父母的负担，所以才会去尝试这么多赚钱的方法。</p>
<p>我发现做咱们程序员这行的，很多人的家庭条件都挺一般的，选择这个行业的很大原因不是因为自己喜欢，而是为了多赚点钱。</p>
<p>如果你也想通过接私活变现的话，可以在我的公众号后台回复“<strong>接私活</strong>”来了解一些我的个人经验分享。</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2020-8/1d38ea3b-da2a-41df-9ac4-087356e9b5b4-20200802185910087.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 为什么自称 Guide？</h2>
<p>可能是因为我的项目名字叫做 JavaGuide , 所以导致有很多人称呼我为 <strong>Guide 哥</strong>。</p>
<p>后面，为了读者更方便称呼，我就将自己的笔名改成了 <strong>Guide</strong>。</p>
<p>我早期写文章用的笔名是 SnailClimb 。很多人不知道这个名字是啥意思，给大家拆解一下就清楚了。SnailClimb=Snail（蜗牛）+Climb(攀登)。我从小就非常喜欢听周杰伦的歌曲，特别是他的《蜗牛》🐌 这首歌曲，另外，当年我高考发挥的算是比较失常，上了大学之后还算是比较“奋青”，所以，我就给自己起的笔名叫做 SnailClimb ，寓意自己要不断向上攀登，嘿嘿 😁</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37599546f3b34b92a32db579a225aa45~tplv-k3u1fbpfcp-watermark.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 后记</h2>
<p>凡心所向，素履所往，生如逆旅，一苇以航。</p>
<p>生活本就是有苦有甜。共勉！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号" tabindex="0"><figcaption>JavaGuide 官方公众号</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/javaguide/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D.png" type="image/png"/>
    </item>
    <item>
      <title>坚持写技术博客六年了!</title>
      <link>https://javaguide.cn/about-the-author/writing-technology-blog-six-years.html</link>
      <guid>https://javaguide.cn/about-the-author/writing-technology-blog-six-years.html</guid>
      <source url="https://javaguide.cn/rss.xml">坚持写技术博客六年了!</source>
      <description>坚持写技术博客已经有六年了，也算是一个小小的里程碑了。 一开始，我写技术博客就是简单地总结自己课堂上学习的课程比如网络、操作系统。渐渐地，我开始撰写一些更为系统化的知识点详解和面试常见问题总结。 JavaGuide 首页 许多人都想写技术博客，但却不清楚这对他们有何好处。有些人开始写技术博客，却不知道如何坚持下去，也不知道该写些什么。这篇文章我会认真聊聊我对记录技术博客的一些看法和心得，或许可以帮助你解决这些问题。</description>
      <category>走近作者</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>坚持写技术博客已经有六年了，也算是一个小小的里程碑了。</p>
<p>一开始，我写技术博客就是简单地总结自己课堂上学习的课程比如网络、操作系统。渐渐地，我开始撰写一些更为系统化的知识点详解和面试常见问题总结。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20230408131717766.png" alt="JavaGuide 首页" tabindex="0"><figcaption>JavaGuide 首页</figcaption></figure>
<p>许多人都想写技术博客，但却不清楚这对他们有何好处。有些人开始写技术博客，却不知道如何坚持下去，也不知道该写些什么。这篇文章我会认真聊聊我对记录技术博客的一些看法和心得，或许可以帮助你解决这些问题。</p>
<h2> 写技术博客有哪些好处？</h2>
<h3> 学习效果更好，加深知识点的认识</h3>
<p><strong>费曼学习法</strong> 大家应该已经比较清楚了，这是一个经过实践证明非常有效的学习方式。费曼学习法的命名源自 Richard Feynman，这位物理学家曾获得过诺贝尔物理学奖，也曾参与过曼哈顿计划。</p>
<p>所谓费曼学习法，就是当你学习了一个新知识之后，想象自己是一个老师：用最简单、最浅显直白的话复述、表达复杂深奥的知识，最好不要使用行业术语，让非行业内的人也能听懂。为了达到这种效果，最好想象你是在给一个 80 多岁或 8 岁的小孩子上课，甚至他们都能听懂。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/v2-19373c2e61873c5083ee4b1d1523f8f5_720w.png" alt="教授别人学习效果最好" tabindex="0"><figcaption>教授别人学习效果最好</figcaption></figure>
<p>看书、看视频这类都属于是被动学习，学习效果比较差。费曼学习方法属于主动学习，学习效果非常好。</p>
<p><strong>写技术博客实际就是教别人的一种方式。</strong> 不过，记录技术博客的时候是可以有专业术语（除非你的文章群体是非技术人员），只是你需要用自己的话表述出来，尽量让别人一看就懂。<strong>切忌照搬书籍或者直接复制粘贴其他人的总结！</strong></p>
<p>如果我们被动的学习某个知识点，可能大部分时候都是仅仅满足自己能够会用的层面，你并不会深究其原理，甚至很多关键概念都没搞懂。</p>
<p>如果你是要将你所学到的知识总结成一篇博客的话，一定会加深你对这个知识点的思考。很多时候，你为了将一个知识点讲清楚，你回去查阅很多资料，甚至需要查看很多源码，这些细小的积累在潜移默化中加深了你对这个知识点的认识。</p>
<p>甚至，我还经常会遇到这种情况：<strong>写博客的过程中，自己突然意识到自己对于某个知识点的理解存在错误。</strong></p>
<p><strong>写博客本身就是一个对自己学习到的知识进行总结、回顾、思考的过程。记录博客也是对于自己学习历程的一种记录。随着时间的流逝、年龄的增长，这又何尝不是一笔宝贵的精神财富呢？</strong></p>
<p>知识星球的一位球友还提到写技术博客有助于完善自己的知识体系：</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20230408121336432.png" alt="写技术博客有助于完善自己的知识体系" tabindex="0"><figcaption>写技术博客有助于完善自己的知识体系</figcaption></figure>
<h3> 帮助别人的同时获得成就感</h3>
<p>就像我们程序员希望自己的产品能够得到大家的认可和喜欢一样。我们写技术博客在某一方面当然也是为了能够得到别人的认可。</p>
<p><strong>当你写的东西对别人产生帮助的时候，你会产生成就感和幸福感。</strong></p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20230404181906257.png" alt="读者的认可" tabindex="0"><figcaption>读者的认可</figcaption></figure>
<p>这种成就感和幸福感会作为 <strong>正向反馈</strong> ，继续激励你写博客。</p>
<p>但是，即使受到很多读者的赞赏，也要保持谦虚学习的太多。人外有人，比你技术更厉害的读者多了去，一定要虚心学习！</p>
<p>当然，你可以可能会受到很多非议。可能会有很多人说你写的文章没有深度，还可能会有很多人说你闲的蛋疼，你写的东西网上/书上都有。</p>
<p><strong>坦然对待这些非议，做好自己，走好自己的路就好！用行动自证！</strong></p>
<h3> 可能会有额外的收入</h3>
<p>写博客可能还会为你带来经济收入。输出价值的同时，还能够有合理的经济收入，这是最好的状态！</p>
<p>为什么说是可能呢？ <strong>因为就目前来看，大部分人还是很难短期通过写博客有收入。我也不建议大家一开始写博客就奔着赚钱的目的，这样功利性太强了，效果可能反而不好。就比如说你坚持了写了半年发现赚不到钱，那你可能就会坚持不下去了。</strong></p>
<p>我自己从大二开始写博客，大三下学期开始将自己的文章发布到公众号上，一直到大四下学期，才通过写博客赚到属于自己的第一笔钱。</p>
<p>第一笔钱是通过微信公众号接某培训机构的推广获得的。没记错的话，当时通过这个推广为自己带来了大约 <strong>500</strong> 元的收入。虽然这不是很多，但对于还在上大学的我来说，这笔钱非常宝贵。那时我才知道，原来写作真的可以赚钱，这也让我更有动力去分享自己的写作。可惜的是，在接了两次这家培训机构的广告之后，它就倒闭了。</p>
<p>之后，很长一段时间我都没有接到过广告。直到网易的课程合作找上门，一篇文章 1000 元，每个月接近一篇，发了接近两年，这也算是我在大学期间比较稳定的一份收入来源了。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20230408115720135.png" alt="网易的课程合作" tabindex="0"><figcaption>网易的课程合作</figcaption></figure>
<p>老粉应该大部分都是通过 JavaGuide 这个项目认识我的，这是我在大三开始准备秋招面试时创建的一个项目。没想到这个项目竟然火了一把，一度霸占了 GitHub 榜单。可能当时国内这类开源文档教程类项目太少了，所以这个项目受欢迎程度非常高。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20230408131849198.png" alt="JavaGuide Star 趋势" tabindex="0"><figcaption>JavaGuide Star 趋势</figcaption></figure>
<p>项目火了之后，有一个国内比较大的云服务公司找到我，说是要赞助 JavaGuide 这个项目。我既惊又喜，担心别人是骗子，反复确认合同之后，最终确定以每月 1000 元的费用在我的项目首页加上对方公司的 banner。</p>
<p>随着时间的推移，以及自己后来写了一些比较受欢迎、比较受众的文章，我的博客知名度也有所提升，通过写博客的收入也增加了不少。</p>
<h3> 增加个人影响力</h3>
<p>写技术博客是一种展示自己技术水平和经验的方式，能够让更多的人了解你的专业领域知识和技能。持续分享优质的技术文章，一定能够在技术领域增加个人影响力，这一点是毋庸置疑的。</p>
<p>有了个人影响力之后，不论是对你后面找工作，还是搞付费知识分享或者出书，都非常有帮助。</p>
<p>拿我自己来说，已经很多知名出版社的编辑找过我，协商出一本的书的事情。这种机会应该也是很多人梦寐以求的。不过，我都一一拒绝了，因为觉得自己远远没有达到能够写书的水平。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20230408121132211.png" alt="电子工业出版社编辑邀约出书" tabindex="0"><figcaption>电子工业出版社编辑邀约出书</figcaption></figure>
<p>其实不出书最主要的原因还是自己嫌麻烦，整个流程的事情太多了。我自己又是比较佛系随性的人，平时也不想把时间都留给工作。</p>
<h2> 怎样才能坚持写技术博客？</h2>
<p><strong>不可否认，人都是有懒性的，这是人的本性。我们需要一个目标/动力来 Push 一下自己。</strong></p>
<p>就技术写作而言，你的目标可以以技术文章的数量为标准，比如：</p>
<ul>
<li>一年写多少篇技术文章。我个人觉得一年的范围还是太长了，不太容易定一个比较合适的目标。</li>
<li>每月输出一篇高质量的技术文章。这个相对容易实现一些，每月一篇，一年也有十二篇了，也很不错了。</li>
</ul>
<p>不过，以技术文章的数量为目标有点功利化，文章的质量同样很重要。一篇高质量的技术文可能需要花费一周甚至半个月的业余时间才能写完。一定要避免自己刻意追求数量，而忽略质量，迷失技术写作的本心。</p>
<p>我个人给自己定的目标是：<strong>每个月至少写一篇原创技术文章或者认真修改完善过去写的三篇技术文章</strong> （像开源项目推荐、开源项目学习、个人经验分享、面经分享等等类型的文章不会被记入）。</p>
<p>我的目标对我来说比较容易完成，因此不会出现为了完成目标而应付任务的情况。在我状态比较好，工作也不是很忙的时候，还会经常超额完成任务。下图是我今年 3 月份完成的任务（任务管理工具：Microsoft To-Do）。除了 gossip 协议是去年写的之外，其他都是 3 月份完成的。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20230404181033089.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>如果觉得以文章数量为标准过于功利的话，也可以比较随性地按照自己的节奏来写作。不过，一般这种情况下，你很可能过段时间就忘了还有这件事，开始慢慢抵触写博客。</p>
<p>写完一篇技术文章之后，我们不光要同步到自己的博客，还要分发到国内一些常见的技术社区比如博客园、掘金。<strong>分发到其他平台的原因是获得关注进而收获正向反馈（动力来源之一）与建议，这是技术写作能坚持下去的非常重要的一步，一定要重视！！！</strong></p>
<p>说实话，当你写完一篇自认为还不错的文章的幸福感和成就感还是有的。<strong>但是，让自己去做这件事情还是比较痛苦的。</strong> 就好比你让自己出去玩很简单，为了达到这个目的，你可以有各种借口。但是，想要自己老老实实学习，还是需要某个外力来督促自己的。</p>
<h2> 写哪些方向的博客比较好？</h2>
<p>通常来说，写下面这些方向的博客会比较好：</p>
<ol>
<li><strong>详细讲解某个知识点</strong>：一定要有自己的思考而不是东拼西凑。不仅要介绍知识点的基本概念和原理，还需要适当结合实际案例和应用场景进行举例说明。</li>
<li><strong>问题排查/性能优化经历</strong>：需要详细描述清楚具体的场景以及解决办法。一定要有足够的细节描述，包括出现问题的具体场景、问题的根本原因、解决问题的思路和具体步骤等等。同时，要注重实践性和可操作性，帮助读者更好地学习理解。</li>
<li><strong>源码阅读记录</strong>：从一个功能点出发描述其底层源码实现，谈谈你从源码中学到了什么。</li>
</ol>
<p>最重要的是一定要重视 Markdown 规范，不然内容再好也会显得不专业。</p>
<p>详见 <a href="/javaguide/contribution-guideline.html" target="blank">Markdown 规范</a> （很重要，尽量按照规范来，对你工作中写文档会非常有帮助）</p>
<h2> 有没有什么写作技巧分享？</h2>
<h3> 句子不要过长</h3>
<p>句子不要过长，尽量使用短句（但也不要太短），这样读者更容易阅读和理解。</p>
<h3> 尽量让文章更加生动有趣</h3>
<p>尽量让文章更加生动有趣，比如你可以适当举一些形象的例子、用一些有趣的段子、歇后语或者网络热词。</p>
<p>不过，这个也主要看你的文章风格。</p>
<h3> 使用简单明了的语言</h3>
<p>避免使用阅读者可能无法理解的行话或复杂语言。</p>
<p>注重清晰度和说服力，保持简单。简单的写作是有说服力的，一个五句话的好论点会比一百句话的精彩论点更能打动人。为什么格言、箴言这类文字容易让人接受，与简洁、直白也有些关系。</p>
<h3> 使用视觉效果</h3>
<p>图表、图像等视觉效果可以让朴素的文本内容更容易理解。记得在适当的地方使用视觉效果来增强你的文章的表现力。</p>
<figure><img src="https://oss.javaguide.cn/about-the-author/college-life/image-20230404192458759.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 技术文章配图色彩要鲜明</h3>
<p>下面是同样内容的两张图，都是通过 drawio 画的，小伙伴们更喜欢哪一张呢？</p>
<p>我相信大部分小伙伴都会选择后面一个色彩更鲜明的！</p>
<p>色彩的调整不过花费了我不到 30s 的时间，带来的阅读体验的上升却是非常之大！</p>
<figure><img src="https://oss.javaguide.cn/2021-1/image-20210104182517226.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 确定你的读者</h3>
<p>写作之前，思考一下你的文章的主要受众全体是谁。受众群体确定之后，你可以根据受众的需求和理解水平调整你的写作风格和内容难易程度。</p>
<h3> 审查和修改</h3>
<p>在发表之前一定要审查和修改你的文章。这将帮助你发现错误、澄清任何令人困惑的信息并提高文档的整体质量。</p>
<p><strong>好文是改出来的，切记！！！</strong></p>
<h2> 总结</h2>
<p>总的来说，写技术博客是一件利己利彼的事情。你可能会从中收获到很多东西，你写的东西也可能对别人也有很大的帮助。但是，写技术博客还是比较耗费自己时间的，你需要和工作以及生活做好权衡。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/about-the-author/college-life/image-20230408131717766.png" type="image/png"/>
    </item>
    <item>
      <title>我的知识星球快 3 岁了！</title>
      <link>https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html</link>
      <guid>https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html</guid>
      <source url="https://javaguide.cn/rss.xml">我的知识星球快 3 岁了！</source>
      <description>这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版：《Java 面试指北 》 (质量很高，专为面试打造，配合 JavaGuide 食用)。 知识星球：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 JavaGuide 知识星球（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">这是一则或许对你有用的小广告</p>
<ul>
<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北 》</a></strong> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li>
<li><strong>知识星球</strong>：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 <strong><a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球</a></strong>（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</li>
</ul>
</div>
<p>时间过的真快，知识星球我已经平稳运行了 3 年有余了！</p>
<p>在 2019 年 12 月 29 号，经过了大概一年左右的犹豫期，我正式确定要开始做一个自己的星球。</p>
<figure><img src="https://oss.javaguide.cn/2021-1/知识新球一周年-0293.jpg" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>截止到今天，星球已经有 1.3w+ 的同学加入。虽然比不上很多大佬，但这于我来说也算是小有成就了，真的很满足了！我确信自己是一个普通人，能做成这些，也不过是在兴趣和运气的加持下赶上了时代而已。</p>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到他人！</strong></p>
<h2> 什么是知识星球？</h2>
<p>简单来说，知识星球就是一个私密交流圈子，主要用途是知识创作者连接铁杆读者/粉丝。相比于微信群，知识星球内容沉淀、信息管理更高效。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220211223754566.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 我的知识星球能为你提供什么？</h2>
<p>努力做一个最优质的 Java 面试交流星球！加入到我的星球之后，你将获得：</p>
<ol>
<li>6 个高质量的专栏永久阅读，内容涵盖面试，源码解析，项目实战等内容！价值远超门票！</li>
<li>多本原创 PDF 版本面试手册。</li>
<li>免费的简历修改服务（已经累计帮助 4000+ 位球友修改简历）。</li>
<li>一对一免费提问交流（专属建议，走心回答）。</li>
<li>专属求职指南和建议，帮助你逆袭大厂！</li>
<li>海量 Java 优质面试资源分享！价值远超门票！</li>
<li>读书交流，学习交流，让我们一起努力创造一个纯粹的学习交流社区。</li>
<li>不定期福利：节日抽奖、送书送课、球友线下聚会等等。</li>
<li>......</li>
</ol>
<p>其中的任何一项服务单独拎出来价值都远超星球门票了。</p>
<h3> 专属专栏</h3>
<p>星球更新了 <strong>《Java 面试指北》</strong>、<strong>《Java 必读源码系列》</strong>（目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot2.1 的源码）、 <strong>《从零开始写一个 RPC 框架》</strong>（已更新完）、<strong>《Kafka 常见面试题/知识点总结》</strong> 等多个优质专栏。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220211231206733.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>《Java 面试指北》内容概览：</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> PDF 面试手册</h3>
<p>免费赠送多本优质 PDF 面试手册。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220723120918434.png" alt="星球 PDF 面试手册" tabindex="0"><figcaption>星球 PDF 面试手册</figcaption></figure>
<h3> 优质精华主题沉淀</h3>
<p>星球沉淀了几年的优质精华主题，内容涵盖面经、面试题、工具网站、技术资源、程序员进阶攻略等内容，干货非常多。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20230421154518800.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/xingqiu/Xnip2023-04-21_15-48-13.jpg" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>加入星球之后，记得抽时间把星球精华主题看看，相信你一定会有所收货！</p>
<h3> 简历修改</h3>
<p>一到面试季，我平均一天晚上至少要看 15 ~30 份简历。过了面试季的话，找我看简历的话会稍微少一些。要不然的话，是真心顶不住！</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304123156348.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>简单统计了一下，到目前为止，我至少帮助 <strong>6000+</strong> 位球友提供了免费的简历修改服务。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/简历修改2.jpg" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>我会针对每一份简历给出详细的修改完善建议，用心修改，深受好评！</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220725093504807.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 一对一提问</h3>
<p>你可以和我进行一对一免费提问交流，我会很走心地回答你的问题。到目前为止，已经累计回答了 <strong>2000+</strong> 个读者的提问。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/wecom-temp-151578-45e66ccd48b3b5d3baa8673d33c7b664.jpg" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220211223559179.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 学习打卡</h3>
<p>星球的学习打卡活动可以督促自己和其他球友们一起学习交流。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220308143815840.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>看球友们的打卡也能有收货，最重要的是这个学习氛围对于自己自律非常有帮助！</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/球友每日打卡也能学到很多东西.jpg" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/xingqiu/确实是学习交流的好地方.jpg" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 读书活动</h3>
<p>定期会举办读书活动（奖励丰厚），我会带着大家一起读一些优秀的技术书籍！</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220211233642079.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>每一期读书活动的获奖率都非常非常非常高！直接超过门票价！！！</p>
<h3> 不定时福利</h3>
<p>不定时地在星球送书、送专栏、发红包，福利多多，</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/1682063464099.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 是否收费？</h2>
<p>星球是需要付费才能进入的。 <strong>为什么要收费呢？</strong></p>
<ol>
<li>维护好星球是一件费时费力的事情，每到面试季，我经常凌晨还在看简历和回答球友问题。市面上单单一次简历修改服务也至少需要 200+，而简历修改也只是我的星球提供的服务的冰山一角。除此之外，我还要抽时间写星球专属的一些专栏，单单是这些专栏的价值就远超星球门票了。</li>
<li>星球提供的服务比较多，如果我是免费提供这些服务的话，是肯定忙不过来的。付费这个门槛可以帮我筛选出真正需要帮助的那批人。</li>
<li>免费的东西才是最贵的，加入星球之后无任何其他需要付费的项目，统统免费！</li>
<li>合理的收费是对我付出劳动的一种正向激励，促进我继续输出！同时，这份收入还可以让我们家人过上更好的生活。虽然累点，但也是值得的！</li>
</ol>
<p>另外，这个是一年的，到明年这个时候结束，差不过够用了。如果服务结束的时候你还需要星球服务的话，可以添加我的微信（<strong>javaguide1024</strong>）领取一个续费优惠卷，半价基础再减 10，记得备注 <strong>“续费”</strong> 。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/2021-1/%E7%9F%A5%E8%AF%86%E6%96%B0%E7%90%83%E4%B8%80%E5%91%A8%E5%B9%B4-0293.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>数据库基础知识总结</title>
      <link>https://javaguide.cn/database/basis.html</link>
      <guid>https://javaguide.cn/database/basis.html</guid>
      <source url="https://javaguide.cn/rss.xml">数据库基础知识总结</source>
      <description>数据库知识基础，这部分内容一定要理解记忆。虽然这部分内容只是理论知识，但是非常重要，这是后面学习 MySQL 数据库的基础。PS: 这部分内容由于涉及太多概念性内容，所以参考了维基百科和百度百科相应的介绍。 什么是数据库, 数据库管理系统, 数据库系统, 数据库管理员? 数据库 : 数据库(DataBase 简称 DB)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。 数据库管理系统 : 数据库管理系统(Database Management System 简称 DBMS)是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。 数据库系统 : 数据库系统(Data Base System，简称 DBS)通常由软件、数据库和数据管理员(DBA)组成。 数据库管理员 : 数据库管理员(Database Administrator, 简称 DBA)负责全面管理和控制数据库系统。</description>
      <category>数据库</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>数据库知识基础，这部分内容一定要理解记忆。虽然这部分内容只是理论知识，但是非常重要，这是后面学习 MySQL 数据库的基础。PS: 这部分内容由于涉及太多概念性内容，所以参考了维基百科和百度百科相应的介绍。</p>
<h2> 什么是数据库, 数据库管理系统, 数据库系统, 数据库管理员?</h2>
<ul>
<li><strong>数据库</strong> : 数据库(DataBase 简称 DB)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。</li>
<li><strong>数据库管理系统</strong> : 数据库管理系统(Database Management System 简称 DBMS)是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。</li>
<li><strong>数据库系统</strong> : 数据库系统(Data Base System，简称 DBS)通常由软件、数据库和数据管理员(DBA)组成。</li>
<li><strong>数据库管理员</strong> : 数据库管理员(Database Administrator, 简称 DBA)负责全面管理和控制数据库系统。</li>
</ul>
<h2> 什么是元组, 码, 候选码, 主码, 外码, 主属性, 非主属性？</h2>
<ul>
<li><strong>元组</strong>：元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。 在二维表里，元组也称为行。</li>
<li><strong>码</strong>：码就是能唯一标识实体的属性，对应表中的列。</li>
<li><strong>候选码</strong>：若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何、子集都不能再标识，则称该属性组为候选码。例如：在学生实体中，“学号”是能唯一的区分学生实体的，同时又假设“姓名”、“班级”的属性组合足以区分学生实体，那么{学号}和{姓名，班级}都是候选码。</li>
<li><strong>主码</strong> : 主码也叫主键。主码是从候选码中选出来的。 一个实体集中只能有一个主码，但可以有多个候选码。</li>
<li><strong>外码</strong> : 外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码。</li>
<li><strong>主属性</strong>：候选码中出现过的属性称为主属性。比如关系 工人（工号，身份证号，姓名，性别，部门）. 显然工号和身份证号都能够唯一标示这个关系，所以都是候选码。工号、身份证号这两个属性就是主属性。如果主码是一个属性组，那么属性组中的属性都是主属性。</li>
<li><strong>非主属性：</strong> 不包含在任何一个候选码中的属性称为非主属性。比如在关系——学生（学号，姓名，年龄，性别，班级）中，主码是“学号”，那么其他的“姓名”、“年龄”、“性别”、“班级”就都可以称为非主属性。</li>
</ul>
<h2> 什么是 ER 图？</h2>
<p>我们做一个项目的时候一定要试着画 ER 图来捋清数据库设计，这个也是面试官问你项目的时候经常会被问到的。</p>
<p><strong>ER 图</strong> 全称是 Entity Relationship Diagram（实体联系图），提供了表示实体类型、属性和联系的方法。</p>
<p>ER 图由下面 3 个要素组成：</p>
<ul>
<li><strong>实体</strong>：通常是现实世界的业务对象，当然使用一些逻辑对象也可以。比如对于一个校园管理系统，会涉及学生、教师、课程、班级等等实体。在 ER 图中，实体使用矩形框表示。</li>
<li><strong>属性</strong>：即某个实体拥有的属性，属性用来描述组成实体的要素，对于产品设计来说可以理解为字段。在 ER 图中，属性使用椭圆形表示。</li>
<li><strong>联系</strong>：即实体与实体之间的关系，这个关系不仅有业务关联关系，还能通过数字表示实体之间的数量对照关系。例如，一个班级会有多个学生就是一种实体间的联系。</li>
</ul>
<p>下图是一个学生选课的 ER 图，每个学生可以选若干门课程，同一门课程也可以被若干人选择，所以它们之间的关系是多对多（M: N）。另外，还有其他两种实体之间的关系是：1 对 1（1:1）、1 对多（1: N）。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/c745c87f6eda9a439e0eea52012c7f4a.png" alt="学生与课程之间联系的E-R图" tabindex="0"><figcaption>学生与课程之间联系的E-R图</figcaption></figure>
<h2> 数据库范式了解吗?</h2>
<p>数据库范式有 3 种：</p>
<ul>
<li>1NF(第一范式)：属性不可再分。</li>
<li>2NF(第二范式)：1NF 的基础之上，消除了非主属性对于码的部分函数依赖。</li>
<li>3NF(第三范式)：3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。</li>
</ul>
<h3> 1NF(第一范式)</h3>
<p>属性（对应于表中的字段）不能再被分割，也就是这个字段只能是一个值，不能再分为多个其他的字段了。<strong>1NF 是所有关系型数据库的最基本要求</strong> ，也就是说关系型数据库中创建的表一定满足第一范式。</p>
<h3> 2NF(第二范式)</h3>
<p>2NF 在 1NF 的基础之上，消除了非主属性对于码的部分函数依赖。如下图所示，展示了第一范式到第二范式的过渡。第二范式在第一范式的基础上增加了一个列，这个列称为主键，非主属性都依赖于主键。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/bd1d31be3779342427fc9e462bf7f05c.png" alt="第二范式" tabindex="0"><figcaption>第二范式</figcaption></figure>
<p>一些重要的概念：</p>
<ul>
<li><strong>函数依赖（functional dependency）</strong>：若在一张表中，在属性（或属性组）X 的值确定的情况下，必定能确定属性 Y 的值，那么就可以说 Y 函数依赖于 X，写作 X → Y。</li>
<li><strong>部分函数依赖（partial functional dependency）</strong>：如果 X→Y，并且存在 X 的一个真子集 X0，使得 X0→Y，则称 Y 对 X 部分函数依赖。比如学生基本信息表 R 中（学号，身份证号，姓名）当然学号属性取值是唯一的，在 R 关系中，（学号，身份证号）-&gt;（姓名），（学号）-&gt;（姓名），（身份证号）-&gt;（姓名）；所以姓名部分函数依赖与（学号，身份证号）；</li>
<li><strong>完全函数依赖(Full functional dependency)</strong>：在一个关系中，若某个非主属性数据项依赖于全部关键字称之为完全函数依赖。比如学生基本信息表 R（学号，班级，姓名）假设不同的班级学号有相同的，班级内学号不能相同，在 R 关系中，（学号，班级）-&gt;（姓名），但是（学号）-&gt;(姓名)不成立，（班级）-&gt;(姓名)不成立，所以姓名完全函数依赖与（学号，班级）；</li>
<li><strong>传递函数依赖</strong>：在关系模式 R(U)中，设 X，Y，Z 是 U 的不同的属性子集，如果 X 确定 Y、Y 确定 Z，且有 X 不包含 Y，Y 不确定 X，（X∪Y）∩Z=空集合，则称 Z 传递函数依赖(transitive functional dependency) 于 X。传递函数依赖会导致数据冗余和异常。传递函数依赖的 Y 和 Z 子集往往同属于某一个事物，因此可将其合并放到一个表中。比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖。。</li>
</ul>
<h3> 3NF(第三范式)</h3>
<p>3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。符合 3NF 要求的数据库设计，<strong>基本</strong>上解决了数据冗余过大，插入异常，修改异常，删除异常的问题。比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖，所以该表的设计，不符合 3NF 的要求。</p>
<h2> 主键和外键有什么区别?</h2>
<ul>
<li><strong>主键(主码)</strong>：主键用于唯一标识一个元组，不能有重复，不允许为空。一个表只能有一个主键。</li>
<li><strong>外键(外码)</strong>：外键用来和其他表建立联系用，外键是另一表的主键，外键是可以有重复的，可以是空值。一个表可以有多个外键。</li>
</ul>
<h2> 为什么不推荐使用外键与级联？</h2>
<p>对于外键和级联，阿里巴巴开发手册这样说到：</p>
<blockquote>
<p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</p>
<p>说明: 以学生和成绩的关系为例，学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群; 级联更新是强阻塞，存在数据库更新风暴的风 险; 外键影响数据库的插入速度</p>
</blockquote>
<p>为什么不要用外键呢？大部分人可能会这样回答：</p>
<ol>
<li><strong>增加了复杂性：</strong> a. 每次做 DELETE 或者 UPDATE 都必须考虑外键约束，会导致开发的时候很痛苦, 测试数据极为不方便; b. 外键的主从关系是定的，假如那天需求有变化，数据库中的这个字段根本不需要和其他表有关联的话就会增加很多麻烦。</li>
<li><strong>增加了额外工作</strong>：数据库需要增加维护外键的工作，比如当我们做一些涉及外键字段的增，删，更新操作之后，需要触发相关操作去检查，保证数据的的一致性和正确性，这样会不得不消耗资源；（个人觉得这个不是不用外键的原因，因为即使你不使用外键，你在应用层面也还是要保证的。所以，我觉得这个影响可以忽略不计。）</li>
<li><strong>对分库分表不友好</strong>：因为分库分表下外键是无法生效的。</li>
<li>......</li>
</ol>
<p>我个人觉得上面这种回答不是特别的全面，只是说了外键存在的一个常见的问题。实际上，我们知道外键也是有很多好处的，比如：</p>
<ol>
<li>保证了数据库数据的一致性和完整性；</li>
<li>级联操作方便，减轻了程序代码量；</li>
<li>......</li>
</ol>
<p>所以说，不要一股脑的就抛弃了外键这个概念，既然它存在就有它存在的道理，如果系统不涉及分库分表，并发量不是很高的情况还是可以考虑使用外键的。</p>
<h2> 什么是存储过程?</h2>
<p>我们可以把存储过程看成是一些 SQL 语句的集合，中间加了点逻辑控制语句。存储过程在业务比较复杂的时候是非常实用的，比如很多时候我们完成一个操作可能需要写一大串 SQL 语句，这时候我们就可以写有一个存储过程，这样也方便了我们下一次的调用。存储过程一旦调试完成通过后就能稳定运行，另外，使用存储过程比单纯 SQL 语句执行要快，因为存储过程是预编译过的。</p>
<p>存储过程在互联网公司应用不多，因为存储过程难以调试和扩展，而且没有移植性，还会消耗数据库资源。</p>
<p>阿里巴巴 Java 开发手册里要求禁止使用存储过程。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/0fa082bc4d4f919065767476a41b2156.png" alt="阿里巴巴Java开发手册: 禁止存储过程" tabindex="0"><figcaption>阿里巴巴Java开发手册: 禁止存储过程</figcaption></figure>
<h2> drop、delete 与 truncate 区别？</h2>
<h3> 用法不同</h3>
<ul>
<li><code>drop</code>(丢弃数据): <code>drop table 表名</code> ，直接将表都删除掉，在删除表的时候使用。</li>
<li><code>truncate</code> (清空数据) : <code>truncate table 表名</code> ，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。</li>
<li><code>delete</code>（删除数据） : <code>delete from 表名 where 列名=值</code>，删除某一行的数据，如果不加 <code>where</code> 子句和<code>truncate table 表名</code>作用类似。</li>
</ul>
<p><code>truncate</code> 和不带 <code>where</code>子句的 <code>delete</code>、以及 <code>drop</code> 都会删除表内的数据，但是 <strong><code>truncate</code> 和 <code>delete</code> 只删除数据不删除表的结构(定义)，执行 <code>drop</code> 语句，此表的结构也会删除，也就是执行<code>drop</code> 之后对应的表不复存在。</strong></p>
<h3> 属于不同的数据库语言</h3>
<p><code>truncate</code> 和 <code>drop</code> 属于 DDL(数据定义语言)语句，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。而 <code>delete</code> 语句是 DML (数据库操作语言)语句，这个操作会放到 rollback segment 中，事务提交之后才生效。</p>
<p><strong>DML 语句和 DDL 语句区别：</strong></p>
<ul>
<li>DML 是数据库操作语言（Data Manipulation Language）的缩写，是指对数据库中表记录的操作，主要包括表记录的插入、更新、删除和查询，是开发人员日常使用最频繁的操作。</li>
<li>DDL （Data Definition Language）是数据定义语言的缩写，简单来说，就是对数据库内部的对象进行创建、删除、修改的操作语言。它和 DML 语言的最大区别是 DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，更不会涉及到其他对象。DDL 语句更多的被数据库管理员（DBA）所使用，一般的开发人员很少使用。</li>
</ul>
<p>另外，由于<code>select</code>不会对表进行破坏，所以有的地方也会把<code>select</code>单独区分开叫做数据库查询语言 DQL（Data Query Language）。</p>
<h3> 执行速度不同</h3>
<p>一般来说：<code>drop</code> &gt; <code>truncate</code> &gt; <code>delete</code>（这个我没有设计测试过）。</p>
<ul>
<li><code>delete</code>命令执行的时候会产生数据库的<code>binlog</code>日志，而日志记录是需要消耗时间的，但是也有个好处方便数据回滚恢复。</li>
<li><code>truncate</code>命令执行的时候不会产生数据库日志，因此比<code>delete</code>要快。除此之外，还会把表的自增值重置和索引恢复到初始大小等。</li>
<li><code>drop</code>命令会把表占用的空间全部释放掉。</li>
</ul>
<p>Tips：你应该更多地关注在使用场景上，而不是执行效率。</p>
<h2> 数据库设计通常分为哪几步?</h2>
<ol>
<li><strong>需求分析</strong> : 分析用户的需求，包括数据、功能和性能需求。</li>
<li><strong>概念结构设计</strong> : 主要采用 E-R 模型进行设计，包括画 E-R 图。</li>
<li><strong>逻辑结构设计</strong> : 通过将 E-R 图转换成表，实现从 E-R 模型到关系模型的转换。</li>
<li><strong>物理结构设计</strong> : 主要是为所设计的数据库选择合适的存储结构和存取路径。</li>
<li><strong>数据库实施</strong> : 包括编程、测试和试运行</li>
<li><strong>数据库的运行和维护</strong> : 系统的运行与数据库的日常维护。</li>
</ol>
<h2> 参考</h2>
<ul>
<li><a href="https://blog.csdn.net/rl529014/article/details/48391465" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/rl529014/article/details/48391465</a></li>
<li><a href="https://www.zhihu.com/question/24696366/answer/29189700" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/24696366/answer/29189700</a></li>
<li><a href="https://blog.csdn.net/bieleyang/article/details/77149954" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/bieleyang/article/details/77149954</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/csdn/c745c87f6eda9a439e0eea52012c7f4a.png" type="image/png"/>
    </item>
    <item>
      <title>字符集详解</title>
      <link>https://javaguide.cn/database/character-set.html</link>
      <guid>https://javaguide.cn/database/character-set.html</guid>
      <source url="https://javaguide.cn/rss.xml">字符集详解</source>
      <description>MySQL 字符编码集中有两套 UTF-8 编码实现：utf8 和 utf8mb4。 如果使用 utf8 的话，存储 emoji 符号和一些比较复杂的汉字、繁体字就会出错。 为什么会这样呢？这篇文章可以从源头给你解答。 何为字符集？ 字符是各种文字和符号的统称，包括各个国家文字、标点符号、表情、数字等等。 字符集 就是一系列字符的集合。字符集的种类较多，每个字符集可以表示的字符范围通常不同，就比如说有些字符集是无法表示汉字的。</description>
      <category>数据库</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>MySQL 字符编码集中有两套 UTF-8 编码实现：<strong><code>utf8</code></strong> 和 <strong><code>utf8mb4</code></strong>。</p>
<p>如果使用 <strong><code>utf8</code></strong> 的话，存储 emoji 符号和一些比较复杂的汉字、繁体字就会出错。</p>
<p>为什么会这样呢？这篇文章可以从源头给你解答。</p>
<h2> 何为字符集？</h2>
<p>字符是各种文字和符号的统称，包括各个国家文字、标点符号、表情、数字等等。 <strong>字符集</strong> 就是一系列字符的集合。字符集的种类较多，每个字符集可以表示的字符范围通常不同，就比如说有些字符集是无法表示汉字的。</p>
<p><strong>计算机只能存储二进制的数据，那英文、汉字、表情等字符应该如何存储呢？</strong></p>
<p>我们要将这些字符和二进制的数据一一对应起来，比如说字符“a”对应“01100001”，反之，“01100001”对应 “a”。我们将字符对应二进制数据的过程称为"<strong>字符编码</strong>"，反之，二进制数据解析成字符的过程称为“<strong>字符解码</strong>”。</p>
<h2> 有哪些常见的字符集？</h2>
<p>常见的字符集有 ASCII、GB2312、GBK、UTF-8......。</p>
<p>不同的字符集的主要区别在于：</p>
<ul>
<li>可以表示的字符范围</li>
<li>编码方式</li>
</ul>
<h3> ASCII</h3>
<p><strong>ASCII</strong> (<strong>A</strong>merican <strong>S</strong>tandard <strong>C</strong>ode for <strong>I</strong>nformation <strong>I</strong>nterchange，美国信息交换标准代码) 是一套主要用于现代美国英语的字符集（这也是 ASCII 字符集的局限性所在）。</p>
<p><strong>为什么 ASCII 字符集没有考虑到中文等其他字符呢？</strong> 因为计算机是美国人发明的，当时，计算机的发展还处于比较雏形的时代，还未在其他国家大规模使用。因此，美国发布 ASCII 字符集的时候没有考虑兼容其他国家的语言。</p>
<p>ASCII 字符集至今为止共定义了 128 个字符，其中有 33 个控制字符（比如回车、删除）无法显示。</p>
<p>一个 ASCII 码长度是一个字节也就是 8 个 bit，比如“a”对应的 ASCII 码是“01100001”。不过，最高位是 0 仅仅作为校验位，其余 7 位使用 0 和 1 进行组合，所以，ASCII 字符集可以定义 128（2^7）个字符。</p>
<p>由于，ASCII 码可以表示的字符实在是太少了。后来，人们对其进行了扩展得到了 <strong>ASCII 扩展字符集</strong> 。ASCII 扩展字符集使用 8 位（bits）表示一个字符，所以，ASCII 扩展字符集可以定义 256（2^8）个字符。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/c1c6375d08ca268690cef2b13591a5b4.png" alt="ASCII字符编码" tabindex="0"><figcaption>ASCII字符编码</figcaption></figure>
<h3> GB2312</h3>
<p>我们上面说了，ASCII 字符集是一种现代美国英语适用的字符集。因此，很多国家都捣鼓了一个适合自己国家语言的字符集。</p>
<p>GB2312 字符集是一种对汉字比较友好的字符集，共收录 6700 多个汉字，基本涵盖了绝大部分常用汉字。不过，GB2312 字符集不支持绝大部分的生僻字和繁体字。</p>
<p>对于英语字符，GB2312 编码和 ASCII 码是相同的，1 字节编码即可。对于非英字符，需要 2 字节编码。</p>
<h3> GBK</h3>
<p>GBK 字符集可以看作是 GB2312 字符集的扩展，兼容 GB2312 字符集，共收录了 20000 多个汉字。</p>
<p>GBK 中 K 是汉语拼音 Kuo Zhan（扩展）中的“Kuo”的首字母。</p>
<h3> GB18030</h3>
<p>GB18030 完全兼容 GB2312 和 GBK 字符集，纳入中国国内少数民族的文字，且收录了日韩汉字，是目前为止最全面的汉字字符集，共收录汉字 70000 多个。</p>
<h3> BIG5</h3>
<p>BIG5 主要针对的是繁体中文，收录了 13000 多个汉字。</p>
<h3> Unicode &amp; UTF-8 编码</h3>
<p>为了更加适合本国语言，诞生了很多种字符集。</p>
<p>我们上面也说了不同的字符集可以表示的字符范围以及编码规则存在差异。这就导致了一个非常严重的问题：<strong>使用错误的编码方式查看一个包含字符的文件就会产生乱码现象。</strong></p>
<p>就比如说你使用 UTF-8 编码方式打开 GB2312 编码格式的文件就会出现乱码。示例：“牛”这个汉字 GB2312 编码后的十六进制数值为 “C5A3”，而 “C5A3” 用 UTF-8 解码之后得到的却是 “ţ”。</p>
<p>你可以通过这个网站在线进行编码和解码：<a href="https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan" target="_blank" rel="noopener noreferrer">https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan</a></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/836c49b117ee4408871b0020b74c991d.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这样我们就搞懂了乱码的本质：<strong>编码和解码时用了不同或者不兼容的字符集</strong> 。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/a8808cbabeea49caa3af27d314fa3c02-1.jpg" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>为了解决这个问题，人们就想：“如果我们能够有一种字符集将世界上所有的字符都纳入其中就好了！”。</p>
<p>然后，<strong>Unicode</strong> 带着这个使命诞生了。</p>
<p>Unicode 字符集中包含了世界上几乎所有已知的字符。不过，Unicode 字符集并没有规定如何存储这些字符（也就是如何使用二进制数据表示这些字符）。</p>
<p>然后，就有了 <strong>UTF-8</strong>（<strong>8</strong>-bit <strong>U</strong>nicode <strong>T</strong>ransformation <strong>F</strong>ormat）。类似的还有 UTF-16、 UTF-32。</p>
<p>UTF-8 使用 1 到 4 个字节为每个字符编码， UTF-16 使用 2 或 4 个字节为每个字符编码，UTF-32 固定位 4 个字节为每个字符编码。</p>
<p>UTF-8 可以根据不同的符号自动选择编码的长短，像英文字符只需要 1 个字节就够了，这一点 ASCII 字符集一样 。因此，对于英语字符，UTF-8 编码和 ASCII 码是相同的。</p>
<p>UTF-32 的规则最简单，不过缺陷也比较明显，对于英文字母这类字符消耗的空间是 UTF-8 的 4 倍之多。</p>
<p><strong>UTF-8</strong> 是目前使用最广的一种字符编码，。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/1280px-Utf8webgrowth.svg.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> MySQL 字符集</h2>
<p>MySQL 支持很多种字符编码的方式，比如 UTF-8、GB2312、GBK、BIG5。</p>
<p>你可以通过 <code>SHOW CHARSET</code> 命令来查看。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/image-20211008164229671.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>通常情况下，我们建议使用 UTF-8 作为默认的字符编码方式。</p>
<p>不过，这里有一个小坑。</p>
<p>MySQL 字符编码集中有两套 UTF-8 编码实现：</p>
<ul>
<li><strong><code>utf8</code></strong>：<code>utf8</code>编码只支持<code>1-3</code>个字节 。 在 <code>utf8</code> 编码中，中文是占 3 个字节，其他数字、英文、符号占一个字节。但 emoji 符号占 4 个字节，一些较复杂的文字、繁体字也是 4 个字节。</li>
<li><strong><code>utf8mb4</code></strong>：UTF-8 的完整实现，正版！最多支持使用 4 个字节表示字符，因此，可以用来存储 emoji 符号。</li>
</ul>
<p><strong>为什么有两套 UTF-8 编码实现呢？</strong> 原因如下：</p>
<figure><img src="https://oss.javaguide.cn/javaguide/image-20211008164542347.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>因此，如果你需要存储<code>emoji</code>类型的数据或者一些比较复杂的文字、繁体字到 MySQL 数据库的话，数据库的编码一定要指定为<code>utf8mb4</code> 而不是<code>utf8</code> ，要不然存储的时候就会报错了。</p>
<p>演示一下吧！（环境：MySQL 5.7+）</p>
<p>建表语句如下，我们指定数据库 CHARSET 为 <code>utf8</code> 。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们执行下面的 insert 语句插入数据到数据库时，果然报错！</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错信息如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 参考</h2>
<ul>
<li>字符集和字符编码（Charset &amp; Encoding）：<a href="https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html</a></li>
<li>十分钟搞清字符集和字符编码：<a href="http://cenalulu.github.io/linux/character-encoding/" target="_blank" rel="noopener noreferrer">http://cenalulu.github.io/linux/character-encoding/</a></li>
<li>Unicode-维基百科：<a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/wiki/Unicode</a></li>
<li>GB2312-维基百科：<a href="https://zh.wikipedia.org/wiki/GB_2312" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/wiki/GB_2312</a></li>
<li>UTF-8-维基百科：<a href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/wiki/UTF-8</a></li>
<li>GB18030-维基百科: <a href="https://zh.wikipedia.org/wiki/GB_18030" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/wiki/GB_18030</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/csdn/c1c6375d08ca268690cef2b13591a5b4.png" type="image/png"/>
    </item>
    <item>
      <title>NoSQL基础知识总结</title>
      <link>https://javaguide.cn/database/nosql.html</link>
      <guid>https://javaguide.cn/database/nosql.html</guid>
      <source url="https://javaguide.cn/rss.xml">NoSQL基础知识总结</source>
      <description>NoSQL 是什么？ NoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。 一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。NoSQL 数据库可以存储关系型数据—它们与关系型数据库的存储方式不同。 NoSQL 数据库代表：HBase、Cassandra、MongoDB、Redis。</description>
      <category>数据库</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> NoSQL 是什么？</h2>
<p>NoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。</p>
<p>一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。NoSQL 数据库可以存储关系型数据—它们与关系型数据库的存储方式不同。</p>
<p>NoSQL 数据库代表：HBase、Cassandra、MongoDB、Redis。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/sql-nosql-tushi.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> SQL 和 NoSQL 有什么区别？</h2>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th>SQL 数据库</th>
<th>NoSQL 数据库</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">数据存储模型</td>
<td>结构化存储，具有固定行和列的表格</td>
<td>非结构化存储。文档：JSON 文档，键值：键值对，宽列：包含行和动态列的表，图：节点和边</td>
</tr>
<tr>
<td style="text-align:left">发展历程</td>
<td>开发于 1970 年代，重点是减少数据重复</td>
<td>开发于 2000 年代后期，重点是提升可扩展性，减少大规模数据的存储成本</td>
</tr>
<tr>
<td style="text-align:left">例子</td>
<td>Oracle、MySQL、Microsoft SQL Server、PostgreSQL</td>
<td>文档：MongoDB、CouchDB，键值：Redis、DynamoDB，宽列：Cassandra、 HBase，图表：Neo4j、 Amazon Neptune、Giraph</td>
</tr>
<tr>
<td style="text-align:left">ACID 属性</td>
<td>提供原子性、一致性、隔离性和持久性 (ACID) 属性</td>
<td>通常不支持 ACID 事务，为了可扩展、高性能进行了权衡，少部分支持比如 MongoDB 。不过，MongoDB 对 ACID 事务 的支持和 MySQL 还是有所区别的。</td>
</tr>
<tr>
<td style="text-align:left">性能</td>
<td>性能通常取决于磁盘子系统。要获得最佳性能，通常需要优化查询、索引和表结构。</td>
<td>性能通常由底层硬件集群大小、网络延迟以及调用应用程序来决定。</td>
</tr>
<tr>
<td style="text-align:left">扩展</td>
<td>垂直（使用性能更强大的服务器进行扩展）、读写分离、分库分表</td>
<td>横向（增加服务器的方式横向扩展，通常是基于分片机制）</td>
</tr>
<tr>
<td style="text-align:left">用途</td>
<td>普通企业级的项目的数据存储</td>
<td>用途广泛比如图数据库支持分析和遍历连接数据之间的关系、键值数据库可以处理大量数据扩展和极高的状态变化</td>
</tr>
<tr>
<td style="text-align:left">查询语法</td>
<td>结构化查询语言 (SQL)</td>
<td>数据访问语法可能因数据库而异</td>
</tr>
</tbody>
</table>
<h2> NoSQL 数据库有什么优势？</h2>
<p>NoSQL 数据库非常适合许多现代应用程序，例如移动、Web 和游戏等应用程序，它们需要灵活、可扩展、高性能和功能强大的数据库以提供卓越的用户体验。</p>
<ul>
<li><strong>灵活性：</strong> NoSQL 数据库通常提供灵活的架构，以实现更快速、更多的迭代开发。灵活的数据模型使 NoSQL 数据库成为半结构化和非结构化数据的理想之选。</li>
<li><strong>可扩展性：</strong> NoSQL 数据库通常被设计为通过使用分布式硬件集群来横向扩展，而不是通过添加昂贵和强大的服务器来纵向扩展。</li>
<li><strong>高性能：</strong> NoSQL 数据库针对特定的数据模型和访问模式进行了优化，这与尝试使用关系数据库完成类似功能相比可实现更高的性能。</li>
<li><strong>强大的功能：</strong> NoSQL 数据库提供功能强大的 API 和数据类型，专门针对其各自的数据模型而构建。</li>
</ul>
<h2> NoSQL 数据库有哪些类型？</h2>
<p>NoSQL 数据库主要可以分为下面四种类型：</p>
<ul>
<li><strong>键值</strong>：键值数据库是一种较简单的数据库，其中每个项目都包含键和值。这是极为灵活的 NoSQL 数据库类型，因为应用可以完全控制 value 字段中存储的内容，没有任何限制。Redis 和 DynanoDB 是两款非常流行的键值数据库。</li>
<li><strong>文档</strong>：文档数据库中的数据被存储在类似于 JSON（JavaScript 对象表示法）对象的文档中，非常清晰直观。每个文档包含成对的字段和值。这些值通常可以是各种类型，包括字符串、数字、布尔值、数组或对象等，并且它们的结构通常与开发者在代码中使用的对象保持一致。MongoDB 就是一款非常流行的文档数据库。</li>
<li><strong>图形</strong>：图形数据库旨在轻松构建和运行与高度连接的数据集一起使用的应用程序。图形数据库的典型使用案例包括社交网络、推荐引擎、欺诈检测和知识图形。Neo4j 和 Giraph 是两款非常流行的图形数据库。</li>
<li><strong>宽列</strong>：宽列存储数据库非常适合需要存储大量的数据。Cassandra 和 HBase 是两款非常流行的宽列存储数据库。</li>
</ul>
<p>下面这张图片来源于 <a href="https://learn.microsoft.com/en-us/dotnet/architecture/cloud-native/relational-vs-nosql-data" target="_blank" rel="noopener noreferrer">微软的官方文档 | 关系数据与 NoSQL 数据</a>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/types-of-nosql-datastores.png" alt="NoSQL 数据模型" tabindex="0"><figcaption>NoSQL 数据模型</figcaption></figure>
<h2> 参考</h2>
<ul>
<li>NoSQL 是什么？- MongoDB 官方文档：<a href="https://www.mongodb.com/zh-cn/nosql-explained" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/zh-cn/nosql-explained</a></li>
<li>什么是 NoSQL? - AWS：<a href="https://aws.amazon.com/cn/nosql/" target="_blank" rel="noopener noreferrer">https://aws.amazon.com/cn/nosql/</a></li>
<li>NoSQL vs. SQL Databases - MongoDB 官方文档：<a href="https://www.mongodb.com/zh-cn/nosql-explained/nosql-vs-sql" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/zh-cn/nosql-explained/nosql-vs-sql</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/database/mongodb/sql-nosql-tushi.png" type="image/png"/>
    </item>
    <item>
      <title>API网关基础知识总结</title>
      <link>https://javaguide.cn/distributed-system/api-gateway.html</link>
      <guid>https://javaguide.cn/distributed-system/api-gateway.html</guid>
      <source url="https://javaguide.cn/rss.xml">API网关基础知识总结</source>
      <description>什么是网关？ 微服务背景下，一个系统被拆分为多个服务，但是像安全认证，流量控制，日志，监控等功能是每个服务都需要的，没有网关的话，我们就需要在每个服务中单独实现，这使得我们做了很多重复的事情并且没有一个全局的视图来统一管理这些功能。 网关示意图</description>
      <category>分布式</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是网关？</h2>
<p>微服务背景下，一个系统被拆分为多个服务，但是像安全认证，流量控制，日志，监控等功能是每个服务都需要的，没有网关的话，我们就需要在每个服务中单独实现，这使得我们做了很多重复的事情并且没有一个全局的视图来统一管理这些功能。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway-overview.png" alt="网关示意图" tabindex="0"><figcaption>网关示意图</figcaption></figure>
<p>一般情况下，网关可以为我们提供请求转发、安全认证（身份/权限认证）、流量控制、负载均衡、降级熔断、日志、监控、参数校验、协议转换等功能。</p>
<p>上面介绍了这么多功能，实际上，网关主要做了两件事情：<strong>请求转发</strong> + <strong>请求过滤</strong>。</p>
<p>由于引入网关之后，会多一步网络转发，因此性能会有一点影响（几乎可以忽略不计，尤其是内网访问的情况下）。 另外，我们需要保障网关服务的高可用，避免单点风险。</p>
<p>如下图所示，网关服务外层通过 Nginx（其他负载均衡设备/软件也行） 进⾏负载转发以达到⾼可⽤。Nginx 在部署的时候，尽量也要考虑高可用，避免单点风险。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/server-load-balancing.png" alt="基于 Nginx 的服务端负载均衡" tabindex="0"><figcaption>基于 Nginx 的服务端负载均衡</figcaption></figure>
<h2> 网关能提供哪些功能？</h2>
<p>绝大部分网关可以提供下面这些功能：</p>
<ul>
<li><strong>请求转发</strong>：将请求转发到目标微服务。</li>
<li><strong>负载均衡</strong>：根据各个微服务实例的负载情况或者具体的负载均衡策略配置对请求实现动态的负载均衡。</li>
<li><strong>安全认证</strong>：对用户请求进行身份验证并仅允许可信客户端访问 API，并且还能够使用类似 RBAC 等方式来授权。</li>
<li><strong>参数校验</strong>：支持参数映射与校验逻辑。</li>
<li><strong>日志记录</strong>：记录所有请求的行为日志供后续使用。</li>
<li><strong>监控告警</strong>：从业务指标、机器指标、JVM 指标等方面进行监控并提供配套的告警机制。</li>
<li><strong>流量控制</strong>：对请求的流量进行控制，也就是限制某一时刻内的请求数。</li>
<li><strong>熔断降级</strong>：实时监控请求的统计信息，达到配置的失败阈值后，自动熔断，返回默认值。</li>
<li><strong>响应缓存</strong>：当用户请求获取的是一些静态的或更新不频繁的数据时，一段时间内多次请求获取到的数据很可能是一样的。对于这种情况可以将响应缓存起来。这样用户请求可以直接在网关层得到响应数据，无需再去访问业务服务，减轻业务服务的负担。</li>
<li><strong>响应聚合</strong>：某些情况下用户请求要获取的响应内容可能会来自于多个业务服务。网关作为业务服务的调用方，可以把多个服务的响应整合起来，再一并返回给用户。</li>
<li><strong>灰度发布</strong>：将请求动态分流到不同的服务版本（最基本的一种灰度发布）。</li>
<li><strong>异常处理</strong>：对于业务服务返回的异常响应，可以在网关层在返回给用户之前做转换处理。这样可以把一些业务侧返回的异常细节隐藏，转换成用户友好的错误提示返回。</li>
<li><strong>API 文档：</strong> 如果计划将 API 暴露给组织以外的开发人员，那么必须考虑使用 API 文档，例如 Swagger 或 OpenAPI。</li>
<li><strong>协议转换</strong>：通过协议转换整合后台基于 REST、AMQP、Dubbo 等不同风格和实现技术的微服务，面向 Web Mobile、开放平台等特定客户端提供统一服务。</li>
</ul>
<p>下图来源于<a href="https://mp.weixin.qq.com/s/iITqdIiHi3XGKq6u6FRVdg" target="_blank" rel="noopener noreferrer">百亿规模 API 网关服务 Shepherd 的设计与实现 - 美团技术团队 - 2021</a>这篇文章。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-35e102c633bbe8e0dea1e075ea3fee5dcfb.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 有哪些常见的网关系统？</h2>
<h3> Netflix Zuul</h3>
<p>Zuul 是 Netflix 开发的一款提供动态路由、监控、弹性、安全的网关服务，基于 Java 技术栈开发，可以和 Eureka、Ribbon、Hystrix 等组件配合使用。</p>
<p>Zuul 核心架构如下：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/zuul-core-architecture.webp" alt="Zuul 核心架构" tabindex="0"><figcaption>Zuul 核心架构</figcaption></figure>
<p>Zuul 主要通过过滤器（类似于 AOP）来过滤请求，从而实现网关必备的各种功能。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/zuul-request-lifecycle.webp" alt="Zuul 请求声明周期" tabindex="0"><figcaption>Zuul 请求声明周期</figcaption></figure>
<p>我们可以自定义过滤器来处理请求，并且，Zuul 生态本身就有很多现成的过滤器供我们使用。就比如限流可以直接用国外朋友写的 <a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit" target="_blank" rel="noopener noreferrer">spring-cloud-zuul-ratelimit</a> (这里只是举例说明，一般是配合 hystrix 来做限流)：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://netflixtechblog.com/announcing-zuul-edge-service-in-the-cloud-ab3af5be08ee" target="_blank" rel="noopener noreferrer">Zuul 1.x</a> 基于同步 IO，性能较差。<a href="https://netflixtechblog.com/open-sourcing-zuul-2-82ea476cb2b3" target="_blank" rel="noopener noreferrer">Zuul 2.x</a> 基于 Netty 实现了异步 IO，性能得到了大幅改进。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-4f9047dc9109e27f9fced1b365e2b976e9d.png" alt="Zuul2 架构" tabindex="0"><figcaption>Zuul2 架构</figcaption></figure>
<ul>
<li>GitHub 地址： <a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener noreferrer">https://github.com/Netflix/zuul</a></li>
<li>官方 Wiki： <a href="https://github.com/Netflix/zuul/wiki" target="_blank" rel="noopener noreferrer">https://github.com/Netflix/zuul/wiki</a></li>
</ul>
<h3> Spring Cloud Gateway</h3>
<p>SpringCloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 <strong>Zuul</strong>。准确点来说，应该是 Zuul 1.x。SpringCloud Gateway 起步要比 Zuul 2.x 更早。</p>
<p>为了提升网关的性能，SpringCloud Gateway 基于 Spring WebFlux 。Spring WebFlux 使用 Reactor 库来实现响应式编程模型，底层基于 Netty 实现同步非阻塞的 I/O。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway- demo.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>Spring Cloud Gateway 不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，限流。</p>
<p>Spring Cloud Gateway 和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。不过，目前更加推荐使用 Spring Cloud Gateway 而非 Zuul，Spring Cloud 生态对其支持更加友好。</p>
<ul>
<li>Github 地址： <a href="https://github.com/spring-cloud/spring-cloud-gateway" target="_blank" rel="noopener noreferrer">https://github.com/spring-cloud/spring-cloud-gateway</a></li>
<li>官网： <a href="https://spring.io/projects/spring-cloud-gateway" target="_blank" rel="noopener noreferrer">https://spring.io/projects/spring-cloud-gateway</a></li>
</ul>
<h3> Kong</h3>
<p>Kong 是一款基于 <a href="https://github.com/openresty/" target="_blank" rel="noopener noreferrer">OpenResty</a> （Nginx + Lua）的高性能、云原生、可扩展的网关系统，主要由 3 个组件组成：</p>
<ul>
<li>Kong Server：基于 Nginx 的服务器，用来接收 API 请求。</li>
<li>Apache Cassandra/PostgreSQL：用来存储操作数据。</li>
<li>Kong Dashboard：官方推荐 UI 管理工具，当然，也可以使用 RESTful 方式 管理 Admin api。</li>
</ul>
<blockquote>
<p>OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/kong-way.webp" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>Kong 提供了插件机制来扩展其功能，插件在 API 请求响应循环的生命周期中被执行。比如在服务上启用 Zipkin 插件：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Kong 本身就是一个 Lua 应用程序，并且是在 Openresty 的基础之上做了一层封装的应用。归根结底就是利用 Lua 嵌入 Nginx 的方式，赋予了 Nginx 可编程的能力，这样以插件的形式在 Nginx 这一层能够做到无限想象的事情。例如限流、安全访问策略、路由、负载均衡等等。编写一个 Kong 插件，就是按照 Kong 插件编写规范，写一个自己自定义的 Lua 脚本，然后加载到 Kong 中，最后引用即可。</p>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/kong-gateway-overview.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<ul>
<li>Github 地址： <a href="https://github.com/Kong/kong" target="_blank" rel="noopener noreferrer">https://github.com/Kong/kong</a></li>
<li>官网地址： <a href="https://konghq.com/kong" target="_blank" rel="noopener noreferrer">https://konghq.com/kong</a></li>
</ul>
<h3> APISIX</h3>
<p>APISIX 是一款基于 Nginx 和 etcd 的高性能、云原生、可扩展的网关系统。</p>
<blockquote>
<p>etcd 是使用 Go 语言开发的一个开源的、高可用的分布式 key-value 存储系统，使用 Raft 协议做分布式共识。</p>
</blockquote>
<p>与传统 API 网关相比，APISIX 具有动态路由和插件热加载，特别适合微服务系统下的 API 管理。并且，APISIX 与 SkyWalking（分布式链路追踪系统）、Zipkin（分布式链路追踪系统）、Prometheus（监控系统） 等 DevOps 生态工具对接都十分方便。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-cc6717d095705a584dd8daaaadb13c5c75b.png" alt="APISIX 架构图" tabindex="0"><figcaption>APISIX 架构图</figcaption></figure>
<p>作为 NGINX 和 Kong 的替代项目，APISIX 目前已经是 Apache 顶级开源项目，并且是最快毕业的国产开源项目。国内目前已经有很多知名企业（比如金山、有赞、爱奇艺、腾讯、贝壳）使用 APISIX 处理核心的业务流量。</p>
<p>根据官网介绍：“APISIX 已经生产可用，功能、性能、架构全面优于 Kong”。</p>
<p>APISIX 同样支持定制化的插件开发。开发者除了能够使用 Lua 语言开发插件，还能通过下面两种方式开发来避开 Lua 语言的学习成本：</p>
<ul>
<li>通过 Plugin Runner 来支持更多的主流编程语言（比如 Java、Python、Go 等等）。通过这样的方式，可以让后端工程师通过本地 RPC 通信，使用熟悉的编程语言开发 APISIX 的插件。这样做的好处是减少了开发成本，提高了开发效率，但是在性能上会有一些损失。</li>
<li>使用 Wasm（WebAssembly） 开发插件。Wasm 被嵌入到了 APISIX 中，用户可以使用 Wasm 去编译成 Wasm 的字节码在 APISIX 中运行。</li>
</ul>
<blockquote>
<p>Wasm 是基于堆栈的虚拟机的二进制指令格式，一种低级汇编语言，旨在非常接近已编译的机器代码，并且非常接近本机性能。Wasm 最初是为浏览器构建的，但是随着技术的成熟，在服务器端看到了越来越多的用例。</p>
</blockquote>
<figure><img src="https://oscimg.oschina.net/oscnet/up-a240d3b113cde647f5850f4c7cc55d4ff5c.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<ul>
<li>Github 地址：<a href="https://github.com/apache/apisix" target="_blank" rel="noopener noreferrer">https://github.com/apache/apisix</a></li>
<li>官网地址： <a href="https://apisix.apache.org/zh/" target="_blank" rel="noopener noreferrer">https://apisix.apache.org/zh/</a></li>
</ul>
<p>相关阅读：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/j8ggPGEHFu3x5ekJZyeZnA" target="_blank" rel="noopener noreferrer">为什么说 Apache APISIX 是最好的 API 网关？</a></li>
<li><a href="https://www.apiseven.com/zh/blog/why-we-need-Apache-APISIX" target="_blank" rel="noopener noreferrer">有了 NGINX 和 Kong，为什么还需要 Apache APISIX</a></li>
<li><a href="https://www.apiseven.com/zh/blog" target="_blank" rel="noopener noreferrer">APISIX 技术博客</a></li>
<li><a href="https://www.apiseven.com/zh/usercases" target="_blank" rel="noopener noreferrer">APISIX 用户案例</a></li>
</ul>
<h3> Shenyu</h3>
<p>Shenyu 是一款基于 WebFlux 的可扩展、高性能、响应式网关，Apache 顶级开源项目。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-1c2b39f22e5a0bb1730531429c4147bfbf8.png" alt="Shenyu 架构" tabindex="0"><figcaption>Shenyu 架构</figcaption></figure>
<p>Shenyu 通过插件扩展功能，插件是 ShenYu 的灵魂，并且插件也是可扩展和热插拔的。不同的插件实现不同的功能。Shenyu 自带了诸如限流、熔断、转发、重写、重定向、和路由监控等插件。</p>
<ul>
<li>Github 地址： <a href="https://github.com/apache/incubator-shenyu" target="_blank" rel="noopener noreferrer">https://github.com/apache/incubator-shenyu</a></li>
<li>官网地址： <a href="https://shenyu.apache.org/" target="_blank" rel="noopener noreferrer">https://shenyu.apache.org/</a></li>
</ul>
<h2> 参考</h2>
<ul>
<li>Kong 插件开发教程[通俗易懂]：<a href="https://cloud.tencent.com/developer/article/2104299" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/2104299</a></li>
<li>API 网关 Kong 实战：<a href="https://xie.infoq.cn/article/10e4dab2de0bdb6f2c3c93da6" target="_blank" rel="noopener noreferrer">https://xie.infoq.cn/article/10e4dab2de0bdb6f2c3c93da6</a></li>
<li>Spring Cloud Gateway 原理介绍和应用：<a href="https://blog.fintopia.tech/60e27b0e2078082a378ec5ed/" target="_blank" rel="noopener noreferrer">https://blog.fintopia.tech/60e27b0e2078082a378ec5ed/</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway-overview.png" type="image/png"/>
    </item>
    <item>
      <title>分布式配置中心常见问题总结(付费)</title>
      <link>https://javaguide.cn/distributed-system/distributed-configuration-center.html</link>
      <guid>https://javaguide.cn/distributed-system/distributed-configuration-center.html</guid>
      <source url="https://javaguide.cn/rss.xml">分布式配置中心常见问题总结(付费)</source>
      <description>分布式配置中心 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</description>
      <category>分布式</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>分布式配置中心</strong> 相关的面试题为我的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/distributed-system.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href="https://javaguide.cn/#/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的补充完善，两者可以配合使用。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/javamianshizhibei/distributed-system.png" type="image/png"/>
    </item>
    <item>
      <title>分布式ID设计指南</title>
      <link>https://javaguide.cn/distributed-system/distributed-id-design.html</link>
      <guid>https://javaguide.cn/distributed-system/distributed-id-design.html</guid>
      <source url="https://javaguide.cn/rss.xml">分布式ID设计指南</source>
      <description>提示 看到百度 Geek 说的一篇结合具体场景聊分布式 ID 设计的文章，感觉挺不错的。于是，我将这篇文章的部分内容整理到了这里。原文传送门：分布式 ID 生成服务的技术原理和项目实战 。 网上绝大多数的分布式 ID 生成服务，一般着重于技术原理剖析，很少见到根据具体的业务场景去选型 ID 生成服务的文章。</description>
      <category>分布式</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>看到百度 Geek 说的一篇结合具体场景聊分布式 ID 设计的文章，感觉挺不错的。于是，我将这篇文章的部分内容整理到了这里。原文传送门：<a href="https://mp.weixin.qq.com/s/bFDLb6U6EgI-DvCdLTq_QA" target="_blank" rel="noopener noreferrer">分布式 ID 生成服务的技术原理和项目实战</a> 。</p>
</div>
<p>网上绝大多数的分布式 ID 生成服务，一般着重于技术原理剖析，很少见到根据具体的业务场景去选型 ID 生成服务的文章。</p>
<p>本文结合一些使用场景，进一步探讨业务场景中对 ID 有哪些具体的要求。</p>
<h2> 场景一：订单系统</h2>
<p>我们在商场买东西一码付二维码，下单生成的订单号，使用到的优惠券码，联合商品兑换券码，这些是在网上购物经常使用到的单号，那么为什么有些单号那么长，有些只有几位数？有些单号一看就知道年月日的信息，有些却看不出任何意义？下面展开分析下订单系统中不同场景的 id 服务的具体实现。</p>
<h3> 1、一码付</h3>
<p>我们常见的一码付，指的是一个二维码可以使用支付宝或者微信进行扫码支付。</p>
<p>二维码的本质是一个字符串。聚合码的本质就是一个链接地址。用户使用支付宝微信直接扫一个码付钱，不用担心拿支付宝扫了微信的收款码或者用微信扫了支付宝的收款码，这极大减少了用户扫码支付的时间。</p>
<p>实现原理是当客户用 APP 扫码后，网站后台就会判断客户的扫码环境。（微信、支付宝、QQ 钱包、京东支付、云闪付等）。</p>
<p>判断扫码环境的原理就是根据打开链接浏览器的 HTTP header。任何浏览器打开 http 链接时，请求的 header 都会有 User-Agent(UA、用户代理)信息。</p>
<p>UA 是一个特殊字符串头，服务器依次可以识别出客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等很多信息。</p>
<p>各渠道对应支付产品的名称不一样，一定要仔细看各支付产品的 API 介绍。</p>
<ol>
<li>微信支付：JSAPI 支付支付</li>
<li>支付宝：手机网站支付</li>
<li>QQ 钱包：公众号支付</li>
</ol>
<p>其本质均为在 APP 内置浏览器中实现 HTML5 支付。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-pay-one-card.png" alt="文库会员支付示例" tabindex="0"><figcaption>文库会员支付示例</figcaption></figure>
<p>文库的研发同学在这个思路上，做了优化迭代。动态生成一码付的二维码预先绑定用户所选的商品信息和价格，根据用户所选的商品动态更新。这样不仅支持一码多平台调起支付，而且不用用户选择商品输入金额，即可完成订单支付的功能，很丝滑。用户在真正扫码后，服务端才通过前端获取用户 UID，结合二维码绑定的商品信息，真正的生成订单，发送支付信息到第三方（qq、微信、支付宝），第三方生成支付订单推给用户设备，从而调起支付。</p>
<p>区别于固定的一码付，在文库的应用中，使用到了动态二维码，二维码本质是一个短网址，ID 服务提供短网址的唯一标志参数。唯一的短网址映射的 ID 绑定了商品的订单信息，技术和业务的深度结合，缩短了支付流程，提升用户的支付体验。</p>
<h3> 2、订单号</h3>
<p>订单号在实际的业务过程中作为一个订单的唯一标识码存在，一般实现以下业务场景：</p>
<ol>
<li>用户订单遇到问题，需要找客服进行协助；</li>
<li>对订单进行操作，如线下收款，订单核销；</li>
<li>下单，改单，成单，退单，售后等系统内部的订单流程处理和跟进。</li>
</ol>
<p>很多时候搜索订单相关信息的时候都是以订单 ID 作为唯一标识符，这是由于订单号的生成规则的唯一性决定的。从技术角度看，除了 ID 服务必要的特性之外，在订单号的设计上需要体现几个特性：</p>
<p><strong>（1）信息安全</strong></p>
<p>编号不能透露公司的运营情况，比如日销、公司流水号等信息，以及商业信息和用户手机号，身份证等隐私信息。并且不能有明显的整体规律（可以有局部规律），任意修改一个字符就能查询到另一个订单信息，这也是不允许的。</p>
<p>类比于我们高考时候的考生编号的生成规则，一定不能是连号的，否则只需要根据顺序往下查询就能搜索到别的考生的成绩，这是绝对不可允许。</p>
<p><strong>（2）部分可读</strong></p>
<p>位数要便于操作，因此要求订单号的位数适中，且局部有规律。这样可以方便在订单异常，或者退货时客服查询。</p>
<p>过长的订单号或易读性差的订单号会导致客服输入困难且易错率较高，影响用户体验的售后体验。因此在实际的业务场景中，订单号的设计通常都会适当携带一些允许公开的对使用场景有帮助的信息，如时间，星期，类型等等，这个主要根据所涉及的编号对应的使用场景来。</p>
<p>而且像时间、星期这些自增长的属于作为订单号的设计的一部分元素，有助于解决业务累积而导致的订单号重复的问题。</p>
<p><strong>（3）查询效率</strong></p>
<p>常见的电商平台订单号大多是纯数字组成，兼具可读性的同时，int 类型相对 varchar 类型的查询效率更高，对在线业务更加友好。</p>
<h3> 3、优惠券和兑换券</h3>
<p>优惠券、兑换券是运营推广最常用的促销工具之一，合理使用它们，可以让买家得到实惠，商家提升商品销量。常见场景有：</p>
<ol>
<li>在文库购买【文库 VIP+QQ 音乐年卡】联合商品，支付成功后会得到 QQ 音乐年卡的兑换码，可以去 QQ 音乐 App 兑换音乐会员年卡；</li>
<li>疫情期间，部分地方政府发放的消费券；</li>
<li>瓶装饮料经常会出现输入优惠编码兑换奖品。</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-coupon.png" alt="优惠编码兑换奖品" tabindex="0"><figcaption>优惠编码兑换奖品</figcaption></figure>
<p>从技术角度看，有些场景适合 ID 即时生成，比如电商平台购物领取的优惠券，只需要在用户领取时分配优惠券信息即可。有些线上线下结合的场景，比如疫情优惠券，瓶盖开奖，京东卡，超市卡这种，则需要预先生成，预先生成的券码具备以下特性：</p>
<p>1.预先生成，在活动正式开始前提供出来进行活动预热；</p>
<p>2.优惠券体量大，以万为单位，通常在 10 万级别以上；</p>
<p>3.不可破解、仿制券码；</p>
<p>4.支持用后核销；</p>
<p>5.优惠券、兑换券属于广撒网的策略，所以利用率低，也就不适合使用数据。</p>
<p><strong>库进行存储（占空间，有效的数据有少）</strong></p>
<p>设计思路上，需要设计一种有效的兑换码生成策略，支持预先生成，支持校验，内容简洁，生成的兑换码都具有唯一性，那么这种策略就是一种特殊的编解码策略，按照约定的编解码规则支撑上述需求。</p>
<p>既然是一种编解码规则，那么需要约定编码空间(也就是用户看到的组成兑换码的字符)，编码空间由字符 a-z,A-Z,数字 0-9 组成，为了增强兑换码的可识别度，剔除大写字母 O 以及 I,可用字符如下所示，共 60 个字符：</p>
<p>abcdefghijklmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXZY0123456789</p>
<p>之前说过，兑换码要求近可能简洁，那么设计时就需要考虑兑换码的字符数，假设上限为 12 位，而字符空间有 60 位，那么可以表示的空间范围为 60^12=130606940160000000000000(也就是可以 12 位的兑换码可以生成天量,应该够运营同学挥霍了)，转换成 2 进制：</p>
<p>1001000100000000101110011001101101110011000000000000000000000(61 位)</p>
<p><strong>兑换码组成成分分析</strong></p>
<p>兑换码可以预先生成，并且不需要额外的存储空间保存这些信息，每一个优惠方案都有独立的一组兑换码(指运营同学组织的每一场运营活动都有不同的兑换码,不能混合使用, 例如双 11 兑换码不能使用在双 12 活动上)，每个兑换码有自己的编号，防止重复，为了保证兑换码的有效性，对兑换码的数据需要进行校验，当前兑换码的数据组成如下所示：</p>
<p>优惠方案 ID + 兑换码序列号 i + 校验码</p>
<p><strong>编码方案</strong></p>
<ol>
<li>兑换码序列号 i，代表当前兑换码是当前活动中第 i 个兑换码，兑换码序列号的空间范围决定了优惠活动可以发行的兑换码数目，当前采用 30 位 bit 位表示，可表示范围：1073741824（10 亿个券码）。</li>
<li>优惠方案 ID, 代表当前优惠方案的 ID 号，优惠方案的空间范围决定了可以组织的优惠活动次数，当前采用 15 位表示，可以表示范围：32768（考虑到运营活动的频率，以及 ID 的初始值 10000，15 位足够，365 天每天有运营活动，可以使用 54 年）。</li>
<li>校验码，校验兑换码是否有效，主要为了快捷的校验兑换码信息的是否正确，其次可以起到填充数据的目的，增强数据的散列性，使用 13 位表示校验位，其中分为两部分，前 6 位和后 7 位。</li>
</ol>
<p>深耕业务还会有区分通用券和单独券的情况，分别具备以下特点，技术实现需要因地制宜地思考。</p>
<ol>
<li>通用券：多个玩家都可以输入兑换，然后有总量限制，期限限制。</li>
<li>单独券：运营同学可以在后台设置兑换码的奖励物品、期限、个数，然后由后台生成兑换码的列表，兑换之后核销。</li>
</ol>
<h2> 场景二：Tracing</h2>
<h3> 1、日志跟踪</h3>
<p>在分布式服务架构下，一个 Web 请求从网关流入，有可能会调用多个服务对请求进行处理，拿到最终结果。这个过程中每个服务之间的通信又是单独的网络请求，无论请求经过的哪个服务出了故障或者处理过慢都会对前端造成影响。</p>
<p>处理一个 Web 请求要调用的多个服务，为了能更方便的查询哪个环节的服务出现了问题，现在常用的解决方案是为整个系统引入分布式链路跟踪。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-tracing.png" alt="在分布式链路跟踪" tabindex="0"><figcaption>在分布式链路跟踪</figcaption></figure>
<p>在分布式链路跟踪中有两个重要的概念：跟踪（trace）和 跨度（ span)。trace 是请求在分布式系统中的整个链路视图，span 则代表整个链路中不同服务内部的视图，span 组合在一起就是整个 trace 的视图。</p>
<p>在整个请求的调用链中，请求会一直携带 traceid 往下游服务传递，每个服务内部也会生成自己的 spanid 用于生成自己的内部调用视图，并和 traceid 一起传递给下游服务。</p>
<h3> 2、TraceId 生成规则</h3>
<p>这种场景下，生成的 ID 除了要求唯一之外，还要求生成的效率高、吞吐量大。traceid 需要具备接入层的服务器实例自主生成的能力，如果每个 trace 中的 ID 都需要请求公共的 ID 服务生成，纯纯的浪费网络带宽资源。且会阻塞用户请求向下游传递，响应耗时上升，增加了没必要的风险。所以需要服务器实例最好可以自行计算 tracid，spanid，避免依赖外部服务。</p>
<p>产生规则：服务器 IP + ID 产生的时间 + 自增序列 + 当前进程号 ，比如：</p>
<p>0ad1348f1403169275002100356696</p>
<p>前 8 位 0ad1348f 即产生 TraceId 的机器的 IP，这是一个十六进制的数字，每两位代表 IP 中的一段，我们把这个数字，按每两位转成 10 进制即可得到常见的 IP 地址表示方式 10.209.52.143，您也可以根据这个规律来查找到请求经过的第一个服务器。</p>
<p>后面的 13 位 1403169275002 是产生 TraceId 的时间。之后的 4 位 1003 是一个自增的序列，从 1000 涨到 9000，到达 9000 后回到 1000 再开始往上涨。最后的 5 位 56696 是当前的进程 ID，为了防止单机多进程出现 TraceId 冲突的情况，所以在 TraceId 末尾添加了当前的进程 ID。</p>
<h3> 3、SpanId 生成规则</h3>
<p>span 是层的意思，比如在第一个实例算是第一层， 请求代理或者分流到下一个实例处理，就是第二层，以此类推。通过层，SpanId 代表本次调用在整个调用链路树中的位置。</p>
<p>假设一个 服务器实例 A 接收了一次用户请求，代表是整个调用的根节点，那么 A 层处理这次请求产生的非服务调用日志记录 spanid 的值都是 0，A 层需要通过 RPC 依次调用 B、C、D 三个服务器实例，那么在 A 的日志中，SpanId 分别是 0.1，0.2 和 0.3，在 B、C、D 中，SpanId 也分别是 0.1，0.2 和 0.3；如果 C 系统在处理请求的时候又调用了 E，F 两个服务器实例，那么 C 系统中对应的 spanid 是 0.2.1 和 0.2.2，E、F 两个系统对应的日志也是 0.2.1 和 0.2.2。</p>
<p>根据上面的描述可以知道，如果把一次调用中所有的 SpanId 收集起来，可以组成一棵完整的链路树。</p>
<p><strong>spanid 的生成本质：在跨层传递透传的同时，控制大小版本号的自增来实现的。</strong></p>
<h2> 场景三：短网址</h2>
<p>短网址主要功能包括网址缩短与还原两大功能。相对于长网址，短网址可以更方便地在电子邮件，社交网络，微博和手机上传播，例如原来很长的网址通过短网址服务即可生成相应的短网址，避免折行或超出字符限制。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-short-url.png" alt="短网址作用" tabindex="0"><figcaption>短网址作用</figcaption></figure>
<p>常用的 ID 生成服务比如：MySQL ID 自增、 Redis 键自增、号段模式，生成的 ID 都是一串数字。短网址服务把客户的长网址转换成短网址，</p>
<p>实际是在 dwz.cn 域名后面拼接新产生的数字类型 ID，直接用数字 ID，网址长度也有些长，服务可以通过数字 ID 转更高进制的方式压缩长度。这种算法在短网址的技术实现上越来越多了起来，它可以进一步压缩网址长度。转进制的压缩算法在生活中有广泛的应用场景，举例：</p>
<ul>
<li>客户的长网址：<a href="https://wenku.baidu.com/ndbusiness/browse/wenkuvipcashier?cashier_code=PCoperatebanner" target="_blank" rel="noopener noreferrer">https://wenku.baidu.com/ndbusiness/browse/wenkuvipcashier?cashier_code=PCoperatebanner</a></li>
<li>ID 映射的短网址：<a href="https://dwz.cn/2047601319t66" target="_blank" rel="noopener noreferrer">https://dwz.cn/2047601319t66</a> (演示使用，可能无法正确打开)</li>
<li>转进制后的短网址：<a href="https://dwz.cn/2ezwDJ0" target="_blank" rel="noopener noreferrer">https://dwz.cn/2ezwDJ0</a> (演示使用，可能无法正确打开)</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-pay-one-card.png" type="image/png"/>
    </item>
    <item>
      <title>分布式ID介绍&amp;实现方案总结</title>
      <link>https://javaguide.cn/distributed-system/distributed-id.html</link>
      <guid>https://javaguide.cn/distributed-system/distributed-id.html</guid>
      <source url="https://javaguide.cn/rss.xml">分布式ID介绍&amp;实现方案总结</source>
      <description>分布式 ID 介绍 什么是 ID？ 日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。 我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应 简单来说，ID 就是数据的唯一标识。 什么是分布式 ID？ 分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。</description>
      <category>分布式</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 分布式 ID 介绍</h2>
<h3> 什么是 ID？</h3>
<p>日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。</p>
<p>我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应</p>
<p>简单来说，<strong>ID 就是数据的唯一标识</strong>。</p>
<h3> 什么是分布式 ID？</h3>
<p>分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。</p>
<p>我简单举一个分库分表的例子。</p>
<p>我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。</p>
<p>在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。<strong>我们如何为不同的数据节点生成全局唯一主键呢？</strong></p>
<p>这个时候就需要生成<strong>分布式 ID</strong>了。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 分布式 ID 需要满足哪些要求?</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-requirements.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>分布式 ID 作为分布式系统中必不可少的一环，很多地方都要用到分布式 ID。</p>
<p>一个最基本的分布式 ID 需要满足下面这些要求：</p>
<ul>
<li><strong>全局唯一</strong>：ID 的全局唯一性肯定是首先要满足的！</li>
<li><strong>高性能</strong>：分布式 ID 的生成速度要快，对本地资源消耗要小。</li>
<li><strong>高可用</strong>：生成分布式 ID 的服务要保证可用性无限接近于 100%。</li>
<li><strong>方便易用</strong>：拿来即用，使用方便，快速接入！</li>
</ul>
<p>除了这些之外，一个比较好的分布式 ID 还应保证：</p>
<ul>
<li><strong>安全</strong>：ID 中不包含敏感信息。</li>
<li><strong>有序递增</strong>：如果要把 ID 存放在数据库的话，ID 的有序性可以提升数据库写入速度。并且，很多时候 ，我们还很有可能会直接通过 ID 来进行排序。</li>
<li><strong>有具体的业务含义</strong>：生成的 ID 如果能有具体的业务含义，可以让定位问题以及开发更透明化（通过 ID 就能确定是哪个业务）。</li>
<li><strong>独立部署</strong>：也就是分布式系统单独有一个发号器服务，专门用来生成分布式 ID。这样就生成 ID 的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式 ID 的场景比较多的话，独立部署的发号器服务还是很有必要的。</li>
</ul>
<h2> 分布式 ID 常见解决方案</h2>
<h3> 数据库</h3>
<h4> 数据库主键自增</h4>
<p>这种方式就比较简单直白了，就是通过关系型数据库的自增主键产生来唯一的 ID。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/the-primary-key-of-the-database-increases-automatically.png" alt="数据库主键自增" tabindex="0"><figcaption>数据库主键自增</figcaption></figure>
<p>以 MySQL 举例，我们通过下面的方式即可。</p>
<p><strong>1.创建一个数据库表。</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>stub</code> 字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给 <code>stub</code> 字段创建了唯一索引，保证其唯一性。</p>
<p><strong>2.通过 <code>replace into</code> 来插入数据。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入数据这里，我们没有使用 <code>insert into</code> 而是使用 <code>replace into</code> 来插入数据，具体步骤是这样的：</p>
<ul>
<li>
<p>第一步：尝试把数据插入到表中。</p>
</li>
<li>
<p>第二步：如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。</p>
</li>
</ul>
<p>这种方式的优缺点也比较明显：</p>
<ul>
<li><strong>优点</strong>：实现起来比较简单、ID 有序递增、存储消耗空间小</li>
<li><strong>缺点</strong>：支持的并发量不大、存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）、每次获取 ID 都要访问一次数据库（增加了对数据库的压力，获取速度也慢）</li>
</ul>
<h4> 数据库号段模式</h4>
<p>数据库主键自增这种模式，每次获取 ID 都要访问一次数据库，ID 需求比较大的时候，肯定是不行的。</p>
<p>如果我们可以批量获取，然后存在在内存里面，需要用到的时候，直接从内存里面拿就舒服了！这也就是我们说的 <strong>基于数据库的号段模式来生成分布式 ID。</strong></p>
<p>数据库的号段模式也是目前比较主流的一种分布式 ID 生成方式。像滴滴开源的<a href="https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener noreferrer">Tinyid</a> 就是基于这种方式来做的。不过，TinyId 使用了双号段缓存、增加多 db 支持等方式来进一步优化。</p>
<p>以 MySQL 举例，我们通过下面的方式即可。</p>
<p><strong>1. 创建一个数据库表。</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>current_max_id</code> 字段和<code>step</code>字段主要用于获取批量 ID，获取的批量 id 为：<code>current_max_id ~ current_max_id+step</code>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/database-number-segment-mode.png" alt="数据库号段模式" tabindex="0"><figcaption>数据库号段模式</figcaption></figure>
<p><code>version</code> 字段主要用于解决并发问题（乐观锁）,<code>biz_type</code> 主要用于表示业务类型。</p>
<p><strong>2. 先插入一行数据。</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 通过 SELECT 获取指定业务下的批量唯一 ID</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 不够用的话，更新之后重新 SELECT 即可。</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于数据库主键自增的方式，<strong>数据库的号段模式对于数据库的访问次数更少，数据库压力更小。</strong></p>
<p>另外，为了避免单点问题，你可以从使用主从模式来提高可用性。</p>
<p><strong>数据库号段模式的优缺点:</strong></p>
<ul>
<li><strong>优点</strong>：ID 有序递增、存储消耗空间小</li>
<li><strong>缺点</strong>：存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）</li>
</ul>
<h4> NoSQL</h4>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/nosql-distributed-id.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>一般情况下，NoSQL 方案使用 Redis 多一些。我们通过 Redis 的 <code>incr</code> 命令即可实现对 id 原子顺序递增。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了提高可用性和并发，我们可以使用 Redis Cluster。Redis Cluster 是 Redis 官方提供的 Redis 集群解决方案（3.0+版本）。</p>
<p>除了 Redis Cluster 之外，你也可以使用开源的 Redis 集群方案<a href="https://github.com/CodisLabs/codis" target="_blank" rel="noopener noreferrer">Codis</a> （大规模集群比如上百个节点的时候比较推荐）。</p>
<p>除了高可用和并发之外，我们知道 Redis 基于内存，我们需要持久化数据，避免重启机器或者机器故障后数据丢失。Redis 支持两种不同的持久化方式：<strong>快照（snapshotting，RDB）</strong>、<strong>只追加文件（append-only file, AOF）</strong>。 并且，Redis 4.0 开始支持 <strong>RDB 和 AOF 的混合持久化</strong>（默认关闭，可以通过配置项 <code>aof-use-rdb-preamble</code> 开启）。</p>
<p>关于 Redis 持久化，我这里就不过多介绍。不了解这部分内容的小伙伴，可以看看 <a href="https://snailclimb.gitee.io/javaguide/#/docs/database/Redis/redis-all" target="_blank" rel="noopener noreferrer">JavaGuide 对于 Redis 知识点的总结</a>。</p>
<p><strong>Redis 方案的优缺点：</strong></p>
<ul>
<li><strong>优点</strong>：性能不错并且生成的 ID 是有序递增的</li>
<li><strong>缺点</strong>：和数据库主键自增方案的缺点类似</li>
</ul>
<p>除了 Redis 之外，MongoDB ObjectId 经常也会被拿来当做分布式 ID 的解决方案。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/mongodb9-objectId-distributed-id.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>MongoDB ObjectId 一共需要 12 个字节存储：</p>
<ul>
<li>0~3：时间戳</li>
<li>3~6：代表机器 ID</li>
<li>7~8：机器进程 ID</li>
<li>9~11：自增值</li>
</ul>
<p><strong>MongoDB 方案的优缺点：</strong></p>
<ul>
<li><strong>优点</strong>：性能不错并且生成的 ID 是有序递增的</li>
<li><strong>缺点</strong>：需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）、有安全性问题（ID 生成有规律性）</li>
</ul>
<h3> 算法</h3>
<h4> UUID</h4>
<p>UUID 是 Universally Unique Identifier（通用唯一标识符） 的缩写。UUID 包含 32 个 16 进制数字（8-4-4-4-12）。</p>
<p>JDK 就提供了现成的生成 UUID 的方法，一行代码就行了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://tools.ietf.org/html/rfc4122" target="_blank" rel="noopener noreferrer">RFC 4122</a> 中关于 UUID 的示例是这样的：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/rfc-4122-uuid.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>我们这里重点关注一下这个 Version(版本)，不同的版本对应的 UUID 的生成规则是不同的。</p>
<p>5 种不同的 Version(版本)值分别对应的含义（参考<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" target="_blank" rel="noopener noreferrer">维基百科对于 UUID 的介绍</a>）：</p>
<ul>
<li><strong>版本 1</strong> : UUID 是根据时间和节点 ID（通常是 MAC 地址）生成；</li>
<li><strong>版本 2</strong> : UUID 是根据标识符（通常是组或用户 ID）、时间和节点 ID 生成；</li>
<li><strong>版本 3、版本 5</strong> : 版本 5 - 确定性 UUID 通过散列（hashing）名字空间（namespace）标识符和名称生成；</li>
<li><strong>版本 4</strong> : UUID 使用<a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%80%A7" target="_blank" rel="noopener noreferrer">随机性</a>或<a href="https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A7" target="_blank" rel="noopener noreferrer">伪随机性</a>生成。</li>
</ul>
<p>下面是 Version 1 版本下生成的 UUID 的示例：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/version1-uuid.png" alt="Version 1 版本下生成的 UUID 的示例" tabindex="0"><figcaption>Version 1 版本下生成的 UUID 的示例</figcaption></figure>
<p>JDK 中通过 <code>UUID</code> 的 <code>randomUUID()</code> 方法生成的 UUID 的版本默认为 4。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，Variant(变体)也有 4 种不同的值，这种值分别对应不同的含义。这里就不介绍了，貌似平时也不怎么需要关注。</p>
<p>需要用到的时候，去看看维基百科对于 UUID 的 Variant(变体) 相关的介绍即可。</p>
<p>从上面的介绍中可以看出，UUID 可以保证唯一性，因为其生成规则包括 MAC 地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，计算机基于这些规则生成的 UUID 是肯定不会重复的。</p>
<p>虽然，UUID 可以做到全局唯一性，但是，我们一般很少会使用它。</p>
<p>比如使用 UUID 作为 MySQL 数据库主键的时候就非常不合适：</p>
<ul>
<li>数据库主键要尽量越短越好，而 UUID 的消耗的存储空间比较大（32 个字符串，128 位）。</li>
<li>UUID 是无顺序的，InnoDB 引擎下，数据库主键的无序性会严重影响数据库性能。</li>
</ul>
<p>最后，我们再简单分析一下 <strong>UUID 的优缺点</strong> （面试的时候可能会被问到的哦！） :</p>
<ul>
<li><strong>优点</strong>：生成速度比较快、简单易用</li>
<li><strong>缺点</strong>：存储消耗空间大（32 个字符串，128 位）、 不安全（基于 MAC 地址生成 UUID 的算法会造成 MAC 地址泄露)、无序（非自增）、没有具体业务含义、需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）</li>
</ul>
<h4> Snowflake(雪花算法)</h4>
<p>Snowflake 是 Twitter 开源的分布式 ID 生成算法。Snowflake 由 64 bit 的二进制数字组成，这 64bit 的二进制被分成了几部分，每一部分存储的数据都有特定的含义：</p>
<ul>
<li><strong>第 0 位</strong>：符号位（标识正负），始终为 0，没有用，不用管。</li>
<li><strong>第 1~41 位</strong>：一共 41 位，用来表示时间戳，单位是毫秒，可以支撑 2 ^41 毫秒（约 69 年）</li>
<li><strong>第 42~52 位</strong>：一共 10 位，一般来说，前 5 位表示机房 ID，后 5 位表示机器 ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群/机房的节点。</li>
<li><strong>第 53~64 位</strong>：一共 12 位，用来表示序列号。 序列号为自增值，代表单台机器每毫秒能够产生的最大 ID 数(2^12 = 4096),也就是说单台机器每毫秒最多可以生成 4096 个 唯一 ID。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/snowflake-distributed-id-schematic-diagram.png" alt="Snowflake 示意图" tabindex="0"><figcaption>Snowflake 示意图</figcaption></figure>
<p>如果你想要使用 Snowflake 算法的话，一般不需要你自己再造轮子。有很多基于 Snowflake 算法的开源实现比如美团 的 Leaf、百度的 UidGenerator，并且这些开源实现对原有的 Snowflake 算法进行了优化。</p>
<p>另外，在实际项目中，我们一般也会对 Snowflake 算法进行改造，最常见的就是在 Snowflake 算法生成的 ID 中加入业务类型信息。</p>
<p>我们再来看看 Snowflake 算法的优缺点：</p>
<ul>
<li><strong>优点</strong>：生成速度比较快、生成的 ID 有序递增、比较灵活（可以对 Snowflake 算法进行简单的改造比如加入业务 ID）</li>
<li><strong>缺点</strong>：需要解决重复 ID 问题（依赖时间，当机器时间不对的情况下，可能导致会产生重复 ID）。</li>
</ul>
<h3> 开源框架</h3>
<h4> UidGenerator(百度)</h4>
<p><a href="https://github.com/baidu/uid-generator" target="_blank" rel="noopener noreferrer">UidGenerator</a> 是百度开源的一款基于 Snowflake(雪花算法)的唯一 ID 生成器。</p>
<p>不过，UidGenerator 对 Snowflake(雪花算法)进行了改进，生成的唯一 ID 组成如下。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-distributed-id-schematic-diagram.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>可以看出，和原始 Snowflake(雪花算法)生成的唯一 ID 的组成不太一样。并且，上面这些参数我们都可以自定义。</p>
<p>UidGenerator 官方文档中的介绍如下：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-introduction-official-documents.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>自 18 年后，UidGenerator 就基本没有再维护了，我这里也不过多介绍。想要进一步了解的朋友，可以看看 <a href="https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md" target="_blank" rel="noopener noreferrer">UidGenerator 的官方介绍</a>。</p>
<h4> Leaf(美团)</h4>
<p><strong><a href="https://github.com/Meituan-Dianping/Leaf" target="_blank" rel="noopener noreferrer">Leaf</a></strong> 是美团开源的一个分布式 ID 解决方案 。这个项目的名字 Leaf（树叶） 起源于德国哲学家、数学家莱布尼茨的一句话：“There are no two identical leaves in the world”（世界上没有两片相同的树叶） 。这名字起得真心挺不错的，有点文艺青年那味了！</p>
<p>Leaf 提供了 <strong>号段模式</strong> 和 <strong>Snowflake(雪花算法)</strong> 这两种模式来生成分布式 ID。并且，它支持双号段，还解决了雪花 ID 系统时钟回拨问题。不过，时钟问题的解决需要弱依赖于 Zookeeper 。</p>
<p>Leaf 的诞生主要是为了解决美团各个业务线生成分布式 ID 的方法多种多样以及不可靠的问题。</p>
<p>Leaf 对原有的号段模式进行改进，比如它这里增加了双号段避免获取 DB 在获取号段的时候阻塞请求获取 ID 的线程。简单来说，就是我一个号段还没用完之前，我自己就主动提前去获取下一个号段（图片来自于美团官方文章：<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener noreferrer">《Leaf——美团点评分布式 ID 生成系统》</a>）。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-5c152efed042a8fe7e13692e0339d577f5c.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>根据项目 README 介绍，在 4C8G VM 基础上，通过公司 RPC 方式调用，QPS 压测结果近 5w/s，TP999 1ms。</p>
<h4> Tinyid(滴滴)</h4>
<p><a href="https://github.com/didi/tinyid" target="_blank" rel="noopener noreferrer">Tinyid</a> 是滴滴开源的一款基于数据库号段模式的唯一 ID 生成器。</p>
<p>数据库号段模式的原理我们在上面已经介绍过了。<strong>Tinyid 有哪些亮点呢？</strong></p>
<p>为了搞清楚这个问题，我们先来看看基于数据库号段模式的简单架构方案。（图片来自于 Tinyid 的官方 wiki:<a href="https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener noreferrer">《Tinyid 原理介绍》</a>）</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-4afc0e45c0c86ba5ad645d023dce11e53c2.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>在这种架构模式下，我们通过 HTTP 请求向发号器服务申请唯一 ID。负载均衡 router 会把我们的请求送往其中的一台 tinyid-server。</p>
<p>这种方案有什么问题呢？在我看来（Tinyid 官方 wiki 也有介绍到），主要由下面这 2 个问题：</p>
<ul>
<li>获取新号段的情况下，程序获取唯一 ID 的速度比较慢。</li>
<li>需要保证 DB 高可用，这个是比较麻烦且耗费资源的。</li>
</ul>
<p>除此之外，HTTP 调用也存在网络开销。</p>
<p>Tinyid 的原理比较简单，其架构如下图所示：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-53f74cd615178046d6c04fe50513fee74ce.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>相比于基于数据库号段模式的简单架构方案，Tinyid 方案主要做了下面这些优化：</p>
<ul>
<li><strong>双号段缓存</strong>：为了避免在获取新号段的情况下，程序获取唯一 ID 的速度比较慢。 Tinyid 中的号段在用到一定程度的时候，就会去异步加载下一个号段，保证内存中始终有可用号段。</li>
<li><strong>增加多 db 支持</strong>：支持多个 DB，并且，每个 DB 都能生成唯一 ID，提高了可用性。</li>
<li><strong>增加 tinyid-client</strong>：纯本地操作，无 HTTP 请求消耗，性能和可用性都有很大提升。</li>
</ul>
<p>Tinyid 的优缺点这里就不分析了，结合数据库号段模式的优缺点和 Tinyid 的原理就能知道。</p>
<h2> 总结</h2>
<p>通过这篇文章，我基本上已经把最常见的分布式 ID 生成方案都总结了一波。</p>
<p>除了上面介绍的方式之外，像 ZooKeeper 这类中间件也可以帮助我们生成唯一 ID。<strong>没有银弹，一定要结合实际项目来选择最适合自己的方案。</strong></p>
<p>不过，本文主要介绍的是分布式 ID 的理论知识。在实际的面试中，面试官可能会结合具体的业务场景来考察你对分布式 ID 的设计，你可以参考这篇文章：<a href="https://chat.yqcloud.top/distributed-id-design.md" target="_blank" rel="noopener noreferrer">分布式 ID 设计指南</a>（对于实际工作中分布式 ID 的设计也非常有帮助）。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png" type="image/png"/>
    </item>
    <item>
      <title>分布式锁常见实现方案总结</title>
      <link>https://javaguide.cn/distributed-system/distributed-lock-implementations.html</link>
      <guid>https://javaguide.cn/distributed-system/distributed-lock-implementations.html</guid>
      <source url="https://javaguide.cn/rss.xml">分布式锁常见实现方案总结</source>
      <description>通常情况下，我们一般会选择基于 Redis 或者 ZooKeeper 实现分布式锁，Redis 用的要更多一点，我这里也先以 Redis 为例介绍分布式锁的实现。 基于 Redis 实现分布式锁 如何基于 Redis 实现一个最简易的分布式锁？ 不论是本地锁还是分布式锁，核心都在于“互斥”。 在 Redis 中， SETNX 命令是可以帮助我们实现互斥。SETNX 即 SET if Not eXists (对应 Java 中的 setIfAbsent 方法)，如果 key 不存在的话，才会设置 key 的值。如果 key 已经存在， SETNX 啥也不做。</description>
      <category>分布式</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>通常情况下，我们一般会选择基于 Redis 或者 ZooKeeper 实现分布式锁，Redis 用的要更多一点，我这里也先以 Redis 为例介绍分布式锁的实现。</p>
<h2> 基于 Redis 实现分布式锁</h2>
<h3> 如何基于 Redis 实现一个最简易的分布式锁？</h3>
<p>不论是本地锁还是分布式锁，核心都在于“互斥”。</p>
<p>在 Redis 中， <code>SETNX</code> 命令是可以帮助我们实现互斥。<code>SETNX</code> 即 <strong>SET</strong> if <strong>N</strong>ot e<strong>X</strong>ists (对应 Java 中的 <code>setIfAbsent</code> 方法)，如果 key 不存在的话，才会设置 key 的值。如果 key 已经存在， <code>SETNX</code> 啥也不做。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释放锁的话，直接通过 <code>DEL</code> 命令删除对应的 key 即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了防止误删到其他的锁，这里我们建议使用 Lua 脚本通过 key 对应的 value（唯一值）来判断。</p>
<p>选用 Lua 脚本是为了保证解锁操作的原子性。因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，从而保证了锁释放操作的原子性。</p>
<div class="language-lua line-numbers-mode" data-ext="lua"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-setnx.png" alt="Redis 实现简易分布式锁" tabindex="0"><figcaption>Redis 实现简易分布式锁</figcaption></figure>
<p>这是一种最简易的 Redis 分布式锁实现，实现方式比较简单，性能也很高效。不过，这种方式实现分布式锁存在一些问题。就比如应用程序遇到一些问题比如释放锁的逻辑突然挂掉，可能会导致锁无法被释放，进而造成共享资源无法再被其他线程/进程访问。</p>
<h3> 为什么要给锁设置一个过期时间？</h3>
<p>为了避免锁无法被释放，我们可以想到的一个解决办法就是：<strong>给这个 key（也就是锁） 设置一个过期时间</strong> 。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>lockKey</strong>：加锁的锁名；</li>
<li><strong>uniqueValue</strong>：能够唯一标示锁的随机字符串；</li>
<li><strong>NX</strong>：只有当 lockKey 对应的 key 值不存在的时候才能 SET 成功；</li>
<li><strong>EX</strong>：过期时间设置（秒为单位）EX 3 标示这个锁有一个 3 秒的自动过期时间。与 EX 对应的是 PX（毫秒为单位），这两个都是过期时间设置。</li>
</ul>
<p><strong>一定要保证设置指定 key 的值和过期时间是一个原子操作！！！</strong> 不然的话，依然可能会出现锁无法被释放的问题。</p>
<p>这样确实可以解决问题，不过，这种解决办法同样存在漏洞：<strong>如果操作共享资源的时间大于过期时间，就会出现锁提前过期的问题，进而导致分布式锁直接失效。如果锁的超时时间设置过长，又会影响到性能。</strong></p>
<p>你或许在想：<strong>如果操作共享资源的操作还未完成，锁过期时间能够自己续期就好了！</strong></p>
<h3> 如何实现锁的优雅续期？</h3>
<p>对于 Java 开发的小伙伴来说，已经有了现成的解决方案：<strong><a href="https://github.com/redisson/redisson" target="_blank" rel="noopener noreferrer">Redisson</a></strong> 。其他语言的解决方案，可以在 Redis 官方文档中找到，地址：<a href="https://redis.io/topics/distlock" target="_blank" rel="noopener noreferrer">https://redis.io/topics/distlock</a> 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/redis-distributed-lock.png" alt="Distributed locks with Redis" tabindex="0"><figcaption>Distributed locks with Redis</figcaption></figure>
<p>Redisson 是一个开源的 Java 语言 Redis 客户端，提供了很多开箱即用的功能，不仅仅包括多种分布式锁的实现。并且，Redisson 还支持 Redis 单机、Redis Sentinel、Redis Cluster 等多种部署架构。</p>
<p>Redisson 中的分布式锁自带自动续期机制，使用起来非常简单，原理也比较简单，其提供了一个专门用来监控和续期锁的 <strong>Watch Dog（ 看门狗）</strong>，如果操作共享资源的线程还未执行完成的话，Watch Dog 会不断地延长锁的过期时间，进而保证锁不会因为超时而被释放。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-redisson-renew-expiration.png" alt="Redisson 看门狗自动续期" tabindex="0"><figcaption>Redisson 看门狗自动续期</figcaption></figure>
<p>看门狗名字的由来于 <code>getLockWatchdogTimeout()</code> 方法，这个方法返回的是看门狗给锁续期的过期时间，默认为 30 秒（<a href="https://github.com/redisson/redisson/releases/tag/redisson-3.17.6" target="_blank" rel="noopener noreferrer">redisson-3.17.6</a>）。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>renewExpiration()</code> 方法包含了看门狗的主要逻辑：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，每过 10 秒，看门狗就会执行续期操作，将锁的超时时间设置为 30 秒。看门狗续期前也会先判断是否需要执行续期操作，需要才会执行续期，否则取消续期操作。</p>
<p>Watch Dog 通过调用 <code>renewExpirationAsync()</code> 方法实现锁的异步续期：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出， <code>renewExpirationAsync</code> 方法其实是调用 Lua 脚本实现的续期，这样做主要是为了保证续期操作的原子性。</p>
<p>我这里以 Redisson 的分布式可重入锁 <code>RLock</code> 为例来说明如何使用 Redisson 实现分布式锁：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有未指定锁超时时间，才会使用到 Watch Dog 自动续期机制。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 Redis 来实现分布式锁的话，还是比较推荐直接基于 Redisson 来做的。</p>
<h3> 如何实现可重入锁？</h3>
<p>所谓可重入锁指的是在一个线程中可以多次获取同一把锁，比如一个线程在执行一个带锁的方法，该方法中又调用了另一个需要相同锁的方法，则该线程可以直接执行调用的方法即可重入 ，而无需重新获得锁。像 Java 中的 <code>synchronized</code> 和 <code>ReentrantLock</code> 都属于可重入锁。</p>
<p><strong>不可重入的分布式锁基本可以满足绝大部分业务场景了，一些特殊的场景可能会需要使用可重入的分布式锁。</strong></p>
<p>可重入分布式锁的实现核心思路是线程在获取锁的时候判断是否为自己的锁，如果是的话，就不用再重新获取了。为此，我们可以为每个锁关联一个可重入计数器和一个占有它的线程。当可重入计数器大于 0 时，则锁被占有，需要判断占有该锁的线程和请求获取锁的线程是否为同一个。</p>
<p>实际项目中，我们不需要自己手动实现，推荐使用我们上面提到的 <strong>Redisson</strong> ，其内置了多种类型的锁比如可重入锁（Reentrant Lock）、自旋锁（Spin Lock）、公平锁（Fair Lock）、多重锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/redisson-readme-locks.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> Redis 如何解决集群情况下分布式锁的可靠性？</h3>
<p>为了避免单点故障，生产环境下的 Redis 服务通常是集群化部署的。</p>
<p>Redis 集群下，上面介绍到的分布式锁的实现会存在一些问题。由于 Redis 集群数据同步到各个节点时是异步的，如果在 Redis 主节点获取到锁后，在没有同步到其他节点时，Redis 主节点宕机了，此时新的 Redis 主节点依然可以获取锁，所以多个应用服务就可以同时获取到锁。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/redis-master-slave-distributed-lock.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>针对这个问题，Redis 之父 antirez 设计了 <a href="https://redis.io/topics/distlock" target="_blank" rel="noopener noreferrer">Redlock 算法</a> 来解决。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-redis.io-realock.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>Redlock 算法的思想是让客户端向 Redis 集群中的多个独立的 Redis 实例依次请求申请加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁，否则加锁失败。</p>
<p>即使部分 Redis 节点出现问题，只要保证 Redis 集群中有半数以上的 Redis 节点可用，分布式锁服务就是正常的。</p>
<p>Redlock 是直接操作 Redis 节点的，并不是通过 Redis 集群操作的，这样才可以避免 Redis 集群主从切换导致的锁丢失问题。</p>
<p>Redlock 实现比较复杂，性能比较差，发生时钟变迁的情况下还存在安全性隐患。《数据密集型应用系统设计》一书的作者 Martin Kleppmann 曾经专门发文（<a href="https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html" target="_blank" rel="noopener noreferrer">How to do distributed locking - Martin Kleppmann - 2016</a>）怼过 Redlock，他认为这是一个很差的分布式锁实现。感兴趣的朋友可以看看<a href="https://mp.weixin.qq.com/s?__biz=Mzg3NjU3NTkwMQ==&amp;mid=2247505097&amp;idx=1&amp;sn=5c03cb769c4458350f4d4a321ad51f5a&amp;source=41#wechat_redirect" target="_blank" rel="noopener noreferrer">Redis 锁从面试连环炮聊到神仙打架</a>这篇文章，有详细介绍到 antirez 和 Martin Kleppmann 关于 Redlock 的激烈辩论。</p>
<p>实际项目中不建议使用 Redlock 算法，成本和收益不成正比。</p>
<p>如果不是非要实现绝对可靠的分布式锁的话，其实单机版 Redis 就完全够了，实现简单，性能也非常高。如果你必须要实现一个绝对可靠的分布式锁的话，可以基于 ZooKeeper 来做，只是性能会差一些。</p>
<h2> 基于 ZooKeeper 实现分布式锁</h2>
<p>Redis 实现分布式锁性能较高，ZooKeeper 实现分布式锁可靠性更高。实际项目中，我们应该根据业务的具体需求来选择。</p>
<h3> 如何基于 ZooKeeper 实现分布式锁？</h3>
<p>ZooKeeper 分布式锁是基于 <strong>临时顺序节点</strong> 和 <strong>Watcher（事件监听器）</strong> 实现的。</p>
<p>获取锁：</p>
<ol>
<li>首先我们要有一个持久节点<code>/locks</code>，客户端获取锁就是在<code>locks</code>下创建临时顺序节点。</li>
<li>假设客户端 1 创建了<code>/locks/lock1</code>节点，创建成功之后，会判断 <code>lock1</code>是否是 <code>/locks</code> 下最小的子节点。</li>
<li>如果 <code>lock1</code>是最小的子节点，则获取锁成功。否则，获取锁失败。</li>
<li>如果获取锁失败，则说明有其他的客户端已经成功获取锁。客户端 1 并不会不停地循环去尝试加锁，而是在前一个节点比如<code>/locks/lock0</code>上注册一个事件监听器。这个监听器的作用是当前一个节点释放锁之后通知客户端 1（避免无效自旋），这样客户端 1 就加锁成功了。</li>
</ol>
<p>释放锁：</p>
<ol>
<li>成功获取锁的客户端在执行完业务流程之后，会将对应的子节点删除。</li>
<li>成功获取锁的客户端在出现故障之后，对应的子节点由于是临时顺序节点，也会被自动删除，避免了锁无法被释放。</li>
<li>我们前面说的事件监听器其实监听的就是这个子节点删除事件，子节点删除就意味着锁被释放。</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-zookeeper.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>实际项目中，推荐使用 Curator 来实现 ZooKeeper 分布式锁。Curator 是 Netflix 公司开源的一套 ZooKeeper Java 客户端框架，相比于 ZooKeeper 自带的客户端 zookeeper 来说，Curator 的封装更加完善，各种 API 都可以比较方便地使用。</p>
<p><code>Curator</code>主要实现了下面四种锁：</p>
<ul>
<li><code>InterProcessMutex</code>：分布式可重入排它锁</li>
<li><code>InterProcessSemaphoreMutex</code>：分布式不可重入排它锁</li>
<li><code>InterProcessReadWriteLock</code>：分布式读写锁</li>
<li><code>InterProcessMultiLock</code>：将多个锁作为单个实体管理的容器，获取锁的时候获取所有锁，释放锁也会释放所有锁资源（忽略释放失败的锁）。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 为什么要用临时顺序节点？</h3>
<p>每个数据节点在 ZooKeeper 中被称为 <strong>znode</strong>，它是 ZooKeeper 中数据的最小单元。</p>
<p>我们通常是将 znode 分为 4 大类：</p>
<ul>
<li><strong>持久（PERSISTENT）节点</strong>：一旦创建就一直存在即使 ZooKeeper 集群宕机，直到将其删除。</li>
<li><strong>临时（EPHEMERAL）节点</strong>：临时节点的生命周期是与 <strong>客户端会话（session）</strong> 绑定的，<strong>会话消失则节点消失</strong> 。并且，<strong>临时节点只能做叶子节点</strong> ，不能创建子节点。</li>
<li><strong>持久顺序（PERSISTENT_SEQUENTIAL）节点</strong>：除了具有持久（PERSISTENT）节点的特性之外， 子节点的名称还具有顺序性。比如 <code>/node1/app0000000001</code>、<code>/node1/app0000000002</code> 。</li>
<li><strong>临时顺序（EPHEMERAL_SEQUENTIAL）节点</strong>：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。</li>
</ul>
<p>可以看出，临时节点相比持久节点，最主要的是对会话失效的情况处理不一样，临时节点会话消失则对应的节点消失。这样的话，如果客户端发生异常导致没来得及释放锁也没关系，会话失效节点自动被删除，不会发生死锁的问题。</p>
<p>使用 Redis 实现分布式锁的时候，我们是通过过期时间来避免锁无法被释放导致死锁问题的，而 ZooKeeper 直接利用临时节点的特性即可。</p>
<p>假设不适用顺序节点的话，所有尝试获取锁的客户端都会对持有锁的子节点加监听器。当该锁被释放之后，势必会造成所有尝试获取锁的客户端来争夺锁，这样对性能不友好。使用顺序节点之后，只需要监听前一个节点就好了，对性能更友好。</p>
<h3> 为什么要设置对前一个节点的监听？</h3>
<blockquote>
<p>Watcher（事件监听器），是 ZooKeeper 中的一个很重要的特性。ZooKeeper 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性。</p>
</blockquote>
<p>同一时间段内，可能会有很多客户端同时获取锁，但只有一个可以获取成功。如果获取锁失败，则说明有其他的客户端已经成功获取锁。获取锁失败的客户端并不会不停地循环去尝试加锁，而是在前一个节点注册一个事件监听器。</p>
<p>这个事件监听器的作用是：<strong>当前一个节点对应的客户端释放锁之后（也就是前一个节点被删除之后，监听的是删除事件），通知获取锁失败的客户端（唤醒等待的线程，Java 中的 <code>wait/notifyAll</code> ），让它尝试去获取锁，然后就成功获取锁了。</strong></p>
<h3> 如何实现可重入锁？</h3>
<p>这里以 Curator 的 <code>InterProcessMutex</code> 对可重入锁的实现来介绍（源码地址：<a href="https://github.com/apache/curator/blob/master/curator-recipes/src/main/java/org/apache/curator/framework/recipes/locks/InterProcessMutex.java" target="_blank" rel="noopener noreferrer">InterProcessMutex.java</a>）。</p>
<p>当我们调用 <code>InterProcessMutex#acquire</code>方法获取锁的时候，会调用<code>InterProcessMutex#internalLock</code>方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>internalLock</code> 方法会先获取当前请求锁的线程，然后从 <code>threadData</code>( <code>ConcurrentMap&lt;Thread, LockData&gt;</code> 类型)中获取当前线程对应的 <code>lockData</code> 。 <code>lockData</code> 包含锁的信息和加锁的次数，是实现可重入锁的关键。</p>
<p>第一次获取锁的时候，<code>lockData</code>为 <code>null</code>。获取锁成功之后，会将当前线程和对应的 <code>lockData</code> 放到 <code>threadData</code> 中</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LockData</code>是 <code>InterProcessMutex</code>中的一个静态内部类。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果已经获取过一次锁，后面再来获取锁的话，直接就会在 <code>if (lockData != null)</code> 这里被拦下了，然后就会执行<code>lockData.lockCount.incrementAndGet();</code> 将加锁次数加 1。</p>
<p>整个可重入锁的实现逻辑非常简单，直接在客户端判断当前线程有没有获取锁，有的话直接将加锁次数加 1 就可以了。</p>
<h2> 总结</h2>
<p>这篇文章我们介绍了实现分布式锁的两种常见方式。至于具体选择 Redis 还是 ZooKeeper 来实现分布式锁，还是要看业务的具体需求。如果对性能要求比较高的话，建议使用 Redis 实现分布式锁。如果对可靠性要求比较高的话，建议使用 ZooKeeper 实现分布式锁。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-setnx.png" type="image/png"/>
    </item>
    <item>
      <title>分布式锁介绍</title>
      <link>https://javaguide.cn/distributed-system/distributed-lock.html</link>
      <guid>https://javaguide.cn/distributed-system/distributed-lock.html</guid>
      <source url="https://javaguide.cn/rss.xml">分布式锁介绍</source>
      <description>网上有很多分布式锁相关的文章，写了一个相对简洁易懂的版本，针对面试和工作应该够用了。 这篇文章我们先介绍一下分布式锁的基本概念。 为什么需要分布式锁？ 在多线程环境中，如果多个线程同时访问共享资源（例如商品库存、外卖订单），会发生数据竞争，可能会导致出现脏数据或者系统问题，威胁到程序的正常运行。 举个例子，假设现在有 100 个用户参与某个限时秒杀活动，每位用户限购 1 件商品，且商品的数量只有 3 个。如果不对共享资源进行互斥访问，就可能出现以下情况： 线程 1、2、3 等多个线程同时进入抢购方法，每一个线程对应一个用户。 线程 1 查询用户已经抢购的数量，发现当前用户尚未抢购且商品库存还有 1 个，因此认为可以继续执行抢购流程。 线程 2 也执行查询用户已经抢购的数量，发现当前用户尚未抢购且商品库存还有 1 个，因此认为可以继续执行抢购流程。 线程 1 继续执行，将库存数量减少 1 个，然后返回成功。 线程 2 继续执行，将库存数量减少 1 个，然后返回成功。 此时就发生了超卖问题，导致商品被多卖了一份。</description>
      <category>分布式</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>网上有很多分布式锁相关的文章，写了一个相对简洁易懂的版本，针对面试和工作应该够用了。</p>
<p>这篇文章我们先介绍一下分布式锁的基本概念。</p>
<h2> 为什么需要分布式锁？</h2>
<p>在多线程环境中，如果多个线程同时访问共享资源（例如商品库存、外卖订单），会发生数据竞争，可能会导致出现脏数据或者系统问题，威胁到程序的正常运行。</p>
<p>举个例子，假设现在有 100 个用户参与某个限时秒杀活动，每位用户限购 1 件商品，且商品的数量只有 3 个。如果不对共享资源进行互斥访问，就可能出现以下情况：</p>
<ul>
<li>线程 1、2、3 等多个线程同时进入抢购方法，每一个线程对应一个用户。</li>
<li>线程 1 查询用户已经抢购的数量，发现当前用户尚未抢购且商品库存还有 1 个，因此认为可以继续执行抢购流程。</li>
<li>线程 2 也执行查询用户已经抢购的数量，发现当前用户尚未抢购且商品库存还有 1 个，因此认为可以继续执行抢购流程。</li>
<li>线程 1 继续执行，将库存数量减少 1 个，然后返回成功。</li>
<li>线程 2 继续执行，将库存数量减少 1 个，然后返回成功。</li>
<li>此时就发生了超卖问题，导致商品被多卖了一份。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/oversold-without-locking.png" alt="共享资源未互斥访问导致出现问题" tabindex="0"><figcaption>共享资源未互斥访问导致出现问题</figcaption></figure>
<p>为了保证共享资源被安全地访问，我们需要使用互斥操作对共享资源进行保护，即同一时刻只允许一个线程访问共享资源，其他线程需要等待当前线程释放后才能访问。这样可以避免数据竞争和脏数据问题，保证程序的正确性和稳定性。</p>
<p><strong>如何才能实现共享资源的互斥访问呢？</strong> 锁是一个比较通用的解决方案，更准确点来说是悲观锁。</p>
<p>悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>。</p>
<p>对于单机多线程来说，在 Java 中，我们通常使用 <code>ReetrantLock</code> 类、<code>synchronized</code> 关键字这类 JDK 自带的 <strong>本地锁</strong> 来控制一个 JVM 进程内的多个线程对本地共享资源的访问。</p>
<p>下面是我对本地锁画的一张示意图。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/jvm-local-lock.png" alt="本地锁" tabindex="0"><figcaption>本地锁</figcaption></figure>
<p>从图中可以看出，这些线程访问共享资源是互斥的，同一时刻只有一个线程可以获取到本地锁访问共享资源。</p>
<p>分布式系统下，不同的服务/客户端通常运行在独立的 JVM 进程上。如果多个 JVM 进程共享同一份资源的话，使用本地锁就没办法实现资源的互斥访问了。于是，<strong>分布式锁</strong> 就诞生了。</p>
<p>举个例子：系统的订单服务一共部署了 3 份，都对外提供服务。用户下订单之前需要检查库存，为了防止超卖，这里需要加锁以实现对检查库存操作的同步访问。由于订单服务位于不同的 JVM 进程中，本地锁在这种情况下就没办法正常工作了。我们需要用到分布式锁，这样的话，即使多个线程不在同一个 JVM 进程中也能获取到同一把锁，进而实现共享资源的互斥访问。</p>
<p>下面是我对分布式锁画的一张示意图。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock.png" alt="分布式锁" tabindex="0"><figcaption>分布式锁</figcaption></figure>
<p>从图中可以看出，这些独立的进程中的线程访问共享资源是互斥的，同一时刻只有一个线程可以获取到分布式锁访问共享资源。</p>
<h2> 分布式锁应该具备哪些条件？</h2>
<p>一个最基本的分布式锁需要满足：</p>
<ul>
<li><strong>互斥</strong>：任意一个时刻，锁只能被一个线程持有。</li>
<li><strong>高可用</strong>：锁服务是高可用的，当一个锁服务出现问题，能够自动切换到另外一个锁服务。并且，即使客户端的释放锁的代码逻辑出现问题，锁最终一定还是会被释放，不会影响其他线程对共享资源的访问。这一般是通过超时机制实现的。</li>
<li><strong>可重入</strong>：一个节点获取了锁之后，还可以再次获取锁。</li>
</ul>
<p>除了上面这三个基本条件之外，一个好的分布式锁还需要满足下面这些条件：</p>
<ul>
<li><strong>高性能</strong>：获取和释放锁的操作应该快速完成，并且不应该对整个系统的性能造成过大影响。</li>
<li><strong>非阻塞</strong>：如果获取不到锁，不能无限期等待，避免对系统正常运行造成影响。</li>
</ul>
<h2> 分布式锁的常见实现方式有哪些？</h2>
<p>常见分布式锁实现方案如下：</p>
<ul>
<li>基于关系型数据库比如 MySQL 实现分布式锁。</li>
<li>基于分布式协调服务 ZooKeeper 实现分布式锁。</li>
<li>基于分布式键值存储系统比如 Redis 、Etcd 实现分布式锁。</li>
</ul>
<p>关系型数据库的方式一般是通过唯一索引或者排他锁实现。不过，一般不会使用这种方式，问题太多比如性能太差、不具备锁失效机制。</p>
<p>基于 ZooKeeper 或者 Redis 实现分布式锁这两种实现方式要用的更多一些，我专门写了一篇文章来详细介绍这两种方案：<a href="/distributed-system/distributed-lock-implementations.html" target="blank">分布式锁常见实现方案总结</a>。</p>
<h2> 总结</h2>
<p>这篇文章我们主要介绍了：</p>
<ul>
<li>分布式锁的用途：分布式系统下，不同的服务/客户端通常运行在独立的 JVM 进程上。如果多个 JVM 进程共享同一份资源的话，使用本地锁就没办法实现资源的互斥访问了。</li>
<li>分布式锁的应该具备的条件：互斥、高可用、可重入、高性能、非阻塞。</li>
<li>分布式锁的常见实现方式：关系型数据库比如 MySQL、分布式协调服务 ZooKeeper、分布式键值存储系统比如 Redis 、Etcd 。</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/oversold-without-locking.png" type="image/png"/>
    </item>
    <item>
      <title>分布式事务常见问题总结(付费)</title>
      <link>https://javaguide.cn/distributed-system/distributed-transaction.html</link>
      <guid>https://javaguide.cn/distributed-system/distributed-transaction.html</guid>
      <source url="https://javaguide.cn/rss.xml">分布式事务常见问题总结(付费)</source>
      <description>分布式事务 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</description>
      <category>分布式</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>分布式事务</strong> 相关的面试题为我的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/distributed-system.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href="https://javaguide.cn/#/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的补充完善，两者可以配合使用。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/javamianshizhibei/distributed-system.png" type="image/png"/>
    </item>
    <item>
      <title>Spring Cloud Gateway常见问题总结</title>
      <link>https://javaguide.cn/distributed-system/spring-cloud-gateway-questions.html</link>
      <guid>https://javaguide.cn/distributed-system/spring-cloud-gateway-questions.html</guid>
      <source url="https://javaguide.cn/rss.xml">Spring Cloud Gateway常见问题总结</source>
      <description>本文重构完善自6000 字 | 16 图 | 深入理解 Spring Cloud Gateway 的原理 - 悟空聊架构这篇文章。 什么是 Spring Cloud Gateway？ Spring Cloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 Zuul。准确点来说，应该是 Zuul 1.x。Spring Cloud Gateway 起步要比 Zuul 2.x 更早。</description>
      <category>分布式</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文重构完善自<a href="https://mp.weixin.qq.com/s/XjFYsP1IUqNzWqXZdJn-Aw" target="_blank" rel="noopener noreferrer">6000 字 | 16 图 | 深入理解 Spring Cloud Gateway 的原理 - 悟空聊架构</a>这篇文章。</p>
</blockquote>
<h2> 什么是 Spring Cloud Gateway？</h2>
<p>Spring Cloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 <strong>Zuul</strong>。准确点来说，应该是 Zuul 1.x。Spring Cloud Gateway 起步要比 Zuul 2.x 更早。</p>
<p>为了提升网关的性能，Spring Cloud Gateway 基于 Spring WebFlux 。Spring WebFlux 使用 Reactor 库来实现响应式编程模型，底层基于 Netty 实现同步非阻塞的 I/O。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway- demo.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>Spring Cloud Gateway 不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，限流。</p>
<p>Spring Cloud Gateway 和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。不过，目前更加推荐使用 Spring Cloud Gateway 而非 Zuul，Spring Cloud 生态对其支持更加友好。</p>
<ul>
<li>GitHub 地址： <a href="https://github.com/spring-cloud/spring-cloud-gateway" target="_blank" rel="noopener noreferrer">https://github.com/spring-cloud/spring-cloud-gateway</a></li>
<li>官网： <a href="https://spring.io/projects/spring-cloud-gateway" target="_blank" rel="noopener noreferrer">https://spring.io/projects/spring-cloud-gateway</a></li>
</ul>
<h2> Spring Cloud Gateway 的工作流程？</h2>
<p>Spring Cloud Gateway 的工作流程如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-workflow.png" alt="Spring Cloud Gateway 的工作流程" tabindex="0"><figcaption>Spring Cloud Gateway 的工作流程</figcaption></figure>
<p>这是 Spring 官方博客中的一张图，原文地址：<a href="https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter" target="_blank" rel="noopener noreferrer">https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter</a>。</p>
<p>具体的流程分析：</p>
<ol>
<li><strong>路由判断</strong>：客户端的请求到达网关后，先经过 Gateway Handler Mapping 处理，这里面会做断言（Predicate）判断，看下符合哪个路由规则，这个路由映射后端的某个服务。</li>
<li><strong>请求过滤</strong>：然后请求到达 Gateway Web Handler，这里面有很多过滤器，组成过滤器链（Filter Chain），这些过滤器可以对请求进行拦截和修改，比如添加请求头、参数校验等等，有点像净化污水。然后将请求转发到实际的后端服务。这些过滤器逻辑上可以称作 Pre-Filters，Pre 可以理解为“在...之前”。</li>
<li><strong>服务处理</strong>：后端服务会对请求进行处理。</li>
<li><strong>响应过滤</strong>：后端处理完结果后，返回给 Gateway 的过滤器再次做处理，逻辑上可以称作 Post-Filters，Post 可以理解为“在...之后”。</li>
<li><strong>响应返回</strong>：响应经过过滤处理后，返回给客户端。</li>
</ol>
<p>总结：客户端的请求先通过匹配规则找到合适的路由，就能映射到具体的服务。然后请求经过过滤器处理后转发给具体的服务，服务处理后，再次经过过滤器处理，最后返回给客户端。</p>
<h2> Spring Cloud Gateway 的断言是什么？</h2>
<p>断言（Predicate）这个词听起来极其深奥，它是一种编程术语，我们生活中根本就不会用它。说白了它就是对一个表达式进行 if 判断，结果为真或假，如果为真则做这件事，否则做那件事。</p>
<p>在 Gateway 中，如果客户端发送的请求满足了断言的条件，则映射到指定的路由器，就能转发到指定的服务上进行处理。</p>
<p>断言配置的示例如下，配置了两个路由规则，有一个 predicates 断言配置，当请求 url 中包含 <code>api/thirdparty</code>，就匹配到了第一个路由 <code>route_thirdparty</code>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-example.png" alt="断言配置示例" tabindex="0"><figcaption>断言配置示例</figcaption></figure>
<p>常见的路由断言规则如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-rules.png" alt="Spring Cloud GateWay 路由断言规则" tabindex="0"><figcaption>Spring Cloud GateWay 路由断言规则</figcaption></figure>
<h2> Spring Cloud Gateway 的路由和断言是什么关系？</h2>
<p>Route 路由和 Predicate 断言的对应关系如下：：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-route.png" alt="路由和断言的对应关系" tabindex="0"><figcaption>路由和断言的对应关系</figcaption></figure>
<ul>
<li><strong>一对多</strong>：一个路由规则可以包含多个断言。如上图中路由 Route1 配置了三个断言 Predicate。</li>
<li><strong>同时满足</strong>：如果一个路由规则中有多个断言，则需要同时满足才能匹配。如上图中路由 Route2 配置了两个断言，客户端发送的请求必须同时满足这两个断言，才能匹配路由 Route2。</li>
<li><strong>第一个匹配成功</strong>：如果一个请求可以匹配多个路由，则映射第一个匹配成功的路由。如上图所示，客户端发送的请求满足 Route3 和 Route4 的断言，但是 Route3 的配置在配置文件中靠前，所以只会匹配 Route3。</li>
</ul>
<h2> Spring Cloud Gateway 如何实现动态路由？</h2>
<p>在使用 Spring Cloud Gateway 的时候，官方文档提供的方案总是基于配置文件或代码配置的方式。</p>
<p>Spring Cloud Gateway 作为微服务的入口，需要尽量避免重启，而现在配置更改需要重启服务不能满足实际生产过程中的动态刷新、实时变更的业务需求，所以我们需要在 Spring Cloud Gateway 运行时动态配置网关。</p>
<p>实现动态路由的方式有很多种，其中一种推荐的方式是基于 Nacos 配置中心来做。简单来说，我们将将路由配置放在 Nacos 中存储，然后写个监听器监听 Nacos 上配置的变化，将变化后的配置更新到 GateWay 应用的进程内。</p>
<p>其实这些复杂的步骤并不需要我们手动实现，通过 Nacos Server 和 Spring Cloud Alibaba Nacos Config 即可实现配置的动态变更，官方文档地址：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config</a> 。</p>
<h2> Spring Cloud Gateway 的过滤器有哪些？</h2>
<p>过滤器 Filter 按照请求和响应可以分为两种：</p>
<ul>
<li><strong>Pre 类型</strong>：在请求被转发到微服务之前，对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等操作。</li>
<li><strong>Post 类型</strong>：微服务处理完请求后，返回响应给网关，网关可以再次进行处理，例如修改响应内容或响应头、日志输出、流量监控等。</li>
</ul>
<p>另外一种分类是按照过滤器 Filter 作用的范围进行划分：</p>
<ul>
<li><strong>GatewayFilter</strong>：局部过滤器，应用在单个路由或一组路由上的过滤器。标红色表示比较常用的过滤器。</li>
<li><strong>GlobalFilter</strong>：全局过滤器，应用在所有路由上的过滤器。</li>
</ul>
<h3> 局部过滤器</h3>
<p>常见的局部过滤器如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-gatewayfilters.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>具体怎么用呢？这里有个示例，如果 URL 匹配成功，则去掉 URL 中的 “api”。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然我们也可以自定义过滤器，本篇不做展开。</p>
<h3> 全局过滤器</h3>
<p>常见的全局过滤器如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-globalfilters.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>全局过滤器最常见的用法是进行负载均衡。配置如下所示：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有个关键字 <code>lb</code>，用到了全局过滤器 <code>LoadBalancerClientFilter</code>，当匹配到这个路由后，会将请求转发到 passjava-member 服务，且支持负载均衡转发，也就是先将 passjava-member 解析成实际的微服务的 host 和 port，然后再转发给实际的微服务。</p>
<h2> Spring Cloud Gateway 支持限流吗？</h2>
<p>Spring Cloud Gateway 自带了限流过滤器，对应的接口是 <code>RateLimiter</code>，<code>RateLimiter</code> 接口只有一个实现类 <code>RedisRateLimiter</code> （基于 Redis + Lua 实现的限流），提供的限流功能比较简易且不易使用。</p>
<p>从 Sentinel 1.6.0 版本开始，Sentinel 引入了 Spring Cloud Gateway 的适配模块，可以提供两种资源维度的限流：route 维度和自定义 API 维度。也就是说，Spring Cloud Gateway 可以结合 Sentinel 实现更强大的网关流量控制。</p>
<h2> Spring Cloud Gateway 如何自定义全局异常处理？</h2>
<p>在 SpringBoot 项目中，我们捕获全局异常只需要在项目中配置 <code>@RestControllerAdvice</code>和 <code>@ExceptionHandler</code>就可以了。不过，这种方式在 Spring Cloud Gateway 下不适用。</p>
<p>Spring Cloud Gateway 提供了多种全局处理的方式，比较常用的一种是实现<code>ErrorWebExceptionHandler</code>并重写其中的<code>handle</code>方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 参考</h2>
<ul>
<li>Spring Cloud Gateway 官方文档：<a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/" target="_blank" rel="noopener noreferrer">https://cloud.spring.io/spring-cloud-gateway/reference/html/</a></li>
<li>Creating a custom Spring Cloud Gateway Filter：<a href="https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter" target="_blank" rel="noopener noreferrer">https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter</a></li>
<li>全局异常处理: <a href="https://zhuanlan.zhihu.com/p/347028665" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/347028665</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway-%20demo.png" type="image/png"/>
    </item>
    <item>
      <title>CDN常见问题总结</title>
      <link>https://javaguide.cn/high-performance/cdn.html</link>
      <guid>https://javaguide.cn/high-performance/cdn.html</guid>
      <source url="https://javaguide.cn/rss.xml">CDN常见问题总结</source>
      <description>什么是 CDN ？ CDN 全称是 Content Delivery Network/Content Distribution Network，翻译过的意思是 内容分发网络 。 我们可以将内容分发网络拆开来看： 内容：指的是静态资源比如图片、视频、文档、JS、CSS、HTML。 分发网络：指的是将这些静态资源分发到位于多个不同的地理位置机房中的服务器上，这样，就可以实现静态资源的就近访问比如北京的用户直接访问北京机房的数据。</description>
      <category>高性能</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是 CDN ？</h2>
<p><strong>CDN</strong> 全称是 Content Delivery Network/Content Distribution Network，翻译过的意思是 <strong>内容分发网络</strong> 。</p>
<p>我们可以将内容分发网络拆开来看：</p>
<ul>
<li>内容：指的是静态资源比如图片、视频、文档、JS、CSS、HTML。</li>
<li>分发网络：指的是将这些静态资源分发到位于多个不同的地理位置机房中的服务器上，这样，就可以实现静态资源的就近访问比如北京的用户直接访问北京机房的数据。</li>
</ul>
<p>所以，简单来说，<strong>CDN 就是将静态资源分发到多个不同的地方以实现就近访问，进而加快静态资源的访问速度，减轻服务器以及带宽的负担。</strong></p>
<p>类似于京东建立的庞大的仓储运输体系，京东物流在全国拥有非常多的仓库，仓储网络几乎覆盖全国所有区县。这样的话，用户下单的第一时间，商品就从距离用户最近的仓库，直接发往对应的配送站，再由京东小哥送到你家。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/jingdong-wuliu-cangpei.png" alt="京东仓配系统" tabindex="0"><figcaption>京东仓配系统</figcaption></figure>
<p>你可以将 CDN 看作是服务上一层的特殊缓存服务，分布在全国各地，主要用来处理静态资源的请求。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-101.png" alt="CDN 简易示意图" tabindex="0"><figcaption>CDN 简易示意图</figcaption></figure>
<p>我们经常拿全站加速和内容分发网络做对比，不要把两者搞混了！全站加速（不同云服务商叫法不同，腾讯云叫 ECDN、阿里云叫 DCDN）既可以加速静态资源又可以加速动态资源，内容分发网络（CDN）主要针对的是 <strong>静态资源</strong> 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-aliyun-dcdn.png" alt="阿里云文档：https://help.aliyun.com/document_detail/64836.html" tabindex="0"><figcaption>阿里云文档：https://help.aliyun.com/document_detail/64836.html</figcaption></figure>
<p>绝大部分公司都会在项目开发中交使用 CDN 服务，但很少会有自建 CDN 服务的公司。基于成本、稳定性和易用性考虑，建议直接选择专业的云厂商（比如阿里云、腾讯云、华为云、青云）或者 CDN 厂商（比如网宿、蓝汛）提供的开箱即用的 CDN 服务。</p>
<p>很多朋友可能要问了：<strong>既然是就近访问，为什么不直接将服务部署在多个不同的地方呢？</strong></p>
<ul>
<li>成本太高，需要部署多份相同的服务。</li>
<li>静态资源通常占用空间比较大且经常会被访问到，如果直接使用服务器或者缓存来处理静态资源请求的话，对系统资源消耗非常大，可能会影响到系统其他服务的正常运行。</li>
</ul>
<p>同一个服务在在多个不同的地方部署多份（比如同城灾备、异地灾备、同城多活、异地多活）是为了实现系统的高可用而不是就近访问。</p>
<h2> CDN 工作原理是什么？</h2>
<p>搞懂下面 3 个问题也就搞懂了 CDN 的工作原理：</p>
<ol>
<li>静态资源是如何被缓存到 CDN 节点中的？</li>
<li>如何找到最合适的 CDN 节点？</li>
<li>如何防止静态资源被盗用？</li>
</ol>
<h3> 静态资源是如何被缓存到 CDN 节点中的？</h3>
<p>你可以通过 <strong>预热</strong> 的方式将源站的资源同步到 CDN 的节点中。这样的话，用户首次请求资源可以直接从 CDN 节点中取，无需回源。这样可以降低源站压力，提升用户体验。</p>
<p>如果不预热的话，你访问的资源可能不在 CDN 节点中，这个时候 CDN 节点将请求源站获取资源，这个过程是大家经常说的 <strong>回源</strong>。</p>
<blockquote>
<ul>
<li>回源：当 CDN 节点上没有用户请求的资源或该资源的缓存已经过期时，CDN 节点需要从原始服务器获取最新的资源内容，这个过程就是回源。当用户请求发生回源的话，会导致该请求的响应速度比未使用 CDN 还慢，因为相比于未使用 CDN 还多了一层 CDN 的调用流程。</li>
<li>预热：预热是指在 CDN 上提前将内容缓存到 CDN 节点上。这样当用户在请求这些资源时，能够快速地从最近的 CDN 节点获取到而不需要回源，进而减少了对源站的访问压力，提高了访问速度。</li>
</ul>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-back-to-source.png" alt="CDN 回源" tabindex="0"><figcaption>CDN 回源</figcaption></figure>
<p>如果资源有更新的话，你也可以对其 <strong>刷新</strong> ，删除 CDN 节点上缓存的旧资源，并强制 CDN 节点回源站获取最新资源。</p>
<p>几乎所有云厂商提供的 CDN 服务都具备缓存的刷新和预热功能（下图是阿里云 CDN 服务提供的相应功能）：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-refresh-warm-up.png" alt="CDN 缓存的刷新和预热" tabindex="0"><figcaption>CDN 缓存的刷新和预热</figcaption></figure>
<p><strong>命中率</strong> 和 <strong>回源率</strong> 是衡量 CDN 服务质量两个重要指标。命中率越高越好，回源率越低越好。</p>
<h3> 如何找到最合适的 CDN 节点？</h3>
<p>GSLB （Global Server Load Balance，全局负载均衡）是 CDN 的大脑，负责多个 CDN 节点之间相互协作，最常用的是基于 DNS 的 GSLB。</p>
<p>CDN 会通过 GSLB 找到最合适的 CDN 节点，更具体点来说是下面这样的：</p>
<ol>
<li>浏览器向 DNS 服务器发送域名请求；</li>
<li>DNS 服务器向根据 CNAME( Canonical Name ) 别名记录向 GSLB 发送请求；</li>
<li>GSLB 返回性能最好（通常距离请求地址最近）的 CDN 节点（边缘服务器，真正缓存内容的地方）的地址给浏览器；</li>
<li>浏览器直接访问指定的 CDN 节点。</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-overview.png" alt="CDN 原理示意图" tabindex="0"><figcaption>CDN 原理示意图</figcaption></figure>
<p>为了方便理解，上图其实做了一点简化。GSLB 内部可以看作是 CDN 专用 DNS 服务器和负载均衡系统组合。CDN 专用 DNS 服务器会返回负载均衡系统 IP 地址给浏览器，浏览器使用 IP 地址请求负载均衡系统进而找到对应的 CDN 节点。</p>
<p><strong>GSLB 是如何选择出最合适的 CDN 节点呢？</strong> GSLB 会根据请求的 IP 地址、CDN 节点状态（比如负载情况、性能、响应时间、带宽）等指标来综合判断具体返回哪一个 CDN 节点的地址。</p>
<h3> 如何防止资源被盗刷？</h3>
<p>如果我们的资源被其他用户或者网站非法盗刷的话，将会是一笔不小的开支。</p>
<p>解决这个问题最常用最简单的办法设置 <strong>Referer 防盗链</strong>，具体来说就是根据 HTTP 请求的头信息里面的 Referer 字段对请求进行限制。我们可以通过 Referer 字段获取到当前请求页面的来源页面的网站地址，这样我们就能确定请求是否来自合法的网站。</p>
<p>CDN 服务提供商几乎都提供了这种比较基础的防盗链机制。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cnd-tencent-cloud-anti-theft.png" alt="腾讯云 CDN Referer 防盗链配置" tabindex="0"><figcaption>腾讯云 CDN Referer 防盗链配置</figcaption></figure>
<p>不过，如果站点的防盗链配置允许 Referer 为空的话，通过隐藏 Referer，可以直接绕开防盗链。</p>
<p>通常情况下，我们会配合其他机制来确保静态资源被盗用，一种常用的机制是 <strong>时间戳防盗链</strong> 。相比之下，<strong>时间戳防盗链</strong> 的安全性更强一些。时间戳防盗链加密的 URL 具有时效性，过期之后就无法再被允许访问。</p>
<p>时间戳防盗链的 URL 通常会有两个参数一个是签名字符串，一个是过期时间。签名字符串一般是通过对用户设定的加密字符串、请求路径、过期时间通过 MD5 哈希算法取哈希的方式获得。</p>
<p>时间戳防盗链 URL 示例：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><code>wsSecret</code>：签名字符串。</li>
<li><code>wsTime</code>: 过期时间。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/timestamp-anti-theft.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>时间戳防盗链的实现也比较简单，并且可靠性较高，推荐使用。并且，绝大部分 CDN 服务提供商都提供了开箱即用的时间戳防盗链机制。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/qiniuyun-timestamp-anti-theft.png" alt="七牛云时间戳防盗链配置" tabindex="0"><figcaption>七牛云时间戳防盗链配置</figcaption></figure>
<p>除了 Referer 防盗链和时间戳防盗链之外，你还可以 IP 黑白名单配置、IP 访问限频配置等机制来防盗刷。</p>
<h2> 总结</h2>
<ul>
<li>CDN 就是将静态资源分发到多个不同的地方以实现就近访问，进而加快静态资源的访问速度，减轻服务器以及带宽的负担。</li>
<li>基于成本、稳定性和易用性考虑，建议直接选择专业的云厂商（比如阿里云、腾讯云、华为云、青云）或者 CDN 厂商（比如网宿、蓝汛）提供的开箱即用的 CDN 服务。</li>
<li>GSLB （Global Server Load Balance，全局负载均衡）是 CDN 的大脑，负责多个 CDN 节点之间相互协作，最常用的是基于 DNS 的 GSLB。CDN 会通过 GSLB 找到最合适的 CDN 节点。</li>
<li>为了防止静态资源被盗用，我们可以利用 <strong>Referer 防盗链</strong> + <strong>时间戳防盗链</strong> 。</li>
</ul>
<h2> 参考</h2>
<ul>
<li>时间戳防盗链 - 七牛云 CDN：<a href="https://developer.qiniu.com/fusion/kb/1670/timestamp-hotlinking-prevention" target="_blank" rel="noopener noreferrer">https://developer.qiniu.com/fusion/kb/1670/timestamp-hotlinking-prevention</a></li>
<li>CDN 是个啥玩意？一文说个明白：<a href="https://mp.weixin.qq.com/s/Pp0C8ALUXsmYCUkM5QnkQw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Pp0C8ALUXsmYCUkM5QnkQw</a></li>
<li>《透视 HTTP 协议》- 37 | CDN：加速我们的网络服务：<a href="http://gk.link/a/11yOG" target="_blank" rel="noopener noreferrer">http://gk.link/a/11yOG</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/jingdong-wuliu-cangpei.png" type="image/png"/>
    </item>
    <item>
      <title>负载均衡常见问题总结</title>
      <link>https://javaguide.cn/high-performance/load-balancing.html</link>
      <guid>https://javaguide.cn/high-performance/load-balancing.html</guid>
      <source url="https://javaguide.cn/rss.xml">负载均衡常见问题总结</source>
      <description>什么是负载均衡？ 负载均衡 指的是将用户请求分摊到不同的服务器上处理，以提高系统整体的并发处理能力以及可靠性。负载均衡服务可以有由专门的软件或者硬件来完成，一般情况下，硬件的性能更好，软件的价格更便宜（后文会详细介绍到）。 下图是《Java 面试指北》 「高并发篇」中的一篇文章的配图，从图中可以看出，系统的商品服务部署了多份在不同的服务器上，为了实现访问商品服务请求的分流，我们用到了负载均衡。</description>
      <category>高性能</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是负载均衡？</h2>
<p><strong>负载均衡</strong> 指的是将用户请求分摊到不同的服务器上处理，以提高系统整体的并发处理能力以及可靠性。负载均衡服务可以有由专门的软件或者硬件来完成，一般情况下，硬件的性能更好，软件的价格更便宜（后文会详细介绍到）。</p>
<p>下图是<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247519384&amp;idx=1&amp;sn=bc7e71af75350b755f04ca4178395b1a&amp;chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&amp;token=660789642&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a> 「高并发篇」中的一篇文章的配图，从图中可以看出，系统的商品服务部署了多份在不同的服务器上，为了实现访问商品服务请求的分流，我们用到了负载均衡。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/multi-service-load-balancing.drawio.png" alt="多服务实例-负载均衡" tabindex="0"><figcaption>多服务实例-负载均衡</figcaption></figure>
<p>负载均衡是一种比较常用且实施起来较为简单的提高系统并发能力和可靠性的手段，不论是单体架构的系统还是微服务架构的系统几乎都会用到。</p>
<h2> 负载均衡分为哪几种？</h2>
<p>负载均衡可以简单分为 <strong>服务端负载均衡</strong> 和 <strong>客户端负载均衡</strong> 这两种。</p>
<p>服务端负载均衡涉及到的知识点更多，工作中遇到的也比较多，因为，我会花更多时间来介绍。</p>
<h3> 服务端负载均衡</h3>
<p><strong>服务端负载均衡</strong> 主要应用在 <strong>系统外部请求</strong> 和 <strong>网关层</strong> 之间，可以使用 <strong>软件</strong> 或者 <strong>硬件</strong> 实现。</p>
<p>下图是我画的一个简单的基于 Nginx 的服务端负载均衡示意图：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/server-load-balancing.png" alt="基于 Nginx 的服务端负载均衡" tabindex="0"><figcaption>基于 Nginx 的服务端负载均衡</figcaption></figure>
<p><strong>硬件负载均衡</strong> 通过专门的硬件设备（比如 <strong>F5、A10、Array</strong> ）实现负载均衡功能。</p>
<p>硬件负载均衡的优势是性能很强且稳定，缺点就是实在是太贵了。像基础款的 F5 最低也要 20 多万，绝大部分公司是根本负担不起的，业务量不大的话，真没必要非要去弄个硬件来做负载均衡，用软件负载均衡就足够了！</p>
<p>在我们日常开发中，一般很难接触到硬件负载均衡，接触的比较多的还是 <strong>软件负载均衡</strong> 。软件负载均衡通过软件（比如 <strong>LVS、Nginx、HAproxy</strong> ）实现负载均衡功能，性能虽然差一些，但价格便宜啊！像基础款的 Linux 服务器也就几千，性能好一点的 2~3 万的就很不错了。</p>
<p>根据 OSI 模型，服务端负载均衡还可以分为：</p>
<ul>
<li>二层负载均衡</li>
<li>三层负载均衡</li>
<li>四层负载均衡</li>
<li>七层负载均衡</li>
</ul>
<p>最常见的是四层和七层负载均衡，因此，本文也是重点介绍这两种负载均衡。</p>
<blockquote>
<p>Nginx 官网对四层负载和七层负载均衡均衡做了详细介绍，感兴趣的可以看看。</p>
<ul>
<li><a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/" target="_blank" rel="noopener noreferrer">What Is Layer 4 Load Balancing?</a></li>
<li><a href="https://www.nginx.com/resources/glossary/layer-7-load-balancing/" target="_blank" rel="noopener noreferrer">What Is Layer 7 Load Balancing?</a></li>
</ul>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png" alt="OSI 七层模型" tabindex="0"><figcaption>OSI 七层模型</figcaption></figure>
<ul>
<li><strong>四层负载均衡</strong> 工作在 OSI 模型第四层，也就是传输层，这一层的主要协议是 TCP/UDP，负载均衡器在这一层能够看到数据包里的源端口地址以及目的端口地址，会基于这些信息通过一定的负载均衡算法将数据包转发到后端真实服务器。也就是说，四层负载均衡的核心就是 IP+端口层面的负载均衡，不涉及具体的报文内容。</li>
<li><strong>七层负载均衡</strong> 工作在 OSI 模型第七层，也就是应用层，这一层的主要协议是 HTTP 。这一层的负载均衡比四层负载均衡路由网络请求的方式更加复杂，它会读取报文的数据部分（比如说我们的 HTTP 部分的报文），然后根据读取到的数据内容（如 URL、Cookie）做出负载均衡决策。也就是说，七层负载均衡器的核心是报文内容（如 URL、Cookie）层面的负载均衡，执行第七层负载均衡的设备通常被称为 <strong>反向代理服务器</strong> 。</li>
</ul>
<p>七层负载均衡比四层负载均衡会消耗更多的性能，不过，也相对更加灵活，能够更加智能地路由网络请求，比如说你可以根据请求的内容进行优化如缓存、压缩、加密。</p>
<p>简单来说，<strong>四层负载均衡性能更强，七层负载均衡功能更强！</strong> 不过，对于绝大部分业务场景来说，四层负载均衡和七层负载均衡的性能差异基本可以忽略不计的。</p>
<p>下面这段话摘自 Nginx 官网的 <a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/" target="_blank" rel="noopener noreferrer">What Is Layer 4 Load Balancing?</a> 这篇文章。</p>
<blockquote>
<p>Layer 4 load balancing was a popular architectural approach to traffic handling when commodity hardware was not as powerful as it is now, and the interaction between clients and application servers was much less complex. It requires less computation than more sophisticated load balancing methods (such as Layer 7), but CPU and memory are now sufficiently fast and cheap that the performance advantage for Layer 4 load balancing has become negligible or irrelevant in most situations.</p>
<p>第 4 层负载平衡是一种流行的流量处理体系结构方法，当时商用硬件没有现在这么强大，客户端和应用程序服务器之间的交互也不那么复杂。它比更复杂的负载平衡方法(如第 7 层)需要更少的计算量，但是 CPU 和内存现在足够快和便宜，在大多数情况下，第 4 层负载平衡的性能优势已经变得微不足道或无关紧要。</p>
</blockquote>
<p>在工作中，我们通常会使用 <strong>Nginx</strong> 来做七层负载均衡，LVS(Linux Virtual Server 虚拟服务器， Linux 内核的 4 层负载均衡)来做四层负载均衡。</p>
<p>关于 Nginx 的常见知识点总结，<a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a> 中「技术面试题篇」中已经有对应的内容了，感兴趣的小伙伴可以去看看。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/image-20220328105759300.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>不过，LVS 这个绝大部分公司真用不上，像阿里、百度、腾讯、eBay 等大厂才会使用到，用的最多的还是 Nginx。</p>
<h3> 客户端负载均衡</h3>
<p><strong>客户端负载均衡</strong> 主要应用于系统内部的不同的服务之间，可以使用现成的负载均衡组件来实现。</p>
<p>在客户端负载均衡中，客户端会自己维护一份服务器的地址列表，发送请求之前，客户端会根据对应的负载均衡算法来选择具体某一台服务器处理请求。</p>
<p>客户端负载均衡器和服务运行在同一个进程或者说 Java 程序里，不存在额外的网络开销。不过，客户端负载均衡的实现会受到编程语言的限制，比如说 Spring Cloud Load Balancer 就只能用于 Java 语言。</p>
<p>Java 领域主流的微服务框架 Dubbo、Spring Cloud 等都内置了开箱即用的客户端负载均衡实现。Dubbo 属于是默认自带了负载均衡功能，Spring Cloud 是通过组件的形式实现的负载均衡，属于可选项，比较常用的是 Spring Cloud Load Balancer（官方，推荐） 和 Ribbon（Netflix，已被启用）。</p>
<p>下图是我画的一个简单的基于 Spring Cloud Load Balancer（Ribbon 也类似） 的客户端负载均衡示意图：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/spring-cloud-lb-gateway.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 负载均衡常见的算法有哪些？</h2>
<h3> 随机法</h3>
<p><strong>随机法</strong> 是最简单粗暴的负载均衡算法。</p>
<p>如果没有配置权重的话，所有的服务器被访问到的概率都是相同的。如果配置权重的话，权重越高的服务器被访问的概率就越大。</p>
<p>未加权重的随机算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权随机算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p>
<p>不过，随机算法有一个比较明显的缺陷：部分机器在一段时间之内无法被随机到，毕竟是概率算法，就算是大家权重一样， 也可能会出现这种情况。</p>
<p>于是，<strong>轮询法</strong> 来了！</p>
<h3> 轮询法</h3>
<p>轮询法是挨个轮询服务器处理，也可以设置权重。</p>
<p>如果没有配置权重的话，每个请求按时间顺序逐一分配到不同的服务器处理。如果配置权重的话，权重越高的服务器被访问的次数就越多。</p>
<p>未加权重的轮询算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权轮询算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p>
<h3> 一致性 Hash 法</h3>
<p>相同参数的请求总是发到同一台服务器处理，比如同个 IP 的请求。</p>
<h3> 最小连接法</h3>
<p>当有新的请求出现时，遍历服务器节点列表并选取其中活动连接数最小的一台服务器来响应当前请求。活动连接数可以理解为当前正在处理的请求数。</p>
<p>最小连接法可以尽可能最大地使请求分配更加合理化，提高服务器的利用率。不过，这种方法实现起来也最复杂，需要监控每一台服务器处理的请求连接数。</p>
<h2> 七层负载均衡可以怎么做？</h2>
<p>简单介绍两种项目中常用的七层负载均衡解决方案：DNS 解析和反向代理。</p>
<p>除了我介绍的这两种解决方案之外，HTTP 重定向等手段也可以用来实现负载均衡，不过，相对来说，还是 DNS 解析和反向代理用的更多一些，也更推荐一些。</p>
<h3> DNS 解析</h3>
<p>DNS 解析是比较早期的七层负载均衡实现方式，非常简单。</p>
<p>DNS 解析实现负载均衡的原理是这样的：在 DNS 服务器中为同一个主机记录配置多个 IP 地址，这些 IP 地址对应不同的服务器。当用户请求域名的时候，DNS 服务器采用轮询算法返回 IP 地址，这样就实现了轮询版负载均衡。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/6997605302452f07e8b28d257d349bf0.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>现在的 DNS 解析几乎都支持 IP 地址的权重配置，这样的话，在服务器性能不等的集群中请求分配会更加合理化。像我自己目前正在用的阿里云 DNS 就支持权重配置。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/aliyun-dns-weight-setting.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 反向代理</h3>
<p>客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器，获取数据后再返回给客户端。对外暴露的是反向代理服务器地址，隐藏了真实服务器 IP 地址。反向代理“代理”的是目标服务器，这一个过程对于客户端而言是透明的。</p>
<p>Nginx 就是最常用的反向代理服务器，它可以将接收到的客户端请求以一定的规则（负载均衡策略）均匀地分配到这个服务器集群中所有的服务器上。</p>
<p>反向代理负载均衡同样属于七层负载均衡。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/nginx-load-balance.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 客户端负载均衡通常是怎么做的？</h2>
<p>我们上面也说了，客户端负载均衡可以使用现成的负载均衡组件来实现。</p>
<p><strong>Netflix Ribbon</strong> 和 <strong>Spring Cloud Load Balancer</strong> 就是目前 Java 生态最流行的两个负载均衡组件。</p>
<p>Ribbon 是老牌负载均衡组件，由 Netflix 开发，功能比较全面，支持的负载均衡策略也比较多。 Spring Cloud Load Balancer 是 Spring 官方为了取代 Ribbon 而推出的，功能相对更简单一些，支持的负载均衡也少一些。</p>
<p>Ribbon 支持的 7 种负载均衡策略：</p>
<ul>
<li><code>RandomRule</code>：随机策略。</li>
<li><code>RoundRobinRule</code>（默认）：轮询策略</li>
<li><code>WeightedResponseTimeRule</code>：权重（根据响应时间决定权重）策略</li>
<li><code>BestAvailableRule</code>：最小连接数策略</li>
<li><code>RetryRule</code>：重试策略（按照轮询策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内不断地进行重试来获取服务，如果超过指定时间依然没获取到服务实例则返回 null）</li>
<li><code>AvailabilityFilteringRule</code>：可用敏感性策略（先过滤掉非健康的服务实例，然后再选择连接数较小的服务实例）</li>
<li><code>ZoneAvoidanceRule</code>：区域敏感性策略（根据服务所在区域的性能和服务的可用性来选择服务实例）</li>
</ul>
<p>Spring Cloud Load Balancer 支持的 2 种负载均衡策略：</p>
<ul>
<li><code>RandomLoadBalancer</code>：随机策略</li>
<li><code>RoundRobinLoadBalancer</code>（默认）：轮询策略</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，Spring Cloud Load Balancer 支持的负载均衡策略其实不止这两种，<code>ServiceInstanceListSupplier</code> 的实现类同样可以让其支持类似于 Ribbon 的负载均衡策略。这个应该是后续慢慢完善引入的，不看官方文档还真发现不了，所以说阅读官方文档真的很重要！</p>
<p>这里举两个官方的例子：</p>
<ul>
<li><code>ZonePreferenceServiceInstanceListSupplier</code>：实现基于区域的负载平衡</li>
<li><code>HintBasedServiceInstanceListSupplier</code>：实现基于 hint 提示的负载均衡</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 Spring Cloud Load Balancer 更详细更新的介绍，推荐大家看看官方文档：<a href="https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer</a> ，一切以官方文档为主。</p>
<p>轮询策略基本可以满足绝大部分项目的需求，我们的实际项目中如果没有特殊需求的话，通常使用的就是默认的轮询策略。并且，Ribbon 和 Spring Cloud Load Balancer 都支持自定义负载均衡策略。</p>
<p>个人建议如非必需 Ribbon 某个特有的功能或者负载均衡策略的话，就优先选择 Spring 官方提供的 Spring Cloud Load Balancer。</p>
<p>最后再说说为什么我不太推荐使用 Ribbon 。</p>
<p>Spring Cloud 2020.0.0 版本移除了 Netflix 除 Eureka 外的所有组件。Spring Cloud Hoxton.M2 是第一个支持 Spring Cloud Load Balancer 来替代 Netfix Ribbon 的版本。</p>
<p>我们早期学习微服务，肯定接触过 Netflix 公司开源的 Feign、Ribbon、Zuul、Hystrix、Eureka 等知名的微服务系统构建所必须的组件，直到现在依然有非常非常多的公司在使用这些组件。不夸张地说，Netflix 公司引领了 Java 技术栈下的微服务发展。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/SpringCloudNetflix.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>那为什么 Spring Cloud 这么急着移除 Netflix 的组件呢？</strong> 主要是因为在 2018 年的时候，Netflix 宣布其开源的核心组件 Hystrix、Ribbon、Zuul、Eureka 等进入维护状态，不再进行新特性开发，只修 BUG。于是，Spring 官方不得不考虑移除 Netflix 的组件。</p>
<p><strong>Spring Cloud Alibaba</strong> 是一个不错的选择，尤其是对于国内的公司和个人开发者来说。</p>
<h2> 参考</h2>
<ul>
<li>干货 | eBay 的 4 层软件负载均衡实现：<a href="https://mp.weixin.qq.com/s/bZMxLTECOK3mjdgiLbHj-g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/bZMxLTECOK3mjdgiLbHj-g</a></li>
<li>HTTP Load Balancing（Nginx 官方文档）：<a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/" target="_blank" rel="noopener noreferrer">https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/</a></li>
<li>深入浅出负载均衡 - vivo 互联网技术：<a href="https://www.cnblogs.com/vivotech/p/14859041.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/vivotech/p/14859041.html</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/multi-service-load-balancing.drawio.png" type="image/png"/>
    </item>
    <item>
      <title>读写分离和分库分表常见问题总结</title>
      <link>https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html</link>
      <guid>https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html</guid>
      <source url="https://javaguide.cn/rss.xml">读写分离和分库分表常见问题总结</source>
      <description>读写分离 什么是读写分离？ 见名思意，根据读写分离的名字，我们就可以知道：读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。 这样的话，就能够小幅提升写性能，大幅提升读性能。 我简单画了一张图来帮助不太清楚读写分离的小伙伴理解。 读写分离示意图</description>
      <category>高性能</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 读写分离</h2>
<h3> 什么是读写分离？</h3>
<p>见名思意，根据读写分离的名字，我们就可以知道：<strong>读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。</strong> 这样的话，就能够小幅提升写性能，大幅提升读性能。</p>
<p>我简单画了一张图来帮助不太清楚读写分离的小伙伴理解。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation.png" alt="读写分离示意图" tabindex="0"><figcaption>读写分离示意图</figcaption></figure>
<p>一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其他的从数据库负责读。主库和从库之间会进行数据同步，以保证从库中数据的准确性。这样的架构实现起来比较简单，并且也符合系统的写少读多的特点。</p>
<h3> 读写分离会带来什么问题？如何解决？</h3>
<p>读写分离对于提升数据库的并发非常有效，但是，同时也会引来一个问题：主库和从库的数据存在延迟，比如你写完主库之后，主库的数据同步到从库是需要时间的，这个时间差就导致了主库和从库的数据不一致性问题。这也就是我们经常说的 <strong>主从同步延迟</strong> 。</p>
<p>主从同步延迟问题的解决，没有特别好的一种方案（可能是我太菜了，欢迎评论区补充）。你可以根据自己的业务场景，参考一下下面几种解决办法。</p>
<p><strong>1.强制将读请求路由到主库处理。</strong></p>
<p>既然你从库的数据过期了，那我就直接从主库读取嘛！这种方案虽然会增加主库的压力，但是，实现起来比较简单，也是我了解到的使用最多的一种方式。</p>
<p>比如 <code>Sharding-JDBC</code> 就是采用的这种方案。通过使用 Sharding-JDBC 的 <code>HintManager</code> 分片键值管理器，我们可以强制使用主库。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这种方案，你可以将那些必须获取最新数据的读请求都交给主库处理。</p>
<p><strong>2.延迟读取。</strong></p>
<p>还有一些朋友肯定会想既然主从同步存在延迟，那我就在延迟之后读取啊，比如主从同步延迟 0.5s,那我就 1s 之后再读取数据。这样多方便啊！方便是方便，但是也很扯淡。</p>
<p>不过，如果你是这样设计业务流程就会好很多：对于一些对数据比较敏感的场景，你可以在完成写请求之后，避免立即进行请求操作。比如你支付成功之后，跳转到一个支付成功的页面，当你点击返回之后才返回自己的账户。</p>
<p>另外，<a href="https://time.geekbang.org/column/intro/100020801?code=ieY8HeRSlDsFbuRtggbBQGxdTh-1jMASqEIeqzHAKrI%3D" target="_blank" rel="noopener noreferrer">《MySQL 实战 45 讲》</a>这个专栏中的<a href="https://time.geekbang.org/column/article/77636" target="_blank" rel="noopener noreferrer">《读写分离有哪些坑？》</a>这篇文章还介绍了很多其他比较实际的解决办法，感兴趣的小伙伴可以自行研究一下。</p>
<h3> 如何实现读写分离？</h3>
<p>不论是使用哪一种读写分离具体的实现方案，想要实现读写分离一般包含如下几步：</p>
<ol>
<li>部署多台数据库，选择其中的一台作为主数据库，其他的一台或者多台作为从数据库。</li>
<li>保证主数据库和从数据库之间的数据是实时同步的，这个过程也就是我们常说的<strong>主从复制</strong>。</li>
<li>系统将写请求交给主数据库处理，读请求交给从数据库处理。</li>
</ol>
<p>落实到项目本身的话，常用的方式有两种：</p>
<p><strong>1. 代理方式</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation-proxy.png" alt="代理方式实现读写分离" tabindex="0"><figcaption>代理方式实现读写分离</figcaption></figure>
<p>我们可以在应用和数据中间加了一个代理层。应用程序所有的数据请求都交给代理层处理，代理层负责分离读写请求，将它们路由到对应的数据库中。</p>
<p>提供类似功能的中间件有 <strong>MySQL Router</strong>（官方）、<strong>Atlas</strong>（基于 MySQL Proxy）、<strong>MaxScale</strong>、<strong>MyCat</strong>。</p>
<p><strong>2. 组件方式</strong></p>
<p>在这种方式中，我们可以通过引入第三方组件来帮助我们读写请求。</p>
<p>这也是我比较推荐的一种方式。这种方式目前在各种互联网公司中用的最多的，相关的实际的案例也非常多。如果你要采用这种方式的话，推荐使用 <code>sharding-jdbc</code> ，直接引入 jar 包即可使用，非常方便。同时，也节省了很多运维的成本。</p>
<p>你可以在 shardingsphere 官方找到 <a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/manual/sharding-jdbc/usage/read-write-splitting/" target="_blank" rel="noopener noreferrer">sharding-jdbc 关于读写分离的操作</a>。</p>
<h3> 主从复制原理是什么？</h3>
<p>MySQL binlog(binary log 即二进制日志文件) 主要记录了 MySQL 数据库中数据的所有变化(数据库执行的所有 DDL 和 DML 语句)。因此，我们根据主库的 MySQL binlog 日志就能够将主库的数据同步到从库中。</p>
<p>更具体和详细的过程是这个样子的（图片来自于：<a href="https://www.toptal.com/mysql/mysql-master-slave-replication-tutorial" target="_blank" rel="noopener noreferrer">《MySQL Master-Slave Replication on the Same Machine》</a>）：</p>
<figure><img src="https://oss.javaguide.cn/java-guide-blog/78816271d3ab52424bfd5ad3086c1a0f.png" alt="MySQL主从复制" tabindex="0"><figcaption>MySQL主从复制</figcaption></figure>
<ol>
<li>主库将数据库中数据的变化写入到 binlog</li>
<li>从库连接主库</li>
<li>从库会创建一个 I/O 线程向主库请求更新的 binlog</li>
<li>主库会创建一个 binlog dump 线程来发送 binlog ，从库中的 I/O 线程负责接收</li>
<li>从库的 I/O 线程将接收的 binlog 写入到 relay log 中。</li>
<li>从库的 SQL 线程读取 relay log 同步数据本地（也就是再执行一遍 SQL ）。</li>
</ol>
<p>怎么样？看了我对主从复制这个过程的讲解，你应该搞明白了吧!</p>
<p>你一般看到 binlog 就要想到主从复制。当然，除了主从复制之外，binlog 还能帮助我们实现数据恢复。</p>
<p>🌈 拓展一下：</p>
<p>不知道大家有没有使用过阿里开源的一个叫做 canal 的工具。这个工具可以帮助我们实现 MySQL 和其他数据源比如 Elasticsearch 或者另外一台 MySQL 数据库之间的数据同步。很显然，这个工具的底层原理肯定也是依赖 binlog。canal 的原理就是模拟 MySQL 主从复制的过程，解析 binlog 将数据同步到其他的数据源。</p>
<p>另外，像咱们常用的分布式缓存组件 Redis 也是通过主从复制实现的读写分离。</p>
<p>🌕 简单总结一下：</p>
<p><strong>MySQL 主从复制是依赖于 binlog 。另外，常见的一些同步 MySQL 数据到其他数据源的工具（比如 canal）的底层一般也是依赖 binlog 。</strong></p>
<h2> 分库分表</h2>
<p>读写分离主要应对的是数据库读并发，没有解决数据库存储问题。试想一下：<strong>如果 MySQL 一张表的数据量过大怎么办?</strong></p>
<p>换言之，<strong>我们该如何解决 MySQL 的存储压力呢？</strong></p>
<p>答案之一就是 <strong>分库分表</strong>。</p>
<h3> 什么是分库？</h3>
<p><strong>分库</strong> 就是将数据库中的数据分散到不同的数据库上，可以垂直分库，也可以水平分库。</p>
<p><strong>垂直分库</strong> 就是把单一数据库按照业务进行划分，不同的业务使用不同的数据库，进而将一个数据库的压力分担到多个数据库。</p>
<p>举个例子：说你将数据库中的用户表、订单表和商品表分别单独拆分为用户数据库、订单数据库和商品数据库。</p>
<figure><figcaption>垂直分库</figcaption></figure>
<p><strong>水平分库</strong> 是把同一个表按一定规则拆分到不同的数据库中，每个库可以位于不同的服务器上，这样就实现了水平扩展，解决了单表的存储和性能瓶颈的问题。</p>
<p>举个例子：订单表数据量太大，你对订单表进行了水平切分（水平分表），然后将切分后的 2 张订单表分别放在两个不同的数据库。</p>
<figure><figcaption>水平分库</figcaption></figure>
<h3> 什么是分表？</h3>
<p><strong>分表</strong> 就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。</p>
<p><strong>垂直分表</strong> 是对数据表列的拆分，把一张列比较多的表拆分为多张表。</p>
<p>举个例子：我们可以将用户信息表中的一些列单独抽出来作为一个表。</p>
<p><strong>水平分表</strong> 是对数据表行的拆分，把一张行比较多的表拆分为多张表，可以解决单一表数据量过大的问题。</p>
<p>举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。</p>
<p>水平拆分只能解决单表数据量大的问题，为了提升性能，我们通常会选择将拆分后的多张表放在不同的数据库中。也就是说，水平分表通常和水平分库同时出现。</p>
<figure><figcaption>分表</figcaption></figure>
<h3> 什么情况下需要分库分表？</h3>
<p>遇到下面几种场景可以考虑分库分表：</p>
<ul>
<li>单表的数据达到千万级别以上，数据库读写速度比较缓慢。</li>
<li>数据库中的数据占用的空间越来越大，备份时间越来越长。</li>
<li>应用的并发量太大。</li>
</ul>
<h3> 常见的分片算法有哪些？</h3>
<p>分片算法主要解决了数据被水平分片之后，数据究竟该存放在哪个表的问题。</p>
<ul>
<li><strong>哈希分片</strong>：求指定 key（比如 id） 的哈希，然后根据哈希值确定数据应被放置在哪个表中。哈希分片比较适合随机读写的场景，不太适合经常需要范围查询的场景。</li>
<li><strong>范围分片</strong>：按照特性的范围区间（比如时间区间、ID 区间）来分配数据，比如 将 <code>id</code> 为 <code>1~299999</code> 的记录分到第一个库， <code>300000~599999</code> 的分到第二个库。范围分片适合需要经常进行范围查找的场景，不太适合随机读写的场景（数据未被分散，容易出现热点数据的问题）。</li>
<li><strong>地理位置分片</strong>：很多 NewSQL 数据库都支持地理位置分片算法，也就是根据地理位置（如城市、地域）来分配数据。</li>
<li><strong>融合算法</strong>：灵活组合多种分片算法，比如将哈希分片和范围分片组合。</li>
<li>......</li>
</ul>
<h3> 分库分表会带来什么问题呢？</h3>
<p>记住，你在公司做的任何技术决策，不光是要考虑这个技术能不能满足我们的要求，是否适合当前业务场景，还要重点考虑其带来的成本。</p>
<p>引入分库分表之后，会给系统带来什么挑战呢？</p>
<ul>
<li><strong>join 操作</strong>：同一个数据库中的表分布在了不同的数据库中，导致无法使用 join 操作。这样就导致我们需要手动进行数据的封装，比如你在一个数据库中查询到一个数据之后，再根据这个数据去另外一个数据库中找对应的数据。</li>
<li><strong>事务问题</strong>：同一个数据库中的表分布在了不同的数据库中，如果单个操作涉及到多个数据库，那么数据库自带的事务就无法满足我们的要求了。</li>
<li><strong>分布式 id</strong>：分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。我们如何为不同的数据节点生成全局唯一主键呢？这个时候，我们就需要为我们的系统引入分布式 id 了。</li>
<li>......</li>
</ul>
<p>另外，引入分库分表之后，一般需要 DBA 的参与，同时还需要更多的数据库服务器，这些都属于成本。</p>
<h3> 分库分表有没有什么比较推荐的方案？</h3>
<p>ShardingSphere 项目（包括 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar）是当当捐入 Apache 的，目前主要由京东数科的一些巨佬维护。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-0aa05fa5f54e41a44b09619fc0ee597933c.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>ShardingSphere 绝对可以说是当前分库分表的首选！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理等功能。</p>
<p>另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。</p>
<p>艿艿之前写了一篇分库分表的实战文章，各位朋友可以看看：<a href="https://mp.weixin.qq.com/s/A2MYOFT7SP-7kGOon8qJaw" target="_blank" rel="noopener noreferrer">《芋道 Spring Boot 分库分表入门》</a> 。</p>
<h3> 分库分表后，数据怎么迁移呢？</h3>
<p>分库分表之后，我们如何将老库（单库单表）的数据迁移到新库（分库分表后的数据库系统）呢？</p>
<p>比较简单同时也是非常常用的方案就是<strong>停机迁移</strong>，写个脚本老库的数据写到新库中。比如你在凌晨 2 点，系统使用的人数非常少的时候，挂一个公告说系统要维护升级预计 1 小时。然后，你写一个脚本将老库的数据都同步到新库中。</p>
<p>如果你不想停机迁移数据的话，也可以考虑<strong>双写方案</strong>。双写方案是针对那种不能停机迁移的场景，实现起来要稍微麻烦一些。具体原理是这样的：</p>
<ul>
<li>我们对老库的更新操作（增删改），同时也要写入新库（双写）。如果操作的数据不存在于新库的话，需要插入到新库中。 这样就能保证，咱们新库里的数据是最新的。</li>
<li>在迁移过程，双写只会让被更新操作过的老库中的数据同步到新库，我们还需要自己写脚本将老库中的数据和新库的数据做比对。如果新库中没有，那咱们就把数据插入到新库。如果新库有，旧库没有，就把新库对应的数据删除（冗余数据清理）。</li>
<li>重复上一步的操作，直到老库和新库的数据一致为止。</li>
</ul>
<p>想要在项目中实施双写还是比较麻烦的，很容易会出现问题。我们可以借助上面提到的数据库同步工具 Canal 做增量数据迁移（还是依赖 binlog，开发和维护成本较低）。</p>
<h2> 总结</h2>
<ul>
<li>读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。 这样的话，就能够小幅提升写性能，大幅提升读性能。</li>
<li>读写分离基于主从复制，MySQL 主从复制是依赖于 binlog 。</li>
<li><strong>分库</strong> 就是将数据库中的数据分散到不同的数据库上。<strong>分表</strong> 就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。</li>
<li>引入分库分表之后，需要系统解决事务、分布式 id、无法 join 操作问题。</li>
<li>ShardingSphere 绝对可以说是当前分库分表的首选！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理等功能。另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation.png" type="image/png"/>
    </item>
    <item>
      <title>常见SQL优化手段总结（付费）</title>
      <link>https://javaguide.cn/high-performance/sql-optimization.html</link>
      <guid>https://javaguide.cn/high-performance/sql-optimization.html</guid>
      <source url="https://javaguide.cn/rss.xml">常见SQL优化手段总结（付费）</source>
      <description>常见 SQL 优化手段总结 相关的内容为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</description>
      <category>高性能</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>常见 SQL 优化手段总结</strong> 相关的内容为我的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了<a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>中。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/sql-optimization.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href="https://javaguide.cn/#/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的补充完善，两者可以配合使用。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/javamianshizhibei/sql-optimization.png" type="image/png"/>
    </item>
    <item>
      <title>降级&amp;熔断详解(付费)</title>
      <link>https://javaguide.cn/high-availability/fallback-and-circuit-breaker.html</link>
      <guid>https://javaguide.cn/high-availability/fallback-and-circuit-breaker.html</guid>
      <source url="https://javaguide.cn/rss.xml">降级&amp;熔断详解(付费)</source>
      <description>降级&amp;amp;熔断 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</description>
      <category>高可用</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>降级&amp;熔断</strong> 相关的面试题为我的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了<a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>中。</p>
<p><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href="https://javaguide.cn/#/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的补充完善，两者可以配合使用。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
    </item>
    <item>
      <title>高可用系统设计指南</title>
      <link>https://javaguide.cn/high-availability/high-availability-system-design.html</link>
      <guid>https://javaguide.cn/high-availability/high-availability-system-design.html</guid>
      <source url="https://javaguide.cn/rss.xml">高可用系统设计指南</source>
      <description>什么是高可用？可用性的判断标准是啥？ 高可用描述的是一个系统在大部分时间都是可用的，可以为我们提供服务的。高可用代表系统即使在发生硬件故障或者系统升级的时候，服务仍然是可用的。 一般情况下，我们使用多少个 9 来评判一个系统的可用性，比如 99.9999% 就是代表该系统在所有的运行时间中只有 0.0001% 的时间是不可用的，这样的系统就是非常非常高可用的了！当然，也会有系统如果可用性不太好的话，可能连 9 都上不了。 除此之外，系统的可用性还可以用某功能的失败次数与总的请求次数之比来衡量，比如对网站请求 1000 次，其中有 10 次请求失败，那么可用性就是 99%。</description>
      <category>高可用</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是高可用？可用性的判断标准是啥？</h2>
<p>高可用描述的是一个系统在大部分时间都是可用的，可以为我们提供服务的。高可用代表系统即使在发生硬件故障或者系统升级的时候，服务仍然是可用的。</p>
<p>一般情况下，我们使用多少个 9 来评判一个系统的可用性，比如 99.9999% 就是代表该系统在所有的运行时间中只有 0.0001% 的时间是不可用的，这样的系统就是非常非常高可用的了！当然，也会有系统如果可用性不太好的话，可能连 9 都上不了。</p>
<p>除此之外，系统的可用性还可以用某功能的失败次数与总的请求次数之比来衡量，比如对网站请求 1000 次，其中有 10 次请求失败，那么可用性就是 99%。</p>
<h2> 哪些情况会导致系统不可用？</h2>
<ol>
<li>黑客攻击；</li>
<li>硬件故障，比如服务器坏掉。</li>
<li>并发量/用户请求量激增导致整个服务宕掉或者部分服务不可用。</li>
<li>代码中的坏味道导致内存泄漏或者其他问题导致程序挂掉。</li>
<li>网站架构某个重要的角色比如 Nginx 或者数据库突然不可用。</li>
<li>自然灾害或者人为破坏。</li>
<li>......</li>
</ol>
<h2> 有哪些提高系统可用性的方法？</h2>
<h3> 注重代码质量，测试严格把关</h3>
<p>我觉得这个是最最最重要的，代码质量有问题比如比较常见的内存泄漏、循环依赖都是对系统可用性极大的损害。大家都喜欢谈限流、降级、熔断，但是我觉得从代码质量这个源头把关是首先要做好的一件很重要的事情。如何提高代码质量？比较实际可用的就是 CodeReview，不要在乎每天多花的那 1 个小时左右的时间，作用可大着呢！</p>
<p>另外，安利几个对提高代码质量有实际效果的神器：</p>
<ul>
<li><a href="https://www.sonarqube.org/" target="_blank" rel="noopener noreferrer">Sonarqube</a>；</li>
<li>Alibaba 开源的 Java 诊断工具 <a href="https://arthas.aliyun.com/doc/" target="_blank" rel="noopener noreferrer">Arthas</a>；</li>
<li><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener noreferrer">阿里巴巴 Java 代码规范</a>（Alibaba Java Code Guidelines）；</li>
<li>IDEA 自带的代码分析等工具。</li>
</ul>
<h3> 使用集群，减少单点故障</h3>
<p>先拿常用的 Redis 举个例子！我们如何保证我们的 Redis 缓存高可用呢？答案就是使用集群，避免单点故障。当我们使用一个 Redis 实例作为缓存的时候，这个 Redis 实例挂了之后，整个缓存服务可能就挂了。使用了集群之后，即使一台 Redis 实例挂了，不到一秒就会有另外一台 Redis 实例顶上。</p>
<h3> 限流</h3>
<p>流量控制（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。——来自 <a href="https://github.com/alibaba/Sentinel" title="Sentinel" target="_blank" rel="noopener noreferrer">alibaba-Sentinel</a> 的 wiki。</p>
<h3> 超时和重试机制设置</h3>
<p>一旦用户请求超过某个时间的得不到响应，就抛出异常。这个是非常重要的，很多线上系统故障都是因为没有进行超时设置或者超时设置的方式不对导致的。我们在读取第三方服务的时候，尤其适合设置超时和重试机制。一般我们使用一些 RPC 框架的时候，这些框架都自带的超时重试的配置。如果不进行超时设置可能会导致请求响应速度慢，甚至导致请求堆积进而让系统无法再处理请求。重试的次数一般设为 3 次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。</p>
<h3> 熔断机制</h3>
<p>超时和重试机制设置之外，熔断机制也是很重要的。 熔断机制说的是系统自动收集所依赖服务的资源使用情况和性能指标，当所依赖的服务恶化或者调用失败次数达到某个阈值的时候就迅速失败，让当前系统立即切换依赖其他备用服务。 比较常用的流量控制和熔断降级框架是 Netflix 的 Hystrix 和 alibaba 的 Sentinel。</p>
<h3> 异步调用</h3>
<p>异步调用的话我们不需要关心最后的结果，这样我们就可以用户请求完成之后就立即返回结果，具体处理我们可以后续再做，秒杀场景用这个还是蛮多的。但是，使用异步之后我们可能需要 <strong>适当修改业务流程进行配合</strong>，比如<strong>用户在提交订单之后，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功</strong>。除了可以在程序中实现异步之外，我们常常还使用消息队列，消息队列可以通过异步处理提高系统性能（削峰、减少响应所需时间）并且可以降低系统耦合性。</p>
<h3> 使用缓存</h3>
<p>如果我们的系统属于并发量比较高的话，如果我们单纯使用数据库的话，当大量请求直接落到数据库可能数据库就会直接挂掉。使用缓存缓存热点数据，因为缓存存储在内存中，所以速度相当地快！</p>
<h3> 其他</h3>
<ul>
<li><strong>核心应用和服务优先使用更好的硬件</strong></li>
<li><strong>监控系统资源使用情况增加报警设置。</strong></li>
<li><strong>注意备份，必要时候回滚。</strong></li>
<li><strong>灰度发布：</strong> 将服务器集群分成若干部分，每天只发布一部分机器，观察运行稳定没有故障，第二天继续发布一部分机器，持续几天才把整个集群全部发布完毕，期间如果发现问题，只需要回滚已发布的一部分服务器即可</li>
<li><strong>定期检查/更换硬件：</strong> 如果不是购买的云服务的话，定期还是需要对硬件进行一波检查的，对于一些需要更换或者升级的硬件，要及时更换或者升级。</li>
<li>.....</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>服务限流详解</title>
      <link>https://javaguide.cn/high-availability/limit-request.html</link>
      <guid>https://javaguide.cn/high-availability/limit-request.html</guid>
      <source url="https://javaguide.cn/rss.xml">服务限流详解</source>
      <description>针对软件系统来说，限流就是对请求的速率进行限制，避免瞬时的大量请求击垮软件系统。毕竟，软件系统的处理能力是有限的。如果说超过了其处理能力的范围，软件系统可能直接就挂掉了。 限流可能会导致用户的请求无法被正确处理，不过，这往往也是权衡了软件系统的稳定性之后得到的最优解。 现实生活中，处处都有限流的实际应用，就比如排队买票是为了避免大量用户涌入购票而导致售票员无法处理。 常见限流算法有哪些？ 简单介绍 4 种非常好理解并且容易实现的限流算法！ 图片来源于 InfoQ 的一篇文章《分布式服务限流实战，已经为你排好坑了》。</description>
      <category>高可用</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>针对软件系统来说，限流就是对请求的速率进行限制，避免瞬时的大量请求击垮软件系统。毕竟，软件系统的处理能力是有限的。如果说超过了其处理能力的范围，软件系统可能直接就挂掉了。</p>
<p>限流可能会导致用户的请求无法被正确处理，不过，这往往也是权衡了软件系统的稳定性之后得到的最优解。</p>
<p>现实生活中，处处都有限流的实际应用，就比如排队买票是为了避免大量用户涌入购票而导致售票员无法处理。</p>
<h2> 常见限流算法有哪些？</h2>
<p>简单介绍 4 种非常好理解并且容易实现的限流算法！</p>
<blockquote>
<p>图片来源于 InfoQ 的一篇文章<a href="https://www.infoq.cn/article/Qg2tX8fyw5Vt-f3HH673" target="_blank" rel="noopener noreferrer">《分布式服务限流实战，已经为你排好坑了》</a>。</p>
</blockquote>
<h3> 固定窗口计数器算法</h3>
<p>固定窗口其实就是时间窗口。<strong>固定窗口计数器算法</strong> 规定了我们单位时间处理的请求数量。</p>
<p>假如我们规定系统中某个接口 1 分钟只能访问 33 次的话，使用固定窗口计数器算法的实现思路如下：</p>
<ul>
<li>给定一个变量 <code>counter</code> 来记录当前接口处理的请求数量，初始值为 0（代表接口当前 1 分钟内还未处理请求）。</li>
<li>1 分钟之内每处理一个请求之后就将 <code>counter+1</code> ，当 <code>counter=33</code> 之后（也就是说在这 1 分钟内接口已经被访问 33 次的话），后续的请求就会被全部拒绝。</li>
<li>等到 1 分钟结束后，将 <code>counter</code> 重置 0，重新开始计数。</li>
</ul>
<p><strong>这种限流算法无法保证限流速率，因而无法保证突然激增的流量。</strong></p>
<p>就比如说我们限制某个接口 1 分钟只能访问 1000 次，该接口的 QPS 为 500，前 55s 这个接口 1 个请求没有接收，后 1s 突然接收了 1000 个请求。然后，在当前场景下，这 1000 个请求在 1s 内是没办法被处理的，系统直接就被瞬时的大量请求给击垮了。</p>
<figure><img src="https://static001.infoq.cn/resource/image/8d/15/8ded7a2b90e1482093f92fff555b3615.png" alt="固定窗口计数器算法" tabindex="0"><figcaption>固定窗口计数器算法</figcaption></figure>
<h3> 滑动窗口计数器算法</h3>
<p><strong>滑动窗口计数器算法</strong> 算的上是固定窗口计数器算法的升级版。</p>
<p>滑动窗口计数器算法相比于固定窗口计数器算法的优化在于：<strong>它把时间以一定比例分片</strong> 。</p>
<p>例如我们的接口限流每分钟处理 60 个请求，我们可以把 1 分钟分为 60 个窗口。每隔 1 秒移动一次，每个窗口一秒只能处理 不大于 <code>60(请求数)/60（窗口数）</code> 的请求， 如果当前窗口的请求计数总和超过了限制的数量的话就不再处理其他请求。</p>
<p>很显然， <strong>当滑动窗口的格子划分的越多，滑动窗口的滚动就越平滑，限流的统计就会越精确。</strong></p>
<figure><img src="https://static001.infoq.cn/resource/image/ae/15/ae4d3cd14efb8dc7046d691c90264715.png" alt="滑动窗口计数器算法" tabindex="0"><figcaption>滑动窗口计数器算法</figcaption></figure>
<h3> 漏桶算法</h3>
<p>我们可以把发请求的动作比作成注水到桶中，我们处理请求的过程可以比喻为漏桶漏水。我们往桶中以任意速率流入水，以一定速率流出水。当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。</p>
<p>如果想要实现这个算法的话也很简单，准备一个队列用来保存请求，然后我们定期从队列中拿请求来执行就好了（和消息队列削峰/限流的思想是一样的）。</p>
<figure><img src="https://static001.infoq.cn/resource/image/75/03/75938d1010138ce66e38c6ed0392f103.png" alt="漏桶算法" tabindex="0"><figcaption>漏桶算法</figcaption></figure>
<h3> 令牌桶算法</h3>
<p>令牌桶算法也比较简单。和漏桶算法算法一样，我们的主角还是桶（这限流算法和桶过不去啊）。不过现在桶里装的是令牌了，请求在被处理之前需要拿到一个令牌，请求处理完毕之后将这个令牌丢弃（删除）。我们根据限流大小，按照一定的速率往桶里添加令牌。如果桶装满了，就不能继续往里面继续添加令牌了。</p>
<figure><img src="https://static001.infoq.cn/resource/image/ec/93/eca0e5eaa35dac938c673fecf2ec9a93.png" alt="令牌桶算法" tabindex="0"><figcaption>令牌桶算法</figcaption></figure>
<h2> 单机限流怎么做？</h2>
<p>单机限流针对的是单体架构应用。</p>
<p>单机限流可以直接使用 Google Guava 自带的限流工具类 <code>RateLimiter</code> 。 <code>RateLimiter</code> 基于令牌桶算法，可以应对突发流量。</p>
<blockquote>
<p>Guava 地址：<a href="https://github.com/google/guava" target="_blank" rel="noopener noreferrer">https://github.com/google/guava</a></p>
</blockquote>
<p>除了最基本的令牌桶算法(平滑突发限流)实现之外，Guava 的<code>RateLimiter</code>还提供了 <strong>平滑预热限流</strong> 的算法实现。</p>
<p>平滑突发限流就是按照指定的速率放令牌到桶里，而平滑预热限流会有一段预热时间，预热时间之内，速率会逐渐提升到配置的速率。</p>
<p>我们下面通过两个简单的小例子来详细了解吧！</p>
<p>我们直接在项目中引入 Guava 相关的依赖即可使用。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个简单的 Guava 平滑突发限流的 Demo。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个简单的 Guava 平滑预热限流的 Demo。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，<strong>Bucket4j</strong> 是一个非常不错的基于令牌/漏桶算法的限流库。</p>
<blockquote>
<p>Bucket4j 地址：<a href="https://github.com/vladimir-bukhtoyarov/bucket4j" target="_blank" rel="noopener noreferrer">https://github.com/vladimir-bukhtoyarov/bucket4j</a></p>
</blockquote>
<p>相对于，Guava 的限流工具类来说，Bucket4j 提供的限流功能更加全面。不仅支持单机限流和分布式限流，还可以集成监控，搭配 Prometheus 和 Grafana 使用。</p>
<p>不过，毕竟 Guava 也只是一个功能全面的工具类库，其提供的开箱即用的限流功能在很多单机场景下还是比较实用的。</p>
<p>Spring Cloud Gateway 中自带的单机限流的早期版本就是基于 Bucket4j 实现的。后来，替换成了 <strong>Resilience4j</strong>。</p>
<p>Resilience4j 是一个轻量级的容错组件，其灵感来自于 Hystrix。自<a href="https://github.com/Netflix/Hystrix/commit/a7df971cbaddd8c5e976b3cc5f14013fe6ad00e6" target="_blank" rel="noopener noreferrer">Netflix 宣布不再积极开发 Hystrix</a> 之后，Spring 官方和 Netflix 都更推荐使用 Resilience4j 来做限流熔断。</p>
<blockquote>
<p>Resilience4j 地址: <a href="https://github.com/resilience4j/resilience4j" target="_blank" rel="noopener noreferrer">https://github.com/resilience4j/resilience4j</a></p>
</blockquote>
<p>一般情况下，为了保证系统的高可用，项目的限流和熔断都是要一起做的。</p>
<p>Resilience4j 不仅提供限流，还提供了熔断、负载保护、自动重试等保障系统高可用开箱即用的功能。并且，Resilience4j 的生态也更好，很多网关都使用 Resilience4j 来做限流熔断的。</p>
<p>因此，在绝大部分场景下 Resilience4j 或许会是更好的选择。如果是一些比较简单的限流场景的话，Guava 或者 Bucket4j 也是不错的选择。</p>
<h2> 分布式限流怎么做？</h2>
<p>分布式限流针对的分布式/微服务应用架构应用，在这种架构下，单机限流就不适用了，因为会存在多种服务，并且一种服务也可能会被部署多份。</p>
<p>分布式限流常见的方案：</p>
<ul>
<li><strong>借助中间件架限流</strong>：可以借助 Sentinel 或者使用 Redis 来自己实现对应的限流逻辑。</li>
<li><strong>网关层限流</strong>：比较常用的一种方案，直接在网关层把限流给安排上了。不过，通常网关层限流通常也需要借助到中间件/框架。就比如 Spring Cloud Gateway 的分布式限流实现<code>RedisRateLimiter</code>就是基于 Redis+Lua 来实现的，再比如 Spring Cloud Gateway 还可以整合 Sentinel 来做限流。</li>
</ul>
<p>如果你要基于 Redis 来手动实现限流逻辑的话，建议配合 Lua 脚本来做。</p>
<p><strong>为什么建议 Redis+Lua 的方式？</strong> 主要有两点原因：</p>
<ul>
<li><strong>减少了网络开销</strong>：我们可以利用 Lua 脚本来批量执行多条 Redis 命令，这些 Redis 命令会被提交到 Redis 服务器一次性执行完成，大幅减小了网络开销。</li>
<li><strong>原子性</strong>：一段 Lua 脚本可以视作一条命令执行，一段 Lua 脚本执行过程中不会有其他脚本或 Redis 命令同时执行，保证了操作不会被其他指令插入或打扰。</li>
</ul>
<p>我这里就不放具体的限流脚本代码了，网上也有很多现成的优秀的限流脚本供你参考，就比如 Apache 网关项目 ShenYu 的 RateLimiter 限流插件就基于 Redis + Lua 实现了令牌桶算法/并发令牌桶算法、漏桶算法、滑动窗口算法。</p>
<blockquote>
<p>ShenYu 地址: <a href="https://github.com/apache/incubator-shenyu" target="_blank" rel="noopener noreferrer">https://github.com/apache/incubator-shenyu</a></p>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/e1e2a75f489e4854990dabe3b6cec522.jpg" alt="ShenYu 限流脚本" tabindex="0"><figcaption>ShenYu 限流脚本</figcaption></figure>
<h2> 相关阅读</h2>
<ul>
<li>服务治理之轻量级熔断框架 Resilience4j：<a href="https://xie.infoq.cn/article/14786e571c1a4143ad1ef8f19" target="_blank" rel="noopener noreferrer">https://xie.infoq.cn/article/14786e571c1a4143ad1ef8f19</a></li>
<li>超详细的 Guava RateLimiter 限流原理解析：<a href="https://cloud.tencent.com/developer/article/1408819" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/1408819</a></li>
<li>实战 Spring Cloud Gateway 之限流篇 👍：<a href="https://www.aneasystone.com/archives/2020/08/spring-cloud-gateway-current-limiting.html" target="_blank" rel="noopener noreferrer">https://www.aneasystone.com/archives/2020/08/spring-cloud-gateway-current-limiting.html</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://static001.infoq.cn/resource/image/8d/15/8ded7a2b90e1482093f92fff555b3615.png" type="image/png"/>
    </item>
    <item>
      <title>性能测试入门</title>
      <link>https://javaguide.cn/high-availability/performance-test.html</link>
      <guid>https://javaguide.cn/high-availability/performance-test.html</guid>
      <source url="https://javaguide.cn/rss.xml">性能测试入门</source>
      <description>性能测试一般情况下都是由测试这个职位去做的，那还需要我们开发学这个干嘛呢？了解性能测试的指标、分类以及工具等知识有助于我们更好地去写出性能更好的程序，另外作为开发这个角色，如果你会性能测试的话，相信也会为你的履历加分不少。 这篇文章是我会结合自己的实际经历以及在测试这里取的经所得，除此之外，我还借鉴了一些优秀书籍，希望对你有帮助。 一 不同角色看网站性能 1.1 用户 当用户打开一个网站的时候，最关注的是什么？当然是网站响应速度的快慢。比如我们点击了淘宝的主页，淘宝需要多久将首页的内容呈现在我的面前，我点击了提交订单按钮需要多久返回结果等等。</description>
      <category>高可用</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>性能测试一般情况下都是由测试这个职位去做的，那还需要我们开发学这个干嘛呢？了解性能测试的指标、分类以及工具等知识有助于我们更好地去写出性能更好的程序，另外作为开发这个角色，如果你会性能测试的话，相信也会为你的履历加分不少。</p>
<p>这篇文章是我会结合自己的实际经历以及在测试这里取的经所得，除此之外，我还借鉴了一些优秀书籍，希望对你有帮助。</p>
<h2> 一 不同角色看网站性能</h2>
<h3> 1.1 用户</h3>
<p>当用户打开一个网站的时候，最关注的是什么？当然是网站响应速度的快慢。比如我们点击了淘宝的主页，淘宝需要多久将首页的内容呈现在我的面前，我点击了提交订单按钮需要多久返回结果等等。</p>
<p>所以，用户在体验我们系统的时候往往根据你的响应速度的快慢来评判你的网站的性能。</p>
<h3> 1.2 开发人员</h3>
<p>用户与开发人员都关注速度，这个速度实际上就是我们的系统<strong>处理用户请求的速度</strong>。</p>
<p>开发人员一般情况下很难直观的去评判自己网站的性能，我们往往会根据网站当前的架构以及基础设施情况给一个大概的值,比如：</p>
<ol>
<li>项目架构是分布式的吗？</li>
<li>用到了缓存和消息队列没有？</li>
<li>高并发的业务有没有特殊处理？</li>
<li>数据库设计是否合理？</li>
<li>系统用到的算法是否还需要优化？</li>
<li>系统是否存在内存泄露的问题？</li>
<li>项目使用的 Redis 缓存多大？服务器性能如何？用的是机械硬盘还是固态硬盘？</li>
<li>......</li>
</ol>
<h3> 1.3 测试人员</h3>
<p>测试人员一般会根据性能测试工具来测试，然后一般会做出一个表格。这个表格可能会涵盖下面这些重要的内容：</p>
<ol>
<li>响应时间；</li>
<li>请求成功率；</li>
<li>吞吐量；</li>
<li>......</li>
</ol>
<h3> 1.4 运维人员</h3>
<p>运维人员会倾向于根据基础设施和资源的利用率来判断网站的性能，比如我们的服务器资源使用是否合理、数据库资源是否存在滥用的情况、当然，这是传统的运维人员，现在 Devops 火起来后，单纯干运维的很少了。我们这里暂且还保留有这个角色。</p>
<h2> 二 性能测试需要注意的点</h2>
<p>几乎没有文章在讲性能测试的时候提到这个问题，大家都会讲如何去性能测试，有哪些性能测试指标这些东西。</p>
<h3> 2.1 了解系统的业务场景</h3>
<p><strong>性能测试之前更需要你了解当前的系统的业务场景。</strong> 对系统业务了解的不够深刻，我们很容易犯测试方向偏执的错误，从而导致我们忽略了对系统某些更需要性能测试的地方进行测试。比如我们的系统可以为用户提供发送邮件的功能，用户配置成功邮箱后只需输入相应的邮箱之后就能发送，系统每天大概能处理上万次发邮件的请求。很多人看到这个可能就直接开始使用相关工具测试邮箱发送接口，但是，发送邮件这个场景可能不是当前系统的性能瓶颈，这么多人用我们的系统发邮件， 还可能有很多人一起发邮件，单单这个场景就这么人用，那用户管理可能才是性能瓶颈吧！</p>
<h3> 2.2 历史数据非常有用</h3>
<p>当前系统所留下的历史数据非常重要，一般情况下，我们可以通过相应的些历史数据初步判定这个系统哪些接口调用的比较多、哪些 service 承受的压力最大，这样的话，我们就可以针对这些地方进行更细致的性能测试与分析。</p>
<p>另外，这些地方也就像这个系统的一个短板一样，优化好了这些地方会为我们的系统带来质的提升。</p>
<h3> 三 性能测试的指标</h3>
<h3> 3.1 响应时间</h3>
<p><strong>响应时间就是用户发出请求到用户收到系统处理结果所需要的时间。</strong> 重要吗？实在太重要！</p>
<p>比较出名的 2-5-8 原则是这样描述的：通常来说，2 到 5 秒，页面体验会比较好，5 到 8 秒还可以接受，8 秒以上基本就很难接受了。另外，据统计当网站慢一秒就会流失十分之一的客户。</p>
<p>但是，在某些场景下我们也并不需要太看重 2-5-8 原则 ，比如我觉得系统导出导入大数据量这种就不需要，系统生成系统报告这种也不需要。</p>
<h3> 3.2 并发数</h3>
<p><strong>并发数是系统能同时处理请求的数目即同时提交请求的用户数目。</strong></p>
<p>不得不说，高并发是现在后端架构中非常非常火热的一个词了，这个与当前的互联网环境以及中国整体的互联网用户量都有很大关系。一般情况下，你的系统并发量越大，说明你的产品做的就越大。但是，并不是每个系统都需要达到像淘宝、12306 这种亿级并发量的。</p>
<h3> 3.3 吞吐量</h3>
<p>吞吐量指的是系统单位时间内系统处理的请求数量。衡量吞吐量有几个重要的参数：QPS（TPS）、并发数、响应时间。</p>
<ol>
<li>QPS（Query Per Second）：服务器每秒可以执行的查询次数；</li>
<li>TPS（Transaction Per Second）：服务器每秒处理的事务数（这里的一个事务可以理解为客户发出请求到收到服务器的过程）；</li>
<li>并发数；系统能同时处理请求的数目即同时提交请求的用户数目。</li>
<li>响应时间：一般取多次请求的平均响应时间</li>
</ol>
<p>理清他们的概念，就很容易搞清楚他们之间的关系了。</p>
<ul>
<li><strong>QPS（TPS）</strong> = 并发数/平均响应时间</li>
<li><strong>并发数</strong> = QPS*平均响应时间</li>
</ul>
<p>书中是这样描述 QPS 和 TPS 的区别的。</p>
<blockquote>
<p>QPS vs TPS：QPS 基本类似于 TPS，但是不同的是，对于一个页面的一次访问，形成一个 TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“QPS”之中。如，访问一个页面会请求服务器 2 次，一次访问，产生一个“T”，产生 2 个“Q”。</p>
</blockquote>
<h3> 3.4 性能计数器</h3>
<p><strong>性能计数器是描述服务器或者操作系统的一些数据指标如内存使用、CPU 使用、磁盘与网络 I/O 等情况。</strong></p>
<h3> 四 几种常见的性能测试</h3>
<h3> 性能测试</h3>
<p>性能测试方法是通过测试工具模拟用户请求系统，目的主要是为了测试系统的性能是否满足要求。通俗地说，这种方法就是要在特定的运行条件下验证系统的能力状态。</p>
<p>性能测试是你在对系统性能已经有了解的前提之后进行的，并且有明确的性能指标。</p>
<h3> 负载测试</h3>
<p>对被测试的系统继续加大请求压力，直到服务器的某个资源已经达到饱和了，比如系统的缓存已经不够用了或者系统的响应时间已经不满足要求了。</p>
<p>负载测试说白点就是测试系统的上限。</p>
<h3> 压力测试</h3>
<p>不去管系统资源的使用情况，对系统继续加大请求压力，直到服务器崩溃无法再继续提供服务。</p>
<h3> 稳定性测试</h3>
<p>模拟真实场景，给系统一定压力，看看业务是否能稳定运行。</p>
<h2> 五 常用性能测试工具</h2>
<p>这里就不多扩展了，有时间的话会单独拎一个熟悉的说一下。</p>
<h3> 5.1 后端常用</h3>
<p>没记错的话，除了 LoadRunner 其他几款性能测试工具都是开源免费的。</p>
<ol>
<li>Jmeter：Apache JMeter 是 JAVA 开发的性能测试工具。</li>
<li>LoadRunner：一款商业的性能测试工具。</li>
<li>Galtling：一款基于 Scala 开发的高性能服务器性能测试工具。</li>
<li>ab：全称为 Apache Bench 。Apache 旗下的一款测试工具，非常实用。</li>
</ol>
<h3> 5.2 前端常用</h3>
<ol>
<li>Fiddler：抓包工具，它可以修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是 Web 调试的利器。</li>
<li>HttpWatch: 可用于录制 HTTP 请求信息的工具。</li>
</ol>
<h2> 六 常见的性能优化策略</h2>
<p>性能优化之前我们需要对请求经历的各个环节进行分析，排查出可能出现性能瓶颈的地方，定位问题。</p>
<p>下面是一些性能优化时，我经常拿来自问的一些问题：</p>
<ol>
<li>系统是否需要缓存？</li>
<li>系统架构本身是不是就有问题？</li>
<li>系统是否存在死锁的地方？</li>
<li>系统是否存在内存泄漏？（Java 的自动回收内存虽然很方便，但是，有时候代码写的不好真的会造成内存泄漏）</li>
<li>数据库索引使用是否合理？</li>
<li>......</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>冗余设计详解</title>
      <link>https://javaguide.cn/high-availability/redundancy.html</link>
      <guid>https://javaguide.cn/high-availability/redundancy.html</guid>
      <source url="https://javaguide.cn/rss.xml">冗余设计详解</source>
      <description>冗余设计是保证系统和数据高可用的最常的手段。 对于服务来说，冗余的思想就是相同的服务部署多份，如果正在使用的服务突然挂掉的话，系统可以很快切换到备份服务上，大大减少系统的不可用时间，提高系统的可用性。 对于数据来说，冗余的思想就是相同的数据备份多份，这样就可以很简单地提高数据的安全性。 实际上，日常生活中就有非常多的冗余思想的应用。 拿我自己来说，我对于重要文件的保存方法就是冗余思想的应用。我日常所使用的重要文件都会同步一份在 GitHub 以及个人云盘上，这样就可以保证即使电脑硬盘损坏，我也可以通过 GitHub 或者个人云盘找回自己的重要文件。</description>
      <category>高可用</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>冗余设计是保证系统和数据高可用的最常的手段。</p>
<p>对于服务来说，冗余的思想就是相同的服务部署多份，如果正在使用的服务突然挂掉的话，系统可以很快切换到备份服务上，大大减少系统的不可用时间，提高系统的可用性。</p>
<p>对于数据来说，冗余的思想就是相同的数据备份多份，这样就可以很简单地提高数据的安全性。</p>
<p>实际上，日常生活中就有非常多的冗余思想的应用。</p>
<p>拿我自己来说，我对于重要文件的保存方法就是冗余思想的应用。我日常所使用的重要文件都会同步一份在 GitHub 以及个人云盘上，这样就可以保证即使电脑硬盘损坏，我也可以通过 GitHub 或者个人云盘找回自己的重要文件。</p>
<p>高可用集群（High Availability Cluster，简称 HA Cluster）、同城灾备、异地灾备、同城多活和异地多活是冗余思想在高可用系统设计中最典型的应用。</p>
<ul>
<li><strong>高可用集群</strong> : 同一份服务部署两份或者多份，当正在使用的服务突然挂掉的话，可以切换到另外一台服务，从而保证服务的高可用。</li>
<li><strong>同城灾备</strong>：一整个集群可以部署在同一个机房，而同城灾备中相同服务部署在同一个城市的不同机房中。并且，备用服务不处理请求。这样可以避免机房出现意外情况比如停电、火灾。</li>
<li><strong>异地灾备</strong>：类似于同城灾备，不同的是，相同服务部署在异地（通常距离较远，甚至是在不同的城市或者国家）的不同机房中</li>
<li><strong>同城多活</strong>：类似于同城灾备，但备用服务可以处理请求，这样可以充分利用系统资源，提高系统的并发。</li>
<li><strong>异地多活</strong> : 将服务部署在异地的不同机房中，并且，它们可以同时对外提供服务。</li>
</ul>
<p>高可用集群单纯是服务的冗余，并没有强调地域。同城灾备、异地灾备、同城多活和异地多活实现了地域上的冗余。</p>
<p>同城和异地的主要区别在于机房之间的距离。异地通常距离较远，甚至是在不同的城市或者国家。</p>
<p>和传统的灾备设计相比，同城多活和异地多活最明显的改变在于“多活”，即所有站点都是同时在对外提供服务的。异地多活是为了应对突发状况比如火灾、地震等自然或者人为灾害。</p>
<p>光做好冗余还不够，必须要配合上 <strong>故障转移</strong> 才可以！ 所谓故障转移，简单来说就是实现不可用服务快速且自动地切换到可用服务，整个过程不需要人为干涉。</p>
<p>举个例子：哨兵模式的 Redis 集群中，如果 Sentinel（哨兵） 检测到 master 节点出现故障的话， 它就会帮助我们实现故障转移，自动将某一台 slave 升级为 master，确保整个 Redis 系统的可用性。整个过程完全自动，不需要人工介入。我在<a href="https://www.yuque.com/docs/share/f37fc804-bfe6-4b0d-b373-9c462188fec7" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>的「技术面试题篇」中的数据库部分详细介绍了 Redis 集群相关的知识点&amp;面试题，感兴趣的小伙伴可以看看。</p>
<p>再举个例子：Nginx 可以结合 Keepalived 来实现高可用。如果 Nginx 主服务器宕机的话，Keepalived 可以自动进行故障转移，备用 Nginx 主服务器升级为主服务。并且，这个切换对外是透明的，因为使用的虚拟 IP，虚拟 IP 不会改变。我在<a href="https://www.yuque.com/docs/share/f37fc804-bfe6-4b0d-b373-9c462188fec7" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>的「技术面试题篇」中的「服务器」部分详细介绍了 Nginx 相关的知识点&amp;面试题，感兴趣的小伙伴可以看看。</p>
<p>异地多活架构实施起来非常难，需要考虑的因素非常多。本人不才，实际项目中并没有实践过异地多活架构，我对其了解还停留在书本知识。</p>
<p>如果你想要深入学习异地多活相关的知识，我这里推荐几篇我觉得还不错的文章：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/T6mMDdtTfBuIiEowCpqu6Q" target="_blank" rel="noopener noreferrer">搞懂异地多活，看这篇就够了- 水滴与银弹 - 2021</a></li>
<li><a href="https://mp.weixin.qq.com/s/hMD-IS__4JE5_nQhYPYSTg" target="_blank" rel="noopener noreferrer">四步构建异地多活</a></li>
<li><a href="http://gk.link/a/10pKZ" target="_blank" rel="noopener noreferrer">《从零开始学架构》— 28 | 业务高可用的保障：异地多活架构</a></li>
</ul>
<p>不过，这些文章大多也都是在介绍概念知识。目前，网上还缺少真正介绍具体要如何去实践落地异地多活架构的资料。</p>
]]></content:encoded>
    </item>
    <item>
      <title>超时&amp;重试详解</title>
      <link>https://javaguide.cn/high-availability/timeout-and-retry.html</link>
      <guid>https://javaguide.cn/high-availability/timeout-and-retry.html</guid>
      <source url="https://javaguide.cn/rss.xml">超时&amp;重试详解</source>
      <description>由于网络问题、系统或者服务内部的 Bug、服务器宕机、操作系统崩溃等问题的不确定性，我们的系统或者服务永远不可能保证时刻都是可用的状态。 为了最大限度的减小系统或者服务出现故障之后带来的影响，我们需要用到的 超时（Timeout） 和 重试（Retry） 机制。 想要把超时和重试机制讲清楚其实很简单，因为它俩本身就不是什么高深的概念。 虽然超时和重试机制的思想很简单，但是它俩是真的非常实用。你平时接触到的绝大部分涉及到远程调用的系统或者服务都会应用超时和重试机制。尤其是对于微服务系统来说，正确设置超时和重试非常重要。单体服务通常只涉及数据库、缓存、第三方 API、中间件等的网络调用，而微服务系统内部各个服务之间还存在着网络调用。</description>
      <category>高可用</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>由于网络问题、系统或者服务内部的 Bug、服务器宕机、操作系统崩溃等问题的不确定性，我们的系统或者服务永远不可能保证时刻都是可用的状态。</p>
<p>为了最大限度的减小系统或者服务出现故障之后带来的影响，我们需要用到的 <strong>超时（Timeout）</strong> 和 <strong>重试（Retry）</strong> 机制。</p>
<p>想要把超时和重试机制讲清楚其实很简单，因为它俩本身就不是什么高深的概念。</p>
<p>虽然超时和重试机制的思想很简单，但是它俩是真的非常实用。你平时接触到的绝大部分涉及到远程调用的系统或者服务都会应用超时和重试机制。尤其是对于微服务系统来说，正确设置超时和重试非常重要。单体服务通常只涉及数据库、缓存、第三方 API、中间件等的网络调用，而微服务系统内部各个服务之间还存在着网络调用。</p>
<h2> 超时机制</h2>
<h3> 什么是超时机制？</h3>
<p>超时机制说的是当一个请求超过指定的时间（比如 1s）还没有被处理的话，这个请求就会直接被取消并抛出指定的异常或者错误（比如 <code>504 Gateway Timeout</code>）。</p>
<p>我们平时接触到的超时可以简单分为下面 2 种：</p>
<ul>
<li><strong>连接超时（ConnectTimeout）</strong>：客户端与服务端建立连接的最长等待时间。</li>
<li><strong>读取超时（ReadTimeout）</strong>：客户端和服务端已经建立连接，客户端等待服务端处理完请求的最长时间。实际项目中，我们关注比较多的还是读取超时。</li>
</ul>
<p>一些连接池客户端框架中可能还会有获取连接超时和空闲连接清理超时。</p>
<p>如果没有设置超时的话，就可能会导致服务端连接数爆炸和大量请求堆积的问题。</p>
<p>这些堆积的连接和请求会消耗系统资源，影响新收到的请求的处理。严重的情况下，甚至会拖垮整个系统或者服务。</p>
<p>我之前在实际项目就遇到过类似的问题，整个网站无法正常处理请求，服务器负载直接快被拉满。后面发现原因是项目超时设置错误加上客户端请求处理异常，导致服务端连接数直接接近 40w+，这么多堆积的连接直接把系统干趴了。</p>
<h3> 超时时间应该如何设置？</h3>
<p>超时到底设置多长时间是一个难题！超时值设置太高或者太低都有风险。如果设置太高的话，会降低超时机制的有效性，比如你设置超时为 10s 的话，那设置超时就没啥意义了，系统依然可能会出现大量慢请求堆积的问题。如果设置太低的话，就可能会导致在系统或者服务在某些处理请求速度变慢的情况下（比如请求突然增多），大量请求重试（超时通常会结合重试）继续加重系统或者服务的压力，进而导致整个系统或者服务被拖垮的问题。</p>
<p>通常情况下，我们建议读取超时设置为 <strong>1500ms</strong> ,这是一个比较普适的值。如果你的系统或者服务对于延迟比较敏感的话，那读取超时值可以适当在 <strong>1500ms</strong> 的基础上进行缩短。反之，读取超时值也可以在 <strong>1500ms</strong> 的基础上进行加长，不过，尽量还是不要超过 <strong>1500ms</strong> 。连接超时可以适当设置长一些，建议在 <strong>1000ms ~ 5000ms</strong> 之内。</p>
<p>没有银弹！超时值具体该设置多大，还是要根据实际项目的需求和情况慢慢调整优化得到。</p>
<p>更上一层，参考<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener noreferrer">美团的 Java 线程池参数动态配置</a>思想，我们也可以将超时弄成可配置化的参数而不是固定的，比较简单的一种办法就是将超时的值放在配置中心中。这样的话，我们就可以根据系统或者服务的状态动态调整超时值了。</p>
<h2> 重试机制</h2>
<h3> 什么是重试机制？</h3>
<p>重试机制一般配合超时机制一起使用，指的是多次发送相同的请求来避免瞬态故障和偶然性故障。</p>
<p>瞬态故障可以简单理解为某一瞬间系统偶然出现的故障，并不会持久。偶然性故障可以理解为哪些在某些情况下偶尔出现的故障，频率通常较低。</p>
<p>重试的核心思想是通过消耗服务器的资源来尽可能获得请求更大概率被成功处理。由于瞬态故障和偶然性故障是很少发生的，因此，重试对于服务器的资源消耗几乎是可以被忽略的。</p>
<h3> 重试的次数如何设置？</h3>
<p>重试的次数不宜过多，否则依然会对系统负载造成比较大的压力。</p>
<p>重试的次数通常建议设为 3 次。并且，我们通常还会设置重试的间隔，比如说我们要重试 3 次的话，第 1 次请求失败后，等待 1 秒再进行重试，第 2 次请求失败后，等待 2 秒再进行重试，第 3 次请求失败后，等待 3 秒再进行重试。</p>
<h3> 重试幂等</h3>
<p>超时和重试机制在实际项目中使用的话，需要注意保证同一个请求没有被多次执行。</p>
<p>什么情况下会出现一个请求被多次执行呢？客户端等待服务端完成请求完成超时但此时服务端已经执行了请求，只是由于短暂的网络波动导致响应在发送给客户端的过程中延迟了。</p>
<p>举个例子：用户支付购买某个课程，结果用户支付的请求由于重试的问题导致用户购买同一门课程支付了两次。对于这种情况，我们在执行用户购买课程的请求的时候需要判断一下用户是否已经购买过。这样的话，就不会因为重试的问题导致重复购买了。</p>
<h2> 参考</h2>
<ul>
<li>微服务之间调用超时的设置治理：<a href="https://www.infoq.cn/article/eyrslar53l6hjm5yjgyx" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/eyrslar53l6hjm5yjgyx</a></li>
<li>超时、重试和抖动回退：<a href="https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/" target="_blank" rel="noopener noreferrer">https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>程序人生</title>
      <link>https://javaguide.cn/high-quality-technical-articles/</link>
      <guid>https://javaguide.cn/high-quality-technical-articles/</guid>
      <source url="https://javaguide.cn/rss.xml">程序人生</source>
      <description>程序人生 这是一则或许对你有用的小广告 👉 欢迎准备 Java 面试以及学习 Java 的同学加入我的知识星球，干货很多！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。 👉 《Java 面试指北》持续更新完善中！这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。</description>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 程序人生</h1>
<div class="hint-container tip">
<p class="hint-container-title">这是一则或许对你有用的小广告</p>
<p>👉 欢迎准备 Java 面试以及学习 Java 的同学加入我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>，干货很多！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</p>
<p>👉 <a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a>持续更新完善中！这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。</p>
</div>
<p>这里主要会收录一些我看到的和程序员密切相关的非技术类的优质文章，每一篇都值得你阅读 3 遍以上！常看常新！</p>
<h2> 练级攻略</h2>
<ul>
<li><a href="/high-quality-technical-articles/advanced-programmer/the-growth-strategy-of-the-technological-giant.html" target="blank">程序员的技术成长战略</a></li>
<li><a href="/high-quality-technical-articles/advanced-programmer/ten-years-of-dachang-growth-road.html" target="blank">十年大厂成长之路</a></li>
<li><a href="/high-quality-technical-articles/advanced-programmer/seven-tips-for-becoming-an-advanced-programmer.html" target="blank">给想成长为高级别开发同学的七条建议</a></li>
<li><a href="/high-quality-technical-articles/advanced-programmer/20-bad-habits-of-bad-programmers.html" target="blank">糟糕程序员的 20 个坏习惯</a></li>
<li><a href="/high-quality-technical-articles/advanced-programmer/thinking-about-technology-and-business-after-five-years-of-work.html" target="blank">工作五年之后，对技术和业务的思考</a></li>
</ul>
<h2> 个人经历</h2>
<ul>
<li><a href="/high-quality-technical-articles/personal-experience/four-year-work-in-tencent-summary.html" target="blank">从校招入职腾讯的四年工作总结</a></li>
<li><a href="/high-quality-technical-articles/personal-experience/two-years-of-back-end-develop--experience-in-didi-and-toutiao.html" target="blank">我在滴滴和头条的两年后端研发工作经验分享</a></li>
<li><a href="/high-quality-technical-articles/personal-experience/8-years-programmer-work-summary.html" target="blank">一个中科大差生的 8 年程序员工作总结</a></li>
<li><a href="/high-quality-technical-articles/personal-experience/huawei-od-275-days.html" target="blank">华为 OD 275 天后，我进了腾讯！</a></li>
</ul>
<h2> 程序员</h2>
<ul>
<li><a href="/high-quality-technical-articles/programmer/how-do-programmers-publish-a-technical-book.html" target="blank">程序员怎样出版一本技术书</a></li>
<li><a href="/high-quality-technical-articles/programmer/efficient-book-publishing-and-practice-guide.html" target="blank">程序员高效出书避坑和实践指南</a></li>
</ul>
<h2> 面试</h2>
<ul>
<li><a href="/high-quality-technical-articles/interview/the-experience-of-get-offer-from-over-20-big-companies.html" target="blank">斩获 20+ 大厂 offer 的面试经验分享</a></li>
<li><a href="/high-quality-technical-articles/interview/the-experience-and-thinking-of-an-interview-experienced-by-an-older-programmer.html" target="blank">一位大龄程序员所经历的面试的历炼和思考</a></li>
<li><a href="/high-quality-technical-articles/interview/technical-preliminary-preparation.html" target="blank">从面试官和候选者的角度谈如何准备技术初试</a></li>
<li><a href="/high-quality-technical-articles/interview/screen-candidates-for-packaging.html" target="blank">包装严重的 IT 行业，作为面试官，我是如何甄别应聘者的包装程度</a></li>
<li><a href="/high-quality-technical-articles/interview/summary-of-spring-recruitment.html" target="blank">普通人的春招总结（阿里、腾讯 offer）</a></li>
<li><a href="/high-quality-technical-articles/interview/my-personal-experience-in-2021.html" target="blank">2021 校招我的个人经历和经验</a></li>
<li><a href="/high-quality-technical-articles/interview/how-to-examine-the-technical-ability-of-programmers-in-the-first-test-of-technology.html" target="blank">如何在技术初试中考察程序员的技术能力</a></li>
<li><a href="/high-quality-technical-articles/interview/some-secrets-about-alibaba-interview.html" target="blank">阿里技术面试的一些秘密</a></li>
</ul>
<h2> 工作</h2>
<ul>
<li><a href="/high-quality-technical-articles/work/get-into-work-mode-quickly-when-you-join-a-company.html" target="blank">新入职一家公司如何快速进入工作状态</a></li>
<li><a href="/high-quality-technical-articles/work/32-tips-improving-career.html" target="blank">32 条总结教你提升职场经验</a></li>
<li><a href="/high-quality-technical-articles/work/employee-performance.html" target="blank">聊聊大厂的绩效考核</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>贡献指南</title>
      <link>https://javaguide.cn/javaguide/contribution-guideline.html</link>
      <guid>https://javaguide.cn/javaguide/contribution-guideline.html</guid>
      <source url="https://javaguide.cn/rss.xml">贡献指南</source>
      <description>欢迎参与 JavaGuide 的维护工作，这是一件非常有意义的事情。详细信息请看：JavaGuide 贡献指南 。 你可以从下面几个方向来做贡献： 笔记内容大多是手敲，所以难免会有笔误，你可以帮我找错别字。 很多知识点我可能没有涉及到，所以你可以对其他知识点进行补充。 现有的知识点难免存在不完善或者错误，所以你可以对已有知识点进行修改/补充。</description>
      <category>走近项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>欢迎参与 JavaGuide 的维护工作，这是一件非常有意义的事情。详细信息请看：<a href="https://zhuanlan.zhihu.com/p/464832264" target="_blank" rel="noopener noreferrer">JavaGuide 贡献指南</a> 。</p>
<p>你可以从下面几个方向来做贡献：</p>
<ul>
<li>笔记内容大多是手敲，所以难免会有笔误，你可以帮我找错别字。</li>
<li>很多知识点我可能没有涉及到，所以你可以对其他知识点进行补充。</li>
<li>现有的知识点难免存在不完善或者错误，所以你可以对已有知识点进行修改/补充。</li>
</ul>
<p>一定一定一定要注意 <strong>排版规范</strong>：</p>
<ul>
<li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="noopener noreferrer">中文文案排版指北 - GitHub</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20506092" target="_blank" rel="noopener noreferrer">写给大家看的中文排版指南 - 知乎</a></li>
<li><a href="https://dawner.top/posts/chinese-copywriting-rules/" target="_blank" rel="noopener noreferrer">中文文案排版细则 - Dawner</a></li>
<li><a href="https://github.com/yikeke/zh-style-guide/" target="_blank" rel="noopener noreferrer">中文技术文档写作风格指南</a></li>
</ul>
<p>如果要提 issue/question 的话，强烈推荐阅读下面这些资料：</p>
<ul>
<li><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way" target="_blank" rel="noopener noreferrer">《提问的智慧》</a></li>
<li><a href="https://github.com/seajs/seajs/issues/545" target="_blank" rel="noopener noreferrer">《如何向开源社区提问题》</a></li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html" target="_blank" rel="noopener noreferrer">《如何有效地报告 Bug》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25795393" target="_blank" rel="noopener noreferrer">《如何向开源项目提交无法解答的问题》</a>。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>常见问题</title>
      <link>https://javaguide.cn/javaguide/faq.html</link>
      <guid>https://javaguide.cn/javaguide/faq.html</guid>
      <source url="https://javaguide.cn/rss.xml">常见问题</source>
      <description>JavaGuide 是否支持 RSS？ 必须支持！推荐 RSS 订阅本网站获取最新更新。 JavaGuide 有没有 PDF 版本？ 由于 JavaGuide 内容在持续完善，所以并没有一个完全与之同步的 PDF 版本提供。如果你想要 PDF 版本的话，可以考虑 《JavaGuide 面试突击版》 ，这是对 JavaGuide 内容的浓缩总结。 《JavaGuide 面试突击版》在我的公众号后台回复“PDF”即可获取，免费的。除了 《JavaGuide 面试突击版》之外，还会免费送你多本优质面试 PDF 手册。</description>
      <category>走近项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> JavaGuide 是否支持 RSS？</h2>
<p>必须支持！推荐 RSS 订阅本网站获取最新更新。</p>
<h2> JavaGuide 有没有 PDF 版本？</h2>
<p>由于 JavaGuide 内容在持续完善，所以并没有一个完全与之同步的 PDF 版本提供。如果你想要 PDF 版本的话，可以考虑 <strong>《JavaGuide 面试突击版》</strong> ，这是对 JavaGuide 内容的浓缩总结。</p>
<p>《JavaGuide 面试突击版》在我的公众号后台回复“<strong>PDF</strong>”即可获取，免费的。除了 《JavaGuide 面试突击版》之外，还会免费送你多本优质面试 PDF 手册。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="公众号" tabindex="0"><figcaption>公众号</figcaption></figure>
<h2> 如何看待 JavaGuide 的 star 数量很多？</h2>
<p><a href="https://github.com/Snailclimb" target="_blank" rel="noopener noreferrer">JavaGuide</a> 目前已经是 Java 领域 star 数量最多的几个项目之一，登顶过很多次 GitHub Trending。</p>
<p>不过，这个真心没啥好嘚瑟的。因为，教程类的含金量其实是比较低的，star 数量比较多主要也是因为受众面比较广，大家觉得不错，点个 star 就相当于收藏了。很多特别优秀的框架，star 数量可能只有几 K。所以，单纯看 star 数量没啥意思，就当看个笑话吧！</p>
<p>维护这个项目的过程中，也被某些人 diss 过：“md 项目，没啥含金量，给国人丢脸！”。</p>
<p>对于说这类话的人，我觉得对我没啥影响，就持续完善，把 JavaGuide 做的更好吧！其实，国外的很多项目也是纯 MD 啊！就比如外国的朋友发起的 awesome 系列、求职面试系列。无需多说，行动自证！凎！</p>
<p>开源非常重要的一点就是协作。如果你开源了一个项目之后，就不再维护，别人给你提交 issue/pr，你都不处理，那开源也没啥意义了！</p>
<h2> JavaGuide 会不会推出纸质书籍？</h2>
<p>可以给出一个比较明确的答案：<strong>暂时没有考虑出书</strong> 。</p>
<p>JavaGuide 这个项目诞生一年左右就有出版社的老师联系我了，由于自知个人能力尚需沉淀，我都婉拒了。这几年的话，由于项目还是有一点知名度的，找我出书的出版社老师更多了，也都被我一一婉拒了。</p>
<p><strong>出书既能博名又能赚点钱，我为啥不考虑出书呢？</strong></p>
<ul>
<li>JavaGuide 的很多内容我还不是很满意，也一直在维护中，细心的小伙伴看我的<a href="https://github.com/Snailclimb/JavaGuide/commits/main" target="_blank" rel="noopener noreferrer">提交记录</a>就明白了。</li>
<li>开源版本更容易维护和修改，也能让更多人更方便地参与到项目的建设中，这也是我最初做这个项目的初衷。</li>
<li>我觉得出书是一件神圣的事情，自认能力还不够。</li>
<li>个人精力有限，不光有本职工作，还弄了一个<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>赚点外快，还要维护完善 JavaGuide。</li>
<li>......</li>
</ul>
<p>这几年一直在默默完善，真心希望 JavaGuide 越来越好，帮助到更多朋友！也欢迎大家参与进来！</p>
<h2> JavaGuide 上为什么有一些付费文章？</h2>
<p>是这样的，JavaGuide 上确实有非常非常少的付费文章，差不多 10 篇不到吧，这对于整个网站的内容来说算是微不足道了。</p>
<p>这些付费文章属于<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>专属，是我用来引流知识星球的，对整体阅读其实并没有什么影响的。</p>
<p>我也知道大家不喜欢营销，所以我会让自己控制好一个度。我一不割韭菜，二不贩卖焦虑，仅仅赚一份小钱提升家人生活品质。</p>
<p><strong>用心做内容，真心希望能帮助到其他人。</strong></p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" type="image/png"/>
    </item>
    <item>
      <title>网站历史</title>
      <link>https://javaguide.cn/javaguide/history.html</link>
      <guid>https://javaguide.cn/javaguide/history.html</guid>
      <source url="https://javaguide.cn/rss.xml">网站历史</source>
      <description>由于项目内容一直持续在更新迭代，所以，这里就不记录项目内容的具体更新情况了。 你可以通过 RSS 订阅获取网站的最新更新，你还可以通过 https://javaguide.cn/article/获取到网站最新更新的文章。</description>
      <category>走近项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>由于项目内容一直持续在更新迭代，所以，这里就不记录项目内容的具体更新情况了。</p>
<p>你可以通过 <a href="https://javaguide.cn/feed.json" target="_blank" rel="noopener noreferrer">RSS 订阅</a>获取网站的最新更新，你还可以通过 <a href="https://javaguide.cn/article/" target="_blank" rel="noopener noreferrer">https://javaguide.cn/article/</a>获取到网站最新更新的文章。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguideimage-20220614172338606.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这里只记录一些比较重要的一些节点：</p>
<ul>
<li><a href="https://github.com/Snailclimb/JavaGuide/commit/83efb36fb56d197f2c4b471084b884c6a4f23e37" target="_blank" rel="noopener noreferrer">2022-06-13</a>：完善网站排版以及样式。</li>
<li><a href="https://github.com/Snailclimb/JavaGuide/commit/618477f96c4a976cfe5a3bba2f646c0d20e3137e" target="_blank" rel="noopener noreferrer">2022-04-09</a>：添加<a href="https://javaguide.cn/books/" target="_blank" rel="noopener noreferrer">技术书籍精选</a>。</li>
<li><a href="https://github.com/Snailclimb/JavaGuide/commit/5c45af9c7a7cff0d3bc905b09b3bc42f2ee8a88a" target="_blank" rel="noopener noreferrer">2021-03-13</a>：添加<a href="https://javaguide.cn/open-source-project/" target="_blank" rel="noopener noreferrer">开源项目精选</a>。</li>
<li><a href="https://github.com/Snailclimb/JavaGuide/commit/827996e7722fd51718863d4bee156a8c6c759ff5" target="_blank" rel="noopener noreferrer">2021-03-03</a> : 移除了开发工具的部分内容。</li>
<li><a href="https://github.com/Snailclimb/JavaGuide/commit/5a5f8ccb3bfb8d6ba8ac41295f1a1e4555395260" target="_blank" rel="noopener noreferrer">2021-03-03</a>：vuepress-theme-hope 主题更新升级（比较重要的一次主题更新，从 1.x 版本升级到 2.x 版本，网站性能提升）。</li>
<li><a href="https://github.com/Snailclimb/JavaGuide/commit/dc45389934b7763f4f9789168f71c72ef303d3c4" target="_blank" rel="noopener noreferrer">2021-11-09</a> : 基于 vuepress 重构整个项目，提升阅读体验。</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguideimage-20220614172338606.png" type="image/png"/>
    </item>
    <item>
      <title>项目介绍</title>
      <link>https://javaguide.cn/javaguide/intro.html</link>
      <guid>https://javaguide.cn/javaguide/intro.html</guid>
      <source url="https://javaguide.cn/rss.xml">项目介绍</source>
      <description>我是 19 年大学毕业的，在大三准备面试的时候，我开源了 JavaGuide 。我把自己准备面试过程中的一些总结都毫不保留地通过 JavaGuide 分享了出来。 开源 JavaGuide 初始想法源于自己的个人那一段比较迷茫的学习经历，主要目的是为了通过这个开源平台来帮助一些在学习 Java 或者面试过程中遇到问题的小伙伴。 对于 Java 初学者来说： 本文档倾向于给你提供一个比较详细的学习路径，目录清晰，让你对于 Java 整体的知识体系有一个清晰认识。你可以跟着视频或者书籍学习完某个知识点之后，然后来这里找对应的总结，帮助你更好地掌握对应的知识点。 对于非 Java 初学者来说： 本文档更适合回顾知识，准备面试，让你搞清面试应该把重心放在哪些问题上。</description>
      <category>走近项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>我是 19 年大学毕业的，在大三准备面试的时候，我开源了 JavaGuide 。我把自己准备面试过程中的一些总结都毫不保留地通过 JavaGuide 分享了出来。</p>
<p>开源 JavaGuide 初始想法源于自己的个人那一段比较迷茫的学习经历，主要目的是为了通过这个开源平台来帮助一些在学习 Java 或者面试过程中遇到问题的小伙伴。</p>
<ul>
<li><strong>对于 Java 初学者来说：</strong> 本文档倾向于给你提供一个比较详细的学习路径，目录清晰，让你对于 Java 整体的知识体系有一个清晰认识。你可以跟着视频或者书籍学习完某个知识点之后，然后来这里找对应的总结，帮助你更好地掌握对应的知识点。</li>
<li><strong>对于非 Java 初学者来说：</strong> 本文档更适合回顾知识，准备面试，让你搞清面试应该把重心放在哪些问题上。</li>
</ul>
<p><strong>由于本网站的内容完全开源，由大家共同维护完善，因此内容质量比较高。</strong> 如果你也想要参与 JavaGuide 的维护建设工作，请查阅<a href="/javaguide/contribution-guideline.html" target="blank">贡献指南</a>。</p>
<p>相比于其他通过 JavaGuide 学到东西或者说助力获得 offer 的朋友来说 ， JavaGuide 对我的意义更加重大。不夸张的说，有时候真的感觉像是自己的孩子一点一点长大一样，我一直用心呵护着它。虽然，我花了很长时间来维护它，但是，我觉得非常值得！非常有意义！</p>
<p>不过，希望大家对面试不要抱有侥幸的心理，打铁还需自身硬！ <strong>我希望这个文档是为你学习 Java 指明方向，而不仅仅是用来应付面试用的。</strong></p>
<p>另外，JavaGuide 不可能把面试中的所有内容都给涵盖住，尤其是阿里、美团这种挖的比较深入的面试。你可以根据你的目标公司进行针对性的深入学习，多看一些目标公司的面经进行查漏补缺，没事就自测一下，多多思考总结。</p>
<p>加油！奥利给！</p>
<h2> 官方知识星球</h2>
<p>对于准备面试的同学来说，强烈推荐我创建的一个纯粹的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">Java 面试知识星球</a>，干货非常多，学习氛围也很不错！</p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<h2> 项目说明</h2>
<ul>
<li><a href="https://javaguide.cn" target="_blank" rel="noopener noreferrer">在线阅读网站</a>基于 Vuepress 搭建，使用的是主题是 <a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a>（很 Nice 的一个主题）。</li>
<li>项目的 Markdown 格式参考：<a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener noreferrer">GitHub Markdown 格式</a>，表情素材来自：<a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener noreferrer">EMOJI CHEAT SHEET</a>。</li>
<li>Logo 下的小图标是使用<a href="https://shields.io/" target="_blank" rel="noopener noreferrer">Shields.IO</a> 生成的。</li>
</ul>
<h2> 贡献者</h2>
<p><a href="https://github.com/Snailclimb/JavaGuide/graphs/contributors" target="_blank" rel="noopener noreferrer">你可以点此链接查看 JavaGuide 的所有贡献者。</a> 感谢你们让 JavaGuide 变得更好！如果你们来到武汉一定要找我，我请你们吃饭玩耍。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" type="image/png"/>
    </item>
    <item>
      <title>使用建议</title>
      <link>https://javaguide.cn/javaguide/use-suggestion.html</link>
      <guid>https://javaguide.cn/javaguide/use-suggestion.html</guid>
      <source url="https://javaguide.cn/rss.xml">使用建议</source>
      <description>对于不准备面试的同学来说 ，本文档倾向于给你提供一个比较详细的学习路径，目录清晰，让你对于 Java 整体的知识体系有一个清晰认识。你可以跟着视频、书籍或者官方文档学习完某个知识点之后，然后来这里找对应的总结，帮助你更好地掌握对应的知识点。甚至说，你在有编程基础的情况下，想要学习某个知识点的话，可以直接看我的总结，这样学习效率会非常高。 对于准备面试的同学来说 ，本文档涵盖 Java 程序员所需要掌握的核心知识的常见面试问题总结。 大部分人看 JavaGuide 应该都是为了准备技术八股文。那如何才能更高效地准备技术八股文？</description>
      <category>走近项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>对于不准备面试的同学来说</strong> ，本文档倾向于给你提供一个比较详细的学习路径，目录清晰，让你对于 Java 整体的知识体系有一个清晰认识。你可以跟着视频、书籍或者官方文档学习完某个知识点之后，然后来这里找对应的总结，帮助你更好地掌握对应的知识点。甚至说，你在有编程基础的情况下，想要学习某个知识点的话，可以直接看我的总结，这样学习效率会非常高。</p>
<p><strong>对于准备面试的同学来说</strong> ，本文档涵盖 Java 程序员所需要掌握的核心知识的常见面试问题总结。</p>
<p>大部分人看 JavaGuide 应该都是为了准备技术八股文。<strong>那如何才能更高效地准备技术八股文？</strong></p>
<p>对于技术八股文来说，尽量不要死记硬背，这种方式非常枯燥且对自身能力提升有限！但是！想要一点不背是不太现实的，只是说要结合实际应用场景和实战来理解记忆。</p>
<p>我一直觉得面试八股文最好是和实际应用场景和实战相结合。很多同学现在的方向都错了，上来就是直接背八股文，硬生生学成了文科，那当然无趣了。</p>
<p>举个例子：你的项目中需要用到 Redis 来做缓存，你对照着官网简单了解并实践了简单使用 Redis 之后，你去看了 Redis 对应的八股文。你发现 Redis 可以用来做限流、分布式锁，于是你去在项目中实践了一下并掌握了对应的八股文。紧接着，你又发现 Redis 内存不够用的情况下，还能使用 Redis Cluster 来解决，于是你就又去实践了一下并掌握了对应的八股文。</p>
<p>而且， <strong>面试中有水平的面试官都是根据你的项目经历来顺带着问一些技术八股文</strong> 。</p>
<p>举个例子：你的项目用到了消息队列，那面试官可能就会问你：为什么使用消息队列？项目中什么模块用到了消息队列？如何保证消息不丢失？如何保证消息的顺序性?（结合你使用的具体的消息队列来准备）......。</p>
<p><strong>一定要记住你的主要目标是理解和记关键词，而不是像背课文一样一字一句地记下来！</strong></p>
<p>另外，记录博客或者用自己的理解把对应的知识点讲给别人听也是一个不错的选择。</p>
<p>最后，准备技术面试的同学一定要定期复习（自测的方式非常好），不然确实会遗忘的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>优质面经汇总(付费)</title>
      <link>https://javaguide.cn/interview-preparation/interview-experience.html</link>
      <guid>https://javaguide.cn/interview-preparation/interview-experience.html</guid>
      <source url="https://javaguide.cn/rss.xml">优质面经汇总(付费)</source>
      <description>古人云:“他山之石，可以攻玉” 。善于学习借鉴别人的面试的成功经验或者失败的教训，可以让自己少走许多弯路。 在 《Java 面试指北》 的 「面经篇」 ，我分享了 15+ 篇高质量的 Java 后端面经，有校招的，也有社招的，有大厂的，也有中小厂的。 如果你是非科班的同学，也能在这些文章中找到对应的非科班的同学写的面经。</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>古人云:“<strong>他山之石，可以攻玉</strong>” 。善于学习借鉴别人的面试的成功经验或者失败的教训，可以让自己少走许多弯路。</p>
<p>在 <strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong> 的 <strong>「面经篇」</strong> ，我分享了 15+ 篇高质量的 Java 后端面经，有校招的，也有社招的，有大厂的，也有中小厂的。</p>
<p>如果你是非科班的同学，也能在这些文章中找到对应的非科班的同学写的面经。</p>
<figure><img src="https://oss.javaguide.cn/githubjuejinjihua/thinkimage-20220612185810480.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>并且，<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>还有专门分享面经和面试题的专题，里面会分享很多优质的面经和面试题。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304120018731.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220628101743381.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220628101805897.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>相比于牛客网或者其他网站的面经，《Java 面试指北》中整理的面经质量更高，并且，我会提供优质的参考资料。</p>
<p>有很多同学要说了：“为什么不直接给出具体答案呢？”。主要原因有如下两点：</p>
<ol>
<li>参考资料解释的要更详细一些，还可以顺便让你把相关的知识点复习一下。</li>
<li>给出的参考资料基本都是我的原创，假如后续我想对面试问题的答案进行完善，就不需要挨个把之前的面经写的答案给修改了（面试中的很多问题都是比较类似的）。当然了，我的原创文章也不太可能覆盖到面试的每个点，部面试问题的答案，我是精选的其他技术博主写的优质文章，文章质量都很高。</li>
</ol>
<p><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href="https://javaguide.cn/#/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的补充完善，两者可以配合使用。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/githubjuejinjihua/thinkimage-20220612185810480.png" type="image/png"/>
    </item>
    <item>
      <title>Java面试重点总结(重要)</title>
      <link>https://javaguide.cn/interview-preparation/key-points-of-interview.html</link>
      <guid>https://javaguide.cn/interview-preparation/key-points-of-interview.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java面试重点总结(重要)</source>
      <description>友情提示 本文节选自 《Java 面试指北》。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。 Java 后端面试哪些知识点是重点？ 准备面试的时候，具体哪些知识点是重点呢？</description>
      <category>面试准备</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">友情提示</p>
<p>本文节选自 <strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong>。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。</p>
</div>
<h2> Java 后端面试哪些知识点是重点？</h2>
<p><strong>准备面试的时候，具体哪些知识点是重点呢？</strong></p>
<p>给你几点靠谱的建议：</p>
<ol>
<li>Java 基础、集合、并发、MySQL、Redis、Spring、Spring Boot 这些 Java 后端开发必备的知识点。大厂以及中小厂的面试问的比较多的就是这些知识点（不信的话，你可以去多找一些面经看看）。我这里没有提到计算机基础相关的内容，这个会在下面提到。</li>
<li>你的项目经历涉及到的知识点，有水平的面试官都是会根据你的项目经历来问的。举个例子，你的项目经历使用了 Redis 来做限流，那 Redis 相关的八股文（比如 Redis 常见数据结构）以及限流相关的八股文（比如常见的限流算法）你就应该多花更多心思来搞懂！吃透！你把项目经历上的知识点吃透之后，再把你简历上哪些写熟练掌握的技术给吃透。最后，再去花时间准备其他知识点。</li>
<li>针对自身找工作的需求，你又可以适当地调整复习的重点。像中小厂一般问计算机基础比较少一些，有些大厂比如字节比较重视计算机基础尤其是算法。这样的话，如果你的目标是中小厂的话，计算机基础就准备面试来说不是那么重要了。如果复习时间不够的话，可以暂时先放放。</li>
<li>一般校招的面试不会强制要求你会分布式/微服务、高并发的知识（不排除个别岗位有这方面的硬性要求），所以到底要不要掌握还是要看你个人当前的实际情况。如果你会这方面的知识的话，对面试相对来说还是会更有利一些（想要让项目经历有亮点，还是得会一些性能优化的知识。性能优化的知识这也算是高并发知识的一个小分支了）。如果你的技能介绍或者项目经历涉及到分布式/微服务、高并发的知识，那建议你尽量也要抽时间去认真准备一下，面试中很可能会被问到，尤其是项目经历用到的时候。不过，也还是主要准备写在简历上的那些知识点就好。</li>
<li>JVM 相关的知识点，一般是大厂才会问到，面试中小厂就没必要准备了。JVM 面试中比较常问的是 <a href="https://javaguide.cn/java/jvm/memory-area.html" target="_blank" rel="noopener noreferrer">Java 内存区域</a>、<a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html" target="_blank" rel="noopener noreferrer">JVM 垃圾回收</a>、<a href="https://javaguide.cn/java/jvm/classloader.html" target="_blank" rel="noopener noreferrer">类加载器和双亲委派模型</a> 以及 JVM 调优和问题排查（我之前分享过一些<a href="https://t.zsxq.com/0bsAac47U" target="_blank" rel="noopener noreferrer">常见的线上问题案例</a>，里面就有 JVM 相关的）。</li>
<li>不同的大厂面试侧重点也会不同。比如说你要去阿里这种公司的话，项目和八股文就是重点，阿里笔试一般会有代码题，进入面试后就很少问代码题了，但是对原理性的问题问的比较深，经常会问一些你对技术的思考。再比如说你要面试字节这种公司，那计算机基础，尤其是算法是重点，字节的面试十分注重代码功底，有时候开始面试就会直接甩给你一道代码题，写出来再谈别的。也会问面试八股文，以及项目，不过，相对来说要少很多。建议你看一下这篇文章 <a href="https://mp.weixin.qq.com/s/pBsGQNxvRupZeWt4qZReIA" target="_blank" rel="noopener noreferrer">为了解开互联网大厂秋招内幕，我把他们全面了一遍</a>，了解一下常见大厂的面试题侧重点。</li>
</ol>
<p>看似 Java 后端八股文很多，实际把复习范围一缩小，重要的东西就是那些。考虑到时间问题，你不可能连一些比较冷门的知识点也给准备了。这没必要，主要精力先放在那些重要的知识点即可。</p>
<h2> 如何更高效地准备八股文？</h2>
<p>对于技术八股文来说，尽量不要死记硬背，这种方式非常枯燥且对自身能力提升有限！但是！想要一点不背是不太现实的，只是说要结合实际应用场景和实战来理解记忆。</p>
<p>我一直觉得面试八股文最好是和实际应用场景和实战相结合。很多同学现在的方向都错了，上来就是直接背八股文，硬生生学成了文科，那当然无趣了。</p>
<p>举个例子：你的项目中需要用到 Redis 来做缓存，你对照着官网简单了解并实践了简单使用 Redis 之后，你去看了 Redis 对应的八股文。你发现 Redis 可以用来做限流、分布式锁，于是你去在项目中实践了一下并掌握了对应的八股文。紧接着，你又发现 Redis 内存不够用的情况下，还能使用 Redis Cluster 来解决，于是你就又去实践了一下并掌握了对应的八股文。</p>
<p><strong>一定要记住你的主要目标是理解和记关键词，而不是像背课文一样一字一句地记下来！</strong></p>
<p>另外，记录博客或者用自己的理解把对应的知识点讲给别人听也是一个不错的选择。</p>
<p>最后，准备技术面试的同学一定要定期复习（自测的方式非常好），不然确实会遗忘的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目经验指南</title>
      <link>https://javaguide.cn/interview-preparation/project-experience-guide.html</link>
      <guid>https://javaguide.cn/interview-preparation/project-experience-guide.html</guid>
      <source url="https://javaguide.cn/rss.xml">项目经验指南</source>
      <description>友情提示 本文节选自 《Java 面试指北》。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。 没有项目经验怎么办? 没有项目经验是大部分应届生会碰到的一个问题。甚至说，有很多有工作经验的程序员，对自己在公司做的项目不满意，也想找一个比较有技术含量的项目来做。</description>
      <category>面试准备</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">友情提示</p>
<p>本文节选自 <strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong>。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。</p>
</div>
<h2> 没有项目经验怎么办?</h2>
<p>没有项目经验是大部分应届生会碰到的一个问题。甚至说，有很多有工作经验的程序员，对自己在公司做的项目不满意，也想找一个比较有技术含量的项目来做。</p>
<p>说几种我觉得比较靠谱的获取项目经验的方式，希望能够对你有启发。</p>
<h3> 实战项目视频/专栏</h3>
<p>在网上找一个符合自己能力与找工作需求的实战项目视频或者专栏，跟着老师一起做。</p>
<p>你可以通过慕课网、哔哩哔哩、拉勾、极客时间、培训机构（比如黑马、尚硅谷）等渠道获取到适合自己的实战项目视频/专栏。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/mukewangzhiazhanke.png" alt="慕课网实战课" tabindex="0"><figcaption>慕课网实战课</figcaption></figure>
<p>尽量选择一个适合自己的项目，没必要必须做分布式/微服务项目，对于绝大部分同学来说，能把一个单机项目做好就已经很不错了。</p>
<p>我面试过很多求职者，简历上看着有微服务的项目经验，结果随便问两个问题就知道根本不是自己做的或者说做的时候压根没认真思考。这种情况会给我留下非常不好的印象。</p>
<p>我在 <strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong> 的「面试准备篇」中也说过：</p>
<blockquote>
<p>个人认为也没必要非要去做微服务或者分布式项目，不一定对你面试有利。微服务或者分布式项目涉及的知识点太多，一般人很难吃透。并且，这类项目其实对于校招生来说稍微有一点超标了。即使你做出来，很多面试官也会认为不是你独立完成的。</p>
<p>其实，你能把一个单体项目做到极致也很好，对于个人能力提升不比做微服务或者分布式项目差。如何做到极致？代码质量这里就不提了，更重要的是你要尽量让自己的项目有一些亮点（比如你是如何提升项目性能的、如何解决项目中存在的一个痛点的），项目经历取得的成果尽量要量化一下比如我使用 xxx 技术解决了 xxx 问题，系统 qps 从 xxx 提高到了 xxx。</p>
</blockquote>
<p>跟着老师做的过程中，你一定要有自己的思考，不要浅尝辄止。对于很多知识点，别人的讲解可能只是满足项目就够了，你自己想多点知识的话，对于重要的知识点就要自己学会去深入学习。</p>
<h3> 实战类开源项目</h3>
<p>GitHub 或者码云上面有很多实战类别项目，你可以选择一个来研究，为了让自己对这个项目更加理解，在理解原有代码的基础上，你可以对原有项目进行改进或者增加功能。</p>
<p>你可以参考 <a href="https://javaguide.cn/open-source-project/practical-project.html" title="Java 优质开源实战项目" target="_blank" rel="noopener noreferrer">Java 优质开源实战项目</a> 上面推荐的实战类开源项目，质量都很高，项目类型也比较全面，涵盖博客/论坛系统、考试/刷题系统、商城系统、权限管理系统、快速开发脚手架以及各种轮子。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/javaguide-practical-project.png" alt="Java 优质开源实战项目" tabindex="0"><figcaption>Java 优质开源实战项目</figcaption></figure>
<p>一定要记住：<strong>不光要做，还要改进，改善。不论是实战项目视频或者专栏还是实战类开源项目，都一定会有很多可以完善改进的地方。</strong></p>
<h3> 从头开始做</h3>
<p>自己动手去做一个自己想完成的东西，遇到不会的东西就临时去学，现学现卖。</p>
<p>这个要求比较高，我建议你已经有了一个项目经验之后，再采用这个方法。如果你没有做过项目的话，还是老老实实采用上面两个方法比较好。</p>
<h3> 参加各种大公司组织的各种大赛</h3>
<p>如果参加这种赛事能获奖的话，项目含金量非常高。即使没获奖也没啥，也可以写简历上。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-673f598477242691900a1e72c5d8b26df2c.png" alt="阿里云天池大赛" tabindex="0"><figcaption>阿里云天池大赛</figcaption></figure>
<h3> 参与实际项目</h3>
<p>通常情况下，你有如下途径接触到企业实际项目的开发：</p>
<ol>
<li>老师接的项目；</li>
<li>自己接的私活；</li>
<li>实习/工作接触到的项目；</li>
</ol>
<p>老师接的项目和自己接的私活通常都是一些偏业务的项目，很少会涉及到性能优化。这种情况下，你可以考虑对项目进行改进，别怕花时间，某个时间用心做好一件事情就好比如你对项目的数据模型进行改进、引入缓存提高访问速度等等。</p>
<p>实习/工作接触到的项目类似，如果遇到一些偏业务的项目，也是要自己私下对项目进行改进优化。</p>
<p>尽量是真的对项目进行了优化，这本身也是对个人能力的提升。如果你实在是没时间去实践的话，也没关系，吃透这个项目优化手段就好，把一些面试可能会遇到的问题提前准备一下。</p>
<h2> 有没有还不错的项目推荐？</h2>
<p><strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong> 的「面试准备篇」中有一篇文章专门整理了一些比较高质量的实战项目，非常适合用来学习或者作为项目经验。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/project-experience-guide.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这篇文章一共推荐了 15+ 个实战项目，有业务类的，也有轮子类的，有开源项目、也有视频教程。对于参加校招的小伙伴，我更建议做一个业务类项目加上一个轮子类的项目。</p>
<h2> 我跟着视频做的项目会被面试官嫌弃不？</h2>
<p>很多应届生都是跟着视频做的项目，这个大部分面试官都心知肚明。</p>
<p>不排除确实有些面试官不吃这一套，这个也看人。不过我相信大多数面试官都是能理解的，毕竟你在学校的时候实际上是没有什么获得实际项目经验的途径的。</p>
<p>大部分应届生的项目经验都是自己在网上找的或者像你一样买的付费课程跟着做的，极少部分是比较真实的项目。 从你能想着做一个实战项目来说，我觉得初衷是好的，确实也能真正学到东西。 但是，究竟有多少是自己掌握了很重要。看视频最忌讳的是被动接受，自己多改进一下，多思考一下！就算是你跟着视频做的项目，也是可以优化的！</p>
<p><strong>如果你想真正学到东西的话，建议不光要把项目单纯完成跑起来，还要去自己尝试着优化！</strong></p>
<p>简单说几个比较容易的优化点：</p>
<ol>
<li><strong>全局异常处理</strong>：很多项目这方面都做的不是很好，可以参考我的这篇文章：<a href="https://mp.weixin.qq.com/s/Y4Q4yWRqKG_lw0GLUsY2qw" target="_blank" rel="noopener noreferrer">《使用枚举简单封装一个优雅的 Spring Boot 全局异常处理！》</a> 来做优化。</li>
<li><strong>项目的技术选型优化</strong>：比如使用 Guava 做本地缓存的地方可以换成 <strong>Caffeine</strong> 。Caffeine 的各方面的表现要更加好！再比如 Controller 层是否放了太多的业务逻辑。</li>
<li><strong>数据库方面</strong>：数据库设计可否优化？索引是否使用使用正确？SQL 语句是否可以优化？是否需要进行读写分离？</li>
<li><strong>缓存</strong>：项目有没有哪些数据是经常被访问的？是否引入缓存来提高响应速度？</li>
<li><strong>安全</strong>：项目是否存在安全问题？</li>
<li>......</li>
</ol>
<p>另外，我在星球分享过常见的性能优化方向实践案例，涉及到多线程、异步、索引、缓存等方向，强烈推荐你看看：<a href="https://t.zsxq.com/06EqfeMZZ" target="_blank" rel="noopener noreferrer">https://t.zsxq.com/06EqfeMZZ</a> 。</p>
<p>最后，<strong>再给大家推荐一个 IDEA 优化代码的小技巧，超级实用！</strong></p>
<p>分析你的代码：右键项目-&gt; Analyze-&gt;Inspect Code</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-651672bce128025a135c1536cd5dc00532e.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>扫描完成之后，IDEA 会给出一些可能存在的代码坏味道比如命名问题。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-05c83b319941995b07c8020fddc57f26037.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>并且，你还可以自定义检查规则。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-6b618ad3bad0bc3f76e6066d90c8cd2f255.png" alt="" tabindex="0"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/javamianshizhibei/mukewangzhiazhanke.png" type="image/png"/>
    </item>
    <item>
      <title>程序员简历编写指南(重要)</title>
      <link>https://javaguide.cn/interview-preparation/resume-guide.html</link>
      <guid>https://javaguide.cn/interview-preparation/resume-guide.html</guid>
      <source url="https://javaguide.cn/rss.xml">程序员简历编写指南(重要)</source>
      <description>友情提示 本文节选自 《Java 面试指北》。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。 前言 一份好的简历可以在整个申请面试以及面试过程中起到非常重要的作用。</description>
      <category>面试准备</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">友情提示</p>
<p>本文节选自 <strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong>。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。</p>
</div>
<h2> 前言</h2>
<p>一份好的简历可以在整个申请面试以及面试过程中起到非常重要的作用。</p>
<p><strong>为什么说简历很重要呢？</strong> 我们可以从下面几点来说：</p>
<p><strong>1、简历就像是我们的一个门面一样，它在很大程度上决定了是否能够获得面试机会。</strong></p>
<ul>
<li>假如你是网申，你的简历必然会经过 HR 的筛选，一张简历 HR 可能也就花费 10 秒钟左右看一下，然后决定你能否进入面试。</li>
<li>假如你是内推，如果你的简历没有什么优势的话，就算是内推你的人再用心，也无能为力。</li>
</ul>
<p>另外，就算你通过了第一轮的筛选获得面试机会，后面的面试中，面试官也会根据你的简历来判断你究竟是否值得他花费很多时间去面试。</p>
<p><strong>2、简历上的内容很大程度上决定了面试官提问的侧重点。</strong></p>
<ul>
<li>一般情况下你的简历上注明你会的东西才会被问到（Java 基础、集合、并发、MySQL、Redis 、Spring、Spring Boot 这些算是每个人必问的），比如写了你熟练使用 Redis,那面试官就很大概率会问你 Redis 的一些问题，再比如你写了你在项目中使用了消息队列，那面试官大概率问很多消息队列相关的问题。</li>
<li>技能熟练度在很大程度上也决定了面试官提问的深度。</li>
</ul>
<p>在不夸大自己能力的情况下，写出一份好的简历也是一项很棒的能力。</p>
<h2> 简历模板</h2>
<p>简历的样式真的非常非常重要！！！如果你的简历样式丑到没朋友的话，面试官真的没有看下去的欲望。一天处理上百份的简历的痛苦，你不懂！</p>
<p>我这里的话，推荐大家使用 Markdown 语法写简历，然后再将 Markdown 格式转换为 PDF 格式后进行简历投递。如果你对 Markdown 语法不太了解的话，可以花半个小时简单看一下 Markdown 语法说明: <a href="http://www.markdown.cn/" target="_blank" rel="noopener noreferrer">http://www.markdown.cn/</a>。</p>
<p>下面是我收集的一些还不错的简历模板：</p>
<ul>
<li>适合中文的简历模板收集（推荐，免费）：<a href="https://github.com/dyweb/awesome-resume-for-chinese" target="_blank" rel="noopener noreferrer">https://github.com/dyweb/awesome-resume-for-chinese</a></li>
<li>木及简历（部分收费） ： <a href="https://www.mujicv.com/" target="_blank" rel="noopener noreferrer">https://www.mujicv.com/</a></li>
<li>简单简历（付费）：<a href="https://easycv.cn/" target="_blank" rel="noopener noreferrer">https://easycv.cn/</a></li>
<li>站长简历：<a href="https://jianli.chinaz.com/" target="_blank" rel="noopener noreferrer">https://jianli.chinaz.com/</a></li>
<li>typora+markdown+css 自定义简历模板 ：<a href="https://github.com/Snailclimb/typora-markdown-resume" target="_blank" rel="noopener noreferrer">https://github.com/Snailclimb/typora-markdown-resume</a></li>
<li>极简简历 ： <a href="https://www.polebrief.com/index" target="_blank" rel="noopener noreferrer">https://www.polebrief.com/index</a></li>
<li>Markdown 简历排版工具：<a href="https://resume.mdnice.com/" target="_blank" rel="noopener noreferrer">https://resume.mdnice.com/</a></li>
<li>超级简历（部分收费） ： <a href="https://www.wondercv.com/" target="_blank" rel="noopener noreferrer">https://www.wondercv.com/</a></li>
</ul>
<p>上面这些简历模板大多是只有 1 页内容，很难展现足够的信息量。如果你不是顶级大牛（比如 ACM 大赛获奖）的话，我建议还是尽可能多写一点可以突出你自己能力的内容（校招生 2 页之内，社招生 3 页之内，记得精炼语言，不要过多废话）。</p>
<p>再总结几点 <strong>简历排版的注意事项</strong>：</p>
<ul>
<li>尽量简洁，不要太花里胡哨。</li>
<li>技术名词最好规范大小写比较好，比如 java-&gt;Java ，spring boot -&gt; Spring Boot 。这个虽然有些面试官不会介意，但是很多面试官都会在意这个细节的。</li>
<li>中文和数字英文之间加上空格的话看起来会舒服一点。</li>
</ul>
<h2> 简历内容</h2>
<h3> 个人信息</h3>
<ul>
<li>最基本的 ：姓名（身份证上的那个）、年龄、电话、籍贯、联系方式、邮箱地址</li>
<li>潜在加分项 ： Github 地址、博客地址（如果技术博客和 Github 上没有什么内容的话，就不要写了）</li>
</ul>
<p>示例：</p>
<figure><img src="https://oss.javaguide.cn/zhishixingqiu/20210428212337599.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>简历要不要放照片呢？</strong> 很多人写简历的时候都有这个问题。</p>
<p>其实放不放都行，影响不大，完全不用在意这个问题。除非，你投递的岗位明确要求要放照片。 不过，如果要放的话，不要放生活照，还是应该放正规一些的照片比如证件照。</p>
<h3> 求职意向</h3>
<p>你想要应聘什么岗位，希望在什么城市。另外，你也可以将求职意向放到个人信息这块写。</p>
<p>示例：</p>
<figure><img src="https://oss.javaguide.cn/zhishixingqiu/20210428212410288.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 教育经历</h3>
<p>教育经历也不可或缺。通过教育经历的介绍，你要确保能让面试官就可以知道你的学历、专业、毕业学校以及毕业的日期。</p>
<p>示例：</p>
<blockquote>
<p>北京理工大学 硕士，软件工程 2019.09 - 2022.01
湖南大学 学士，应用化学 2015.09 ~ 2019.06</p>
</blockquote>
<h3> 专业技能</h3>
<p>先问一下你自己会什么，然后看看你意向的公司需要什么。一般 HR 可能并不太懂技术，所以他在筛选简历的时候可能就盯着你专业技能的关键词来看。对于公司有要求而你不会的技能，你可以花几天时间学习一下，然后在简历上可以写上自己了解这个技能。</p>
<p>下面是一份最新的 Java 后端开发技能清单，你可以根据自身情况以及岗位招聘要求做动态调整，核心思想就是尽可能满足岗位招聘的所有技能要求。</p>
<figure><img src="https://oss.javaguide.cn/zhishixingqiu/jinengmuban.png" alt="Java 后端技能模板" tabindex="0"><figcaption>Java 后端技能模板</figcaption></figure>
<p>我这里再单独放一个我看过的某位同学的技能介绍，我们来找找问题。</p>
<figure><img src="https://oss.javaguide.cn/zhishixingqiu/up-a58d644340f8ce5cd32f9963f003abe4233.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>上图中的技能介绍存在的问题：</p>
<ul>
<li>技术名词最好规范大小写比较好，比如 java-&gt;Java ，spring boot -&gt; Spring Boot 。这个虽然有些面试官不会介意，但是很多面试官都会在意这个细节的。</li>
<li>技能介绍太杂，没有亮点。不需要全才，某个领域做得好就行了！</li>
<li>对 Java 后台开发的部分技能比如 Spring Boot 的熟悉度仅仅为了解，无法满足企业的要求。</li>
</ul>
<h3> 实习经历/工作经历（重要）</h3>
<p>工作经历针对社招，实习经历针对校招。</p>
<p>工作经历建议采用时间倒序的方式来介绍。实习经历和工作经历都需要简单突出介绍自己在职期间主要做了什么。</p>
<p>示例：</p>
<blockquote>
<p><strong>XXX 公司 （201X 年 X 月 ~ 201X 年 X 月 ）</strong></p>
<ul>
<li><strong>职位</strong>：Java 后端开发工程师</li>
<li><strong>工作内容</strong>：主要负责 XXX</li>
</ul>
</blockquote>
<h3> 项目经历（重要）</h3>
<p>简历上有一两个项目经历很正常，但是真正能把项目经历很好的展示给面试官的非常少。</p>
<p>很多求职者的项目经历介绍都会面临过于啰嗦、过于简单、没突出亮点等问题。</p>
<p>项目经历介绍模板如下：</p>
<blockquote>
<p>项目名称（字号要大一些）</p>
<p>2017-05~2018-06 淘宝 Java 后端开发工程师</p>
<ul>
<li><strong>项目描述</strong> : 简单描述项目是做什么的。</li>
<li><strong>技术栈</strong> ：用了什么技术（如 Spring Boot + MySQL + Redis + Mybatis-plus + Spring Security + Oauth2）</li>
<li><strong>工作内容/个人职责</strong> : 简单描述自己做了什么，解决了什么问题，带来了什么实质性的改善。突出自己的能力，不要过于平淡的叙述。</li>
<li><strong>个人收获（可选）</strong> : 从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用。通常是可以不用写个人收获的，因为你在个人职责介绍中写的东西已经表明了自己的主要收获。</li>
<li><strong>项目成果（可选）</strong> :简单描述这个项目取得了什么成绩。</li>
</ul>
</blockquote>
<p><strong>1、项目经历应该突出自己做了什么，简单概括项目基本情况。</strong></p>
<p>项目介绍尽量压缩在两行之内，不需要介绍太多，但也不要随便几个字就介绍完了。</p>
<p><strong>2、技术架构直接写技术名词就行，不要再介绍技术是干嘛的了，没意义，属于无效介绍。</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/interview-preparation/46c92fbc5160e65dd85c451143177144.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>3、尽量减少纯业务的个人职责介绍，对于面试不太友好。尽量再多挖掘一些亮点（6~8 条个人职责介绍差不多了，做好筛选），最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目优化了某个模块的性能。</strong></p>
<p>即使不是你做的功能模块或者解决的问题，你只要搞懂吃透了就能拿来自己用，适当润色即可！</p>
<p>像性能优化方向上的亮点面试之前也比较容易准备，但也不要都是性能优化相关的，这种也算是一个极端。</p>
<p>另外，技术优化取得的成果尽量要量化一下：</p>
<ul>
<li>使用 xxx 技术解决了 xxx 问题，系统 QPS 从 xxx 提高到了 xxx。</li>
<li>使用 xxx 技术了优化了 xxx 接口，系统 QPS 从 xxx 提高到了 xxx。</li>
<li>使用 xxx 技术解决了 xxx 问题，查询速度优化了 xxx，系统 QPS 达到 10w+。</li>
<li>使用 xxx 技术优化了 xxx 模块，响应时间从 2s 降低到 0.2s。</li>
<li>......</li>
</ul>
<p>示例：</p>
<ul>
<li>使用 Sharding-JDBC 对 MySQL 数据库进行分库分表，优化千万级大表，单表数据量保持在 500w 以下。</li>
<li>热门数据（如首页、热门博客）使用 Redis+Caffeine 两级缓存，解决了缓存击穿和穿透问题，查询速度毫秒级，QPS 30w+。</li>
<li>使用 CompletableFuture 优化购物车查询模块，对获取用户信息、商品详情、优惠券信息等异步 RPC 调用进行编排，响应时间从 2s 降低 0.2s。</li>
</ul>
<p><strong>4、如果你觉得你的项目技术比较落后的话，可以自己私下进行改进。重要的是让项目比较有亮点，通过什么方式就无所谓了。</strong></p>
<p>项目经历这部分对于简历来说非常重要，《Java 面试指北》的面试准备篇有好几篇关于优化项目经历的文章，建议你仔细阅读一下，应该会对你有帮助。</p>
<figure><img src="https://oss.javaguide.cn/zhishixingqiu/4e11dbc842054e53ad6c5f0445023eb5~tplv-k3u1fbpfcp-zoom-1.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>5、避免个人职责介绍都是围绕一个技术点来写，非常不可取。</strong></p>
<figure><img src="https://oss.javaguide.cn/zhishixingqiu/image-20230424222513028.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 荣誉奖项（可选）</h3>
<p>如果你有含金量比较高的竞赛（比如 ACM、阿里的天池大赛）的获奖经历的话，荣誉奖项这块内容一定要写一下！并且，你还可以将荣誉奖项这块内容适当往前放，放在一个更加显眼的位置。</p>
<h3> 校园经历（可选）</h3>
<p>如果有比较亮眼的校园经历的话就简单写一下，没有就不写！</p>
<h3> 个人评价</h3>
<p><strong>个人评价就是对自己的解读，一定要用简洁的语言突出自己的特点和优势，避免废话！</strong> 像勤奋、吃苦这些比较虚的东西就不要扯了，面试官看着这种个人评价就烦。</p>
<p>我们可以从下面几个角度来写个人评价：</p>
<ul>
<li>文档编写能力、学习能力、沟通能力、团队协作能力</li>
<li>对待工作的态度以及个人的责任心</li>
<li>能承受的工作压力以及对待困难的态度</li>
<li>对技术的追求、对代码质量的追求</li>
<li>分布式、高并发系统开发或维护经验</li>
</ul>
<p>列举 3 个实际的例子：</p>
<ul>
<li>学习能力较强，大三参加国家软件设计大赛的时候快速上手 Python 写了一个可配置化的爬虫系统。</li>
<li>具有团队协作精神，大三参加国家软件设计大赛的时候协调项目组内 5 名开发同学，并对编码遇到困难的同学提供帮助，最终顺利在 1 个月的时间完成项目的核心功能。</li>
<li>项目经验丰富，在校期间主导过多个企业级项目的开发。</li>
</ul>
<h2> STAR 法则和 FAB 法则</h2>
<h3> STAR 法则（Situation Task Action Result）</h3>
<p>相信大家一定听说过 STAR 法则。对于面试，你可以将这个法则用在自己的简历以及和面试官沟通交流的过程中。</p>
<p>STAR 法则由下面 4 个单词组成（STAR 法则的名字就是由它们的首字母组成）：</p>
<ul>
<li><strong>Situation：</strong> 情景。 事情是在什么情况下发生的？</li>
<li><strong>Task:：</strong> 任务。你的任务是什么？</li>
<li><strong>Action：</strong> 行动。你做了什么？</li>
<li><strong>Result：</strong> 结果。最终的结果怎样？</li>
</ul>
<h3> FAB 法则（Feature Advantage Benefit）</h3>
<p>除了 STAR 法则，你还需要了解在销售行业经常用到的一个叫做 FAB 的法则。</p>
<p>FAB 法则由下面 3 个单词组成（FAB 法则的名字就是由它们的首字母组成）：</p>
<ul>
<li><strong>Feature：</strong> 你的特征/优势是什么？</li>
<li><strong>Advantage：</strong> 比别人好在哪些地方；</li>
<li><strong>Benefit：</strong> 如果雇佣你，招聘方会得到什么好处。</li>
</ul>
<p>简单来说，<strong>FAB 法则主要是让你的面试官知道你的优势和你能为公司带来的价值。</strong></p>
<h2> 建议</h2>
<h3> 避免页数过多</h3>
<p>精简表述，突出亮点。校招简历建议不要超过 2 页，社招简历建议不要超过 3 页。如果内容过多的话，不需要非把内容压缩到一页，保持排版干净整洁就可以了。</p>
<p>看了几千份简历，有少部分同学的简历页数都接近 10 页了，让我头皮发麻。</p>
<figure><img src="https://oss.javaguide.cn/zhishixingqiu/image-20230508223646164.png" alt="简历页数过多" tabindex="0"><figcaption>简历页数过多</figcaption></figure>
<h3> 避免语义模糊</h3>
<p>尽量避免主观表述，少一点语义模糊的形容词。表述要简洁明了，简历结构要清晰。</p>
<p>举例：</p>
<ul>
<li>不好的表述：我在团队中扮演了很重要的角色。</li>
<li>好的表述：我作为后端技术负责人，领导团队完成后端项目的设计与开发。</li>
</ul>
<h3> 注意简历样式</h3>
<p>简历样式同样很重要，一定要注意！不必追求花里胡哨，但要尽量保证结构清晰且易于阅读。</p>
<h3> 其他</h3>
<ul>
<li>一定要使用 PDF 格式投递，不要使用 Word 或者其他格式投递。这是最基本的！</li>
<li>不会的东西就不要写在简历上了。注意简历真实性，适当润色没有问题。</li>
<li>工作经历建议采用时间倒序的方式来介绍，实习经历建议将最有价值的放在最前面。</li>
<li>将自己的项目经历完美的展示出来非常重要，重点是突出自己做了什么（挖掘亮点），而不是介绍项目是做什么的。</li>
<li>项目经历建议以时间倒序排序，另外项目经历不在于多（精选 2~3 即可），而在于有亮点。</li>
<li>准备面试的过程中应该将你写在简历上的东西作为重点，尤其是项目经历上和技能介绍上的。</li>
<li>面试和工作是两回事，聪明的人会把面试官往自己擅长的领域领，其他人则被面试官牵着鼻子走。虽说面试和工作是两回事，但是你要想要获得自己满意的 offer ，你自身的实力必须要强。</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/zhishixingqiu/20210428212337599.png" type="image/png"/>
    </item>
    <item>
      <title>常见面试题自测(付费)</title>
      <link>https://javaguide.cn/interview-preparation/self-test-of-common-interview-questions.html</link>
      <guid>https://javaguide.cn/interview-preparation/self-test-of-common-interview-questions.html</guid>
      <source url="https://javaguide.cn/rss.xml">常见面试题自测(付费)</source>
      <description>面试之前，强烈建议大家多拿常见的面试题来进行自测，检查一下自己的掌握情况，这是一种非常实用的备战技术面试的小技巧。 在 《Java 面试指北》 的 「技术面试题自测篇」 ，我总结了 Java 面试中最重要的知识点的最常见的面试题并按照面试提问的方式展现出来。</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>面试之前，强烈建议大家多拿常见的面试题来进行自测，检查一下自己的掌握情况，这是一种非常实用的备战技术面试的小技巧。</p>
<p>在 <strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong> 的 <strong>「技术面试题自测篇」</strong> ，我总结了 Java 面试中最重要的知识点的最常见的面试题并按照面试提问的方式展现出来。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220628102643202.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>每一道用于自测的面试题我都会给出重要程度，方便大家在时间比较紧张的时候根据自身情况来选择性自测。并且，我还会给出提示，方便你回忆起对应的知识点。</p>
<p>在面试中如果你实在没有头绪的话，一个好的面试官也是会给你提示的。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220628102848236.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href="https://javaguide.cn/#/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的补充完善，两者可以配合使用。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/xingqiu/image-20220628102643202.png" type="image/png"/>
    </item>
    <item>
      <title>手把手教你如何准备Java面试(重要)</title>
      <link>https://javaguide.cn/interview-preparation/teach-you-how-to-prepare-for-the-interview-hand-in-hand.html</link>
      <guid>https://javaguide.cn/interview-preparation/teach-you-how-to-prepare-for-the-interview-hand-in-hand.html</guid>
      <source url="https://javaguide.cn/rss.xml">手把手教你如何准备Java面试(重要)</source>
      <description>友情提示 本文节选自 《Java 面试指北》。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。 你的身边一定有很多编程比你厉害但是找的工作并没有你好的朋友！技术面试不同于编程，编程厉害不代表技术面试就一定能过。</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">友情提示</p>
<p>本文节选自 <strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong>。这是一份教你如何更高效地准备面试的小册，涵盖常见八股文（系统设计、常见框架、分布式、高并发 ......）、优质面经等内容。</p>
</div>
<p>你的身边一定有很多编程比你厉害但是找的工作并没有你好的朋友！<strong>技术面试不同于编程，编程厉害不代表技术面试就一定能过。</strong></p>
<p>现在你去面个试，不认真准备一下，那简直就是往枪口上撞。我们大部分都只是普通人，没有发过顶级周刊或者获得过顶级大赛奖项。在这样一个技术面试氛围下，我们需要花费很多精力来准备面试，来提高自己的技术能力。“<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247491596&amp;idx=1&amp;sn=36fbf80922f71c200990de11514955f7&amp;chksm=cea1afc7f9d626d1c70d5e54505495ac499ce6eb5e05ba4f4bb079a8563a84e27f17ceff38af&amp;token=353590436&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">面试造火箭，工作拧螺丝钉</a>” 就是目前的一个常态，预计未来很长很长一段时间也还是会是这样。</p>
<p>准备面试不等于耍小聪明或者死记硬背面试题。 <strong>一定不要对面试抱有侥幸心理。打铁还需自身硬！</strong> 千万不要觉得自己看几篇面经，看几篇面试题解析就能通过面试了。一定要静下心来深入学习！</p>
<p>这篇我会从宏观面出发简单聊聊如何准备 Java 面试，让你少走弯路！</p>
<h2> 尽早以求职为导向来学习</h2>
<p>我是比较建议还在学校的同学尽可能早一点以求职为导向来学习的。</p>
<p><strong>这样更有针对性，并且可以大概率减少自己处在迷茫的时间，很大程度上还可以让自己少走很多弯路。</strong></p>
<p>但是！不要把“以求职为导向学习”理解为“我就不用学课堂上那些计算机基础课程了”！</p>
<p>我在之前的很多次分享中都强调过：<strong>一定要用心学习计算机基础知识！操作系统、计算机组成原理、计算机网络真的不是没有实际用处的学科！！！</strong></p>
<p>你会发现大厂面试你会用到，以后工作之后你也会用到。我分别列举 2 个例子吧！</p>
<ul>
<li><strong>面试中</strong>：像字节、腾讯这些大厂的技术面试以及几乎所有公司的笔试都会考操作系统相关的问题。</li>
<li><strong>工作中</strong>：在实际使用缓存的时候，你会发现在操作系统中可以找到很多缓存思想的影子。比如 CPU Cache 缓存的是内存数据用于解决 CPU 处理速度和内存不匹配的问题，内存缓存的是硬盘数据用于解决硬盘访问速度过慢的问题。再比如操作系统在页表方案基础之上引入了快表来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache）。</li>
</ul>
<p><strong>如何求职为导向学习呢？</strong> 简答来说就是：根据招聘要求整理一份目标岗位的技能清单，然后按照技能清单去学习和提升。</p>
<ol>
<li>你首先搞清楚自己要找什么工作</li>
<li>然后根据招聘岗位的要求梳理一份技能清单</li>
<li>根据技能清单写好最终的简历</li>
<li>最后再按照建立的要求去学习和提升。</li>
</ol>
<p>这其实也是 <strong>以终为始</strong> 思想的运用。</p>
<p><strong>何为以终为始？</strong> 简单来说，以终为始就是我们可以站在结果来考虑问题，从结果出发，根据结果来确定自己要做的事情。</p>
<p>你会发现，其实几乎任何领域都可以用到 <strong>以终为始</strong> 的思想。</p>
<h2> 了解投递简历的黄金时间</h2>
<p>面试之前，你肯定是先要搞清楚春招和秋招的具体时间的。</p>
<p>正所谓金三银四，金九银十，错过了这个时间，很多公司都没有 HC 了。</p>
<p><strong>秋招一般 7 月份就开始了，大概一直持续到 9 月底。</strong></p>
<p><strong>春招一般 3 月份就开始了，大概一直持续到 4 月底。</strong></p>
<p>很多公司（尤其大厂）到了 9 月中旬(秋招)/3 月中旬（春招），很可能就会没有 HC 了。面试的话一般都是至少是 3 轮起步，一些大厂比如阿里、字节可能会有 5 轮面试。<strong>面试失败话的不要紧，某一面表现差的话也不要紧，调整好心态。又不是单一选择对吧？你能投这么多企业呢! 调整心态。</strong> 今年面试的话，因为疫情原因，有些公司还是可能会还是集中在线上进行面试。然后，还是因为疫情的影响，可能会比往年更难找工作（对大厂影响较小）。</p>
<h2> 知道如何获取招聘信息</h2>
<p>下面是常见的获取招聘信息的渠道：</p>
<ul>
<li><strong>目标企业的官网/公众号</strong>：最及时最权威的获取招聘信息的途径。</li>
<li><strong>招聘网站</strong>：<a href="https://www.zhipin.com/" target="_blank" rel="noopener noreferrer">BOSS 直聘</a>、<a href="https://www.zhaopin.com/" target="_blank" rel="noopener noreferrer">智联招聘</a>、<a href="https://www.lagou.com/" target="_blank" rel="noopener noreferrer">拉勾招聘</a>......。</li>
<li><strong>牛客网</strong>：每年秋招/春招，都会有大批量的公司会到牛客网发布招聘信息，并且还会有大量的公司员工来到这里发内推的帖子。地址：<a href="https://www.nowcoder.com/jobs/recommend/campus" target="_blank" rel="noopener noreferrer">https://www.nowcoder.com/jobs/recommend/campus</a> 。</li>
<li><strong>超级简历</strong>：超级简历目前整合了各大企业的校园招聘入口，地址：<a href="https://www.wondercv.com/jobs/%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%98%AF%E6%A0%A1%E6%8B%9B%E7%9A%84%E8%AF%9D%EF%BC%8C%E7%82%B9%E5%87%BB%E2%80%9C%E6%A0%A1%E6%8B%9B%E7%BD%91%E7%94%B3%E2%80%9D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%90%84%E5%A4%A7%E4%BC%81%E4%B8%9A%E7%9A%84%E6%A0%A1%E5%9B%AD%E6%8B%9B%E8%81%98%E5%85%A5%E5%8F%A3%E7%9A%84%E6%95%B4%E5%90%88%E9%A1%B5%E9%9D%A2%E4%BA%86%E3%80%82" target="_blank" rel="noopener noreferrer">https://www.wondercv.com/jobs/。如果你是校招的话，点击“校招网申”就可以直接跳转到各大企业的校园招聘入口的整合页面了。</a></li>
<li><strong>认识的朋友</strong>：如果你有认识的朋友在目标企业工作的话，你也可以找他们了解招聘信息，并且可以让他们帮你内推。</li>
<li><strong>宣讲会</strong>：宣讲会也是一个不错的途径，不过，好的企业通常只会去比较好的学校，可以留意一下意向公司的宣讲会安排或者直接去到一所比较好的学校参加宣讲会。像我当时校招就去参加了几场宣讲会。不过，我是在荆州上学，那边没什么比较好的学校，一般没有公司去开宣讲会。所以，我当时是直接跑到武汉来了，参加了武汉理工大学以及华中科技大学的几场宣讲会。总体感觉还是很不错的！</li>
<li><strong>其他</strong>：校园就业信息网、学校论坛、班级 or 年级 QQ 群。</li>
</ul>
<p>校招的话，建议以官网为准，有宣讲会、靠谱一点的内推的话更好。社招的话，可以多留意一下各大招聘网站比如 BOSS 直聘、拉勾上的职位信息，也可以找被熟人内推，获得面试机会的概率更大一些，进度一般也更快一些。</p>
<p>一般是只能投递一个岗位，不过，也有极少数投递不同部门两个岗位的情况，这个应该不会有影响，但你的前一次面试情况可能会被记录，也就是说就算你投递成功两个岗位，第一个岗位面试失败的话，对第二个岗位也会有影响，很可能直接就被 pass。</p>
<h2> 多花点时间完善简历</h2>
<p>一定一定一定要重视简历啊！朋友们！至少要花 2~3 天时间来专门完善自己的简历。</p>
<p>最近看了很多份简历，满意的很少，我简单拿出一份来说分析一下（欢迎在评论区补充）。</p>
<p><strong>1.个人介绍没太多实用的信息。</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>技术博客、GitHub 以及在校获奖经历的话，能写就尽量写在这里。 你可以参考下面 👇 的模板进行修改：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png-20230309224235808.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>2.项目经历过于简单，完全没有质量可言</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png-20230309224240305.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>每一个项目经历真的就一两句话可以描述了么？还是自己不想写？还是说不是自己做的，不敢多写。</p>
<p>如果有项目的话，技术面试第一步，面试官一般都是让你自己介绍一下你的项目。你可以从下面几个方向来考虑：</p>
<ol>
<li>你对项目整体设计的一个感受（面试官可能会让你画系统的架构图）</li>
<li>你在这个项目中你负责了什么、做了什么、担任了什么角色。</li>
<li>从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用。</li>
<li>你在这个项目中是否解决过什么问题？怎么解决的？收获了什么？</li>
<li>你的项目用到了哪些技术？这些技术你吃透了没有？举个例子，你的项目经历使用了 Seata 来做分布式事务，那 Seata 相关的问题你要提前准备一下吧，比如说 Seata 支持哪些配置中心、Seata 的事务分组是怎么做的、Seata 支持哪些事务模式，怎么选择？</li>
<li>你在这个项目中犯过的错误，最后是怎么弥补的？</li>
</ol>
<p><strong>3.计算机二级这个证书对于计算机专业完全不用写了，没有含金量的。</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png-20230309224247261.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>4.技能介绍问题太大。</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/interview-preparation/93da1096fb02e19071ba13b4f6a7471c.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<ul>
<li>技术名词最好规范大小写比较好，比如 java-&gt;Java ，spring boot -&gt; Spring Boot 。这个虽然有些面试官不会介意，但是很多面试官都会在意这个细节的。</li>
<li>技能介绍太杂，没有亮点。不需要全才，某个领域做得好就行了！</li>
<li>对 Java 后台开发的部分技能比如 Spring Boot 的熟悉度仅仅为了解，无法满足企业的要求。</li>
</ul>
<h2> 岗位匹配度很重要</h2>
<p>校招通常会对你的项目经历的研究方向比较宽容，即使你的项目经历和对应公司的具体业务没有关系，影响其实也并不大。</p>
<p>社招的话就不一样了，毕竟公司是要招聘可以直接来干活的人，你有相关的经验，公司会比较省事。社招通常会比较重视你的过往工作经历以及项目经历，HR 在筛选简历的时候会根据这两方面信息来判断你是否满足他们的招聘要求。就比如说你投递电商公司，而你之前的并没有和电商相关的工作经历以及项目经历，那 HR 在筛简历的时候很可能会直接把你 Pass 掉。</p>
<p>不过，这个也并不绝对，也有一些公司在招聘的时候更看重的是你的过往经历，较少地关注岗位匹配度，优秀公司的工作经历以及有亮点的项目经验都是加分项。这类公司相信你既然在某个领域（比如电商、支付）已经做的不错了，那应该也可以在另外一个领域（比如流媒体平台、社交软件）很快成为专家。这个领域指的不是技术领域，更多的是业务方向。横跨技术领域（比如后端转算法、后端转大数据）找工作，你又没有相关的经验，几乎是没办法找到的。即使找到了，也大概率会面临 HR 压薪资的问题。</p>
<h2> 提前准备技术面试和手撕算法</h2>
<p>面试之前一定要提前准备一下常见的面试题：</p>
<ul>
<li>自己面试中可能涉及哪些知识点、那些知识点是重点。</li>
<li>面试中哪些问题会被经常问到、面试中自己改如何回答。(强烈不推荐死记硬背，第一：通过背这种方式你能记住多少？能记住多久？第二：背题的方式的学习很难坚持下去！)</li>
</ul>
<p>这块内容只会介绍面试大概会涉及到哪方面的知识点，具体这些知识点涵盖哪些问题，后面的文章有介绍到。</p>
<p><strong>Java</strong> :</p>
<ul>
<li>Java 基础</li>
<li>Java 集合</li>
<li>Java 并发</li>
<li>JVM</li>
</ul>
<p><strong>计算机基础</strong>：</p>
<ul>
<li>算法</li>
<li>数据结构</li>
<li>计算机网络</li>
<li>操作系统</li>
</ul>
<p><strong>数据库</strong>：</p>
<ul>
<li>MySQL</li>
<li>Redis</li>
</ul>
<p><strong>常用框架</strong>：</p>
<ul>
<li>Spring</li>
<li>SpringBoot</li>
<li>MyBatis</li>
<li>Netty</li>
<li>Zookeeper</li>
<li>Dubbo</li>
</ul>
<p><strong>分布式</strong> :</p>
<ul>
<li>CAP 理论 和 BASE 理论、Paxos 算法和 Raft 算法</li>
<li>RPC</li>
<li>分布式事务</li>
<li>分布式 ID</li>
</ul>
<p><strong>高并发</strong>：</p>
<ul>
<li>消息队列</li>
<li>读写分离&amp;分库分表</li>
<li>负载均衡</li>
</ul>
<p><strong>高可用</strong>：</p>
<ul>
<li>限流</li>
<li>降级</li>
<li>熔断</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/interview-preparation/20210414112925296.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>不同类型的公司对于技能的要求侧重点是不同的比如腾讯、字节可能更重视计算机基础比如网络、操作系统这方面的内容。阿里、美团这种可能更重视你的项目经历、实战能力。</p>
<p>关于如何准备算法面试请看《Java 面试指北》的「面试准备篇」中对应的文章。</p>
<h2> 提前准备自我介绍</h2>
<p>自我介绍一般是你和面试官的第一次面对面正式交流，换位思考一下，假如你是面试官的话，你想听到被你面试的人如何介绍自己呢？一定不是客套地说说自己喜欢编程、平时花了很多时间来学习、自己的兴趣爱好是打球吧？</p>
<p>我觉得一个好的自我介绍至少应该包含这几点要素：</p>
<ul>
<li>用简洁的话说清楚自己主要的技术栈于擅长的领域；</li>
<li>把重点放在自己在行的地方以及自己的优势之处；</li>
<li>重点突出自己的能力比如自己的定位的 bug 的能力特别厉害；</li>
</ul>
<p>简单来说就是用简洁的语言突出自己的亮点，也就是推销自己嘛！</p>
<ul>
<li>如果你去过大公司实习，那对应的实习经历就是你的亮点。</li>
<li>如果你参加过技术竞赛，那竞赛经历就是你的亮点。</li>
<li>如果你大学就接触过企业级项目的开发，实战经验比较多，那这些项目经历就是你的亮点。</li>
<li>......</li>
</ul>
<p>从社招和校招两个角度来举例子吧！我下面的两个例子仅供参考，自我介绍并不需要死记硬背，记住要说的要点，面试的时候根据公司的情况临场发挥也是没问题的。另外，网上一般建议的是准备好两份自我介绍：一份对 hr 说的，主要讲能突出自己的经历，会的编程技术一语带过；另一份对技术面试官说的，主要讲自己会的技术细节和项目经验。</p>
<p><strong>社招：</strong></p>
<blockquote>
<p>面试官，您好！我叫独秀儿。我目前有 1 年半的工作经验，熟练使用 Spring、MyBatis 等框架、了解 Java 底层原理比如 JVM 调优并且有着丰富的分布式开发经验。离开上一家公司是因为我想在技术上得到更多的锻炼。在上一个公司我参与了一个分布式电子交易系统的开发，负责搭建了整个项目的基础架构并且通过分库分表解决了原始数据库以及一些相关表过于庞大的问题，目前这个网站最高支持 10 万人同时访问。工作之余，我利用自己的业余时间写了一个简单的 RPC 框架，这个框架用到了 Netty 进行网络通信， 目前我已经将这个项目开源，在 GitHub 上收获了 2k 的 Star! 说到业余爱好的话，我比较喜欢通过博客整理分享自己所学知识，现在已经是多个博客平台的认证作者。 生活中我是一个比较积极乐观的人，一般会通过运动打球的方式来放松。我一直都非常想加入贵公司，我觉得贵公司的文化和技术氛围我都非常喜欢，期待能与你共事！</p>
</blockquote>
<p><strong>校招：</strong></p>
<blockquote>
<p>面试官，您好！我叫秀儿。大学时间我主要利用课外时间学习了 Java 以及 Spring、MyBatis 等框架 。在校期间参与过一个考试系统的开发，这个系统的主要用了 Spring、MyBatis 和 shiro 这三种框架。我在其中主要担任后端开发，主要负责了权限管理功能模块的搭建。另外，我在大学的时候参加过一次软件编程大赛，我和我的团队做的在线订餐系统成功获得了第二名的成绩。我还利用自己的业余时间写了一个简单的 RPC 框架，这个框架用到了 Netty 进行网络通信， 目前我已经将这个项目开源，在 GitHub 上收获了 2k 的 Star! 说到业余爱好的话，我比较喜欢通过博客整理分享自己所学知识，现在已经是多个博客平台的认证作者。 生活中我是一个比较积极乐观的人，一般会通过运动打球的方式来放松。我一直都非常想加入贵公司，我觉得贵公司的文化和技术氛围我都非常喜欢，期待能与你共事！</p>
</blockquote>
<h2> 减少抱怨</h2>
<p>就像现在的技术面试一样，大家都说内卷了，抱怨现在的面试真特么难。然而，单纯抱怨有用么？你对其他求职者说：“大家都不要刷 Leetcode 了啊！都不要再准备高并发、高可用的面试题了啊！现在都这么卷了！”</p>
<p>会有人听你的么？<strong>你不准备面试，但是其他人会准备面试啊！那你是不是傻啊？还是真的厉害到不需要准备面试呢？</strong></p>
<p>因此，准备 Java 面试的第一步，我们一定要尽量减少抱怨。抱怨的声音多了之后，会十分影响自己，会让自己变得十分焦虑。</p>
<h2> 面试之后及时复盘</h2>
<p>如果失败，不要灰心；如果通过，切勿狂喜。面试和工作实际上是两回事，可能很多面试未通过的人，工作能力比你强的多，反之亦然。</p>
<p>面试就像是一场全新的征程，失败和胜利都是平常之事。所以，劝各位不要因为面试失败而灰心、丧失斗志。也不要因为面试通过而沾沾自喜，等待你的将是更美好的未来，继续加油！</p>
<h2> 总结</h2>
<p>这篇文章内容有点多，如果这篇文章只能让你记住 4 句话，那请记住下面这 4 句：</p>
<ol>
<li>一定要提前准备面试！技术面试不同于编程，编程厉害不代表技术面试就一定能过。</li>
<li>一定不要对面试抱有侥幸心理。打铁还需自身硬！千万不要觉得自己看几篇面经，看几篇面试题解析就能通过面试了。一定要静下心来深入学习！</li>
<li>建议大学生尽可能早一点以求职为导向来学习的。这样更有针对性，并且可以大概率减少自己处在迷茫的时间，很大程度上还可以让自己少走很多弯路。 但是，不要把“以求职为导向学习”理解为“我就不用学课堂上那些计算机基础课程了”！</li>
<li>手撕算法是当下技术面试的标配，尽早准备！</li>
</ol>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/interview-preparation/format,png.png" type="image/png"/>
    </item>
    <item>
      <title>Java 优质开源大数据项目</title>
      <link>https://javaguide.cn/open-source-project/big-data.html</link>
      <guid>https://javaguide.cn/open-source-project/big-data.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 优质开源大数据项目</source>
      <description>Spark :Spark 是用于大规模数据处理的统一分析引擎。 Flink：Apache Flink 是一个框架和分布式处理引擎，用于在无边界和有边界数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。 HBase：HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。 Flume :Apache Flume 是一个分布式的、可靠的、可用的，从多种不同的源收集、聚集、移动大量日志数据到集中数据存储的系统。 Storm : 一个分布式，高容错的实时计算系统。</description>
      <category>开源项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li><strong><a href="https://github.com/apache/spark" target="_blank" rel="noopener noreferrer">Spark</a></strong> :Spark 是用于大规模数据处理的统一分析引擎。</li>
<li><strong><a href="https://github.com/apache/flink" title="flink" target="_blank" rel="noopener noreferrer">Flink</a></strong>：Apache Flink 是一个框架和分布式处理引擎，用于在<em>无边界和有边界</em>数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。</li>
<li><strong><a href="https://hbase.apache.org/" target="_blank" rel="noopener noreferrer">HBase</a></strong>：HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。</li>
<li><strong><a href="https://flume.apache.org/" target="_blank" rel="noopener noreferrer">Flume</a></strong> :Apache Flume 是一个分布式的、可靠的、可用的，从多种不同的源收集、聚集、移动大量日志数据到集中数据存储的系统。</li>
<li><strong><a href="https://storm.apache.org/" target="_blank" rel="noopener noreferrer">Storm</a></strong> : 一个分布式，高容错的实时计算系统。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 优质开源机器学习项目</title>
      <link>https://javaguide.cn/open-source-project/machine-learning.html</link>
      <guid>https://javaguide.cn/open-source-project/machine-learning.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 优质开源机器学习项目</source>
      <description>Deeplearning4j：Deeplearning4j 是第一个为 Java 和 Scala 编写的商业级，开源，分布式深度学习库。 Smile：基于 Java 和 Scala 的机器学习库。</description>
      <category>开源项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li><strong><a href="https://github.com/eclipse/deeplearning4j" target="_blank" rel="noopener noreferrer">Deeplearning4j</a></strong>：Deeplearning4j 是第一个为 Java 和 Scala 编写的商业级，开源，分布式深度学习库。</li>
<li><strong><a href="https://github.com/haifengl/smile" target="_blank" rel="noopener noreferrer">Smile</a></strong>：基于 Java 和 Scala 的机器学习库。</li>
</ul>
<p>相关阅读：<a href="https://www.infoq.cn/article/GA9UeYlv8ohBzBso9eph" target="_blank" rel="noopener noreferrer">Java 能用于机器学习和数据科学吗？-InfoQ</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 优质开源实战项目</title>
      <link>https://javaguide.cn/open-source-project/practical-project.html</link>
      <guid>https://javaguide.cn/open-source-project/practical-project.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 优质开源实战项目</source>
      <description>快速开发脚手架 Snowy：国内首个国密前后端分离快速开发平台，定位不是深度封装的框架，也不是无代码平台，更不是某个领域的产品。详细介绍：5.1k！这是我见过最强的前后端分离快速开发脚手架！！。 RuoYi：RuoYi 一款基于基于 SpringBoot 的权限管理系统 易读易懂、界面简洁美观，直接运行即可用 。 AgileBoot-Back-End：基于 Ruoyi 做了大量重构优化的基础快速开发框架。 RuoYi-Vue-Pro：RuoYi-Vue 全新 Pro 版本，优化重构所有功能。 Guns：现代化的 Java 应用开发基础框架。 JeecgBoot：一款基于代码生成器的 J2EE 低代码快速开发平台，支持生成前后端分离架构的项目。 Erupt : 低代码全栈类框架，它使用 Java 注解 动态生成页面以及增、删、改、查、权限控制等后台功能。 SmartAdmin : 一套简洁、易用的低代码中后台解决方案。 BallCat：一个功能完善的快速开发脚手架！除了最基本的权限管理，定时任务功能之外，还额外支持 XSS 过滤，SQL 防注入、数据脱敏等多种功能 JHipster :开源应用程序平台，可在几秒钟内创建 Spring Boot + Angular / React 项目！</description>
      <category>开源项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 快速开发脚手架</h2>
<ul>
<li><a href="https://gitee.com/xiaonuobase/snowy" target="_blank" rel="noopener noreferrer">Snowy</a>：国内首个国密前后端分离快速开发平台，定位不是深度封装的框架，也不是无代码平台，更不是某个领域的产品。详细介绍：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247534316&amp;idx=1&amp;sn=69938397674fc33ecda43c8c9d0a4039&amp;chksm=cea10927f9d68031bc862485c6be984ade5af233d4d871d498c38f22164a84314678c0c67cd7&amp;token=1464380539&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">5.1k！这是我见过最强的前后端分离快速开发脚手架！！</a>。</li>
<li><a href="https://gitee.com/y_project/RuoYi" target="_blank" rel="noopener noreferrer">RuoYi</a>：RuoYi 一款基于基于 SpringBoot 的权限管理系统 易读易懂、界面简洁美观，直接运行即可用 。</li>
<li><a href="https://github.com/valarchie/AgileBoot-Back-End" target="_blank" rel="noopener noreferrer">AgileBoot-Back-End</a>：基于 Ruoyi 做了大量重构优化的基础快速开发框架。</li>
<li><a href="https://github.com/YunaiV/ruoyi-vue-pro" target="_blank" rel="noopener noreferrer">RuoYi-Vue-Pro</a>：RuoYi-Vue 全新 Pro 版本，优化重构所有功能。</li>
<li><a href="https://gitee.com/stylefeng/guns" target="_blank" rel="noopener noreferrer">Guns</a>：现代化的 Java 应用开发基础框架。</li>
<li><a href="https://github.com/zhangdaiscott/jeecg-boot" target="_blank" rel="noopener noreferrer">JeecgBoot</a>：一款基于代码生成器的 J2EE 低代码快速开发平台，支持生成前后端分离架构的项目。</li>
<li><a href="https://gitee.com/erupt/erupt" target="_blank" rel="noopener noreferrer">Erupt</a> : 低代码全栈类框架，它使用 Java 注解 动态生成页面以及增、删、改、查、权限控制等后台功能。</li>
<li><a href="https://gitee.com/lab1024/smart-admin" target="_blank" rel="noopener noreferrer">SmartAdmin</a> : 一套简洁、易用的低代码中后台解决方案。</li>
<li><a href="https://github.com/ballcat-projects/ballcat" target="_blank" rel="noopener noreferrer">BallCat</a>：一个功能完善的快速开发脚手架！除了最基本的权限管理，定时任务功能之外，还额外支持 XSS 过滤，SQL 防注入、数据脱敏等多种功能</li>
<li><a href="https://github.com/jhipster/generator-jhipster" target="_blank" rel="noopener noreferrer">JHipster</a> :开源应用程序平台，可在几秒钟内创建 Spring Boot + Angular / React 项目！</li>
</ul>
<p>相关阅读：</p>
<ul>
<li><a href="https://sourl.cn/cFyLTR" target="_blank" rel="noopener noreferrer">听说你要接私活？Guide 连夜整理了 5 个开源免费的 Java 项目快速开发脚手架。</a></li>
<li><a href="https://sourl.cn/StkiAv" target="_blank" rel="noopener noreferrer">解放双手，再来推荐 5 个 Java 项目开发快速开发脚手架！项目经验和私活都不愁了！</a></li>
</ul>
<h2> 博客/论坛系统</h2>
<p>下面这几个项目都是非常适合 Spring Boot 初学者学习的，下面的大部分项目的总体代码架构我都看过，个人觉得还算不错，不会误导没有实际做过项目的朋友。</p>
<ul>
<li><a href="https://github.com/itwanger/paicoding" target="_blank" rel="noopener noreferrer">paicoding</a>：一款好用又强大的开源社区，基于 Spring Boot 系列主流技术栈，附详细的教程。</li>
<li><a href="https://github.com/rymcu" target="_blank" rel="noopener noreferrer">forest</a>：下一代的知识社区系统，可以自定义专题和作品集。后端基于 SpringBoot + Shrio + MyBatis + JWT + Redis，前端基于 Vue + NuxtJS + Element-UI。</li>
<li><a href="https://github.com/lenve/vhr" title="vhr" target="_blank" rel="noopener noreferrer">vhr</a>：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。</li>
<li><a href="https://github.com/cloudfavorites/favorites-web" target="_blank" rel="noopener noreferrer">favorites-web</a> :云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。</li>
<li><a href="https://github.com/codedrinker/community" target="_blank" rel="noopener noreferrer">community</a>：开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。功能持续更新中…… 技术栈 Spring、Spring Boot、MyBatis、MySQL/H2、Bootstrap。</li>
<li><a href="https://github.com/lenve/VBlog" target="_blank" rel="noopener noreferrer">VBlog</a>：V 部落，Vue+SpringBoot 实现的多用户博客管理平台!</li>
<li><a href="https://github.com/ZHENFENG13/My-Blog" target="_blank" rel="noopener noreferrer">My-Blog</a>：My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。</li>
</ul>
<h2> 考试/刷题系统</h2>
<ul>
<li><a href="https://gitee.com/mindskip/uexam" target="_blank" rel="noopener noreferrer">uexam</a>：一个非常不错的考试系统！考试系统应用场景还挺多的，不论是对于在校大学生还是已经工作的小伙伴，并且，类似的私活也有很多。相关阅读：<a href="http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzg2OTA0Njk0OA%3D%3D%26mid%3D2247491585%26idx%3D1%26sn%3D8d3c6768c22e72d6bfcbeee9624886a7%26chksm%3Dcea1afcaf9d626dc918760289c37025ad526f6255786bc198d2402203df64c873ad7934f58df%26scene%3D178%26cur_album_id%3D1345382825083895808%23rd" target="_blank" rel="noopener noreferrer">《好一个 Spring Boot 开源在线考试系统！解决了我的燃眉之急》</a> 。</li>
<li><a href="https://github.com/Jackson0714/PassJava-Platform" target="_blank" rel="noopener noreferrer">PassJava-Platform</a>：一个基于微服务(SpringBoot、Spring Cloud)的面试刷题系统！相关阅读：<a href="http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzg2OTA0Njk0OA%3D%3D%26mid%3D2247497045%26idx%3D1%26sn%3D577175bfd6c040a0df5a494fce6f9758%26chksm%3Dcea1ba9ef9d633883a2e213c0fb9a88bdc87051347d4b3fad2c2befb65d8b16e1ea81d8146dd%26scene%3D178%26cur_album_id%3D1345382825083895808%23rd" target="_blank" rel="noopener noreferrer">《一个基于 Spring Cloud 的面试刷题系统。面试、毕设、项目经验一网打尽》</a>。</li>
</ul>
<h2> 商城系统</h2>
<p>下面的商城系统大多比较复杂比如 mall ,如果没有 Java 基础和 Spring Boot 都还没有摸熟的话不推荐过度研究下面几个项目或者使用这些项目当作毕业设计。</p>
<ul>
<li><a href="https://github.com/macrozheng/mall" title="mall" target="_blank" rel="noopener noreferrer">mall</a>：mall 项目是一套电商系统，包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现。</li>
<li><a href="https://github.com/macrozheng/mall-swarm" title="mall-swarm" target="_blank" rel="noopener noreferrer">mall-swarm</a> : mall-swarm 是一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统。</li>
<li><a href="https://github.com/YunaiV/onemall" target="_blank" rel="noopener noreferrer">onemall</a>：mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba 。</li>
<li><a href="https://github.com/linlinjava/litemall" title="litemall" target="_blank" rel="noopener noreferrer">litemall</a>：又一个小商城。litemall = Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端。</li>
<li><a href="https://github.com/Exrick/xmall" target="_blank" rel="noopener noreferrer">xmall</a> :基于 SOA 架构的分布式电商购物商城 前后端分离 前台商城:Vue 全家桶 后台管理系统:Spring/Dubbo/SSM/Elasticsearch/Redis/MySQL/ActiveMQ/Shiro/Zookeeper 等</li>
<li><a href="https://github.com/newbee-ltd/newbee-mall" target="_blank" rel="noopener noreferrer">newbee-mall</a> :newbee-mall 项目（新蜂商城）是一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发。</li>
</ul>
<h2> 权限管理系统</h2>
<p>权限管理系统在企业级的项目中一般都是非常重要的，如果你需求去实际了解一个不错的权限系统是如何设计的话，推荐你可以参考下面这些开源项目。</p>
<ul>
<li><a href="https://github.com/wxiaoqi/Spring-Cloud-Admin" title="Spring-Cloud-Admin" target="_blank" rel="noopener noreferrer">Spring-Cloud-Admin</a>：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。</li>
<li><a href="https://gitee.com/log4j/pig" title="pig" target="_blank" rel="noopener noreferrer">pig</a>：（gitee）基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。</li>
<li><a href="https://github.com/wuyouzhuguli/FEBS-Shiro" title="FEBS-Shiro" target="_blank" rel="noopener noreferrer">FEBS-Shiro</a>：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。</li>
<li><a href="https://github.com/elunez/eladmin" target="_blank" rel="noopener noreferrer">eladmin</a> : 项目基于 Spring Boot 2.1.0、 Jpa、 Spring Security、redis、Vue 的前后端分离的后台管理系统，项目采用分模块开发方式， 权限控制采用 RBAC，支持数据字典与数据权限管理，支持一键生成前后端代码，支持动态路由。</li>
<li><a href="https://github.com/Heeexy/SpringBoot-Shiro-Vue" target="_blank" rel="noopener noreferrer">SpringBoot-Shiro-Vue</a>：提供一套基于 Spring Boot-Shiro-Vue 的权限管理思路.前后端都加以控制,做到按钮/接口级别的权限。</li>
</ul>
<h2> 造轮子</h2>
<ul>
<li><a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener noreferrer">guide-rpc-framework</a>：一款基于 Netty+Kyro+Zookeeper 实现的自定义 RPC 框架-附详细实现过程和相关教程。</li>
<li><a href="https://github.com/DerekYRC/mini-spring" target="_blank" rel="noopener noreferrer">mini-spring</a>：简化版的 Spring 框架，能帮助你快速熟悉 Spring 源码和掌握 Spring 的核心原理。代码极度简化，保留了 Spring 的核心功能，如 IoC 和 AOP、资源加载器等核心功能。</li>
<li><a href="https://github.com/DerekYRC/mini-spring-cloud" target="_blank" rel="noopener noreferrer">mini-spring-cloud</a>：一个手写的简化版的 Spring Cloud，旨在帮助你快速熟悉 Spring Cloud 源码及掌握其核心原理。相关阅读：<a href="https://mp.weixin.qq.com/s/v3FUp-keswE2EhcTaLpSMQ" target="_blank" rel="noopener noreferrer">手写一个简化版的 Spring Cloud！</a> 。</li>
<li><a href="https://github.com/fuzhengwei/itstack-demo-jvm" target="_blank" rel="noopener noreferrer">itstack-demo-jvm</a>：通过 Java 代码来实现 JVM 的基础功能（搜索解析 class 文件、字节码命令、运行时数据区等。相关阅读：<a href="https://zachaxy.github.io/tags/JVM/" target="_blank" rel="noopener noreferrer">《zachaxy 的手写 JVM 系列》</a>。</li>
<li><a href="https://github.com/alchemystar/Freedom" target="_blank" rel="noopener noreferrer">Freedom</a>：自己 DIY 一个具有 ACID 的数据库。相关项目：<a href="https://github.com/CN-GuoZiyang/MYDB" target="_blank" rel="noopener noreferrer">MYDB</a>（一个简单的数据库实现）、<a href="https://github.com/erikgrinaker/toydb" target="_blank" rel="noopener noreferrer">toyDB</a>（Rust 实现的分布式 SQL 数据库）。</li>
<li><a href="https://github.com/stateIs0/lu-raft-kv" target="_blank" rel="noopener noreferrer">lu-raft-kv</a>：一个 Java 版本的 Raft(CP) KV 分布式存储实现，非常适合想要深入学习 Raft 协议的小伙伴研究。lu-raft-kv 已经实现了 Raft 协议其中的两个核心功能：leader 选举和日志复制。如果你想要学习这个项目的话，建议你提前看一下作者写的项目介绍，比较详细，地址：<a href="http://thinkinjava.cn/2019/01/12/2019/2019-01-12-lu-raft-kv/" target="_blank" rel="noopener noreferrer">http://thinkinjava.cn/2019/01/12/2019/2019-01-12-lu-raft-kv/</a> 。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 开源项目精选</title>
      <link>https://javaguide.cn/open-source-project/</link>
      <guid>https://javaguide.cn/open-source-project/</guid>
      <source url="https://javaguide.cn/rss.xml">Java 开源项目精选</source>
      <description>这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版：《Java 面试指北 》 (质量很高，专为面试打造，配合 JavaGuide 食用)。 知识星球：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 JavaGuide 知识星球（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</description>
      <category>开源项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">这是一则或许对你有用的小广告</p>
<ul>
<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北 》</a></strong> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li>
<li><strong>知识星球</strong>：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 <strong><a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球</a></strong>（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</li>
</ul>
</div>
<p>精选 GitHub 和 Gitee 上优质的 Java 开源项目。</p>
<p>灵感来源于<a href="https://github.com/akullpp/awesome-java" target="_blank" rel="noopener noreferrer">awesome-java</a> 这个项目，可以看作是这个项目的中文本土版本，项目类型更全面且加入了更多中文开源项目。</p>
<p>欢迎大家在项目 <a href="https://github.com/CodingDocs/awesome-java/issues" target="_blank" rel="noopener noreferrer">issues 区</a>推荐自己认可的 Java 开源项目，让我们共同维护一个优质的 Java 开源项目精选集！</p>
<ul>
<li>GitHub 地址：<a href="https://github.com/CodingDocs/awesome-java" target="_blank" rel="noopener noreferrer">https://github.com/CodingDocs/awesome-java</a></li>
<li>Gitee 地址：<a href="https://gitee.com/SnailClimb/awesome-java" target="_blank" rel="noopener noreferrer">https://gitee.com/SnailClimb/awesome-java</a></li>
</ul>
<p>如果内容对你有帮助的话，欢迎给本项目点个 Star。我会用我的业余时间持续完善这份名单，感谢！</p>
<p>另外，我的公众号还会定期分享优质开源项目，每月一期，每一期我都会精选 5 个高质量的 Java 开源项目。</p>
<p>目前已经更新到了第 19 期：</p>
<ol>
<li><a href="http://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247515383&amp;idx=1&amp;sn=ba7244020c05d966b483d8c302d54e85&amp;chksm=cea1f33cf9d67a2a111bcf6cadc3cc1c44828ba2302cd3e13bbd88349e43d4254808e6434133&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">一款基于 Spring Boot + Vue 的一站式开源持续测试平台</a>。</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247515981&amp;idx=1&amp;sn=e4b9c06af65f739bdcdf76bdc35d59f6&amp;chksm=cea1f086f9d679908bd6604b1c42d67580160d9789951f3707ad2f5de4d97aa72121d8fe777e&amp;token=435278690&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">用 Java 写个沙盒塔防游戏！已上架 Steam,Apple Store</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247516459&amp;idx=1&amp;sn=a86fefe083fa91c83638243d75500a04&amp;chksm=cea1cee0f9d647f69237357e869f52e0903afad62f365e18b04ff1851aeb4c80c8d31a488fee&amp;scene=21&amp;cur_album_id=1345382825083895808#wechat_redirect" target="_blank" rel="noopener noreferrer">一款基于 Java 的可视化 HTTP API 接口开发神器</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247518215&amp;idx=1&amp;sn=91e467f39322d2e7979b85fe235822d2&amp;chksm=cea1c7ccf9d64edaf966c95923d72d337bf5e655a773a3d295d65fc92e4535ae5d8b0e6d9d86&amp;token=660789642&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">一款对业务代码无侵入的可视化 Java 进程管理平台</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247519466&amp;idx=1&amp;sn=0dd412d5220444b37a1101f77ccdc65d&amp;chksm=cea1c321f9d64a376ef7de329b5c91e593a32c7a8e5c179b7ab3619296feea35939deb1f6a3f&amp;scene=178&amp;cur_album_id=1345382825083895808#rd" target="_blank" rel="noopener noreferrer">一个比 Spring 更轻量级的 Web 框架！！！微软、红帽都在用</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247519972&amp;idx=1&amp;sn=f03c67e6e24eda2ccf703c8a9bc8c8f8&amp;chksm=cea1c12ff9d6483943f409e5ab50b773b5750b63d00950805fa340a67ad7b52ee74ff6651043&amp;scene=178&amp;cur_album_id=1345382825083895808#rd" target="_blank" rel="noopener noreferrer">轻量！Google 开源了一个简易版 Spring ！</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247520633&amp;idx=1&amp;sn=aec35af40e3ed3b1e844addd04e31af5&amp;chksm=cea1deb2f9d657a46a0684bbcbcb2900cebff39a2b2746a4a809b6b5306bce08d4382efd5ca8&amp;scene=178&amp;cur_album_id=1345382825083895808#rd" target="_blank" rel="noopener noreferrer">一款跨时代的高性能 Java 框架！启动速度快到飞起</a></li>
<li><a href="https://mp.weixin.qq.com/s/kRgqHt73ZJGFQ2XmKG4PXw" target="_blank" rel="noopener noreferrer">Spring Boot+MyBatis Plus+JWT 问卷系统！开源！</a></li>
<li><a href="https://mp.weixin.qq.com/s/v3FUp-keswE2EhcTaLpSMQ" target="_blank" rel="noopener noreferrer">手写一个简化版的 Spring Cloud！</a></li>
<li><a href="https://mp.weixin.qq.com/s/CCzsX3Sn2Q3vhuBDEmRTlw" target="_blank" rel="noopener noreferrer">这个 SpringBoot+ Vue 开源博客系统太酷炫了！</a></li>
<li><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2OTA0Njk0OA==&amp;action=getalbum&amp;album_id=1345382825083895808&amp;scene=173&amp;from_msgid=2247530323&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">手写一个简易版数据库！项目经验稳了</a></li>
<li><a href="https://mp.weixin.qq.com/s/Ecjm801RpS34Mhj02bIOsQ" target="_blank" rel="noopener noreferrer">一款强大的快速开发脚手架，前后端分离，干掉 70% 重复工作！</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247530783&amp;idx=1&amp;sn=c9fdc0c71e2fc95d88ba954291b07e29&amp;chksm=cea136d4f9d6bfc2931a18a42f7bd9903503963e8a85a318adcce579614c0831b1881be3267d&amp;token=1811572747&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">手写一个入门级编译器！YYDS！</a></li>
<li><a href="https://mp.weixin.qq.com/s/vfPSXtOgefwonbnP53KlOQ" target="_blank" rel="noopener noreferrer">8.8k star，这可能是我见过最强的开源支付系统！！</a></li>
<li><a href="https://mp.weixin.qq.com/s/esaivn2z_66CcrRJlDYLEA" target="_blank" rel="noopener noreferrer">31.2k！这是我见过最强的后台管理系统 ！！</a></li>
<li><a href="https://mp.weixin.qq.com/s/6-TnCHUMEIFWQVl-pIWBOA" target="_blank" rel="noopener noreferrer">14.3k star，这是我见过最强的第三方登录工具库！！</a></li>
<li><a href="https://mp.weixin.qq.com/s/heag76H4UwZmr8oBY_2gcw" target="_blank" rel="noopener noreferrer">3.2k！这是我见过最强的消息推送平台！！</a></li>
<li><a href="https://mp.weixin.qq.com/s/w-JuBlcqCeAZR0xUFWzvHQ" target="_blank" rel="noopener noreferrer">好家伙，又一本技术书籍开源了！！</a></li>
<li><a href="https://mp.weixin.qq.com/s/WhI2K1VF0h_57TEVGCwuCA" target="_blank" rel="noopener noreferrer">开箱即用的 ChatGPT Java SDK！支持 GPT3.5、 GPT4 API</a></li>
<li><a href="https://mp.weixin.qq.com/s/tdBQ0Td_Gsev4AaIlq5ltg" target="_blank" rel="noopener noreferrer">这是我见过最强大的技术社区实战项目！！</a></li>
</ol>
<p>推荐你在我的公众号“<strong>JavaGuide</strong>”回复“<strong>开源</strong>”在线阅读<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2OTA0Njk0OA==&amp;action=getalbum&amp;album_id=1345382825083895808&amp;scene=173&amp;from_msgid=2247516459&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">「优质开源项目推荐」</a>系列。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/open-source-project/image-20220512211235432.png" alt="“JavaGuide”公众号回复“开源”" tabindex="0"><figcaption>“JavaGuide”公众号回复“开源”</figcaption></figure>
<figure><img src="https://oss.javaguide.cn/github/javaguide/books167598cd2e17b8ec.png" alt="我的公众号" tabindex="0"><figcaption>我的公众号</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/open-source-project/image-20220512211235432.png" type="image/png"/>
    </item>
    <item>
      <title>Java 优质开源系统设计项目</title>
      <link>https://javaguide.cn/open-source-project/system-design.html</link>
      <guid>https://javaguide.cn/open-source-project/system-design.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 优质开源系统设计项目</source>
      <description>基础框架 Spring Boot：Spring Boot 可以轻松创建独立的生产级基于 Spring 的应用程序，内置 web 服务器让你可以像运行普通 Java 程序一样运行项 目。另外，大部分 Spring Boot 项目只需要少量的配置即可，这有别于 Spring 的重配置。 Javalin：一个轻量级的 Web 框架，同时支持 Java 和 Kotlin，被微软、红帽、Uber 等公司使用。 Quarkus : 用于编写 Java 应用程序的云原生和容器优先的框架。 Guice：Google 开源的一个轻量级依赖注入框架，相当于一个功能极简化的轻量级 Spring Boot。在某些情况下非常实用，就比如说我们的项目只需要使用依赖注入，不需要 AOP 等功能特性。 SOFABoot：SOFABoot 基于 Spring Boot ，不过在其基础上增加了 Readiness Check，类隔离，日志空间隔离等等能力。 配套提供的还有：SOFARPC（RPC 框架）、SOFABolt（基于 Netty 的远程通信框架）、SOFARegistry（注册中心）...详情请参考：SOFAStack 。 Spring Batch : Spring Batch 是一个轻量级但功能又十分全面的批处理框架，主要用于批处理场景比如从数据库、文件或队列中读取大量记录。不过，需要注意的是：Spring Batch 不是调度框架。商业和开源领域都有许多优秀的企业调度框架比如 Quartz、XXL-JOB、Elastic-Job。它旨在与调度程序一起工作，而不是取代调度程序。更多介绍请参考 Spring Batch 官方文档，入门教程可以参考 Spring Batch 从入门到实战。</description>
      <category>开源项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 基础框架</h2>
<ul>
<li><a href="https://github.com/spring-projects/spring-boot" title="spring-boot" target="_blank" rel="noopener noreferrer">Spring Boot</a>：Spring Boot 可以轻松创建独立的生产级基于 Spring 的应用程序，内置 web 服务器让你可以像运行普通 Java 程序一样运行项 目。另外，大部分 Spring Boot 项目只需要少量的配置即可，这有别于 Spring 的重配置。</li>
<li><a href="https://github.com/tipsy/javalin" target="_blank" rel="noopener noreferrer">Javalin</a>：一个轻量级的 Web 框架，同时支持 Java 和 Kotlin，被微软、红帽、Uber 等公司使用。</li>
<li><a href="https://github.com/quarkusio/quarkus" target="_blank" rel="noopener noreferrer">Quarkus</a> : 用于编写 Java 应用程序的云原生和容器优先的框架。</li>
<li><a href="https://github.com/google/guice" target="_blank" rel="noopener noreferrer">Guice</a>：Google 开源的一个轻量级依赖注入框架，相当于一个功能极简化的轻量级 Spring Boot。在某些情况下非常实用，就比如说我们的项目只需要使用依赖注入，不需要 AOP 等功能特性。</li>
<li><a href="https://github.com/sofastack/sofa-boot" target="_blank" rel="noopener noreferrer">SOFABoot</a>：SOFABoot 基于 Spring Boot ，不过在其基础上增加了 Readiness Check，类隔离，日志空间隔离等等能力。 配套提供的还有：SOFARPC（RPC 框架）、SOFABolt（基于 Netty 的远程通信框架）、SOFARegistry（注册中心）...详情请参考：<a href="https://github.com/sofastack" target="_blank" rel="noopener noreferrer">SOFAStack</a> 。</li>
<li><a href="https://github.com/spring-projects/spring-batch" target="_blank" rel="noopener noreferrer">Spring Batch</a> : Spring Batch 是一个轻量级但功能又十分全面的批处理框架，主要用于批处理场景比如从数据库、文件或队列中读取大量记录。不过，需要注意的是：Spring Batch 不是调度框架。商业和开源领域都有许多优秀的企业调度框架比如 Quartz、XXL-JOB、Elastic-Job。它旨在与调度程序一起工作，而不是取代调度程序。更多介绍请参考 <a href="https://docs.spring.io/spring-batch/docs/4.3.x/reference/html/spring-batch-intro.html#spring-batch-intro" target="_blank" rel="noopener noreferrer">Spring Batch 官方文档</a>，入门教程可以参考 <a href="https://mrbird.cc/Spring-Batch%E5%85%A5%E9%97%A8.html" target="_blank" rel="noopener noreferrer">Spring Batch 从入门到实战</a>。</li>
</ul>
<h2> Bean 映射</h2>
<ul>
<li><a href="https://github.com/mapstruct/mapstruct" target="_blank" rel="noopener noreferrer">MapStruct</a>（推荐）：满足JSR269规范的一个Java注解处理器，用于为Java Bean生成类型安全且高性能的映射。它基于编译阶段生成get/set代码，此实现过程中没有反射，不会造成额外的性能损失。</li>
<li><a href="https://github.com/jmapper-framework/jmapper-core" target="_blank" rel="noopener noreferrer">JMapper</a> :  一个高性能且易于使用的 Bean 映射框架。</li>
</ul>
<h2> 字节码操作</h2>
<ul>
<li><a href="https://asm.ow2.io/" target="_blank" rel="noopener noreferrer">ASM</a>：通用 Java 字节码操作和分析框架。它可用于直接以二进制形式修改现有类或动态生成类。</li>
<li><a href="https://github.com/raphw/byte-buddy" target="_blank" rel="noopener noreferrer">Byte Buddy</a>：Java字节码生成和操作库，用于在 Java 应用程序运行时创建和修改 Java 类，无需使用编译器</li>
<li><a href="https://github.com/jboss-javassist/javassist" target="_blank" rel="noopener noreferrer">Javassist</a>：动态编辑Java字节码的类库。</li>
<li><a href="https://github.com/Col-E/Recaf" target="_blank" rel="noopener noreferrer">Recaf</a>：现代Java 字节码编辑器，基于 ASM（Java 字节码操作框架） 来修改字节码，可简化编辑已编译 Java 应用程序的过程。</li>
</ul>
<h2> 数据库</h2>
<h3> 数据库连接池</h3>
<ul>
<li><a href="https://github.com/alibaba/druid" target="_blank" rel="noopener noreferrer">Druid</a> : 阿里巴巴数据库事业部出品，为监控而生的数据库连接池。</li>
<li><a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noopener noreferrer">HikariCP</a> : 一个可靠的高性能 JDBC 连接池。Springboot 2.0 选择 HikariCP 作为默认数据库连接池。</li>
</ul>
<h3> 数据库框架</h3>
<ul>
<li><a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener noreferrer">MyBatis-Plus</a> : <a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener noreferrer">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener noreferrer">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</li>
<li><a href="https://github.com/redisson/redisson" title="redisson" target="_blank" rel="noopener noreferrer">Redisson</a>：Redis 基础上的一个 Java 驻内存数据网格（In-Memory Data Grid）,支持超过 30 个对象和服务:<code>Set</code>,<code>SortedSet</code>, <code>Map</code>, <code>List</code>, <code>Queue</code>, <code>Deque</code> ......，并且提供了多种分布式锁的实现。更多介绍请看：<a href="https://github.com/redisson/redisson/wiki/Redisson%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D" title="Redisson项目介绍" target="_blank" rel="noopener noreferrer">《Redisson 项目介绍》</a>。</li>
</ul>
<h3> 数据同步</h3>
<ul>
<li><a href="https://github.com/alibaba/canal" title="canal" target="_blank" rel="noopener noreferrer">Canal</a> [kə'næl] : Canal 译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。</li>
<li><a href="https://github.com/alibaba/DataX" title="DataX" target="_blank" rel="noopener noreferrer">DataX</a>：DataX 是阿里巴巴集团内被广泛使用的离线数据同步工具/平台，实现包括 MySQL、Oracle、SqlServer、Postgre、HDFS、Hive、ADS、HBase、TableStore(OTS)、MaxCompute(ODPS)、DRDS 等各种异构数据源之间高效的数据同步功能。相关项目：<a href="https://github.com/WeiYe-Jing/datax-web" target="_blank" rel="noopener noreferrer">DataX-Web</a> （DataX 集成可视化页面，选择数据源即可一键生成数据同步任务）。</li>
</ul>
<p>其他：<a href="https://github.com/DTStack/flinkx" target="_blank" rel="noopener noreferrer">Flinkx</a> （基于 Flink 的分布式数据同步工具）。</p>
<h3> 时序数据库</h3>
<ul>
<li><a href="https://github.com/apache/iotdb" target="_blank" rel="noopener noreferrer">IoTDB</a>：一款 Java 语言编写的国产时序数据库，为用户提供数据收集、存储和分析等服务。与 Hadoop、Spark 和可视化工具(如 Grafana)无缝集成，满足了工业 IoT 领域中海量数据存储、高吞吐量数据写入和复杂数据查询分析的需求。</li>
<li><a href="https://github.com/kairosdb/kairosdb" target="_blank" rel="noopener noreferrer">KairosDB</a>：一个基于 Cassandra 的快速分布式可扩展时间序列数据库。</li>
</ul>
<h2> 搜索引擎</h2>
<ul>
<li><a href="https://github.com/elastic/elasticsearch" title="elasticsearch" target="_blank" rel="noopener noreferrer">Elasticsearch</a> （推荐）：开源，分布式，RESTful 搜索引擎。</li>
<li><a href="https://lucene.apache.org/solr/" target="_blank" rel="noopener noreferrer">Solr</a> : Solr（读作“solar”）是 Apache Lucene 项目的开源企业搜索平台。</li>
</ul>
<h2> 认证授权</h2>
<ul>
<li><a href="https://github.com/Wechat-Group/WxJava" target="_blank" rel="noopener noreferrer">WxJava</a> : WxJava （微信开发 Java SDK），支持包括微信支付、开放平台、小程序、企业微信/企业号和公众号等的后端开发。</li>
<li><a href="https://github.com/dromara/sa-token" target="_blank" rel="noopener noreferrer">Sa-Token</a>：轻量级 Java 权限认证框架。支持认证授权、单点登录、踢人下线、自动续签等功能。</li>
<li><a href="https://github.com/justauth/JustAuth" target="_blank" rel="noopener noreferrer">JustAuth</a>：小而全而美的第三方登录开源组件。目前已经集成了诸如：GitHub、Gitee、支付宝、新浪微博、微信、Google、Facebook、Twitter、StackOverflow 等国内外数十家第三方平台。</li>
</ul>
<h2> 网络通讯</h2>
<ul>
<li><a href="https://github.com/netty/netty" target="_blank" rel="noopener noreferrer">Netty</a> : 一个基于 NIO 的 client-server(客户端服务器)框架，使用它可以快速简单地开发网络应用程序。</li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="noopener noreferrer">Retrofit</a>：适用于 Android 和 Java 的类型安全的 HTTP 客户端。Retrofit 的 HTTP 请求使用的是 <a href="https://square.github.io/okhttp/" target="_blank" rel="noopener noreferrer">OkHttp</a> 库（一款被广泛使用网络框架）。</li>
<li><a href="https://gitee.com/dromara/forest" target="_blank" rel="noopener noreferrer">Forest</a>：轻量级 HTTP 客户端 API 框架，让 Java 发送 HTTP/HTTPS 请求不再难。它比 OkHttp 和 HttpClient 更高层，是封装调用第三方 restful api client 接口的好帮手，是 retrofit 和 feign 之外另一个选择。</li>
<li><a href="https://github.com/YeautyYE/netty-websocket-spring-boot-starter" target="_blank" rel="noopener noreferrer">netty-websocket-spring-boot-starter</a> :帮助你在 Spring Boot 中使用 Netty 来开发 WebSocket 服务器，并像 spring-websocket 的注解开发一样简单。</li>
</ul>
<h2> 测试</h2>
<h3> 测试框架</h3>
<ul>
<li><a href="http://junit.org/" target="_blank" rel="noopener noreferrer">JUnit</a> : Java 测试框架。</li>
<li><a href="https://github.com/mockito/mockito" target="_blank" rel="noopener noreferrer">Mockito</a>：Mockito 是一个模拟测试框架，可以让你用优雅，简洁的接口写出漂亮的单元测试。（对那些不容易构建的对象用一个虚拟对象来代替，使其在调试期间用来作为真实对象的替代品）</li>
<li><a href="https://github.com/powermock/powermock" target="_blank" rel="noopener noreferrer">PowerMock</a>：编写单元测试仅靠 Mockito 是不够。因为 Mockito 无法 mock 私有方法、final 方法及静态方法等。PowerMock 这个 framework，主要是为了扩展其他 mock 框架，如 Mockito、EasyMock。它使用一个自定义的类加载器，纂改字节码，突破 Mockito 无法 mock 静态方法、构造方法、final 类、final 方法以及私有方法的限制。</li>
<li><a href="https://github.com/tomakehurst/wiremock" target="_blank" rel="noopener noreferrer">WireMock</a>：模拟 HTTP 服务的工具（Mock your APIs）。</li>
<li><a href="https://github.com/testcontainers/testcontainers-java" target="_blank" rel="noopener noreferrer">Testcontainers</a>：一个支持 JUnit 的测试工具库，提供轻量级的且一次性的常见数据库测试支持、Selenium Web 浏览器或者其他任何可以在 Docker 容器中运行的实例支持。</li>
</ul>
<p>相关阅读：</p>
<ul>
<li><a href="https://martinfowler.com/articles/practical-test-pyramid.html" target="_blank" rel="noopener noreferrer">The Practical Test Pyramid- Martin Fowler</a> (很赞的一篇文章，不过是英文的)</li>
<li><a href="https://juejin.im/post/6844903982058618894" target="_blank" rel="noopener noreferrer">浅谈测试之 PowerMock</a></li>
</ul>
<h3> 测试平台</h3>
<ul>
<li><a href="https://github.com/metersphere/metersphere" target="_blank" rel="noopener noreferrer">MeterSphere</a> : 一站式开源持续测试平台，涵盖测试跟踪、接口测试、性能测试、团队协作等功能，全面兼容 JMeter、Postman、Swagger 等开源、主流标准。</li>
<li><a href="https://www.apifox.cn/" target="_blank" rel="noopener noreferrer">Apifox</a>：API 文档、API 调试、API Mock、API 自动化测试。</li>
</ul>
<h3> API 调试</h3>
<ul>
<li><a href="https://insomnia.rest/" target="_blank" rel="noopener noreferrer">Insomnia</a> :像人类而不是机器人一样调试 API。我平时经常用的，界面美观且轻量，总之很喜欢。</li>
<li><a href="https://www.getpostman.com/" target="_blank" rel="noopener noreferrer">Postman</a>：API 请求生成器。</li>
<li><a href="https://github.com/liyasthomas/postwoman" title="postwoman" target="_blank" rel="noopener noreferrer">Postwoman</a>：API 请求生成器-一个免费、快速、漂亮的 Postma 替代品。</li>
</ul>
<h2> 任务调度</h2>
<ul>
<li><a href="https://github.com/quartz-scheduler/quartz" target="_blank" rel="noopener noreferrer">Quartz</a>：一个很火的开源任务调度框架，Java 定时任务领域的老大哥或者说参考标准， 很多其他任务调度框架都是基于 <code>quartz</code> 开发的，比如当当网的<code>elastic-job</code>就是基于<code>quartz</code>二次开发之后的分布式调度解决方案</li>
<li><a href="https://github.com/xuxueli/xxl-job" target="_blank" rel="noopener noreferrer">XXL-JOB</a> :XXL-JOB 是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</li>
<li><a href="http://elasticjob.io/index_zh.html" target="_blank" rel="noopener noreferrer">Elastic-Job</a>：Elastic-Job 是当当网开源的一个基于 Quartz 和 Zookeeper 的分布式调度解决方案，由两个相互独立的子项目 Elastic-Job-Lite 和 Elastic-Job-Cloud 组成，一般我们只要使用 Elastic-Job-Lite 就好。</li>
<li><a href="https://github.com/analysys/EasyScheduler" title="EasyScheduler" target="_blank" rel="noopener noreferrer">EasyScheduler</a> （已经更名为 DolphinScheduler，已经成为 Apache 孵化器项目）：Easy Scheduler 是一个分布式工作流任务调度系统，主要解决“复杂任务依赖但无法直接监控任务健康状态”的问题。Easy Scheduler 以 DAG 方式组装任务，可以实时监控任务的运行状态。同时，它支持重试，重新运行等操作... 。</li>
<li><a href="https://gitee.com/KFCFans/PowerJob" target="_blank" rel="noopener noreferrer">PowerJob</a>：新一代分布式任务调度与计算框架，支持 CRON、API、固定频率、固定延迟等调度策略，提供工作流来编排任务解决依赖关系，使用简单，功能强大，文档齐全，欢迎各位接入使用！<a href="http://www.powerjob.tech/" target="_blank" rel="noopener noreferrer">http://www.powerjob.tech/</a> 。</li>
<li><a href="https://github.com/apache/dolphinscheduler" target="_blank" rel="noopener noreferrer">DolphinScheduler</a>：分布式易扩展的可视化工作流任务调度平台。</li>
</ul>
<h2> 分布式</h2>
<h3> API 网关</h3>
<ul>
<li><a href="https://github.com/Kong/kong" title="kong" target="_blank" rel="noopener noreferrer">Kong</a>：Kong 是一个云原生、快速的、可伸缩的分布式微服务抽象层(也称为 API 网关、API 中间件或在某些情况下称为服务网格)。2015 年作为开源项目发布，其核心价值是高性能和可扩展性。</li>
<li><a href="https://github.com/Dromara/soul" title="soul" target="_blank" rel="noopener noreferrer">ShenYu</a>：适用于所有微服务的可伸缩、高性能、响应性 API 网关解决方案。</li>
<li><a href="https://github.com/spring-cloud/spring-cloud-gateway" target="_blank" rel="noopener noreferrer">Spring Cloud Gateway</a> : 基于 Spring Framework 5.x 和 Spring Boot 2.x 构建的高性能网关。</li>
<li><a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener noreferrer">Zuul</a> : Zuul 是一个 L7 应用程序网关，它提供了动态路由，监视，弹性，安全性等功能。</li>
</ul>
<h3> 配置中心</h3>
<ul>
<li><a href="https://github.com/ctripcorp/apollo" title="apollo" target="_blank" rel="noopener noreferrer">Apollo</a>（推荐）：Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</li>
<li><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener noreferrer">Nacos</a>（推荐）：Nacos 是 Spring Cloud Alibaba 提供的服务注册发现组件，类似于 Consul、Eureka。并且，提供了分布式配置管理功能。</li>
<li><a href="https://github.com/spring-cloud/spring-cloud-config" target="_blank" rel="noopener noreferrer">Spring Cloud Config</a>：Spring Cloud Config 是 Spring Cloud 家族中最早的配置中心，虽然后来又发布了 Consul 可以代替配置中心功能，但是 Config 依然适用于 Spring Cloud 项目，通过简单的配置即可实现功能。</li>
<li><a href="https://github.com/hashicorp/consul" target="_blank" rel="noopener noreferrer">Consul</a>：Consul 是 HashiCorp 公司推出的开源软件，提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之 Consul 提供了一种完整的服务网格解决方案。</li>
</ul>
<h3> 链路追踪</h3>
<ul>
<li><a href="https://github.com/apache/skywalking" title="skywalking" target="_blank" rel="noopener noreferrer">Skywalking</a> : 针对分布式系统的应用性能监控，尤其是针对微服务、云原生和面向容器的分布式系统架构。</li>
<li><a href="https://github.com/openzipkin/zipkin" title="zipkin" target="_blank" rel="noopener noreferrer">Zipkin</a>：Zipkin 是一个分布式跟踪系统。它有助于收集解决服务体系结构中的延迟问题所需的时序数据。功能包括该数据的收集和查找。</li>
<li><a href="https://github.com/dianping/cat" title="cat" target="_blank" rel="noopener noreferrer">CAT</a>：CAT 作为服务端项目基础组件，提供了 Java, C/C++, Node.js, Python, Go 等多语言客户端，已经在美团点评的基础架构中间件框架（MVC 框架，RPC 框架，数据库框架，缓存框架等，消息队列，配置系统等）深度集成，为美团点评各业务线提供系统丰富的性能指标、健康状况、实时告警等。</li>
</ul>
<p>相关阅读：<a href="https://skywalking.apache.org/zh/blog/2019-03-29-introduction-of-skywalking-and-simple-practice.html" target="_blank" rel="noopener noreferrer">Skywalking 官网对于主流开源链路追踪系统的对比</a></p>
<h2> 高性能</h2>
<h3> 多线程</h3>
<ul>
<li><a href="https://github.com/opengoofy/hippo4j" target="_blank" rel="noopener noreferrer">Hippo4j</a>：异步线程池框架，支持线程池动态变更&amp;监控&amp;报警，无需修改代码轻松引入。支持多种使用模式，轻松引入，致力于提高系统运行保障能力。</li>
<li><a href="https://github.com/dromara/dynamic-tp" target="_blank" rel="noopener noreferrer">Dynamic Tp</a>：轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持 Nacos、Apollo，Zookeeper、Consul、Etcd，可通过 SPI 自定义实现）。</li>
<li><a href="https://gitee.com/jd-platform-opensource/asyncTool" target="_blank" rel="noopener noreferrer">asyncTool</a> : 京东的一位大佬开源的多线程工具库，里面大量使用到了 <code>CompletableFuture</code> ，可以解决任意的多线程并行、串行、阻塞、依赖、回调的并行框架，可以任意组合各线程的执行顺序，带全链路执行结果回调。</li>
</ul>
<h3> 缓存</h3>
<ul>
<li><a href="https://github.com/ben-manes/caffeine" target="_blank" rel="noopener noreferrer">Caffeine</a> : 一款强大的本地缓存解决方案，性能非常强大。</li>
<li><a href="https://github.com/redis/redis" target="_blank" rel="noopener noreferrer">Redis</a>：一个使用 C 语言开发的内存数据库，分布式缓存首选。</li>
</ul>
<h3> 消息队列</h3>
<p><strong>分布式队列</strong>：</p>
<ul>
<li><a href="https://github.com/apache/rocketmq" title="RocketMQ" target="_blank" rel="noopener noreferrer">RocketMQ</a>：阿里巴巴开源的一款高性能、高吞吐量的分布式消息中间件。</li>
<li><a href="https://github.com/apache/kafka" title="Kafaka" target="_blank" rel="noopener noreferrer">Kafaka</a>: Kafka 是一种分布式的，基于发布 / 订阅的消息系统。关于它的入门可以查看：<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/data-communication/Kafka%E5%85%A5%E9%97%A8%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86.md" title="Kafka入门看这一篇就够了" target="_blank" rel="noopener noreferrer">Kafka 入门看这一篇就够了</a></li>
<li><a href="https://github.com/rabbitmq" title="RabbitMQ" target="_blank" rel="noopener noreferrer">RabbitMQ</a> :由 erlang 开发的基于 AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列。</li>
</ul>
<p><strong>内存队列</strong>：</p>
<ul>
<li><a href="https://github.com/LMAX-Exchange/disruptor" target="_blank" rel="noopener noreferrer">Disruptor</a>：Disruptor 是英国外汇交易公司 LMAX 开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与 I/O 操作处于同样的数量级）。相关阅读：<a href="https://tech.meituan.com/2016/11/18/disruptor.html" target="_blank" rel="noopener noreferrer">《高性能内存队列——Disruptor》</a> 。</li>
</ul>
<p><strong>可视化管理工具</strong>：</p>
<ul>
<li><a href="https://github.com/obsidiandynamics/kafdrop" target="_blank" rel="noopener noreferrer">Kafdrop</a> : 一个用于查看 Kafka 主题和浏览消费者组的 Web UI。</li>
<li><a href="https://github.com/smartloli/EFAK" target="_blank" rel="noopener noreferrer">EFAK</a> （Eagle For Apache Kafka，以前叫做 Kafka Eagle）：一个简单的高性能监控系统，用于对 Kafka 集群进行全面的监控和管理。</li>
</ul>
<h3> 读写分离和分库分表</h3>
<ul>
<li><a href="https://github.com/apache/shardingsphere" target="_blank" rel="noopener noreferrer">ShardingSphere</a>：ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar（计划中）这 3 款相互独立的产品组成。</li>
<li><a href="https://github.com/MyCatApache/MyCat2" target="_blank" rel="noopener noreferrer">MyCat</a> : MyCat 是数据库分库分表的中间件，MyCat 使用最多的两个功能是：读写分离和分库分表。MyCat 是一些社区爱好者在阿里 Cobar 的基础上进行二次开发，解决了 Cobar 当时存 在的一些问题，并且加入了许多新的功能在其中。</li>
<li><a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter" target="_blank" rel="noopener noreferrer">dynamic-datasource-spring-boot-starter</a>：一个基于 Spring Boot 的快速集成多数据源的启动器，支持多数据源、动态数据源、主从分离、读写分离和分布式事务。</li>
</ul>
<h2> 高可用</h2>
<h3> 限流</h3>
<p>分布式限流：</p>
<ul>
<li><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener noreferrer">Sentinel</a>（推荐）：面向分布式服务架构的高可用防护组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助用户保障微服务的稳定性。</li>
<li><a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener noreferrer">Hystrix</a>：类似于 Sentinel 。</li>
</ul>
<p>相关阅读：<a href="https://sentinelguard.io/zh-cn/blog/sentinel-vs-hystrix.html" target="_blank" rel="noopener noreferrer">Sentinel 与 Hystrix 的对比</a>。</p>
<p>单机限流：</p>
<ul>
<li><a href="https://github.com/vladimir-bukhtoyarov/bucket4j" target="_blank" rel="noopener noreferrer">Bucket4j</a>：一个非常不错的基于令牌/漏桶算法的限流库。</li>
<li><a href="https://github.com/resilience4j/resilience4j" target="_blank" rel="noopener noreferrer">Resilience4j</a>：一个轻量级的容错组件，其灵感来自于 Hystrix。</li>
</ul>
<h3> 监控</h3>
<ul>
<li><a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener noreferrer">Spring Boot Admin</a>：管理和监控 Spring Boot 应用程序。</li>
<li><a href="https://github.com/dropwizard/metrics" target="_blank" rel="noopener noreferrer">Metrics</a>：捕获 JVM 和应用程序级别的指标。所以你知道发生了什么事。</li>
</ul>
<h3> 日志</h3>
<ul>
<li>EKL 老三件套 : 最原始的时候，ELK 是由 3 个开源项目的首字母构成，分别是 Elasticsearch、Logstash、Kibana。</li>
<li>新一代 ELK 架构 : Elasticsearch+Logstash+Kibana+Beats。</li>
<li>EFK : EFK 中的 F 代表的是 <a href="https://github.com/fluent/fluentd" target="_blank" rel="noopener noreferrer">Fluentd</a>。</li>
<li><a href="https://gitee.com/dromara/TLog" target="_blank" rel="noopener noreferrer">TLog</a>：一个轻量级的分布式日志标记追踪神器，10 分钟即可接入，自动对日志打标签完成微服务的链路追踪。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 优质开源工具类</title>
      <link>https://javaguide.cn/open-source-project/tool-library.html</link>
      <guid>https://javaguide.cn/open-source-project/tool-library.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 优质开源工具类</source>
      <description>代码质量 lombok :使用 Lombok 我们可以简化我们的 Java 代码，比如使用它之后我们通过注释就可以实现 getter/setter、equals 等方法。 guava：Guava 是一组核心库，其中包括新的集合类型（例如 multimap 和 multiset），不可变集合，图形库以及用于并发、I / O、哈希、原始类型、字符串等的实用程序！ hutool : Hutool 是一个 Java 工具包，也只是一个工具包，它帮助我们简化每一行代码，减少每一个方法，让 Java 语言也可以“甜甜的”。 p3c：Alibaba Java Coding Guidelines pmd implements and IDE plugin。Eclipse 和 IDEA 上都有该插件，推荐使用！ arthas：Arthas 是 Alibaba 开源的 Java 诊断工具。 sonarqube：SonarQube 支持所有开发人员编写更干净，更安全的代码。 checkstyle :Checkstyle 是一种开发工具，可帮助程序员编写符合编码标准的 Java 代码。它使检查 Java 代码的过程自动化，从而使人们不必执行这项无聊（但很重要）的任务。这使其成为想要实施编码标准的项目的理想选择。 pmd : 可扩展的多语言静态代码分析器。 spotbugs :SpotBugs 是 FindBugs 的继任者。静态分析工具，用于查找 Java 代码中的错误。</description>
      <category>开源项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 代码质量</h2>
<ul>
<li><a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener noreferrer">lombok</a> :使用 Lombok 我们可以简化我们的 Java 代码，比如使用它之后我们通过注释就可以实现 getter/setter、equals 等方法。</li>
<li><a href="https://github.com/google/guava" title="guava" target="_blank" rel="noopener noreferrer">guava</a>：Guava 是一组核心库，其中包括新的集合类型（例如 multimap 和 multiset），不可变集合，图形库以及用于并发、I / O、哈希、原始类型、字符串等的实用程序！</li>
<li><a href="https://github.com/looly/hutool" title="hutool" target="_blank" rel="noopener noreferrer">hutool</a> : Hutool 是一个 Java 工具包，也只是一个工具包，它帮助我们简化每一行代码，减少每一个方法，让 Java 语言也可以“甜甜的”。</li>
<li><a href="https://github.com/alibaba/p3c" title="p3c" target="_blank" rel="noopener noreferrer">p3c</a>：Alibaba Java Coding Guidelines pmd implements and IDE plugin。Eclipse 和 IDEA 上都有该插件，推荐使用！</li>
<li><a href="https://github.com/alibaba/arthas" title="arthas" target="_blank" rel="noopener noreferrer">arthas</a>：Arthas 是 Alibaba 开源的 Java 诊断工具。</li>
<li><a href="https://github.com/SonarSource/sonarqube" title="sonarqube" target="_blank" rel="noopener noreferrer">sonarqube</a>：SonarQube 支持所有开发人员编写更干净，更安全的代码。</li>
<li><a href="https://github.com/checkstyle/checkstyle" title="checkstyle" target="_blank" rel="noopener noreferrer">checkstyle</a> :Checkstyle 是一种开发工具，可帮助程序员编写符合编码标准的 Java 代码。它使检查 Java 代码的过程自动化，从而使人们不必执行这项无聊（但很重要）的任务。这使其成为想要实施编码标准的项目的理想选择。</li>
<li><a href="https://github.com/pmd/pmd" title="pmd" target="_blank" rel="noopener noreferrer">pmd</a> : 可扩展的多语言静态代码分析器。</li>
<li><a href="https://github.com/spotbugs/spotbugs" title="spotbugs" target="_blank" rel="noopener noreferrer">spotbugs</a> :SpotBugs 是 FindBugs 的继任者。静态分析工具，用于查找 Java 代码中的错误。</li>
</ul>
<h2> 文档处理</h2>
<h3> Excel</h3>
<ul>
<li><a href="https://github.com/alibaba/easyexcel" target="_blank" rel="noopener noreferrer">easyexcel</a> :快速、简单避免 OOM 的 Java 处理 Excel 工具。</li>
<li><a href="https://github.com/monitorjbl/excel-streaming-reader" target="_blank" rel="noopener noreferrer">excel-streaming-reader</a>：Excel 流式代码风格读取工具（只支持读取 XLSX 文件），基于 Apache POI 封装，同时保留标准 POI API 的语法。</li>
<li><a href="https://github.com/liaochong/myexcel" target="_blank" rel="noopener noreferrer">myexcel</a>：一个集导入、导出、加密 Excel 等多项功能的工具包。</li>
</ul>
<h3> JSON</h3>
<ul>
<li><a href="https://github.com/json-path/JsonPath" target="_blank" rel="noopener noreferrer">JsonPath</a>：处理 JSON 数据的工具库。</li>
</ul>
<h3> PDF</h3>
<ul>
<li><a href="https://github.com/apache/pdfbox" target="_blank" rel="noopener noreferrer">pdfbox</a> :用于处理 PDF 文档的开放源码 Java 工具。该项目允许创建新的 PDF 文档、对现有文档进行操作以及从文档中提取内容。PDFBox 还包括几个命令行实用程序。PDFBox 是在 Apache 2.0 版许可下发布的。</li>
<li><a href="https://github.com/LibrePDF/OpenPDF" target="_blank" rel="noopener noreferrer">OpenPDF</a>：OpenPDF 是一个免费的 Java 库，用于使用 LGPL 和 MPL 开源许可创建和编辑 PDF 文件。OpenPDF 基于 iText 的一个分支。</li>
<li><a href="https://github.com/itext/itext7" target="_blank" rel="noopener noreferrer">itext7</a>：iText 7 代表了想要利用利用好 PDF 的开发人员的更高级别的 sdk。iText 7 配备了更好的文档引擎、高级和低级编程功能以及创建、编辑和增强 PDF 文档的能力，几乎对每个工作流都有好处。</li>
<li><a href="https://xmlgraphics.apache.org/fop/" target="_blank" rel="noopener noreferrer">FOP</a> :Apache FOP 项目的主要的输出目标是 PDF。</li>
</ul>
<h2> 图片处理</h2>
<ul>
<li><a href="https://github.com/coobird/thumbnailator" target="_blank" rel="noopener noreferrer">Thumbnailator</a>：一个图像处理工具库，主要功能是缩放图像、添加水印、旋转图像、调整图片大小以及区域裁剪。</li>
<li><a href="https://github.com/nackily/imglib" target="_blank" rel="noopener noreferrer">Imglib</a>：一个轻量级的 JAVA 图像处理库，致力于简化对图像的常见处理，主要提供三部分的能力：图像收集、图像处理（基于 Thumbnailator 实现）、聚合与分裂。</li>
</ul>
<h2> 验证码</h2>
<ul>
<li><a href="https://gitee.com/whvse/EasyCaptcha" target="_blank" rel="noopener noreferrer">EasyCaptcha</a>：Java 图形验证码，支持 gif、中文、算术等类型，可用于 Java Web、JavaSE 等项目。</li>
<li><a href="https://gitee.com/anji-plus/captcha" target="_blank" rel="noopener noreferrer">AJ-Captcha</a>：行为验证码(滑动拼图、点选文字)，前后端(java)交互。</li>
<li><a href="https://gitee.com/tianai/tianai-captcha" target="_blank" rel="noopener noreferrer">tianai-captcha</a>：好看又好用的滑块验证码。</li>
</ul>
<h2> 在线支付</h2>
<ul>
<li><a href="https://gitee.com/jeequan/jeepay" target="_blank" rel="noopener noreferrer">jeepay</a>：一套适合互联网企业使用的开源支付系统，已实现交易、退款、转账、分账等接口，支持服务商特约商户和普通商户接口。已对接微信，支付宝，云闪付官方接口，支持聚合码支付。</li>
<li><a href="https://gitee.com/YunGouOS/YunGouOS-PAY-SDK" target="_blank" rel="noopener noreferrer">YunGouOS-PAY-SDK</a>：YunGouOS 微信支付接口、微信官方个人支付接口、非二维码收款，非第四方清算。个人用户可提交资料开通微信支付商户，完成对接。</li>
<li><a href="https://gitee.com/javen205/IJPay" target="_blank" rel="noopener noreferrer">IJPay</a>：聚合支付，IJPay 让支付触手可及，封装了微信支付、QQ 支付、支付宝支付、京东支付、银联支付、PayPal 支付等常用的支付方式以及各种常用的接口。</li>
</ul>
<h2> 其他</h2>
<ul>
<li><a href="https://github.com/oshi/oshi" title="oshi" target="_blank" rel="noopener noreferrer">oshi</a>：一款为 Java 语言提供的基于 JNA 的（本机）操作系统和硬件信息库。</li>
<li><a href="https://github.com/lionsoul2014/ip2region" target="_blank" rel="noopener noreferrer">ip2region</a> :最自由的 ip 地址查询库，ip 到地区的映射库，提供 Binary,B 树和纯内存三种查询算法，妈妈再也不用担心我的 ip 地址定位。</li>
<li><a href="https://github.com/real-logic/agrona" target="_blank" rel="noopener noreferrer">agrona</a>：Java 高性能数据结构（<code>Buffers</code>、<code>Lists</code>、<code>Maps</code>、<code>Scalable Timer Wheel</code>......）和实用方法。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 优质开源开发工具</title>
      <link>https://javaguide.cn/open-source-project/tools.html</link>
      <guid>https://javaguide.cn/open-source-project/tools.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 优质开源开发工具</source>
      <description>项目构建 Maven：一个软件项目管理和理解工具。基于项目对象模型 (Project Object Model，POM) 的概念，Maven 可以从一条中心信息管理项目的构建、报告和文档。详细介绍：Maven核心概念总结。 Gradle ：一个开源的构建自动化工具，它足够灵活，可以构建几乎任何类型的软件。Gradle 对你要构建什么或者如何构建它做了很少的假设，这使得 Gradle 特别灵活。详细介绍：Gradle核心概念总结。</description>
      <category>开源项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 项目构建</h2>
<ul>
<li><a href="https://maven.apache.org/" target="_blank" rel="noopener noreferrer">Maven</a>：一个软件项目管理和理解工具。基于项目对象模型 (Project Object Model，POM) 的概念，Maven 可以从一条中心信息管理项目的构建、报告和文档。详细介绍：<a href="https://javaguide.cn/tools/maven/maven-core-concepts.html" target="_blank" rel="noopener noreferrer">Maven核心概念总结</a>。</li>
<li><a href="https://gradle.org/" target="_blank" rel="noopener noreferrer">Gradle</a> ：一个开源的构建自动化工具，它足够灵活，可以构建几乎任何类型的软件。Gradle 对你要构建什么或者如何构建它做了很少的假设，这使得 Gradle 特别灵活。详细介绍：<a href="https://javaguide.cn/tools/gradle/gradle-core-concepts.html" target="_blank" rel="noopener noreferrer">Gradle核心概念总结</a>。</li>
</ul>
<h2> 反编译</h2>
<ul>
<li><a href="https://github.com/skylot/jadx" target="_blank" rel="noopener noreferrer">JADX</a>：用于从 Android Dex 和 Apk 文件生成 Java 源代码的命令行和 GUI 工具。</li>
<li><a href="https://github.com/java-decompiler/jd-gui" target="_blank" rel="noopener noreferrer">JD-GUI</a>:一个独立的 GUI 工具，可显示 CLASS 文件中的 Java 源代码。</li>
</ul>
<h2> 数据库</h2>
<h3> 数据库建模</h3>
<ul>
<li><a href="https://gitee.com/robergroup/chiner" target="_blank" rel="noopener noreferrer">CHINER</a>：开源免费的国产数据库建模工具。目标是做一款丰富数据库生态，独立于具体数据库之外的，数据库关系模型设计平台。前生是 <a href="https://gitee.com/robergroup/pdman" target="_blank" rel="noopener noreferrer">PDMan</a>，定位为 PowerDesigner 的免费替代方案。</li>
</ul>
<p>开源的数据库建模工具比较少，以下是一些非开源的数据库建模工具（部分需要付费才能使用） :</p>
<ul>
<li><a href="https://www.mysql.com/products/workbench/" target="_blank" rel="noopener noreferrer">MySQL Workbench</a> : MySQL 官方为数据库架构师、开发人员和 DBA 提供的一个可视化工具。 MySQL Workbench 支持数据建模，SQL 开发以及服务器配置、用户管理、性能优化、数据库备份以及迁移等功能，支持 Windows、Linux 和 Mac OS X 平台。</li>
<li><a href="https://www.navicat.com.cn/products/navicat-data-modeler" target="_blank" rel="noopener noreferrer">Navicat Data Modeler</a> : 一款强大的和符合成本效益的数据库设计工具，它能帮助用户创建高质素的概念、逻辑和物理数据模型。让你可视化地设计数据库结构、执行逆向或正向工程程序、从 ODBC 数据源导入模型、生成复杂的 SQL/DDL 和打印模型到文件等。付费。</li>
<li><a href="https://dbschema.com/" target="_blank" rel="noopener noreferrer">DbSchema</a> : 一款功能强大的数据库设计和管理的可视化工具，支持几乎所有的关系型和 NoSQL 数据库。付费。</li>
<li><a href="https://dbdiagram.io/home" target="_blank" rel="noopener noreferrer">dbdiagram.io</a> : 是一款简单免费的在线 ER 图绘制工具，通过编写代码创建模型，专为开发人员和数据分析师而设计。它通过一个简单的自定义语言来生成数据模型，支持 MySQL、PostgreSQL、SQL Server 数据库 DDL 文件的正向工程和逆向工程、版本历史、在线共享、导出图片或者 PDF 等功能。dbdiagram.io 提供了免费版。</li>
</ul>
<h3> 数据库管理</h3>
<ul>
<li><a href="https://github.com/alibaba/Chat2DB" target="_blank" rel="noopener noreferrer">Chat2DB</a>：阿里巴巴开源的一款智能的通用数据库工具和 SQL 客户端，支持 Windows、Mac 本地安装，也支持服务器端部署，Web 网页访问。和传统的数据库客户端软件 Navicat、DBeaver 相比 Chat2DB 集成了 AIGC 的能力，支持自然语言生成 SQL、SQL 性能优化等功能。</li>
<li><a href="https://github.com/beekeeper-studio/beekeeper-studio" target="_blank" rel="noopener noreferrer">Beekeeper Studio</a>：跨平台数据库管理工具，颜值高，支持 SQLite、MySQL、MariaDB、Postgres、CockroachDB、SQL Server、Amazon Redshift。</li>
<li><a href="https://github.com/sequelpro/sequelpro" target="_blank" rel="noopener noreferrer">Sequel Pro</a>：适用于 macOS 的 MySQL/MariaDB 数据库管理工具。</li>
<li><a href="https://github.com/dbeaver/dbeaver" target="_blank" rel="noopener noreferrer">DBeaver</a>：一个基于 Java 开发 ，并且支持几乎所有的数据库产品的开源数据库管理工具。DBeaver 社区版不光支持关系型数据库比如 MySQL、PostgreSQL、MariaDB、SQLite、Oracle、Db2、SQL Server，还比如 SQLite、H2 这些内嵌数据库。还支持常见的全文搜索引擎比如 Elasticsearch 和 Solr、大数据相关的工具比如 Hive 和 Spark。</li>
<li><a href="https://gitee.com/dbkangaroo/kangaroo" target="_blank" rel="noopener noreferrer">Kangaroo</a>：袋鼠是一款为热门数据库系统打造的管理客户端(SQLite / MySQL / PostgreSQL / ...) ，支持建表、查询、模型、同步、导入导出等功能，支持 Windows / Mac / Linux 等操作系统，力求打造成好用、好玩、开发友好的 SQL 工具。</li>
<li><a href="https://arctype.com/" target="_blank" rel="noopener noreferrer">Arctype</a>：一个桌面的数据库查询工具，可以连接各种数据库，在其中执行 SQL 语句，以可视化形式展示数据。</li>
<li><a href="https://github.com/RenzHoly/Mongood" target="_blank" rel="noopener noreferrer">Mongood</a> : MongoDB 图形化的管理工具。基于微软 Fluent UI，支持自动黑暗模式。</li>
</ul>
<h3> Redis</h3>
<ul>
<li><a href="https://github.com/qishibo/AnotherRedisDesktopManager/blob/master/README.zh-CN.md" target="_blank" rel="noopener noreferrer">Another Redis Desktop Manager</a>：更快、更好、更稳定的 Redis 桌面(GUI)管理客户端。</li>
<li><a href="https://github.com/ngbdf/redis-manager" target="_blank" rel="noopener noreferrer">Redis Manager</a>：Redis 一站式管理平台，支持集群（cluster、master-replica、sentinel）的监控、安装（除 sentinel）、管理、告警以及基本的数据操作功能。</li>
</ul>
<h2> Docker</h2>
<ul>
<li><a href="https://github.com/portainer/portainer" target="_blank" rel="noopener noreferrer">Portainer</a>：可视化管理 Docker，Web 应用的形式。</li>
<li><a href="https://github.com/jesseduffield/lazydocker" target="_blank" rel="noopener noreferrer">lazydocker</a>：适用于 docker 和 docker-compose 的简单终端 UI。</li>
</ul>
<h2> ZooKeeper</h2>
<ul>
<li><a href="https://github.com/vran-dev/PrettyZoo" target="_blank" rel="noopener noreferrer">PrettyZoo</a>：一个基于 Apache Curator 和 JavaFX 实现的 ZooKeeper 图形化管理客户端，颜值非常高，支持 Mac / Windows / Linux 。你可以使用 PrettyZoo 来实现对 ZooKeeper 的可视化增删改查。</li>
<li><a href="https://zktools.readthedocs.io/en/latest/#installing" target="_blank" rel="noopener noreferrer">zktools</a>：一个低延迟的 ZooKeeper 图形化管理客户端，颜值非常高，支持 Mac / Windows / Linux 。你可以使用 zktools 来实现对 ZooKeeper 的可视化增删改查。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 优质开源技术教程</title>
      <link>https://javaguide.cn/open-source-project/tutorial.html</link>
      <guid>https://javaguide.cn/open-source-project/tutorial.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 优质开源技术教程</source>
      <description>Java JavaGuide :【Java 学习+面试指南】 一份涵盖大部分 Java 程序员所需要掌握的核心知识。 toBeBetterJavaer：一份通俗易懂、风趣幽默的 Java 学习指南，内容涵盖 Java 基础、Java 集合框架、Java 并发编程、JVM、Java 企业级开发（Git、SSM、Spring Boot）等知识点。 interview-guide：总结了后端面试八股文中的重点，希望能帮助各位准备互联网开发岗校招面试的同学。 advanced-java :互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识。 toBeTopJavaer：Java 工程师成神之路 。 technology-talk : 汇总 java 生态圈常用技术框架、开源中间件，系统架构、数据库、大公司架构案例、常用三方类库、项目管理、线上问题排查、个人成长、思考等知识 JCSprout :处于萌芽阶段的 Java 核心知识库。 bestJavaer : 这是一个成为更好的 Java 程序员的系列教程。 java-design-patterns：用 Java 实现的设计模式。</description>
      <category>开源项目</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Java</h2>
<ul>
<li><a href="https://github.com/Snailclimb/JavaGuide" title="JavaGuide" target="_blank" rel="noopener noreferrer">JavaGuide</a> :【Java 学习+面试指南】 一份涵盖大部分 Java 程序员所需要掌握的核心知识。</li>
<li><a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noopener noreferrer">toBeBetterJavaer</a>：一份通俗易懂、风趣幽默的 Java 学习指南，内容涵盖 Java 基础、Java 集合框架、Java 并发编程、JVM、Java 企业级开发（Git、SSM、Spring Boot）等知识点。</li>
<li><a href="https://github.com/csguide-dabai/interview-guide" target="_blank" rel="noopener noreferrer">interview-guide</a>：总结了后端面试八股文中的重点，希望能帮助各位准备互联网开发岗校招面试的同学。</li>
<li><a href="https://github.com/doocs/advanced-java" title="advanced-java" target="_blank" rel="noopener noreferrer">advanced-java</a> :互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识。</li>
<li><a href="https://github.com/hollischuang/toBeTopJavaer" title="toBeTopJavaer" target="_blank" rel="noopener noreferrer">toBeTopJavaer</a>：Java 工程师成神之路 。</li>
<li><a href="https://github.com/aalansehaiyang/technology-talk" target="_blank" rel="noopener noreferrer">technology-talk</a> : 汇总 java 生态圈常用技术框架、开源中间件，系统架构、数据库、大公司架构案例、常用三方类库、项目管理、线上问题排查、个人成长、思考等知识</li>
<li><a href="https://github.com/crossoverJie/JCSprout" target="_blank" rel="noopener noreferrer">JCSprout</a> :处于萌芽阶段的 Java 核心知识库。</li>
<li><a href="https://github.com/crisxuan/bestJavaer" target="_blank" rel="noopener noreferrer">bestJavaer</a> : 这是一个成为更好的 Java 程序员的系列教程。</li>
<li><a href="https://github.com/iluwatar/java-design-patterns" title="java-design-patterns" target="_blank" rel="noopener noreferrer">java-design-patterns</a>：用 Java 实现的设计模式。</li>
</ul>
<h2> 计算机基础</h2>
<ul>
<li><a href="https://github.com/PKUFlyingPig/cs-self-learning" target="_blank" rel="noopener noreferrer">cs-self-learning</a>：计算机自学指南，汇总欧美众多名校高质量计算机课程。</li>
<li><a href="https://github.com/CyC2018/CS-Notes" title="CS-Notes" target="_blank" rel="noopener noreferrer">CS-Notes</a>：技术面试必备基础知识、Leetcode 题解、后端面试、Java 面试、春招、秋招、操作系统、计算机网络、系统设计。</li>
<li><a href="https://github.com/wolverinn/Waking-Up" target="_blank" rel="noopener noreferrer">Waking-Up</a>：计算机基础（计算机网络/操作系统/数据库/Git...）面试问题全面总结。</li>
</ul>
<h2> 系统设计</h2>
<h3> SpringBoot</h3>
<ul>
<li><a href="https://github.com/Snailclimb/springboot-guide" target="_blank" rel="noopener noreferrer">springboot-guide</a>：SpringBoot 核心知识点总结。 基于 Spring Boot 2.19+。</li>
<li><a href="https://github.com/wuyouzhuguli/SpringAll" title="SpringAll" target="_blank" rel="noopener noreferrer">SpringAll</a>：循序渐进，学习 Spring Boot、Spring Boot &amp; Shiro、Spring Cloud、Spring Security &amp; Spring Security OAuth2，博客 Spring 系列源码。</li>
<li><a href="https://github.com/chengxy-nds/Springboot-Notebook" target="_blank" rel="noopener noreferrer">Springboot-Notebook</a> :一系列以 Spring Boot 为基础开发框架，整合 Redis、 Rabbitmq、ES、MongoDB、Spring Cloud、Kafka、Skywalking 等互联网主流技术，实现各种常见功能点的综合性案例。</li>
<li><a href="https://github.com/JeffLi1993/springboot-learning-example" title="springboot-learning-example" target="_blank" rel="noopener noreferrer">springboot-learning-example</a>：Spring Boot 实践学习案例，是 Spring Boot 初学者及核心技术巩固的最佳实践。</li>
<li><a href="https://github.com/xkcoding/spring-boot-demo" title="spring-boot-demo" target="_blank" rel="noopener noreferrer">spring-boot-demo</a>：spring boot demo 是一个用来深度学习并实战 spring boot 的项目，目前总共包含 63 个集成 demo，已经完成 52 个。</li>
<li><a href="https://github.com/YunaiV/SpringBoot-Labs" target="_blank" rel="noopener noreferrer">SpringBoot-Labs</a>：Spring Boot 系列教程。</li>
</ul>
<p>相关文章：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247488298&amp;idx=3&amp;sn=0a8fd88ec5a050de131c2a3305482ac4&amp;chksm=cea25ce1f9d5d5f7f53a0237d27489326bce4546353b038085c03b086d91ef396bf824d3a155&amp;token=496868067&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">GitHub 点赞接近 100k 的 SpringBoot 学习教程+实战推荐！牛批！</a></p>
<h3> SpringCloud</h3>
<ul>
<li><a href="https://github.com/forezp/SpringCloudLearning" title="SpringCloudLearning" target="_blank" rel="noopener noreferrer">SpringCloudLearning</a> : 方志朋的《史上最简单的 Spring Cloud 教程源码》。</li>
<li><a href="https://github.com/macrozheng/springcloud-learning" target="_blank" rel="noopener noreferrer">springcloud-learning</a> : 一套涵盖大部分核心组件使用的 Spring Cloud 教程。</li>
<li><a href="https://github.com/zhoutaoo/SpringCloud" title="SpringCloud" target="_blank" rel="noopener noreferrer">SpringCloud</a>：基于 SpringCloud2.1 的微服务开发脚手架，整合了 spring-security-oauth2、nacos、feign、sentinel、springcloud-gateway 等。</li>
</ul>
<p>相关文章：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247488377&amp;idx=1&amp;sn=0fb33ef330159db5a9c8bc0f029cd739&amp;chksm=cea25cb2f9d5d5a4c7bacc9dcfc90ed86e89f4262e32b40c7aa47af84c747cb6c0429f753e1d&amp;token=496868067&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">GitHub 点赞接近 70k 的 Spring Cloud 学习教程+实战项目推荐！牛批！</a></p>
<h3> Nginx</h3>
<ul>
<li><a href="https://github.com/dunwu/nginx-tutorial" target="_blank" rel="noopener noreferrer">nginx-tutorial</a>：一系列 Nginx 极简教程，包含 HTTP 反向代理、HTTPS 反向代理、负载均衡、静态站点、文件服务器搭建等实战内容。</li>
</ul>
<h2> 大数据</h2>
<ul>
<li><a href="https://github.com/heibaiying/BigData-Notes" title="BigData-Notes" target="_blank" rel="noopener noreferrer">BigData-Notes</a> :大数据入门指南 ⭐️。</li>
<li><a href="https://github.com/zhisheng17/flink-learning" title="flink-learning" target="_blank" rel="noopener noreferrer">flink-learning</a>：含 Flink 入门、概念、原理、实战、性能调优、源码解析等内容。</li>
</ul>
<h2> 开源书籍</h2>
<ul>
<li><a href="https://github.com/johnlui/PPHC" target="_blank" rel="noopener noreferrer">《高并发的哲学原理》</a>：本书的目标是在作者有限的认知范围内，讨论一下高并发问题背后隐藏的一个哲学原理——找出单点，进行拆分。</li>
<li><a href="https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual" target="_blank" rel="noopener noreferrer">《Effective Java（第 3 版）》中英对照版</a>：《Effective Java（第 3 版）各章节的中英文学习参考。</li>
<li><a href="https://github.com/Vonng/ddia" target="_blank" rel="noopener noreferrer">《DDIA（设计数据密集型应用）》中文版</a>：《Designing Data-Intensive Application》DDIA 中文翻译。</li>
<li><a href="https://github.com/fenixsoft/awesome-fenix" target="_blank" rel="noopener noreferrer">《凤凰架构》</a>：讨论如何构建一套可靠的大型分布式系统。</li>
<li><a href="https://github.com/dreamhead/patterns-of-distributed-systems" target="_blank" rel="noopener noreferrer">《分布式系统模式》中文版</a>：《Patterns of Distributed Systems》中文翻译。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://javaguide.cn/system-design/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</link>
      <guid>https://javaguide.cn/system-design/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</guid>
      <source url="https://javaguide.cn/rss.xml"></source>
      <description>Servlet 总结 在 Java Web 程序中，Servlet主要负责接收用户请求 HttpServletRequest,在doGet(),doPost()中做相应的处理，并将回应HttpServletResponse反馈给用户。Servlet 可以设置初始化参数，供 Servlet 内部使用。一个 Servlet 类只会有一个实例，在它初始化时调用init()方法，销毁时调用destroy()方法**。**Servlet 需要在 web.xml 中配置（MyEclipse 中创建 Servlet 会自动配置），一个 Servlet 可以设置多个 URL 访问。Servlet 不是线程安全，因此要谨慎使用类变量。</description>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Servlet 总结</h2>
<p>在 Java Web 程序中，<strong>Servlet</strong>主要负责接收用户请求 <code>HttpServletRequest</code>,在<code>doGet()</code>,<code>doPost()</code>中做相应的处理，并将回应<code>HttpServletResponse</code>反馈给用户。<strong>Servlet</strong> 可以设置初始化参数，供 Servlet 内部使用。一个 Servlet 类只会有一个实例，在它初始化时调用<code>init()</code>方法，销毁时调用<code>destroy()</code>方法**。**Servlet 需要在 web.xml 中配置（MyEclipse 中创建 Servlet 会自动配置），<strong>一个 Servlet 可以设置多个 URL 访问</strong>。<strong>Servlet 不是线程安全</strong>，因此要谨慎使用类变量。</p>
<h2> 阐述 Servlet 和 CGI 的区别?</h2>
<h3> CGI 的不足之处</h3>
<p>1，需要为每个请求启动一个操作 CGI 程序的系统进程。如果请求频繁，这将会带来很大的开销。</p>
<p>2，需要为每个请求加载和运行一个 CGI 程序，这将带来很大的开销</p>
<p>3，需要重复编写处理网络协议的代码以及编码，这些工作都是非常耗时的。</p>
<h3> Servlet 的优点</h3>
<p>1，只需要启动一个操作系统进程以及加载一个 JVM，大大降低了系统的开销</p>
<p>2，如果多个请求需要做同样处理的时候，这时候只需要加载一个类，这也大大降低了开销</p>
<p>3，所有动态加载的类可以实现对网络协议以及请求解码的共享，大大降低了工作量。</p>
<p>4，Servlet 能直接和 Web 服务器交互，而普通的 CGI 程序不能。Servlet 还能在各个程序之间共享数据，使数据库连接池之类的功能很容易实现。</p>
<p>补充：Sun Microsystems 公司在 1996 年发布 Servlet 技术就是为了和 CGI 进行竞争，Servlet 是一个特殊的 Java 程序，一个基于 Java 的 Web 应用通常包含一个或多个 Servlet 类。Servlet 不能够自行创建并执行，它是在 Servlet 容器中运行的，容器将用户的请求传递给 Servlet 程序，并将 Servlet 的响应回传给用户。通常一个 Servlet 会关联一个或多个 JSP 页面。以前 CGI 经常因为性能开销上的问题被诟病，然而 Fast CGI 早就已经解决了 CGI 效率上的问题，所以面试的时候大可不必信口开河的诟病 CGI，事实上有很多你熟悉的网站都使用了 CGI 技术。</p>
<p>参考：《javaweb 整合开发王者归来》P7</p>
<h2> Servlet 接口中有哪些方法及 Servlet 生命周期探秘</h2>
<p>Servlet 接口定义了 5 个方法，其中<strong>前三个方法与 Servlet 生命周期相关</strong>：</p>
<ul>
<li><code>void init(ServletConfig config) throws ServletException</code></li>
<li><code>void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException</code></li>
<li><code>void destroy()</code></li>
<li><code>java.lang.String getServletInfo()</code></li>
<li><code>ServletConfig getServletConfig()</code></li>
</ul>
<p><strong>生命周期：</strong> <strong>Web 容器加载 Servlet 并将其实例化后，Servlet 生命周期开始</strong>，容器运行其<strong>init()方法</strong>进行 Servlet 的初始化；请求到达时调用 Servlet 的<strong>service()方法</strong>，service()方法会根据需要调用与请求对应的<strong>doGet 或 doPost</strong>等方法；当服务器关闭或项目被卸载时服务器会将 Servlet 实例销毁，此时会调用 Servlet 的<strong>destroy()方法</strong>。<strong>init 方法和 destroy 方法只会执行一次，service 方法客户端每次请求 Servlet 都会执行</strong>。Servlet 中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入 init 方法中，销毁资源的代码放入 destroy 方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。</p>
<p>参考：《javaweb 整合开发王者归来》P81</p>
<h2> get 和 post 请求的区别</h2>
<p>get 和 post 请求实际上是没有区别，大家可以自行查询相关文章（参考文章：<a href="https://www.cnblogs.com/logsharing/p/8448446.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/logsharing/p/8448446.html</a>，知乎对应的问题链接：<a href="https://www.zhihu.com/question/28586791" target="_blank" rel="noopener noreferrer">get 和 post 区别？</a>）！</p>
<p>可以把 get 和 post 当作两个不同的行为，两者并没有什么本质区别，底层都是 TCP 连接。 get 请求用来从服务器上获得资源，而 post 是用来向服务器提交数据。比如你要获取人员列表可以用 get 请求，你需要创建一个人员可以用 post 。这也是 Restful API 最基本的一个要求。</p>
<p>推荐阅读：</p>
<ul>
<li><a href="https://www.zhihu.com/question/28586791" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/28586791</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd</a></li>
</ul>
<h2> 什么情况下调用 doGet()和 doPost()</h2>
<p>Form 标签里的 method 的属性为 get 时调用 doGet()，为 post 时调用 doPost()。</p>
<h2> 转发(Forward)和重定向(Redirect)的区别</h2>
<p><strong>转发是服务器行为，重定向是客户端行为。</strong></p>
<p><strong>转发（Forward）</strong>
通过 RequestDispatcher 对象的 forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher 可以通过 HttpServletRequest 的 getRequestDispatcher()方法获得。例如下面的代码就是跳转到 login_success.jsp 页面。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重定向（Redirect）</strong> 是利用服务器返回的状态码来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过 <code>HttpServletResponse</code> 的 <code>setStatus(int status)</code> 方法设置状态码。如果服务器返回 301 或者 302，则浏览器会到新的网址重新请求该资源。</p>
<ol>
<li>
<p><strong>从地址栏显示来说</strong></p>
<p>forward 是服务器请求资源,服务器直接访问目标地址的 URL,把那个 URL 的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址.
redirect 是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的 URL.</p>
</li>
<li>
<p><strong>从数据共享来说</strong></p>
<p>forward:转发页面和转发到的页面可以共享 request 里面的数据.
redirect:不能共享数据.</p>
</li>
<li>
<p><strong>从运用地方来说</strong></p>
<p>forward:一般用于用户登陆的时候,根据角色转发到相应的模块.
redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等</p>
</li>
<li>
<p>从效率来说</p>
<p>forward:高.
redirect:低.</p>
</li>
</ol>
<h2> 自动刷新(Refresh)</h2>
<p>自动刷新不仅可以实现一段时间之后自动跳转到另一个页面，还可以实现一段时间之后自动刷新本页面。Servlet 中通过 HttpServletResponse 对象设置 Header 属性实现自动刷新例如：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 5 为时间，单位为秒。URL 指定就是要跳转的页面（如果设置自己的路径，就会实现每过 5 秒自动刷新本页面一次）</p>
<h2> Servlet 与线程安全</h2>
<p><strong>Servlet 不是线程安全的，多线程并发的读写会导致数据不同步的问题。</strong> 解决的办法是尽量不要定义 name 属性，而是要把 name 变量分别定义在 doGet()和 doPost()方法内。虽然使用 synchronized(name){}语句块可以解决问题，但是会造成线程的等待，不是很科学的办法。
注意：多线程的并发的读写 Servlet 类属性会导致数据不同步。但是如果只是并发地读取属性而不写入，则不存在数据不同步的问题。因此 Servlet 里的只读属性最好定义为 final 类型的。</p>
<p>参考：《javaweb 整合开发王者归来》P92</p>
<h2> JSP 和 Servlet 是什么关系</h2>
<p>其实这个问题在上面已经阐述过了，Servlet 是一个特殊的 Java 程序，它运行于服务器的 JVM 中，能够依靠服务器的支持向浏览器提供显示内容。JSP 本质上是 Servlet 的一种简易形式，JSP 会被服务器处理成一个类似于 Servlet 的 Java 程序，可以简化页面内容的生成。Servlet 和 JSP 最主要的不同点在于，Servlet 的应用逻辑是在 Java 文件中，并且完全从表示层中的 HTML 分离开来。而 JSP 的情况是 Java 和 HTML 可以组合成一个扩展名为.jsp 的文件。有人说，Servlet 就是在 Java 中写 HTML，而 JSP 就是在 HTML 中写 Java 代码，当然这个说法是很片面且不够准确的。JSP 侧重于视图，Servlet 更侧重于控制逻辑，在 MVC 架构模式中，JSP 适合充当视图（view）而 Servlet 适合充当控制器（controller）。</p>
<h2> JSP 工作原理</h2>
<p>JSP 是一种 Servlet，但是与 HttpServlet 的工作方式不太一样。HttpServlet 是先由源代码编译为 class 文件后部署到服务器下，为先编译后部署。而 JSP 则是先部署后编译。JSP 会在客户端第一次请求 JSP 文件时被编译为 HttpJspPage 类（接口 Servlet 的一个子类）。该类会被服务器临时存放在服务器工作目录里面。下面通过实例给大家介绍。
工程 JspLoginDemo 下有一个名为 login.jsp 的 Jsp 文件，把工程第一次部署到服务器上后访问这个 Jsp 文件，我们发现这个目录下多了下图这两个东东。
.class 文件便是 JSP 对应的 Servlet。编译完毕后再运行 class 文件来响应客户端请求。以后客户端访问 login.jsp 的时候，Tomcat 将不再重新编译 JSP 文件，而是直接调用 class 文件来响应客户端请求。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/1.jpeg" alt="JSP工作原理" tabindex="0"><figcaption>JSP工作原理</figcaption></figure>
<p>由于 JSP 只会在客户端第一次请求的时候被编译 ，因此第一次请求 JSP 时会感觉比较慢，之后就会感觉快很多。如果把服务器保存的 class 文件删除，服务器也会重新编译 JSP。</p>
<p>开发 Web 程序时经常需要修改 JSP。Tomcat 能够自动检测到 JSP 程序的改动。如果检测到 JSP 源代码发生了改动。Tomcat 会在下次客户端请求 JSP 时重新编译 JSP，而不需要重启 Tomcat。这种自动检测功能是默认开启的，检测改动会消耗少量的时间，在部署 Web 应用的时候可以在 web.xml 中将它关掉。</p>
<p>参考：《javaweb 整合开发王者归来》P97</p>
<h2> JSP 有哪些内置对象、作用分别是什么</h2>
<p><a href="http://blog.csdn.net/qq_34337272/article/details/64310849" target="_blank" rel="noopener noreferrer">JSP 内置对象 - CSDN 博客</a></p>
<p>JSP 有 9 个内置对象：</p>
<ul>
<li>request：封装客户端的请求，其中包含来自 GET 或 POST 请求的参数；</li>
<li>response：封装服务器对客户端的响应；</li>
<li>pageContext：通过该对象可以获取其他对象；</li>
<li>session：封装用户会话的对象；</li>
<li>application：封装服务器运行环境的对象；</li>
<li>out：输出服务器响应的输出流对象；</li>
<li>config：Web 应用的配置对象；</li>
<li>page：JSP 页面本身（相当于 Java 程序中的 this）；</li>
<li>exception：封装页面抛出异常的对象。</li>
</ul>
<h2> Request 对象的主要方法有哪些</h2>
<ul>
<li>setAttribute(String name,Object)：设置名字为 name 的 request 的参数值</li>
<li>getAttribute(String name)：返回由 name 指定的属性值</li>
<li>getAttributeNames()：返回 request 对象所有属性的名字集合，结果是一个枚举的实例</li>
<li>getCookies()：返回客户端的所有 Cookie 对象，结果是一个 Cookie 数组</li>
<li>getCharacterEncoding()：返回请求中的字符编码方式 = getContentLength()：返回请求的 Body 的长度</li>
<li>getHeader(String name)：获得 HTTP 协议定义的文件头信息</li>
<li>getHeaders(String name)：返回指定名字的 request Header 的所有值，结果是一个枚举的实例</li>
<li>getHeaderNames()：返回所以 request Header 的名字，结果是一个枚举的实例</li>
<li>getInputStream()：返回请求的输入流，用于获得请求中的数据</li>
<li>getMethod()：获得客户端向服务器端传送数据的方法</li>
<li>getParameter(String name)：获得客户端传送给服务器端的有 name 指定的参数值</li>
<li>getParameterNames()：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例</li>
<li>getParameterValues(String name)：获得有 name 指定的参数的所有值</li>
<li>getProtocol()：获取客户端向服务器端传送数据所依据的协议名称</li>
<li>getQueryString()：获得查询字符串</li>
<li>getRequestURI()：获取发出请求字符串的客户端地址</li>
<li>getRemoteAddr()：获取客户端的 IP 地址</li>
<li>getRemoteHost()：获取客户端的名字</li>
<li>getSession([Boolean create])：返回和请求相关 Session</li>
<li>getServerName()：获取服务器的名字</li>
<li>getServletPath()：获取客户端所请求的脚本文件的路径</li>
<li>getServerPort()：获取服务器的端口号</li>
<li>removeAttribute(String name)：删除请求中的一个属性</li>
</ul>
<h2> request.getAttribute()和 request.getParameter()有何区别</h2>
<p><strong>从获取方向来看：</strong></p>
<p><code>getParameter()</code>是获取 POST/GET 传递的参数值；</p>
<p><code>getAttribute()</code>是获取对象容器中的数据值；</p>
<p><strong>从用途来看：</strong></p>
<p><code>getParameter()</code>用于客户端重定向时，即点击了链接或提交按扭时传值用，即用于在用表单或 url 重定向传值时接收数据用。</p>
<p><code>getAttribute()</code> 用于服务器端重定向时，即在 sevlet 中使用了 forward 函数,或 struts 中使用了
mapping.findForward。 getAttribute 只能收到程序用 setAttribute 传过来的值。</p>
<p>另外，可以用 <code>setAttribute()</code>,<code>getAttribute()</code> 发送接收对象.而 <code>getParameter()</code> 显然只能传字符串。
<code>setAttribute()</code> 是应用服务器把这个对象放在该页面所对应的一块内存中去，当你的页面服务器重定向到另一个页面时，应用服务器会把这块内存拷贝另一个页面所对应的内存中。这样<code>getAttribute()</code>就能取得你所设下的值，当然这种方法可以传对象。session 也一样，只是对象在内存中的生命周期不一样而已。<code>getParameter()</code>只是应用服务器在分析你送上来的 request 页面的文本时，取得你设在表单或 url 重定向时的值。</p>
<p><strong>总结：</strong></p>
<p><code>getParameter()</code>返回的是 String,用于读取提交的表单中的值;（获取之后会根据实际需要转换为自己需要的相应类型，比如整型，日期类型啊等等）</p>
<p><code>getAttribute()</code>返回的是 Object，需进行转换,可用<code>setAttribute()</code>设置成任意对象，使用很灵活，可随时用</p>
<h2> include 指令 include 的行为的区别</h2>
<p><strong>include 指令：</strong> JSP 可以通过 include 指令来包含其他文件。被包含的文件可以是 JSP 文件、HTML 文件或文本文件。包含的文件就好像是该 JSP 文件的一部分，会被同时编译执行。 语法格式如下：
&lt;%@ include file="文件相对 url 地址" %&gt;</p>
<p>i<strong>nclude 动作：</strong> <code>&lt;jsp:include&gt;</code>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：
&lt;jsp:include page="相对 URL 地址" flush="true" /&gt;</p>
<h2> JSP 九大内置对象，七大动作，三大指令</h2>
<p><a href="http://blog.csdn.net/qq_34337272/article/details/64310849" target="_blank" rel="noopener noreferrer">JSP 九大内置对象，七大动作，三大指令总结</a></p>
<h2> 讲解 JSP 中的四种作用域</h2>
<p>JSP 中的四种作用域包括 page、request、session 和 application，具体来说：</p>
<ul>
<li><strong>page</strong>代表与一个页面相关的对象和属性。</li>
<li><strong>request</strong>代表与 Web 客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 Web 组件；需要在页面显示的临时数据可以置于此作用域。</li>
<li><strong>session</strong>代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的 session 中。</li>
<li><strong>application</strong>代表与整个 Web 应用程序相关的对象和属性，它实质上是跨越整个 Web 应用程序，包括多个页面、请求和会话的一个全局作用域。</li>
</ul>
<h2> 如何实现 JSP 或 Servlet 的单线程模式</h2>
<p>对于 JSP 页面，可以通过 page 指令进行设置。
<code>&lt;%@page isThreadSafe="false"%&gt;</code></p>
<p>对于 Servlet，可以让自定义的 Servlet 实现 SingleThreadModel 标识接口。</p>
<p>说明：如果将 JSP 或 Servlet 设置成单线程工作模式，会导致每个请求创建一个 Servlet 实例，这种实践将导致严重的性能问题（服务器的内存压力很大，还会导致频繁的垃圾回收），所以通常情况下并不会这么做。</p>
<h2> 实现会话跟踪的技术有哪些</h2>
<ol>
<li>
<p><strong>使用 Cookie</strong></p>
<p>向客户端发送 Cookie</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从客户端读取 Cookie</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点:</strong> 数据可以持久保存，不需要服务器资源，简单，基于文本的 Key-Value</p>
<p><strong>缺点:</strong> 大小受到限制，用户可以禁用 Cookie 功能，由于保存在本地，有一定的安全风险。</p>
</li>
<li>
<p>URL 重写</p>
<p>在 URL 中添加用户会话的信息作为请求的参数，或者将唯一的会话 ID 添加到 URL 结尾以标识一个会话。</p>
<p><strong>优点：</strong> 在 Cookie 被禁用的时候依然可以使用</p>
<p><strong>缺点：</strong> 必须对网站的 URL 进行编码，所有页面必须动态生成，不能用预先记录下来的 URL 进行访问。</p>
</li>
<li>
<p>隐藏的表单域</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>优点：</strong> Cookie 被禁时可以使用</p>
<p><strong>缺点：</strong> 所有页面必须是表单提交之后的结果。</p>
</li>
<li>
<p>HttpSession</p>
<p>在所有会话跟踪技术中，HttpSession 对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建 HttpSession，每个用户可以访问他自己的 HttpSession。可以通过 HttpServletRequest 对象的 getSession 方 法获得 HttpSession，通过 HttpSession 的 setAttribute 方法可以将一个值放在 HttpSession 中，通过调用 HttpSession 对象的 getAttribute 方法，同时传入属性名就可以获取保存在 HttpSession 中的对象。与上面三种方式不同的 是，HttpSession 放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的 Servlet 容器可以在内存将满时将 HttpSession 中的对象移到其他存储设备中，但是这样势必影响性能。添加到 HttpSession 中的值可以是任意 Java 对象，这个对象最好实现了 Serializable 接口，这样 Servlet 容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</p>
</li>
</ol>
<h2> Cookie 和 Session 的区别</h2>
<p>Cookie 和 Session 都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p>
<p><strong>Cookie 一般用来保存用户信息</strong> 比如 ① 我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；② 一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③ 登录一次网站后访问网站其他页面不需要重新登录。<strong>Session 的主要作用就是通过服务端记录用户的状态。</strong> 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p>
<p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p>
<p>Cookie 存储在客户端中，而 Session 存储在服务器上，相对来说 Session 安全性更高。如果使用 Cookie 的一些敏感信息不要写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/1.jpeg" type="image/jpeg"/>
    </item>
    <item>
      <title>设计模式常见面试题总结</title>
      <link>https://javaguide.cn/system-design/design-pattern.html</link>
      <guid>https://javaguide.cn/system-design/design-pattern.html</guid>
      <source url="https://javaguide.cn/rss.xml">设计模式常见面试题总结</source>
      <description>设计模式 相关的面试题已经整理到了 PDF 手册中，你可以在我的公众号“JavaGuide”后台回复“PDF” 获取。 JavaGuide 官方公众号 《设计模式》PDF 电子书内容概览：</description>
      <category>系统设计</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>设计模式</strong> 相关的面试题已经整理到了 PDF 手册中，你可以在我的公众号“<strong>JavaGuide</strong>”后台回复“<strong>PDF</strong>” 获取。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" alt="JavaGuide 官方公众号" tabindex="0"><figcaption>JavaGuide 官方公众号</figcaption></figure>
<p><strong>《设计模式》PDF 电子书内容概览</strong>：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/design-pattern-pdf.png" alt="《设计模式》PDF文档概览" tabindex="0"><figcaption>《设计模式》PDF文档概览</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png" type="image/png"/>
    </item>
    <item>
      <title>Java 定时任务详解</title>
      <link>https://javaguide.cn/system-design/schedule-task.html</link>
      <guid>https://javaguide.cn/system-design/schedule-task.html</guid>
      <source url="https://javaguide.cn/rss.xml">Java 定时任务详解</source>
      <description>为什么需要定时任务？ 我们来看一下几个非常常见的业务场景： 某系统凌晨要进行数据备份。 某电商平台，用户下单半个小时未支付的情况下需要自动取消订单。 某媒体聚合平台，每 10 分钟动态抓取某某网站的数据为自己所用。 某博客平台，支持定时发送文章。 某基金平台，每晚定时计算用户当日收益情况并推送给用户最新的数据。 ...... 这些场景往往都要求我们在某个特定的时间去做某个事情。 单机定时任务技术选型</description>
      <category>系统设计</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 为什么需要定时任务？</h2>
<p>我们来看一下几个非常常见的业务场景：</p>
<ol>
<li>某系统凌晨要进行数据备份。</li>
<li>某电商平台，用户下单半个小时未支付的情况下需要自动取消订单。</li>
<li>某媒体聚合平台，每 10 分钟动态抓取某某网站的数据为自己所用。</li>
<li>某博客平台，支持定时发送文章。</li>
<li>某基金平台，每晚定时计算用户当日收益情况并推送给用户最新的数据。</li>
<li>......</li>
</ol>
<p>这些场景往往都要求我们在某个特定的时间去做某个事情。</p>
<h2> 单机定时任务技术选型</h2>
<h3> Timer</h3>
<p><code>java.util.Timer</code>是 JDK 1.3 开始就已经支持的一种定时任务的实现方式。</p>
<p><code>Timer</code> 内部使用一个叫做 <code>TaskQueue</code> 的类存放定时任务，它是一个基于最小堆实现的优先级队列。<code>TaskQueue</code> 会按照任务距离下一次执行时间的大小将任务排序，保证在堆顶的任务最先执行。这样在需要执行任务时，每次只需要取出堆顶的任务运行即可！</p>
<p><code>Timer</code> 使用起来比较简单，通过下面的方式我们就能创建一个 1s 之后执行的定时任务。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过其缺陷较多，比如一个 <code>Timer</code> 一个线程，这就导致 <code>Timer</code> 的任务的执行只能串行执行，一个任务执行时间过长的话会影响其他任务（性能非常差），再比如发生异常时任务直接停止（<code>Timer</code> 只捕获了 <code>InterruptedException</code> ）。</p>
<p><code>Timer</code> 类上的有一段注释是这样写的：</p>
<div class="language-JAVA line-numbers-mode" data-ext="JAVA"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大概的意思就是：<code>ScheduledThreadPoolExecutor</code> 支持多线程执行定时任务并且功能更强大，是 <code>Timer</code> 的替代品。</p>
<h3> ScheduledExecutorService</h3>
<p><code>ScheduledExecutorService</code> 是一个接口，有多个实现类，比较常用的是 <code>ScheduledThreadPoolExecutor</code> 。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/20210607154324712.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><code>ScheduledThreadPoolExecutor</code> 本身就是一个线程池，支持任务并发执行。并且，其内部使用 <code>DelayedWorkQueue</code> 作为任务队列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不论是使用 <code>Timer</code> 还是 <code>ScheduledExecutorService</code> 都无法使用 Cron 表达式指定任务执行的具体时间。</p>
<h3> Spring Task</h3>
<p>我们直接通过 Spring 提供的 <code>@Scheduled</code> 注解即可定义定时任务，非常方便！</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我在大学那会做的一个 SSM 的企业级项目，就是用的 Spring Task 来做的定时任务。</p>
<p>并且，Spring Task 还是支持 <strong>Cron 表达式</strong> 的。Cron 表达式主要用于定时作业(定时任务)系统定义执行时间或执行频率的表达式，非常厉害，你可以通过 Cron 表达式进行设置定时任务每天或者每个月什么时候执行等等操作。咱们要学习定时任务的话，Cron 表达式是一定是要重点关注的。推荐一个在线 Cron 表达式生成器：<a href="http://cron.qqe2.com/" target="_blank" rel="noopener noreferrer">http://cron.qqe2.com/</a> 。</p>
<p>但是，Spring 自带的定时调度只支持单机，并且提供的功能比较单一。之前写过一篇文章:<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485563&amp;idx=1&amp;sn=7419341f04036a10b141b74624a3f8c9&amp;chksm=cea247b0f9d5cea6440759e6d49b4e77d06f4c99470243a10c1463834e873ca90266413fbc92&amp;token=2133161636&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">《5 分钟搞懂如何在 Spring Boot 中 Schedule Tasks》</a> ，不了解的小伙伴可以参考一下。</p>
<p>Spring Task 底层是基于 JDK 的 <code>ScheduledThreadPoolExecutor</code> 线程池来实现的。</p>
<p><strong>优缺点总结：</strong></p>
<ul>
<li>优点：简单，轻量，支持 Cron 表达式</li>
<li>缺点：功能单一</li>
</ul>
<h3> 时间轮</h3>
<p>Kafka、Dubbo、ZooKeeper、Netty、Caffeine、Akka 中都有对时间轮的实现。</p>
<p>时间轮简单来说就是一个环形的队列（底层一般基于数组实现），队列中的每一个元素（时间格）都可以存放一个定时任务列表。</p>
<p>时间轮中的每个时间格代表了时间轮的基本时间跨度或者说时间精度，假如时间一秒走一个时间格的话，那么这个时间轮的最高精度就是 1 秒（也就是说 3 s 和 3.9s 会在同一个时间格中）。</p>
<p>下图是一个有 12 个时间格的时间轮，转完一圈需要 12 s。当我们需要新建一个 3s 后执行的定时任务，只需要将定时任务放在下标为 3 的时间格中即可。当我们需要新建一个 9s 后执行的定时任务，只需要将定时任务放在下标为 9 的时间格中即可。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/20210607171334861.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>那当我们需要创建一个 13s 后执行的定时任务怎么办呢？这个时候可以引入一叫做 <strong>圈数/轮数</strong> 的概念，也就是说这个任务还是放在下标为 3 的时间格中， 不过它的圈数为 2 。</p>
<p>除了增加圈数这种方法之外，还有一种 <strong>多层次时间轮</strong> （类似手表），Kafka 采用的就是这种方案。</p>
<p>针对下图的时间轮，我来举一个例子便于大家理解。</p>
<figure><img src="https://oss.javaguide.cn/javaguide/20210607193042151.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>上图的时间轮，第 1 层的时间精度为 1 ，第 2 层的时间精度为 20 ，第 3 层的时间精度为 400。假如我们需要添加一个 350s 后执行的任务 A 的话（当前时间是 0s），这个任务会被放在第 2 层（因为第二层的时间跨度为 20*20=400&gt;350）的第 350/20=17 个时间格子。</p>
<p>当第一层转了 17 圈之后，时间过去了 340s ，第 2 层的指针此时来到第 17 个时间格子。此时，第 2 层第 17 个格子的任务会被移动到第 1 层。</p>
<p>任务 A 当前是 10s 之后执行，因此它会被移动到第 1 层的第 10 个时间格子。</p>
<p>这里在层与层之间的移动也叫做时间轮的升降级。参考手表来理解就好！</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-c9e9da713a7c05ae3187364deeded318fa9.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>时间轮比较适合任务数量比较多的定时任务场景，它的任务写入和执行的时间复杂度都是 0（1）。</strong></p>
<h2> 分布式定时任务技术选型</h2>
<p>上面提到的一些定时任务的解决方案都是在单机下执行的，适用于比较简单的定时任务场景比如每天凌晨备份一次数据。</p>
<p>如果我们需要一些高级特性比如支持任务在分布式场景下的分片和高可用的话，我们就需要用到分布式任务调度框架了。</p>
<p>通常情况下，一个定时任务的执行往往涉及到下面这些角色：</p>
<ul>
<li><strong>任务</strong>：首先肯定是要执行的任务，这个任务就是具体的业务逻辑比如定时发送文章。</li>
<li><strong>调度器</strong>：其次是调度中心，调度中心主要负责任务管理，会分配任务给执行器。</li>
<li><strong>执行器</strong>：最后就是执行器，执行器接收调度器分派的任务并执行。</li>
</ul>
<h3> Quartz</h3>
<p>一个很火的开源任务调度框架，完全由<code>Java</code>写成。<code>Quartz</code> 可以说是 Java 定时任务领域的老大哥或者说参考标准，其他的任务调度框架基本都是基于 <code>Quartz</code> 开发的，比如当当网的<code>elastic-job</code>就是基于<code>quartz</code>二次开发之后的分布式调度解决方案。</p>
<p>使用 <code>Quartz</code> 可以很方便地与 <code>Spring</code> 集成，并且支持动态添加任务和集群。但是，<code>Quartz</code> 使用起来也比较麻烦，API 繁琐。</p>
<p>并且，<code>Quzrtz</code> 并没有内置 UI 管理控制台，不过你可以使用 <a href="https://github.com/zhaopeiym/quartzui" target="_blank" rel="noopener noreferrer">quartzui</a> 这个开源项目来解决这个问题。</p>
<p>另外，<code>Quartz</code> 虽然也支持分布式任务。但是，它是在数据库层面，通过数据库的锁机制做的，有非常多的弊端比如系统侵入性严重、节点负载不均衡。有点伪分布式的味道。</p>
<p><strong>优缺点总结：</strong></p>
<ul>
<li>优点：可以与 <code>Spring</code> 集成，并且支持动态添加任务和集群。</li>
<li>缺点：分布式支持不友好，没有内置 UI 管理控制台、使用麻烦（相比于其他同类型框架来说）</li>
</ul>
<h3> Elastic-Job</h3>
<p><code>Elastic-Job</code> 是当当网开源的一个基于<code>Quartz</code>和<code>ZooKeeper</code>的分布式调度解决方案，由两个相互独立的子项目 <code>Elastic-Job-Lite</code> 和 <code>Elastic-Job-Cloud</code> 组成，一般我们只要使用 <code>Elastic-Job-Lite</code> 就好。</p>
<p><code>ElasticJob</code> 支持任务在分布式场景下的分片和高可用、任务可视化管理等功能。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-0042738eb83d32773fd3bf391baaa6951d1.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>ElasticJob-Lite 的架构设计如下图所示：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-a8f63f828666d43009d5d3497bcbd2cfb61.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>从上图可以看出，<code>Elastic-Job</code> 没有调度中心这一概念，而是使用 <code>ZooKeeper</code> 作为注册中心，注册中心负责协调分配任务到不同的节点上。</p>
<p>Elastic-Job 中的定时调度都是由执行器自行触发，这种设计也被称为去中心化设计（调度和处理都是执行器单独完成）。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>相关地址：</strong></p>
<ul>
<li>GitHub 地址：<a href="https://github.com/apache/shardingsphere-elasticjob%E3%80%82" target="_blank" rel="noopener noreferrer">https://github.com/apache/shardingsphere-elasticjob。</a></li>
<li>官方网站：<a href="https://shardingsphere.apache.org/elasticjob/index_zh.html" target="_blank" rel="noopener noreferrer">https://shardingsphere.apache.org/elasticjob/index_zh.html</a> 。</li>
</ul>
<p><strong>优缺点总结：</strong></p>
<ul>
<li>优点：可以与 <code>Spring</code> 集成、支持分布式、支持集群、性能不错</li>
<li>缺点：依赖了额外的中间件比如 Zookeeper（复杂度增加，可靠性降低、维护成本变高）</li>
</ul>
<h3> XXL-JOB</h3>
<p><code>XXL-JOB</code> 于 2015 年开源，是一款优秀的轻量级分布式任务调度框架，支持任务可视化管理、弹性扩容缩容、任务失败重试和告警、任务分片等功能，</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-111a63288ee9057f754ca08e3c3ac86a295.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>根据 <code>XXL-JOB</code> 官网介绍，其解决了很多 <code>Quartz</code> 的不足。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-57071c34a4c57c3ea6084a363c85d645c23.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><code>XXL-JOB</code> 的架构设计如下图所示：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-b8ecc6acf651f112c4dfae98243d72adea3.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>从上图可以看出，<code>XXL-JOB</code> 由 <strong>调度中心</strong> 和 <strong>执行器</strong> 两大部分组成。调度中心主要负责任务管理、执行器管理以及日志管理。执行器主要是接收调度信号并处理。另外，调度中心进行任务调度时，是通过自研 RPC 来实现的。</p>
<p>不同于 <code>Elastic-Job</code> 的去中心化设计， <code>XXL-JOB</code> 的这种设计也被称为中心化设计（调度中心调度多个执行器执行任务）。</p>
<p>和 <code>Quzrtz</code> 类似 <code>XXL-JOB</code> 也是基于数据库锁调度任务，存在性能瓶颈。不过，一般在任务量不是特别大的情况下，没有什么影响的，可以满足绝大部分公司的要求。</p>
<p>不要被 <code>XXL-JOB</code> 的架构图给吓着了，实际上，我们要用 <code>XXL-JOB</code> 的话，只需要重写 <code>IJobHandler</code> 自定义任务执行逻辑就可以了，非常易用！</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以直接基于注解定义任务。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://oscimg.oschina.net/oscnet/up-07715bc445ef1db927bc6ec101dace5028e.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>相关地址：</strong></p>
<ul>
<li>GitHub 地址：<a href="https://github.com/xuxueli/xxl-job/%E3%80%82" target="_blank" rel="noopener noreferrer">https://github.com/xuxueli/xxl-job/。</a></li>
<li>官方介绍：<a href="https://www.xuxueli.com/xxl-job/" target="_blank" rel="noopener noreferrer">https://www.xuxueli.com/xxl-job/</a> 。</li>
</ul>
<p><strong>优缺点总结：</strong></p>
<ul>
<li>优点：开箱即用（学习成本比较低）、与 Spring 集成、支持分布式、支持集群、内置了 UI 管理控制台。</li>
<li>缺点：不支持动态添加任务（如果一定想要动态创建任务也是支持的，参见：<a href="https://github.com/xuxueli/xxl-job/issues/277" target="_blank" rel="noopener noreferrer">xxl-job issue277</a>）。</li>
</ul>
<h3> PowerJob</h3>
<p>非常值得关注的一个分布式任务调度框架，分布式任务调度领域的新星。目前，已经有很多公司接入比如 OPPO、京东、中通、思科。</p>
<p>这个框架的诞生也挺有意思的，PowerJob 的作者当时在阿里巴巴实习过，阿里巴巴那会使用的是内部自研的 SchedulerX（阿里云付费产品）。实习期满之后，PowerJob 的作者离开了阿里巴巴。想着说自研一个 SchedulerX，防止哪天 SchedulerX 满足不了需求，于是 PowerJob 就诞生了。</p>
<p>更多关于 PowerJob 的故事，小伙伴们可以去看看 PowerJob 作者的视频 <a href="https://www.bilibili.com/video/BV1SK411A7F3/" target="_blank" rel="noopener noreferrer">《我和我的任务调度中间件》</a>。简单点概括就是：“游戏没啥意思了，我要扛起了新一代分布式任务调度与计算框架的大旗！”。</p>
<p>由于 SchedulerX 属于人民币产品，我这里就不过多介绍。PowerJob 官方也对比过其和 QuartZ、XXL-JOB 以及 SchedulerX。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-795f5e9b0d875063717b1ee6a08f2ff1c01.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>这篇文章中，我主要介绍了：</p>
<ul>
<li><strong>定时任务的相关概念</strong>：为什么需要定时任务、定时任务中的核心角色、分布式定时任务。</li>
<li><strong>定时任务的技术选型</strong>：XXL-JOB 2015 年推出，已经经过了很多年的考验。XXL-JOB 轻量级，并且使用起来非常简单。虽然存在性能瓶颈，但是，在绝大多数情况下，对于企业的基本需求来说是没有影响的。PowerJob 属于分布式任务调度领域里的新星，其稳定性还有待继续考察。ElasticJob 由于在架构设计上是基于 Zookeeper ，而 XXL-JOB 是基于数据库，性能方面的话，ElasticJob 略胜一筹。</li>
</ul>
<p>这篇文章并没有介绍到实际使用，但是，并不代表实际使用不重要。我在写这篇文章之前，已经动手写过相应的 Demo。像 Quartz，我在大学那会就用过。不过，当时用的是 Spring 。为了能够更好地体验，我自己又在 Spring Boot 上实际体验了一下。如果你并没有实际使用某个框架，就直接说它并不好用的话，是站不住脚的。</p>
<p>最后，这篇文章要感谢艿艿的帮助，写这篇文章的时候向艿艿询问过一些问题。推荐一篇艿艿写的偏实战类型的硬核文章：<a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;mid=2247490679&amp;idx=1&amp;sn=25374dbdcca95311d41be5d7b7db454d&amp;chksm=fa4963c6cd3eead055bb9cd10cca13224bb35d0f7373a27aa22a55495f71e24b8273a7603314&amp;scene=27#wechat_redirect" target="_blank" rel="noopener noreferrer">《Spring Job？Quartz？XXL-Job？年轻人才做选择，艿艿全莽~》</a> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/javaguide/20210607154324712.png" type="image/png"/>
    </item>
    <item>
      <title>系统设计常见面试题总结(付费)</title>
      <link>https://javaguide.cn/system-design/system-design-questions.html</link>
      <guid>https://javaguide.cn/system-design/system-design-questions.html</guid>
      <source url="https://javaguide.cn/rss.xml">系统设计常见面试题总结(付费)</source>
      <description>系统设计 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</description>
      <category>Java面试指北</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>系统设计</strong> 相关的面试题为我的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了<a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>中。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/system-design-questions.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href="https://javaguide.cn/#/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的补充完善，两者可以配合使用。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/javamianshizhibei/system-design-questions.png" type="image/png"/>
    </item>
    <item>
      <title>Web 实时消息推送详解</title>
      <link>https://javaguide.cn/system-design/web-real-time-message-push.html</link>
      <guid>https://javaguide.cn/system-design/web-real-time-message-push.html</guid>
      <source url="https://javaguide.cn/rss.xml">Web 实时消息推送详解</source>
      <description>原文地址：https://juejin.cn/post/7122014462181113887，JavaGuide 对本文进行了完善总结。 我有一个朋友做了一个小破站，现在要实现一个站内信 Web 消息推送的功能，对，就是下图这个小红点，一个很常用的功能。 站内信 Web 消息推送</description>
      <category>系统设计</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>原文地址：<a href="https://juejin.cn/post/7122014462181113887%EF%BC%8CJavaGuide" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7122014462181113887，JavaGuide</a> 对本文进行了完善总结。</p>
</blockquote>
<p>我有一个朋友做了一个小破站，现在要实现一个站内信 Web 消息推送的功能，对，就是下图这个小红点，一个很常用的功能。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192380.png" alt="站内信 Web 消息推送" tabindex="0"><figcaption>站内信 Web 消息推送</figcaption></figure>
<p>不过他还没想好用什么方式做，这里我帮他整理了一下几种方案，并简单做了实现。</p>
<h2> 什么是消息推送？</h2>
<p>推送的场景比较多，比如有人关注我的公众号，这时我就会收到一条推送消息，以此来吸引我点击打开应用。</p>
<p>消息推送通常是指网站的运营工作等人员，通过某种工具对用户当前网页或移动设备 APP 进行的主动消息推送。</p>
<p>消息推送一般又分为 Web 端消息推送和移动端消息推送。</p>
<p>移动端消息推送示例：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/IKleJ9auR1Ojdicyr0bH.png" alt="移动端消息推送示例" tabindex="0"><figcaption>移动端消息推送示例</figcaption></figure>
<p>Web 端消息推送示例：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/image-20220819100512941.png" alt="Web 端消息推送示例" tabindex="0"><figcaption>Web 端消息推送示例</figcaption></figure>
<p>在具体实现之前，咱们再来分析一下前边的需求，其实功能很简单，只要触发某个事件（主动分享了资源或者后台主动推送消息），Web 页面的通知小红点就会实时的 <code>+1</code> 就可以了。</p>
<p>通常在服务端会有若干张消息推送表，用来记录用户触发不同事件所推送不同类型的消息，前端主动查询（拉）或者被动接收（推）用户所有未读的消息数。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192384.png" alt="消息推送表" tabindex="0"><figcaption>消息推送表</figcaption></figure>
<p>消息推送无非是推（push）和拉（pull）两种形式，下边我们逐个了解下。</p>
<h2> 消息推送常见方案</h2>
<h3> 短轮询</h3>
<p><strong>轮询(polling)</strong> 应该是实现消息推送方案中最简单的一种，这里我们暂且将轮询分为短轮询和长轮询。</p>
<p>短轮询很好理解，指定的时间间隔，由浏览器向服务器发出 HTTP 请求，服务器实时返回未读消息数据给客户端，浏览器再做渲染显示。</p>
<p>一个简单的 JS 定时器就可以搞定，每秒钟请求一次未读消息数接口，返回的数据展示即可。</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果还是可以的，短轮询实现固然简单，缺点也是显而易见，由于推送数据并不会频繁变更，无论后端此时是否有新的消息产生，客户端都会进行请求，势必会对服务端造成很大压力，浪费带宽和服务器资源。</p>
<h3> 长轮询</h3>
<p>长轮询是对上边短轮询的一种改进版本，在尽可能减少对服务器资源浪费的同时，保证消息的相对实时性。长轮询在中间件中应用的很广泛，比如 Nacos 和 Apollo 配置中心，消息队列 Kafka、RocketMQ 中都有用到长轮询。</p>
<p><a href="https://mp.weixin.qq.com/s/94ftESkDoZI9gAGflLiGwg" target="_blank" rel="noopener noreferrer">Nacos 配置中心交互模型是 push 还是 pull？</a>一文中我详细介绍过 Nacos 长轮询的实现原理，感兴趣的小伙伴可以瞅瞅。</p>
<p>长轮询其实原理跟轮询差不多，都是采用轮询的方式。不过，如果服务端的数据没有发生变更，会 一直 hold 住请求，直到服务端的数据发生变化，或者等待一定时间超时才会返回。返回后，客户端又会立即再次发起下一次长轮询。</p>
<p>这次我使用 Apollo 配置中心实现长轮询的方式，应用了一个类<code>DeferredResult</code>，它是在 Servlet3.0 后经过 Spring 封装提供的一种异步请求机制，直意就是延迟结果。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192386.png" alt="长轮询示意图" tabindex="0"><figcaption>长轮询示意图</figcaption></figure>
<p><code>DeferredResult</code>可以允许容器线程快速释放占用的资源，不阻塞请求线程，以此接受更多的请求提升系统的吞吐量，然后启动异步工作线程处理真正的业务逻辑，处理完成调用<code>DeferredResult.setResult(200)</code>提交响应结果。</p>
<p>下边我们用长轮询来实现消息推送。</p>
<p>因为一个 ID 可能会被多个长轮询请求监听，所以我采用了 Guava 包提供的<code>Multimap</code>结构存放长轮询，一个 key 可以对应多个 value。一旦监听到 key 发生变化，对应的所有长轮询都会响应。前端得到非请求超时的状态码，知晓数据变更，主动查询未读消息数接口，更新页面数据。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当请求超过设置的超时时间，会抛出<code>AsyncRequestTimeoutException</code>异常，这里直接用<code>@ControllerAdvice</code>全局捕获统一返回即可，前端获取约定好的状态码后再次发起长轮询请求，如此往复调用。</p>
<div class="language-kotlin line-numbers-mode" data-ext="kt"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来测试一下，首先页面发起长轮询请求<code>/polling/watch/10086</code>监听消息更变，请求被挂起，不变更数据直至超时，再次发起了长轮询请求；紧接着手动变更数据<code>/polling/publish/10086</code>，长轮询得到响应，前端处理业务逻辑完成后再次发起请求，如此循环往复。</p>
<p>长轮询相比于短轮询在性能上提升了很多，但依然会产生较多的请求，这是它的一点不完美的地方。</p>
<h3> iframe 流</h3>
<p>iframe 流就是在页面中插入一个隐藏的<code>&lt;iframe&gt;</code>标签，通过在<code>src</code>中请求消息数量 API 接口，由此在服务端和客户端之间创建一条长连接，服务端持续向<code>iframe</code>传输数据。</p>
<p>传输的数据通常是 HTML、或是内嵌的 JavaScript 脚本，来达到实时更新页面的效果。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192388.png" alt="iframe 流示意图" tabindex="0"><figcaption>iframe 流示意图</figcaption></figure>
<p>这种方式实现简单，前端只要一个<code>&lt;iframe&gt;</code>标签搞定了</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务端直接组装 HTML、JS 脚本数据向 response 写入就行了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>iframe 流的服务器开销很大，而且 IE、Chrome 等浏览器一直会处于 loading 状态，图标会不停旋转，简直是强迫症杀手。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192389.png" alt="iframe 流效果" tabindex="0"><figcaption>iframe 流效果</figcaption></figure>
<p>iframe 流非常不友好，强烈不推荐。</p>
<h3> SSE (我的方式)</h3>
<p>很多人可能不知道，服务端向客户端推送消息，其实除了可以用<code>WebSocket</code>这种耳熟能详的机制外，还有一种服务器发送事件(Server-Sent Events)，简称 SSE。这是一种服务器端到客户端(浏览器)的单向消息推送。</p>
<p>SSE 基于 HTTP 协议的，我们知道一般意义上的 HTTP 协议是无法做到服务端主动向客户端推送消息的，但 SSE 是个例外，它变换了一种思路。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192390.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>SSE 在服务器和客户端之间打开一个单向通道，服务端响应的不再是一次性的数据包而是<code>text/event-stream</code>类型的数据流信息，在有数据变更时从服务器流式传输到客户端。</p>
<p>整体的实现思路有点类似于在线视频播放，视频流会连续不断的推送到浏览器，你也可以理解成，客户端在完成一次用时很长（网络不畅）的下载。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192391.png" alt="SSE 示意图" tabindex="0"><figcaption>SSE 示意图</figcaption></figure>
<p>SSE 与 WebSocket 作用相似，都可以建立服务端与浏览器之间的通信，实现服务端向客户端推送消息，但还是有些许不同：</p>
<ul>
<li>SSE 是基于 HTTP 协议的，它们不需要特殊的协议或服务器实现即可工作；WebSocket 需单独服务器来处理协议。</li>
<li>SSE 单向通信，只能由服务端向客户端单向通信；WebSocket 全双工通信，即通信的双方可以同时发送和接受信息。</li>
<li>SSE 实现简单开发成本低，无需引入其他组件；WebSocket 传输数据需做二次解析，开发门槛高一些。</li>
<li>SSE 默认支持断线重连；WebSocket 则需要自己实现。</li>
<li>SSE 只能传送文本消息，二进制数据需要经过编码后传送；WebSocket 默认支持传送二进制数据。</li>
</ul>
<p><strong>SSE 与 WebSocket 该如何选择？</strong></p>
<blockquote>
<p>技术并没有好坏之分，只有哪个更合适</p>
</blockquote>
<p>SSE 好像一直不被大家所熟知，一部分原因是出现了 WebSocket，这个提供了更丰富的协议来执行双向、全双工通信。对于游戏、即时通信以及需要双向近乎实时更新的场景，拥有双向通道更具吸引力。</p>
<p>但是，在某些情况下，不需要从客户端发送数据。而你只需要一些服务器操作的更新。比如：站内信、未读消息数、状态更新、股票行情、监控数量等场景，SEE 不管是从实现的难易和成本上都更加有优势。此外，SSE 具有 WebSocket 在设计上缺乏的多种功能，例如：自动重新连接、事件 ID 和发送任意事件的能力。</p>
<p>前端只需进行一次 HTTP 请求，带上唯一 ID，打开事件流，监听服务端推送的事件就可以了</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端的实现更简单，创建一个<code>SseEmitter</code>对象放入<code>sseEmitterMap</code>进行管理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> SSE 不支持 IE 浏览器，对其他主流浏览器兼容性做的还不错。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192393.png" alt="SSE 兼容性" tabindex="0"><figcaption>SSE 兼容性</figcaption></figure>
<h3> Websocket</h3>
<p>Websocket 应该是大家都比较熟悉的一种实现消息推送的方式，上边我们在讲 SSE 的时候也和 Websocket 进行过比较。</p>
<p>是一种在 TCP 连接上进行全双工通信的协议，建立客户端和服务器之间的通信渠道。浏览器和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192394.png" alt="Websocket 示意图" tabindex="0"><figcaption>Websocket 示意图</figcaption></figure>
<p>SpringBoot 整合 Websocket，先引入 Websocket 相关的工具包，和 SSE 相比额外的开发成本。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端使用<code>@ServerEndpoint</code>注解标注当前类为一个 WebSocket 服务器，客户端可以通过<code>ws://localhost:7777/webSocket/10086</code>来连接到 WebSocket 服务器端。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端初始化打开 WebSocket 连接，并监听连接状态，接收服务端数据或向服务端发送数据。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面初始化建立 WebSocket 连接，之后就可以进行双向通信了，效果还不错。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192395.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> MQTT</h3>
<p><strong>什么是 MQTT 协议？</strong></p>
<p>MQTT (Message Queue Telemetry Transport)是一种基于发布/订阅（publish/subscribe）模式的轻量级通讯协议，通过订阅相应的主题来获取消息，是物联网（Internet of Thing）中的一个标准传输协议。</p>
<p>该协议将消息的发布者（publisher）与订阅者（subscriber）进行分离，因此可以在不可靠的网络环境中，为远程连接的设备提供可靠的消息服务，使用方式与传统的 MQ 有点类似。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000022986325.png" alt="MQTT 协议示例" tabindex="0"><figcaption>MQTT 协议示例</figcaption></figure>
<p>TCP 协议位于传输层，MQTT 协议位于应用层，MQTT 协议构建于 TCP/IP 协议上，也就是说只要支持 TCP/IP 协议栈的地方，都可以使用 MQTT 协议。</p>
<p><strong>为什么要用 MQTT 协议？</strong></p>
<p>MQTT 协议为什么在物联网（IOT）中如此受偏爱？而不是其它协议，比如我们更为熟悉的 HTTP 协议呢？</p>
<ul>
<li>首先 HTTP 协议它是一种同步协议，客户端请求后需要等待服务器的响应。而在物联网（IOT）环境中，设备会很受制于环境的影响，比如带宽低、网络延迟高、网络通信不稳定等，显然异步消息协议更为适合 IOT 应用程序。</li>
<li>HTTP 是单向的，如果要获取消息客户端必须发起连接，而在物联网（IOT）应用程序中，设备或传感器往往都是客户端，这意味着它们无法被动地接收来自网络的命令。</li>
<li>通常需要将一条命令或者消息，发送到网络上的所有设备上。HTTP 要实现这样的功能不但很困难，而且成本极高。</li>
</ul>
<p>具体的 MQTT 协议介绍和实践，这里我就不再赘述了，大家可以参考我之前的两篇文章，里边写的也都很详细了。</p>
<ul>
<li>MQTT 协议的介绍：<a href="https://mp.weixin.qq.com/s/udFE6k9pPetIWsa6KeErrA" target="_blank" rel="noopener noreferrer">我也没想到 SpringBoot + RabbitMQ 做智能家居，会这么简单</a></li>
<li>MQTT 实现消息推送：<a href="https://mp.weixin.qq.com/s/U-fUGr9i1MVa4PoVyiDFCg" target="_blank" rel="noopener noreferrer">未读消息（小红点），前端 与 RabbitMQ 实时消息推送实践，贼简单~</a></li>
</ul>
<h2> 总结</h2>
<blockquote>
<p>以下内容为 JavaGuide 补充</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>介绍</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>短轮询</td>
<td>客户端定时向服务端发送请求，服务端直接返回响应数据（即使没有数据更新）</td>
<td>简单、易理解、易实现</td>
<td>实时性太差，无效请求太多，频繁建立连接太耗费资源</td>
</tr>
<tr>
<td>长轮询</td>
<td>与短轮询不同是，长轮询接收到客户端请求之后等到有数据更新才返回请求</td>
<td>减少了无效请求</td>
<td>挂起请求会导致资源浪费</td>
</tr>
<tr>
<td>iframe 流</td>
<td>服务端和客户端之间创建一条长连接，服务端持续向<code>iframe</code>传输数据。</td>
<td>简单、易理解、易实现</td>
<td>维护一个长连接会增加开销，效果太差（图标会不停旋转）</td>
</tr>
<tr>
<td>SSE</td>
<td>一种服务器端到客户端(浏览器)的单向消息推送。</td>
<td>简单、易实现，功能丰富</td>
<td>不支持双向通信</td>
</tr>
<tr>
<td>WebSocket</td>
<td>除了最初建立连接时用 HTTP 协议，其他时候都是直接基于 TCP 协议进行通信的，可以实现客户端和服务端的全双工通信。</td>
<td>性能高、开销小</td>
<td>对开发人员要求更高，实现相对复杂一些</td>
</tr>
<tr>
<td>MQTT</td>
<td>基于发布/订阅（publish/subscribe）模式的轻量级通讯协议，通过订阅相应的主题来获取消息。</td>
<td>成熟稳定，轻量级</td>
<td>对开发人员要求更高，实现相对复杂一些</td>
</tr>
</tbody>
</table>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/1460000042192380.png" type="image/png"/>
    </item>
    <item>
      <title>《后端面试高频系统设计&amp;场景题》</title>
      <link>https://javaguide.cn/zhuanlan/back-end-interview-high-frequency-system-design-and-scenario-questions.html</link>
      <guid>https://javaguide.cn/zhuanlan/back-end-interview-high-frequency-system-design-and-scenario-questions.html</guid>
      <source url="https://javaguide.cn/rss.xml">《后端面试高频系统设计&amp;场景题》</source>
      <description>介绍 《后端面试高频系统设计&amp;amp;场景题》 是我的知识星球的一个内部小册，包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。 在几年前，国内的后端技术面试通常不会涉及到系统设计和场景题。相比之下，国外的后端技术面试则更加注重这方面的考察。然而近年来，随着国内的技术面试越来越卷，越来越多的公司开始在面试中考察系统设计和场景问题的解决，以更全面的考察求职者，不论是校招还是社招。</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 介绍</h2>
<p><strong>《后端面试高频系统设计&amp;场景题》</strong> 是我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>的一个内部小册，包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。</p>
<p>在几年前，国内的后端技术面试通常不会涉及到系统设计和场景题。相比之下，国外的后端技术面试则更加注重这方面的考察。然而近年来，随着国内的技术面试越来越卷，越来越多的公司开始在面试中考察系统设计和场景问题的解决，以更全面的考察求职者，不论是校招还是社招。</p>
<p>不过，正常面试全是场景题的情况还是极少的，面试官一般会在面试中穿插一两个系统设计和场景题来考察你。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-cc0b49f7e4a8cf63f9502a1f8ac0c6163f5.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>于是，我总结了这份《后端面试高频系统设计&amp;场景题》，包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。</p>
<p>即使不是准备面试，我也强烈推荐你认真阅读这一系列文章，这对于提升自己系统设计思维和解决实际问题的能力还是非常有帮助的。并且，涉及到的很多案例都可以用到自己的项目上比如抽奖系统设计、第三方授权登录、Redis实现延时任务的正确方式。</p>
<p>《后端面试高频系统设计&amp;场景题》本身是属于《Java面试指北》的一部分，后面由于内容篇幅较多，因此被单独提了出来。</p>
<h2> 内容概览</h2>
<figure><img src="https://oss.javaguide.cn/xingqiu/back-end-interview-high-frequency-system-design-and-scenario-questions-fengmian.png" alt="《后端面试高频系统设计&amp;场景题》" tabindex="0"><figcaption>《后端面试高频系统设计&amp;场景题》</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oscimg.oschina.net/oscnet/up-cc0b49f7e4a8cf63f9502a1f8ac0c6163f5.png" type="image/png"/>
    </item>
    <item>
      <title>《手写 RPC 框架》</title>
      <link>https://javaguide.cn/zhuanlan/handwritten-rpc-framework.html</link>
      <guid>https://javaguide.cn/zhuanlan/handwritten-rpc-framework.html</guid>
      <source url="https://javaguide.cn/rss.xml">《手写 RPC 框架》</source>
      <description>介绍 《手写 RPC 框架》 是我的知识星球的一个内部小册，我写了 12 篇文章来讲解如何从零开始基于 Netty+Kyro+Zookeeper 实现一个简易的 RPC 框架。 麻雀虽小五脏俱全，项目代码注释详细，结构清晰，并且集成了 Check Style 规范代码结构，非常适合阅读和学习。 内容概览</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 介绍</h2>
<p><strong>《手写 RPC 框架》</strong> 是我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>的一个内部小册，我写了 12 篇文章来讲解如何从零开始基于 Netty+Kyro+Zookeeper 实现一个简易的 RPC 框架。</p>
<p>麻雀虽小五脏俱全，项目代码注释详细，结构清晰，并且集成了 Check Style 规范代码结构，非常适合阅读和学习。</p>
<h2> 内容概览</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/image-20220308100605485.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>通过这个简易的轮子，你可以学到 RPC 的底层原理和原理以及各种 Java 编码实践的运用。你甚至可以把它当做你的毕设/项目经验的选择，这是非常不错！对比其他求职者的项目经验都是各种系统，造轮子肯定是更加能赢得面试官的青睐。</p>
<ul>
<li>GitHub 地址：<a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener noreferrer">https://github.com/Snailclimb/guide-rpc-framework</a> 。</li>
<li>Gitee 地址：<a href="https://gitee.com/SnailClimb/guide-rpc-framework" target="_blank" rel="noopener noreferrer">https://gitee.com/SnailClimb/guide-rpc-framework</a> 。</li>
</ul>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/image-20220308100605485.png" type="image/png"/>
    </item>
    <item>
      <title>《Java 面试指北》</title>
      <link>https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html</link>
      <guid>https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html</guid>
      <source url="https://javaguide.cn/rss.xml">《Java 面试指北》</source>
      <description>我花费了两年多的时间，写了一本针对 Java 面试的《Java面试指北》。这份资料的内容质量还是非常高的，帮助了上万名同学高效准备 Java 面试。 目前的成绩：累计阅读 162w+ ,点赞 2300+ ，评论 700+ （几乎每一条提问类型的评论我看到后都会用心回复）。 《Java 面试指北》统计</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>我花费了两年多的时间，写了一本针对 Java 面试的《Java面试指北》。这份资料的内容质量还是非常高的，帮助了上万名同学高效准备 Java 面试。</p>
<p>目前的成绩：累计阅读 <strong>162w+</strong> ,点赞 <strong>2300+</strong> ，评论 <strong>700+</strong> （几乎每一条提问类型的评论我看到后都会用心回复）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/java-interview-guide-statistics.png" alt="《Java 面试指北》统计" tabindex="0"><figcaption>《Java 面试指北》统计</figcaption></figure>
<h2> 介绍</h2>
<p><strong>《Java 面试指北》</strong> 是我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>的一个内部小册，和 <a href="https://javaguide.cn/" target="_blank" rel="noopener noreferrer">JavaGuide 开源版</a>的内容互补。相比于开源版本来说，《Java 面试指北》添加了下面这些内容（不仅仅是这些内容）：</p>
<ul>
<li>15+ 篇文章手把手教你如何准备面试，40+ 准备面试过程中的常见问题详细解读，让你更高效地准备 Java 面试。</li>
<li>更全面的八股文面试题（系统设计、场景题、常见框架、分布式&amp;微服务、高并发 ......）。</li>
<li>优质面经精选（相比于牛客网或者其他网站的面经，《Java面试指北》中整理的面经质量更高，并且，我会提供优质的参考资料）。</li>
<li>技术面试题自测（高效准备技术八股文的技巧之一在于多多自测，查漏补缺）。</li>
<li>练级攻略（有助于个人成长的经验分享）。</li>
</ul>
<p>《Java 面试指北》 会根据每一年的面试情况对内容进行更新完善，保证内容质量的时效性。并且，只需要加入<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>一次，即可永久获取《Java面试指北》的访问权限，持续同步更新完善。</p>
<h2> 内容概览</h2>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/javamianshizhibei-content-overview.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h3> 面试准备篇</h3>
<p>在 <strong>「面试准备篇」</strong> ，我写了 15+ 篇文章手把手教你如何准备面试，准备面试过程中常见的疑问这里都有解答，内容涵盖项目经验、简历编写、源码学习、算法准备、面试资源等等。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/preparation-for-interview.png" alt="《Java 面试指北》面试准备篇" tabindex="0"><figcaption>《Java 面试指北》面试准备篇</figcaption></figure>
<p>另外，考虑到很多小伙伴缺少项目经历，我还推荐了很多小众但优质的实战项目，有视频也有开源项目，有业务系统，也有各种含金量比较高的轮子类项目。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/practical-project-recommendation.png" alt="实战项目推荐" tabindex="0"><figcaption>实战项目推荐</figcaption></figure>
<h3> 技术面试题篇</h3>
<p><strong>「技术面试题篇」</strong> 的内容和 JavaGuide 开源版本互补，不仅仅包括最基本的 Java、常见框架等八股文，还包括系统设计、分布式、高并发等进阶内容。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/technical-interview-questions.png" alt="《Java 面试指北》技术面试题篇" tabindex="0"><figcaption>《Java 面试指北》技术面试题篇</figcaption></figure>
<h3> 面经篇</h3>
<p>古人云:“<strong>他山之石，可以攻玉</strong>” 。善于学习借鉴别人的面试的成功经验或者失败的教训，可以让自己少走许多弯路。</p>
<p><strong>「面经篇」</strong> 主要会分享一些高质量的 Java 后端面经，有校招的，也有社招的，有大厂的，也有中小厂的。</p>
<p>如果你是非科班的同学，也能在这些文章中找到对应的非科班的同学写的面经。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/thinkimage-20220612185810480.png" alt="《Java 面试指北》面经篇" tabindex="0"><figcaption>《Java 面试指北》面经篇</figcaption></figure>
<p>并且，<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>还有专门分享面经和面试题的专题，里面会分享很多优质的面经和面试题。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304120018731.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220628101743381.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220628101805897.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>相比于牛客网或者其他网站的面经，《Java面试指北》中整理的面经质量更高，并且，我会提供优质的参考资料。</p>
<h3> 技术面试题自测篇</h3>
<p>为了让小伙伴们自测以检查自己的掌握情况，我还推出了 <strong>「技术面试题自测」</strong> 系列。不过，目前只更新了 Java 和数据库的自测，正在持续更新中。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220621095641897.png" alt="《Java 面试指北》技术面试题自测篇" tabindex="0"><figcaption>《Java 面试指北》技术面试题自测篇</figcaption></figure>
<p>高效准备技术八股文的技巧之一在于多多自测，查漏补缺。</p>
<h3> 练级攻略篇</h3>
<p><strong>「练级攻略篇」</strong> 这个系列主要内容一些有助于个人成长的经验分享。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/training-strategy-articles.png" alt="《Java 面试指北》练级攻略篇" tabindex="0"><figcaption>《Java 面试指北》练级攻略篇</figcaption></figure>
<p>每一篇内容都非常干货，不少球友看了之后表示收获满满。不过，最重要的还是知行合一。</p>
<h3> 工作篇</h3>
<p><strong>「工作篇」</strong> 这个系列主要内容是分享一些有助于个人以及职场发展的内容。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/gongzuopian.jpg" alt="《Java 面试指北》工作篇" tabindex="0"><figcaption>《Java 面试指北》工作篇</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/xingqiu/java-interview-guide-statistics.png" type="image/png"/>
    </item>
    <item>
      <title>星球专属优质专栏概览</title>
      <link>https://javaguide.cn/zhuanlan/</link>
      <guid>https://javaguide.cn/zhuanlan/</guid>
      <source url="https://javaguide.cn/rss.xml">星球专属优质专栏概览</source>
      <description>这部分的内容为我的知识星球专属，目前已经更新了下面这些专栏： 《Java 面试指北》 : 与 JavaGuide 开源版的内容互补！ 《后端面试高频系统设计&amp;amp;场景题》 : 包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。 《手写 RPC 框架》 : 从零开始基于 Netty+Kyro+Zookeeper 实现一个简易的 RPC 框架。 《Java 必读源码系列》：目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot 2.1 等框架/中间件的源码 ......</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>这部分的内容为我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>专属，目前已经更新了下面这些专栏：</p>
<ul>
<li><strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a></strong> : 与 JavaGuide 开源版的内容互补！</li>
<li><strong><a href="/zhuanlan/back-end-interview-high-frequency-system-design-and-scenario-questions.html" target="blank">《后端面试高频系统设计&amp;场景题》</a></strong> : 包含了常见的系统设计案例比如短链系统、秒杀系统以及高频的场景题比如海量数据去重、第三方授权登录。</li>
<li><strong><a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《手写 RPC 框架》</a></strong> : 从零开始基于 Netty+Kyro+Zookeeper 实现一个简易的 RPC 框架。</li>
<li><strong><a href="/zhuanlan/source-code-reading.html" target="blank">《Java 必读源码系列》</a></strong>：目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot 2.1 等框架/中间件的源码</li>
<li>......</li>
</ul>
<p>欢迎准备 Java 面试以及学习 Java 的同学加入我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>，干货非常多！收费虽然是白菜价，但星球里的内容比你参加几万的培训班质量还要高。</p>
<p>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</p>
<h2> 更多专栏</h2>
<p>除了上面介绍的之外，我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>还有 《Kafka 常见面试题/知识点总结》、《程序员副业赚钱之路》等多个专栏。进入星球之后，统统都可以免费阅读。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220211231206733.png" alt="知识星球专栏概览" tabindex="0"><figcaption>知识星球专栏概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/xingqiu/image-20220211231206733.png" type="image/png"/>
    </item>
    <item>
      <title>《Java 必读源码系列》</title>
      <link>https://javaguide.cn/zhuanlan/source-code-reading.html</link>
      <guid>https://javaguide.cn/zhuanlan/source-code-reading.html</guid>
      <source url="https://javaguide.cn/rss.xml">《Java 必读源码系列》</source>
      <description>介绍 《Java 必读源码系列》 是我的知识星球的一个内部小册，目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot 2.1 等框架/中间件的源码。 结构清晰，内容详细，非常适合想要深入学习框架/中间件源码的同学阅读。 内容概览</description>
      <category>知识星球</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 介绍</h2>
<p><strong>《Java 必读源码系列》</strong> 是我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>的一个内部小册，目前已经整理了 Dubbo 2.6.x、Netty 4.x、SpringBoot 2.1 等框架/中间件的源码。</p>
<p>结构清晰，内容详细，非常适合想要深入学习框架/中间件源码的同学阅读。</p>
<h2> 内容概览</h2>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220621091832348.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/xingqiu/image-20220621091832348.png" type="image/png"/>
    </item>
    <item>
      <title>十大经典排序算法总结</title>
      <link>https://javaguide.cn/cs-basics/algorithms/10-classical-sorting-algorithms.html</link>
      <guid>https://javaguide.cn/cs-basics/algorithms/10-classical-sorting-algorithms.html</guid>
      <source url="https://javaguide.cn/rss.xml">十大经典排序算法总结</source>
      <description>本文转自：http://www.guoyaohua.com/sorting.html，JavaGuide 对其做了补充完善。 引言 所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。一个优秀的算法可以节省大量的资源。在各个领域中考虑到数据的各种限制和规范，要得到一个符合实际的优秀算法，得经过大量的推理和分析。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文转自：<a href="http://www.guoyaohua.com/sorting.html" target="_blank" rel="noopener noreferrer">http://www.guoyaohua.com/sorting.html</a>，JavaGuide 对其做了补充完善。</p>
</blockquote>
<h2> 引言</h2>
<p>所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。一个优秀的算法可以节省大量的资源。在各个领域中考虑到数据的各种限制和规范，要得到一个符合实际的优秀算法，得经过大量的推理和分析。</p>
<p>两年前，我曾在<a href="https://www.cnblogs.com/guoyaohua/" target="_blank" rel="noopener noreferrer">博客园</a>发布过一篇<a href="https://www.cnblogs.com/guoyaohua/p/8600214.html" target="_blank" rel="noopener noreferrer">《十大经典排序算法最强总结（含 JAVA 代码实现）》</a>博文，简要介绍了比较经典的十大排序算法，不过在之前的博文中，仅给出了 Java 版本的代码实现，并且有一些细节上的错误。所以，今天重新写一篇文章，深入了解下十大经典排序算法的原理及实现。</p>
<h2> 简介</h2>
<p>排序算法可以分为：</p>
<ul>
<li><strong>内部排序</strong>：数据记录在内存中进行排序。</li>
<li><strong><a href="https://zh.wikipedia.org/wiki/%E5%A4%96%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener noreferrer">外部排序</a></strong>：因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</li>
</ul>
<p>常见的内部排序算法有：<strong>插入排序</strong>、<strong>希尔排序</strong>、<strong>选择排序</strong>、<strong>冒泡排序</strong>、<strong>归并排序</strong>、<strong>快速排序</strong>、<strong>堆排序</strong>、<strong>基数排序</strong>等，本文只讲解内部排序算法。用一张图概括：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/sort1.png" alt="十大排序算法" tabindex="0"><figcaption>十大排序算法</figcaption></figure>
<p>上图存在错误：</p>
<ol>
<li>插入排序的最好时间复杂度为 O(n) 而不是 O(n^2) 。</li>
<li>希尔排序的平均时间复杂度为 O(nlogn)</li>
</ol>
<p><strong>图片名词解释：</strong></p>
<ul>
<li><strong>n</strong>：数据规模</li>
<li><strong>k</strong>：“桶” 的个数</li>
<li><strong>In-place</strong>：占用常数内存，不占用额外内存</li>
<li><strong>Out-place</strong>：占用额外内存</li>
</ul>
<h3> 术语说明</h3>
<ul>
<li><strong>稳定</strong>：如果 A 原本在 B 前面，而 A=B，排序之后 A 仍然在 B 的前面。</li>
<li><strong>不稳定</strong>：如果 A 原本在 B 的前面，而 A=B，排序之后 A 可能会出现在 B 的后面。</li>
<li><strong>内排序</strong>：所有排序操作都在内存中完成。</li>
<li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行。</li>
<li><strong>时间复杂度</strong>：定性描述一个算法执行所耗费的时间。</li>
<li><strong>空间复杂度</strong>：定性描述一个算法执行所需内存的大小。</li>
</ul>
<h3> 算法分类</h3>
<p>十种常见排序算法可以分类两大类别：<strong>比较类排序</strong>和<strong>非比较类排序</strong>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/sort2.png" alt="排序算法分类" tabindex="0"><figcaption>排序算法分类</figcaption></figure>
<p>常见的<strong>快速排序</strong>、<strong>归并排序</strong>、<strong>堆排序</strong>以及<strong>冒泡排序</strong>等都属于<strong>比较类排序算法</strong>。比较类排序是通过比较来决定元素间的相对次序，由于其时间复杂度不能突破 <code>O(nlogn)</code>，因此也称为非线性时间比较类排序。在冒泡排序之类的排序中，问题规模为 <code>n</code>，又因为需要比较 <code>n</code> 次，所以平均时间复杂度为 <code>O(n²)</code>。在<strong>归并排序</strong>、<strong>快速排序</strong>之类的排序中，问题规模通过<strong>分治法</strong>消减为 <code>logn</code> 次，所以时间复杂度平均 <code>O(nlogn)</code>。</p>
<p>比较类排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，比较排序适用于一切需要排序的情况。</p>
<p>而<strong>计数排序</strong>、<strong>基数排序</strong>、<strong>桶排序</strong>则属于<strong>非比较类排序算法</strong>。非比较排序不通过比较来决定元素间的相对次序，而是通过确定每个元素之前，应该有多少个元素来排序。由于它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。 非比较排序只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决。算法时间复杂度 <code>O(n)</code>。</p>
<p>非比较排序时间复杂度底，但由于非比较排序需要占用空间来确定唯一位置。所以对数据规模和数据分布有一定的要求。</p>
<h2> 冒泡排序 (Bubble Sort)</h2>
<p>冒泡排序是一种简单的排序算法。它重复地遍历要排序的序列，依次比较两个元素，如果它们的顺序错误就把它们交换过来。遍历序列的工作是重复地进行直到没有再需要交换为止，此时说明该序列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢 “浮” 到数列的顶端。</p>
<h3> 算法步骤</h3>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤 1~3，直到排序完成。</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/bubble_sort.gif" alt="冒泡排序" tabindex="0"><figcaption>冒泡排序</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>此处对代码做了一个小优化，加入了 <code>is_sorted</code> Flag，目的是将算法的最佳时间复杂度优化为 <code>O(n)</code>，即当原输入序列就是排序好的情况下，该算法的时间复杂度就是 <code>O(n)</code>。</strong></p>
<h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：稳定</li>
<li><strong>时间复杂度</strong>：最佳：O(n) ，最差：O(n2)， 平均：O(n2)</li>
<li><strong>空间复杂度</strong>：O(1)</li>
<li><strong>排序方式</strong>：In-place</li>
</ul>
<h2> 选择排序 (Selection Sort)</h2>
<p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 <code>O(n²)</code> 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<h3> 算法步骤</h3>
<ol>
<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li>
<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>重复第 2 步，直到所有元素均排序完毕。</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/selection_sort.gif" alt="Selection Sort" tabindex="0"><figcaption>Selection Sort</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：不稳定</li>
<li><strong>时间复杂度</strong>：最佳：O(n2) ，最差：O(n2)， 平均：O(n2)</li>
<li><strong>空间复杂度</strong>：O(1)</li>
<li><strong>排序方式</strong>：In-place</li>
</ul>
<h2> 插入排序 (Insertion Sort)</h2>
<p>插入排序是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 <code>O(1)</code> 的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p>
<h3> 算法步骤</h3>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤 2~5。</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/insertion_sort.gif" alt="insertion_sort" tabindex="0"><figcaption>insertion_sort</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：稳定</li>
<li><strong>时间复杂度</strong>：最佳：O(n) ，最差：O(n2)， 平均：O(n2)</li>
<li><strong>空间复杂度</strong>：O(1)</li>
<li><strong>排序方式</strong>：In-place</li>
</ul>
<h2> 希尔排序 (Shell Sort)</h2>
<p>希尔排序是希尔 (Donald Shell) 于 1959 年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为递减增量排序算法，同时该算法是冲破 <code>O(n²)</code> 的第一批算法之一。</p>
<p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录 “基本有序” 时，再对全体记录进行依次直接插入排序。</p>
<h3> 算法步骤</h3>
<p>我们来看下希尔排序的基本步骤，在此我们选择增量 <code>gap=length/2</code>，缩小增量继续以 <code>gap = gap/2</code> 的方式，这种增量选择我们可以用一个序列来表示，<code>{n/2, (n/2)/2, ..., 1}</code>，称为<strong>增量序列</strong>。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>
<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列 <code>{t1, t2, …, tk}</code>，其中 <code>(ti&gt;tj, i&lt;j, tk=1)</code>；</li>
<li>按增量序列个数 k，对序列进行 k 趟排序；</li>
<li>每趟排序，根据对应的增量 <code>t</code>，将待排序列分割成若干长度为 <code>m</code> 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ul>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/shell_sort.png" alt="shell_sort" tabindex="0"><figcaption>shell_sort</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：不稳定</li>
<li><strong>时间复杂度</strong>：最佳：O(nlogn)， 最差：O(n^2)  平均：O(nlogn)</li>
<li><strong>空间复杂度</strong>：<code>O(1)</code></li>
</ul>
<h2> 归并排序 (Merge Sort)</h2>
<p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法 (Divide and Conquer) 的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为 2 - 路归并。</p>
<p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 <code>O(nlogn)</code> 的时间复杂度。代价是需要额外的内存空间。</p>
<h3> 算法步骤</h3>
<p>归并排序算法是一个递归过程，边界条件为当输入序列仅有一个元素时，直接返回，具体过程如下：</p>
<ol>
<li>如果输入内只有一个元素，则直接返回，否则将长度为 <code>n</code> 的输入序列分成两个长度为 <code>n/2</code> 的子序列；</li>
<li>分别对这两个子序列进行归并排序，使子序列变为有序状态；</li>
<li>设定两个指针，分别指向两个已经排序子序列的起始位置；</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间（用于存放排序结果），并移动指针到下一位置；</li>
<li>重复步骤 3 ~4 直到某一指针达到序列尾；</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/merge_sort.gif" alt="MergeSort" tabindex="0"><figcaption>MergeSort</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：稳定</li>
<li><strong>时间复杂度</strong>：最佳：O(nlogn)， 最差：O(nlogn)， 平均：O(nlogn)</li>
<li><strong>空间复杂度</strong>：O(n)</li>
</ul>
<h2> 快速排序 (Quick Sort)</h2>
<p>快速排序用到了分治思想，同样的还有归并排序。乍看起来快速排序和归并排序非常相似，都是将问题变小，先排序子串，最后合并。不同的是快速排序在划分子问题的时候经过多一步处理，将划分的两组数据划分为一大一小，这样在最后合并的时候就不必像归并排序那样再进行比较。但也正因为如此，划分的不定性使得快速排序的时间复杂度并不稳定。</p>
<p>快速排序的基本思想：通过一趟排序将待排序列分隔成独立的两部分，其中一部分记录的元素均比另一部分的元素小，则可分别对这两部分子序列继续进行排序，以达到整个序列有序。</p>
<h3> 算法步骤</h3>
<p>快速排序使用<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95" target="_blank" rel="noopener noreferrer">分治法</a>（Divide and conquer）策略来把一个序列分为较小和较大的 2 个子序列，然后递回地排序两个子序列。具体算法描述如下：</p>
<ol>
<li>从序列中<strong>随机</strong>挑出一个元素，做为 “基准”(<code>pivot</code>)；</li>
<li>重新排列序列，将所有比基准值小的元素摆放在基准前面，所有比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个操作结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地把小于基准值元素的子序列和大于基准值元素的子序列进行快速排序。</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/random_quick_sort.gif" alt="RandomQuickSort" tabindex="0"><figcaption>RandomQuickSort</figcaption></figure>
<h3> 代码实现</h3>
<blockquote>
<p>来源：<a href="https://segmentfault.com/a/1190000040022056" target="_blank" rel="noopener noreferrer">使用 Java 实现快速排序（详解）</a></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：不稳定</li>
<li><strong>时间复杂度</strong>：最佳：O(nlogn)， 最差：O(nlogn)，平均：O(nlogn)</li>
<li><strong>空间复杂度</strong>：O(logn)</li>
</ul>
<h2> 堆排序 (Heap Sort)</h2>
<p>堆排序是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足<strong>堆的性质</strong>：即<strong>子结点的值总是小于（或者大于）它的父节点</strong>。</p>
<h3> 算法步骤</h3>
<ol>
<li>将初始待排序列 <code>(R1, R2, ……, Rn)</code> 构建成大顶堆，此堆为初始的无序区；</li>
<li>将堆顶元素 <code>R[1]</code> 与最后一个元素 <code>R[n]</code> 交换，此时得到新的无序区 <code>(R1, R2, ……, Rn-1)</code> 和新的有序区 (Rn), 且满足 <code>R[1, 2, ……, n-1]&lt;=R[n]</code>；</li>
<li>由于交换后新的堆顶 <code>R[1]</code> 可能违反堆的性质，因此需要对当前无序区 <code>(R1, R2, ……, Rn-1)</code> 调整为新堆，然后再次将 R [1] 与无序区最后一个元素交换，得到新的无序区 <code>(R1, R2, ……, Rn-2)</code> 和新的有序区 <code>(Rn-1, Rn)</code>。不断重复此过程直到有序区的元素个数为 <code>n-1</code>，则整个排序过程完成。</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/heap_sort.gif" alt="HeapSort" tabindex="0"><figcaption>HeapSort</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：不稳定</li>
<li><strong>时间复杂度</strong>：最佳：O(nlogn)， 最差：O(nlogn)， 平均：O(nlogn)</li>
<li><strong>空间复杂度</strong>：O(1)</li>
</ul>
<h2> 计数排序 (Counting Sort)</h2>
<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，<strong>计数排序要求输入的数据必须是有确定范围的整数</strong>。</p>
<p>计数排序 (Counting sort) 是一种稳定的排序算法。计数排序使用一个额外的数组 <code>C</code>，其中第 <code>i</code> 个元素是待排序数组 <code>A</code> 中值等于 <code>i</code> 的元素的个数。然后根据数组 <code>C</code> 来将 <code>A</code> 中的元素排到正确的位置。<strong>它只能对整数进行排序</strong>。</p>
<h3> 算法步骤</h3>
<ol>
<li>找出数组中的最大值 <code>max</code>、最小值 <code>min</code>；</li>
<li>创建一个新数组 <code>C</code>，其长度是 <code>max-min+1</code>，其元素默认值都为 0；</li>
<li>遍历原数组 <code>A</code> 中的元素 <code>A[i]</code>，以 <code>A[i]-min</code> 作为 <code>C</code> 数组的索引，以 <code>A[i]</code> 的值在 <code>A</code> 中元素出现次数作为 <code>C[A[i]-min]</code> 的值；</li>
<li>对 <code>C</code> 数组变形，<strong>新元素的值是该元素与前一个元素值的和</strong>，即当 <code>i&gt;1</code> 时 <code>C[i] = C[i] + C[i-1]</code>；</li>
<li>创建结果数组 <code>R</code>，长度和原始数组一样。</li>
<li><strong>从后向前</strong>遍历原始数组 <code>A</code> 中的元素 <code>A[i]</code>，使用 <code>A[i]</code> 减去最小值 <code>min</code> 作为索引，在计数数组 <code>C</code> 中找到对应的值 <code>C[A[i]-min]</code>，<code>C[A[i]-min]-1</code> 就是 <code>A[i]</code> 在结果数组 <code>R</code> 中的位置，做完上述这些操作，将 <code>count[A[i]-min]</code> 减小 1。</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/counting_sort.gif" alt="CountingSort" tabindex="0"><figcaption>CountingSort</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 算法分析</h2>
<p>当输入的元素是 <code>n</code> 个 <code>0</code> 到 <code>k</code> 之间的整数时，它的运行时间是 <code>O(n+k)</code>。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组 <code>C</code> 的长度取决于待排序数组中数据的范围（等于待排序数组的<strong>最大值与最小值的差加上 1</strong>），这使得计数排序对于数据范围很大的数组，需要大量额外内存空间。</p>
<ul>
<li><strong>稳定性</strong>：稳定</li>
<li><strong>时间复杂度</strong>：最佳：<code>O(n+k)</code> 最差：<code>O(n+k)</code> 平均：<code>O(n+k)</code></li>
<li><strong>空间复杂度</strong>：<code>O(k)</code></li>
</ul>
<h2> 桶排序 (Bucket Sort)</h2>
<p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>
<ol>
<li>在额外空间充足的情况下，尽量增大桶的数量</li>
<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li>
</ol>
<p>桶排序的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行。</p>
<h3> 算法步骤</h3>
<ol>
<li>设置一个 BucketSize，作为每个桶所能放置多少个不同数值；</li>
<li>遍历输入数据，并且把数据依次映射到对应的桶里去；</li>
<li>对每个非空的桶进行排序，可以使用其它排序方法，也可以递归使用桶排序；</li>
<li>从非空桶里把排好序的数据拼接起来。</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/bucket_sort.gif" alt="BucketSort" tabindex="0"><figcaption>BucketSort</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：稳定</li>
<li><strong>时间复杂度</strong>：最佳：<code>O(n+k)</code> 最差：<code>O(n²)</code> 平均：<code>O(n+k)</code></li>
<li><strong>空间复杂度</strong>：<code>O(n+k)</code></li>
</ul>
<h2> 基数排序 (Radix Sort)</h2>
<p>基数排序也是非比较的排序算法，对元素中的每一位数字进行排序，从最低位开始排序，复杂度为 <code>O(n×k)</code>，<code>n</code> 为数组长度，<code>k</code> 为数组中元素的最大的位数；</p>
<p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。</p>
<h3> 算法步骤</h3>
<ol>
<li>取得数组中的最大数，并取得位数，即为迭代次数 <code>N</code>（例如：数组中最大数值为 1000，则 <code>N=4</code>）；</li>
<li><code>A</code> 为原始数组，从最低位开始取每个位组成 <code>radix</code> 数组；</li>
<li>对 <code>radix</code> 进行计数排序（利用计数排序适用于小范围数的特点）；</li>
<li>将 <code>radix</code> 依次赋值给原数组；</li>
<li>重复 2~4 步骤 <code>N</code> 次</li>
</ol>
<h3> 图解算法</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/radix_sort.gif" alt="RadixSort" tabindex="0"><figcaption>RadixSort</figcaption></figure>
<h3> 代码实现</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 算法分析</h3>
<ul>
<li><strong>稳定性</strong>：稳定</li>
<li><strong>时间复杂度</strong>：最佳：<code>O(n×k)</code> 最差：<code>O(n×k)</code> 平均：<code>O(n×k)</code></li>
<li><strong>空间复杂度</strong>：<code>O(n+k)</code></li>
</ul>
<p><strong>基数排序 vs 计数排序 vs 桶排序</strong></p>
<p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>
<ul>
<li>基数排序：根据键值的每位数字来分配桶</li>
<li>计数排序：每个桶只存储单一键值</li>
<li>桶排序：每个桶存储一定范围的数值</li>
</ul>
<h2> 参考文章</h2>
<ul>
<li><a href="https://www.cnblogs.com/guoyaohua/p/8600214.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/guoyaohua/p/8600214.html</a></li>
<li><a href="https://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Sorting_algorithm</a></li>
<li><a href="https://sort.hust.cc/" target="_blank" rel="noopener noreferrer">https://sort.hust.cc/</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/sorting-algorithms/sort1.png" type="image/png"/>
    </item>
    <item>
      <title>几道常见的链表算法题</title>
      <link>https://javaguide.cn/cs-basics/algorithms/linkedlist-algorithm-problems.html</link>
      <guid>https://javaguide.cn/cs-basics/algorithms/linkedlist-algorithm-problems.html</guid>
      <source url="https://javaguide.cn/rss.xml">几道常见的链表算法题</source>
      <description>1. 两数相加 题目描述 Leetcode:给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。 你可以假设除了数字 0 之外，这两个数字都不会以零开头。 示例： 输入：(2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) 输出：7 -&amp;gt; 0 -&amp;gt; 8 原因：342 + 465 = 807</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 1. 两数相加</h2>
<h3> 题目描述</h3>
<blockquote>
<p>Leetcode:给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>
</blockquote>
<p>示例：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 问题分析</h3>
<p>Leetcode 官方详细解答地址：</p>
<p>https://leetcode-cn.com/problems/add-two-numbers/solution/</p>
<blockquote>
<p>要对头结点进行操作时，考虑创建哑节点 dummy，使用 dummy-&gt;next 表示真正的头节点。这样可以避免处理头节点为空的边界问题。</p>
</blockquote>
<p>我们使用变量来跟踪进位，并从包含最低有效位的表头开始模拟逐
位相加的过程。</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-20/34910956.jpg" alt="图1，对两数相加方法的可视化: 342 + 465 = 807， 每个结点都包含一个数字，并且数字按位逆序存储。" tabindex="0"><figcaption>图1，对两数相加方法的可视化: 342 + 465 = 807， 每个结点都包含一个数字，并且数字按位逆序存储。</figcaption></figure>
<h3> Solution</h3>
<p><strong>我们首先从最低有效位也就是列表 l1 和 l2 的表头开始相加。注意需要考虑到进位的情况！</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2. 翻转链表</h2>
<h3> 题目描述</h3>
<blockquote>
<p>剑指 offer:输入一个链表，反转链表后，输出链表的所有元素。</p>
</blockquote>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-20/81431871.jpg" alt="翻转链表" tabindex="0"><figcaption>翻转链表</figcaption></figure>
<h3> 问题分析</h3>
<p>这道算法题，说直白点就是：如何让后一个节点指向前一个节点！在下面的代码中定义了一个 next 节点，该节点主要是保存要反转到头的那个节点，防止链表 “断裂”。</p>
<h3> Solution</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3. 链表中倒数第 k 个节点</h2>
<h3> 题目描述</h3>
<blockquote>
<p>剑指 offer: 输入一个链表，输出该链表中倒数第 k 个结点。</p>
</blockquote>
<h3> 问题分析</h3>
<blockquote>
<p><strong>链表中倒数第 k 个节点也就是正数第(L-K+1)个节点，知道了只一点，这一题基本就没问题！</strong></p>
</blockquote>
<p>首先两个节点/指针，一个节点 node1 先开始跑，指针 node1 跑到 k-1 个节点后，另一个节点 node2 开始跑，当 node1 跑到最后时，node2 所指的节点就是倒数第 k 个节点也就是正数第(L-K+1)个节点。</p>
<h3> Solution</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4. 删除链表的倒数第 N 个节点</h2>
<blockquote>
<p>Leetcode:给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p>
</blockquote>
<p><strong>示例：</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p>
<p>给定的 n 保证是有效的。</p>
<p><strong>进阶：</strong></p>
<p>你能尝试使用一趟扫描实现吗？</p>
<p>该题在 leetcode 上有详细解答，具体可参考 Leetcode.</p>
<h3> 问题分析</h3>
<p>我们注意到这个问题可以容易地简化成另一个问题：删除从列表开头数起的第 (L - n + 1)个结点，其中 L 是列表的长度。只要我们找到列表的长度 L，这个问题就很容易解决。</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-20/94354387.jpg" alt="图 1. 删除列表中的第 L - n + 1 个元素" tabindex="0"><figcaption>图 1. 删除列表中的第 L - n + 1 个元素</figcaption></figure>
<h3> Solution</h3>
<p><strong>两次遍历法</strong></p>
<p>首先我们将添加一个 <strong>哑结点</strong> 作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。在第一次遍历中，我们找出列表的长度 L。然后设置一个指向哑结点的指针，并移动它遍历列表，直至它到达第 (L - n) 个结点那里。<strong>我们把第 (L - n)个结点的 next 指针重新链接至第 (L - n + 2)个结点，完成这个算法。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>进阶——一次遍历法：</strong></p>
<blockquote>
<p>链表中倒数第 N 个节点也就是正数第(L - n + 1)个节点。</p>
</blockquote>
<p>其实这种方法就和我们上面第四题找“链表中倒数第 k 个节点”所用的思想是一样的。<strong>基本思路就是：</strong> 定义两个节点 node1、node2;node1 节点先跑，node1 节点 跑到第 n+1 个节点的时候,node2 节点开始跑.当 node1 节点跑到最后一个节点时，node2 节点所在的位置就是第 （L - n ） 个节点（L 代表总链表长度，也就是倒数第 n + 1 个节点）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5. 合并两个排序的链表</h2>
<h3> 题目描述</h3>
<blockquote>
<p>剑指 offer:输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>
</blockquote>
<h3> 问题分析</h3>
<p>我们可以这样分析:</p>
<ol>
<li>假设我们有两个链表 A,B；</li>
<li>A 的头节点 A1 的值与 B 的头结点 B1 的值比较，假设 A1 小，则 A1 为头节点；</li>
<li>A2 再和 B1 比较，假设 B1 小,则，A1 指向 B1；</li>
<li>A2 再和 B2 比较
就这样循环往复就行了，应该还算好理解。</li>
</ol>
<p>考虑通过递归的方式实现！</p>
<h3> Solution</h3>
<p><strong>递归版本：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-20/34910956.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>几道常见的字符串算法题</title>
      <link>https://javaguide.cn/cs-basics/algorithms/string-algorithm-problems.html</link>
      <guid>https://javaguide.cn/cs-basics/algorithms/string-algorithm-problems.html</guid>
      <source url="https://javaguide.cn/rss.xml">几道常见的字符串算法题</source>
      <description>作者：wwwxmu 原文地址:https://www.weiweiblog.cn/13string/ 1. KMP 算法 谈到字符串问题，不得不提的就是 KMP 算法，它是用来解决字符串查找的问题，可以在一个字符串（S）中查找一个子串（W）出现的位置。KMP 算法把字符匹配的时间复杂度缩小到 O(m+n) ,而空间复杂度也只有 O(m)。因为“暴力搜索”的方法会反复回溯主串，导致效率低下，而 KMP 算法可以利用已经部分匹配这个有效信息，保持主串上的指针不回溯，通过修改子串的指针，让模式串尽量地移动到有效的位置。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>作者：wwwxmu</p>
<p>原文地址:https://www.weiweiblog.cn/13string/</p>
</blockquote>
<h2> 1. KMP 算法</h2>
<p>谈到字符串问题，不得不提的就是 KMP 算法，它是用来解决字符串查找的问题，可以在一个字符串（S）中查找一个子串（W）出现的位置。KMP 算法把字符匹配的时间复杂度缩小到 O(m+n) ,而空间复杂度也只有 O(m)。因为“暴力搜索”的方法会反复回溯主串，导致效率低下，而 KMP 算法可以利用已经部分匹配这个有效信息，保持主串上的指针不回溯，通过修改子串的指针，让模式串尽量地移动到有效的位置。</p>
<p>具体算法细节请参考：</p>
<ul>
<li><a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener noreferrer">从头到尾彻底理解 KMP:</a></li>
<li><a href="https://www.zhihu.com/question/21923021" target="_blank" rel="noopener noreferrer">如何更好的理解和掌握 KMP 算法?</a></li>
<li><a href="https://blog.sengxian.com/algorithms/kmp" target="_blank" rel="noopener noreferrer">KMP 算法详细解析</a></li>
<li><a href="http://blog.jobbole.com/76611/" target="_blank" rel="noopener noreferrer">图解 KMP 算法</a></li>
<li><a href="https://www.bilibili.com/video/av3246487/?from=search&amp;seid=17173603269940723925" target="_blank" rel="noopener noreferrer">汪都能听懂的 KMP 字符串匹配算法【双语字幕】</a></li>
<li><a href="https://www.bilibili.com/video/av11866460?from=search&amp;seid=12730654434238709250" target="_blank" rel="noopener noreferrer">KMP 字符串匹配算法 1</a></li>
</ul>
<p><strong>除此之外，再来了解一下 BM 算法！</strong></p>
<blockquote>
<p>BM 算法也是一种精确字符串匹配算法，它采用从右向左比较的方法，同时应用到了两种启发式规则，即坏字符规则 和好后缀规则 ，来决定向右跳跃的距离。基本思路就是从右往左进行字符匹配，遇到不匹配的字符后从坏字符表和好后缀表找一个最大的右移值，将模式串右移继续匹配。
《字符串匹配的 KMP 算法》:http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</p>
</blockquote>
<h2> 2. 替换空格</h2>
<blockquote>
<p>剑指 offer：请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为 We Are Happy.则经过替换之后的字符串为 We%20Are%20Happy。</p>
</blockquote>
<p>这里我提供了两种方法：① 常规方法；② 利用 API 解决。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于替换固定字符（比如空格）的情况，第二种方法其实可以使用 <code>replace</code> 方法替换，性能更好!</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3. 最长公共前缀</h2>
<blockquote>
<p>Leetcode: 编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 ""。</p>
</blockquote>
<p>示例 1:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路很简单！先利用 Arrays.sort(strs)为数组排序，再将数组第一个元素和最后一个元素的字符从前往后对比即可！</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4. 回文串</h2>
<h3> 4.1. 最长回文串</h3>
<blockquote>
<p>LeetCode: 给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如<code>"Aa"</code>不能当做一个回文字符串。注
意:假设字符串的长度不会超过 1010。</p>
</blockquote>
<blockquote>
<p>回文串：“回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。——百度百科 地址：https://baike.baidu.com/item/%E5%9B%9E%E6%96%87%E4%B8%B2/1274921?fr=aladdin</p>
</blockquote>
<p>示例 1:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们上面已经知道了什么是回文串？现在我们考虑一下可以构成回文串的两种情况：</p>
<ul>
<li>字符出现次数为双数的组合</li>
<li><strong>字符出现次数为偶数的组合+单个字符中出现次数最多且为奇数次的字符</strong> （参见 <strong><a href="https://github.com/Snailclimb/JavaGuide/issues/665" target="_blank" rel="noopener noreferrer">issue665</a></strong> ）</li>
</ul>
<p>统计字符出现的次数即可，双数才能构成回文。因为允许中间一个数单独出现，比如“abcba”，所以如果最后有字母落单，总长度可以加 1。首先将字符串转变为字符数组。然后遍历该数组，判断对应字符是否在 hashset 中，如果不在就加进去，如果在就让 count++，然后移除该字符！这样就能找到出现次数为双数的字符个数。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2. 验证回文串</h3>
<blockquote>
<p>LeetCode: 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。</p>
</blockquote>
<p>示例 1:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.3. 最长回文子串</h3>
<blockquote>
<p>Leetcode: LeetCode: 最长回文子串 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>
</blockquote>
<p>示例 1：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以某个元素为中心，分别计算偶数长度的回文最大长度和奇数长度的回文最大长度。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.4. 最长回文子序列</h3>
<blockquote>
<p>LeetCode: 最长回文子序列
给定一个字符串 s，找到其中最长的回文子序列。可以假设 s 的最大长度为 1000。
<strong>最长回文子序列和上一题最长回文子串的区别是，子串是字符串中连续的一个序列，而子序列是字符串中保持相对位置的字符序列，例如，"bbbb"可以是字符串"bbbab"的子序列但不是子串。</strong></p>
</blockquote>
<p>给定一个字符串 s，找到其中最长的回文子序列。可以假设 s 的最大长度为 1000。</p>
<p>示例 1:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个可能的最长回文子序列为 "bbbb"。</p>
<p>示例 2:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个可能的最长回文子序列为 "bb"。</p>
<p><strong>动态规划：</strong> dp[i][j] = dp[i+1][j-1] + 2 if s.charAt(i) == s.charAt(j) otherwise, dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1])</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5. 括号匹配深度</h2>
<blockquote>
<p>爱奇艺 2018 秋招 Java：
一个合法的括号匹配序列有以下定义:</p>
<ol>
<li>空串""是一个合法的括号匹配序列</li>
<li>如果"X"和"Y"都是合法的括号匹配序列,"XY"也是一个合法的括号匹配序列</li>
<li>如果"X"是一个合法的括号匹配序列,那么"(X)"也是一个合法的括号匹配序列</li>
<li>每个合法的括号序列都可以由以上规则生成。</li>
</ol>
</blockquote>
<blockquote>
<p>例如: "","()","()()","((()))"都是合法的括号序列
对于一个合法的括号序列我们又有以下定义它的深度:</p>
<ol>
<li>空串""的深度是 0</li>
<li>如果字符串"X"的深度是 x,字符串"Y"的深度是 y,那么字符串"XY"的深度为 max(x,y)</li>
<li>如果"X"的深度是 x,那么字符串"(X)"的深度是 x+1</li>
</ol>
</blockquote>
<blockquote>
<p>例如: "()()()"的深度是 1,"((()))"的深度是 3。牛牛现在给你一个合法的括号序列,需要你计算出其深度。</p>
</blockquote>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6. 把字符串转换成整数</h2>
<blockquote>
<p>剑指 offer: 将一个字符串转换成一个整数(实现 Integer.valueOf(string)的功能，但是 string 不符合数字要求时返回 0)，要求不能使用字符串转换整数的库函数。 数值为 0 或者字符串不是一个合法的数值则返回 0。</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>剑指offer部分编程题</title>
      <link>https://javaguide.cn/cs-basics/algorithms/the-sword-refers-to-offer.html</link>
      <guid>https://javaguide.cn/cs-basics/algorithms/the-sword-refers-to-offer.html</guid>
      <source url="https://javaguide.cn/rss.xml">剑指offer部分编程题</source>
      <description>斐波那契数列 题目描述： 大家都知道斐波那契数列，现在要求输入一个整数 n，请你输出斐波那契数列的第 n 项。 n&amp;lt;=39 问题分析： 可以肯定的是这一题通过递归的方式是肯定能做出来，但是这样会有一个很大的问题，那就是递归大量的重复计算会导致内存溢出。另外可以使用迭代法，用 fn1 和 fn2 保存计算过程中的结果，并复用起来。下面我会把两个方法示例代码都给出来并给出两个方法的运行时间对比。 示例代码：</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 斐波那契数列</h2>
<p><strong>题目描述：</strong></p>
<p>大家都知道斐波那契数列，现在要求输入一个整数 n，请你输出斐波那契数列的第 n 项。
n&lt;=39</p>
<p><strong>问题分析：</strong></p>
<p>可以肯定的是这一题通过递归的方式是肯定能做出来，但是这样会有一个很大的问题，那就是递归大量的重复计算会导致内存溢出。另外可以使用迭代法，用 fn1 和 fn2 保存计算过程中的结果，并复用起来。下面我会把两个方法示例代码都给出来并给出两个方法的运行时间对比。</p>
<p><strong>示例代码：</strong></p>
<p>采用迭代法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用递归：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 跳台阶问题</h2>
<p><strong>题目描述：</strong></p>
<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>
<p><strong>问题分析：</strong></p>
<p>正常分析法：</p>
<blockquote>
<p>a.如果两种跳法，1 阶或者 2 阶，那么假定第一次跳的是一阶，那么剩下的是 n-1 个台阶，跳法是 f(n-1);
b.假定第一次跳的是 2 阶，那么剩下的是 n-2 个台阶，跳法是 f(n-2)
c.由 a，b 假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)
d.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2</p>
</blockquote>
<p>找规律分析法：</p>
<blockquote>
<p>f(1) = 1, f(2) = 2, f(3) = 3, f(4) = 5， 可以总结出 f(n) = f(n-1) + f(n-2)的规律。但是为什么会出现这样的规律呢？假设现在 6 个台阶，我们可以从第 5 跳一步到 6，这样的话有多少种方案跳到 5 就有多少种方案跳到 6，另外我们也可以从 4 跳两步跳到 6，跳到 4 有多少种方案的话，就有多少种方案跳到 6，其他的不能从 3 跳到 6 什么的啦，所以最后就是 f(6) = f(5) + f(4)；这样子也很好理解变态跳台阶的问题了。</p>
</blockquote>
<p><strong>所以这道题其实就是斐波那契数列的问题。</strong></p>
<p>代码只需要在上一题的代码稍做修改即可。和上一题唯一不同的就是这一题的初始元素变为 1 2 3 5 8.....而上一题为 1 1 2 3 5 .......。另外这一题也可以用递归做，但是递归效率太低，所以我这里只给出了迭代方式的代码。</p>
<p><strong>示例代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 变态跳台阶问题</h2>
<p><strong>题目描述：</strong></p>
<p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级……它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>
<p><strong>问题分析：</strong></p>
<p>假设 n&gt;=2，第一步有 n 种跳法：跳 1 级、跳 2 级、到跳 n 级
跳 1 级，剩下 n-1 级，则剩下跳法是 f(n-1)
跳 2 级，剩下 n-2 级，则剩下跳法是 f(n-2)
......
跳 n-1 级，剩下 1 级，则剩下跳法是 f(1)
跳 n 级，剩下 0 级，则剩下跳法是 f(0)
所以在 n&gt;=2 的情况下：
f(n)=f(n-1)+f(n-2)+...+f(1)
因为 f(n-1)=f(n-2)+f(n-3)+...+f(1)
所以 f(n)=2*f(n-1) 又 f(1)=1,所以可得<strong>f(n)=2^(number-1)</strong></p>
<p><strong>示例代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>补充：</strong></p>
<p>java 中有三种移位运算符：</p>
<ol>
<li>“&lt;&lt;” : <strong>左移运算符</strong>，等同于乘 2 的 n 次方</li>
<li>“&gt;&gt;”: <strong>右移运算符</strong>，等同于除 2 的 n 次方</li>
<li>“&gt;&gt;&gt;” : <strong>无符号右移运算符</strong>，不管移动前最高位是 0 还是 1，右移后左侧产生的空位部分都以 0 来填充。与&gt;&gt;类似。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 二维数组查找</h2>
<p><strong>题目描述：</strong></p>
<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p><strong>问题解析：</strong></p>
<p>这一道题还是比较简单的，我们需要考虑的是如何做，效率最快。这里有一种很好理解的思路：</p>
<blockquote>
<p>矩阵是有序的，从左下角来看，向上数字递减，向右数字递增，
因此从左下角开始查找，当要查找数字比左下角数字大时。右移
要查找数字比左下角数字小时，上移。这样找的速度最快。</p>
</blockquote>
<p><strong>示例代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 替换空格</h2>
<p><strong>题目描述：</strong></p>
<p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为 We Are Happy.则经过替换之后的字符串为 We%20Are%20Happy。</p>
<p><strong>问题分析：</strong></p>
<p>这道题不难，我们可以通过循环判断字符串的字符是否为空格，是的话就利用 append()方法添加追加“%20”，否则还是追加原字符。</p>
<p>或者最简单的方法就是利用：replaceAll(String regex,String replacement)方法了，一行代码就可以解决。</p>
<p><strong>示例代码：</strong></p>
<p>常规做法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一行代码解决：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 数值的整数次方</h2>
<p><strong>题目描述：</strong></p>
<p>给定一个 double 类型的浮点数 base 和 int 类型的整数 exponent。求 base 的 exponent 次方。</p>
<p><strong>问题解析：</strong></p>
<p>这道题算是比较麻烦和难一点的一个了。我这里采用的是<strong>二分幂</strong>思想，当然也可以采用<strong>快速幂</strong>。
更具剑指 offer 书中细节，该题的解题思路如下：1.当底数为 0 且指数&lt;0 时，会出现对 0 求倒数的情况，需进行错误处理，设置一个全局变量； 2.判断底数是否等于 0，由于 base 为 double 型，所以不能直接用==判断 3.优化求幂函数（二分幂）。
当 n 为偶数，a^n =（a^n/2）_（a^n/2）；
当 n 为奇数，a^n = a^[(n-1)/2] _ a^[(n-1)/2] * a。时间复杂度 O(logn)</p>
<p><strong>时间复杂度</strong>：O(logn)</p>
<p><strong>示例代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然这一题也可以采用笨方法：累乘。不过这种方法的时间复杂度为 O（n），这样没有前一种方法效率高。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 调整数组顺序使奇数位于偶数前面</h2>
<p><strong>题目描述：</strong></p>
<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>
<p><strong>问题解析：</strong></p>
<p>这道题有挺多种解法的，给大家介绍一种我觉得挺好理解的方法：
我们首先统计奇数的个数假设为 n,然后新建一个等长数组，然后通过循环判断原数组中的元素为偶数还是奇数。如果是则从数组下标 0 的元素开始，把该奇数添加到新数组；如果是偶数则从数组下标为 n 的元素开始把该偶数添加到新数组中。</p>
<p><strong>示例代码：</strong></p>
<p>时间复杂度为 O（n），空间复杂度为 O（n）的算法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 链表中倒数第 k 个节点</h2>
<p><strong>题目描述：</strong></p>
<p>输入一个链表，输出该链表中倒数第 k 个结点</p>
<p><strong>问题分析：</strong></p>
<p><strong>一句话概括：</strong>
两个指针一个指针 p1 先开始跑，指针 p1 跑到 k-1 个节点后，另一个节点 p2 开始跑，当 p1 跑到最后时，p2 所指的指针就是倒数第 k 个节点。</p>
<p><strong>思想的简单理解：</strong>
前提假设：链表的结点个数(长度)为 n。
规律一：要找到倒数第 k 个结点，需要向前走多少步呢？比如倒数第一个结点，需要走 n 步，那倒数第二个结点呢？很明显是向前走了 n-1 步，所以可以找到规律是找到倒数第 k 个结点，需要向前走 n-k+1 步。</p>
<p><strong>算法开始：</strong></p>
<ol>
<li>设两个都指向 head 的指针 p1 和 p2，当 p1 走了 k-1 步的时候，停下来。p2 之前一直不动。</li>
<li>p1 的下一步是走第 k 步，这个时候，p2 开始一起动了。至于为什么 p2 这个时候动呢？看下面的分析。</li>
<li>当 p1 走到链表的尾部时，即 p1 走了 n 步。由于我们知道 p2 是在 p1 走了 k-1 步才开始动的，也就是说 p1 和 p2 永远差 k-1 步。所以当 p1 走了 n 步时，p2 走的应该是在 n-(k-1)步。即 p2 走了 n-k+1 步，此时巧妙的是 p2 正好指向的是规律一的倒数第 k 个结点处。
这样是不是很好理解了呢？</li>
</ol>
<p><strong>考察内容：</strong></p>
<p>链表+代码的鲁棒性</p>
<p><strong>示例代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 反转链表</h2>
<p><strong>题目描述：</strong></p>
<p>输入一个链表，反转链表后，输出链表的所有元素。</p>
<p><strong>问题分析：</strong></p>
<p>链表的很常规的一道题，这一道题思路不算难，但自己实现起来真的可能会感觉无从下手，我是参考了别人的代码。
思路就是我们根据链表的特点，前一个节点指向下一个节点的特点，把后面的节点移到前面来。
就比如下图：我们把 1 节点和 2 节点互换位置，然后再将 3 节点指向 2 节点，4 节点指向 3 节点，这样以来下面的链表就被反转了。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/844773c7300e4373922bb1a6ae2a55a3~tplv-k3u1fbpfcp-zoom-1.image" alt="链表" tabindex="0"><figcaption>链表</figcaption></figure>
<p><strong>考察内容：</strong></p>
<p>链表+代码的鲁棒性</p>
<p><strong>示例代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 合并两个排序的链表</h2>
<p><strong>题目描述：</strong></p>
<p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>
<p><strong>问题分析：</strong></p>
<p>我们可以这样分析:</p>
<ol>
<li>假设我们有两个链表 A,B；</li>
<li>A 的头节点 A1 的值与 B 的头结点 B1 的值比较，假设 A1 小，则 A1 为头节点；</li>
<li>A2 再和 B1 比较，假设 B1 小,则，A1 指向 B1；</li>
<li>A2 再和 B2 比较。。。。。。。
就这样循环往复就行了，应该还算好理解。</li>
</ol>
<p><strong>考察内容：</strong></p>
<p>链表+代码的鲁棒性</p>
<p><strong>示例代码：</strong></p>
<p>非递归版本：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归版本：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 用两个栈实现队列</h2>
<p><strong>题目描述：</strong></p>
<p>用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作。 队列中的元素为 int 类型。</p>
<p><strong>问题分析：</strong></p>
<p>先来回顾一下栈和队列的基本特点：
**栈：**后进先出（LIFO）
<strong>队列：</strong> 先进先出
很明显我们需要根据 JDK 给我们提供的栈的一些基本方法来实现。先来看一下 Stack 类的一些基本方法：
<img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-4-4/5985000.jpg" alt="Stack类的一些常见方法"></p>
<p>既然题目给了我们两个栈，我们可以这样考虑当 push 的时候将元素 push 进 stack1，pop 的时候我们先把 stack1 的元素 pop 到 stack2，然后再对 stack2 执行 pop 操作，这样就可以保证是先进先出的。（负[pop]负[pop]得正[先进先出]）</p>
<p><strong>考察内容：</strong></p>
<p>队列+栈</p>
<p>示例代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 栈的压入,弹出序列</h2>
<p><strong>题目描述：</strong></p>
<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列 1,2,3,4,5 是某栈的压入顺序，序列 4，5,3,2,1 是该压栈序列对应的一个弹出序列，但 4,3,5,1,2 就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>
<p><strong>题目分析：</strong></p>
<p>这道题想了半天没有思路，参考了 Alias 的答案，他的思路写的也很详细应该很容易看懂。
作者：Alias
https://www.nowcoder.com/questionTerminal/d77d11405cc7470d82554cb392585106
来源：牛客网</p>
<p>【思路】借用一个辅助的栈，遍历压栈顺序，先讲第一个放入栈中，这里是 1，然后判断栈顶元素是不是出栈顺序的第一个元素，这里是 4，很显然 1≠4，所以我们继续压栈，直到相等以后开始出栈，出栈一个元素，则将出栈顺序向后移动一位，直到不相等，这样循环等压栈顺序遍历完成，如果辅助栈还不为空，说明弹出序列不是该栈的弹出顺序。</p>
<p>举例：</p>
<p>入栈 1,2,3,4,5</p>
<p>出栈 4,5,3,2,1</p>
<p>首先 1 入辅助栈，此时栈顶 1≠4，继续入栈 2</p>
<p>此时栈顶 2≠4，继续入栈 3</p>
<p>此时栈顶 3≠4，继续入栈 4</p>
<p>此时栈顶 4 ＝ 4，出栈 4，弹出序列向后一位，此时为 5，,辅助栈里面是 1,2,3</p>
<p>此时栈顶 3≠5，继续入栈 5</p>
<p>此时栈顶 5=5，出栈 5,弹出序列向后一位，此时为 3，,辅助栈里面是 1,2,3</p>
<p>….
依次执行，最后辅助栈为空。如果不为空说明弹出序列不是该栈的弹出顺序。</p>
<p><strong>考察内容：</strong></p>
<p>栈</p>
<p><strong>示例代码：</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/844773c7300e4373922bb1a6ae2a55a3~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>布隆过滤器</title>
      <link>https://javaguide.cn/cs-basics/data-structure/bloom-filter.html</link>
      <guid>https://javaguide.cn/cs-basics/data-structure/bloom-filter.html</guid>
      <source url="https://javaguide.cn/rss.xml">布隆过滤器</source>
      <description>海量数据处理以及缓存穿透这两个场景让我认识了 布隆过滤器 ，我查阅了一些资料来了解它，但是很多现成资料并不满足我的需求，所以就决定自己总结一篇关于布隆过滤器的文章。希望通过这篇文章让更多人了解布隆过滤器，并且会实际去使用它！ 下面我们将分为几个方面来介绍布隆过滤器： 什么是布隆过滤器？ 布隆过滤器的原理介绍。 布隆过滤器使用场景。 通过 Java 编程手动实现布隆过滤器。 利用 Google 开源的 Guava 中自带的布隆过滤器。 Redis 中的布隆过滤器。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>海量数据处理以及缓存穿透这两个场景让我认识了 布隆过滤器 ，我查阅了一些资料来了解它，但是很多现成资料并不满足我的需求，所以就决定自己总结一篇关于布隆过滤器的文章。希望通过这篇文章让更多人了解布隆过滤器，并且会实际去使用它！</p>
<p>下面我们将分为几个方面来介绍布隆过滤器：</p>
<ol>
<li>什么是布隆过滤器？</li>
<li>布隆过滤器的原理介绍。</li>
<li>布隆过滤器使用场景。</li>
<li>通过 Java 编程手动实现布隆过滤器。</li>
<li>利用 Google 开源的 Guava 中自带的布隆过滤器。</li>
<li>Redis 中的布隆过滤器。</li>
</ol>
<h2> 什么是布隆过滤器？</h2>
<p>首先，我们需要了解布隆过滤器的概念。</p>
<p>布隆过滤器（Bloom Filter）是一个叫做 Bloom 的老哥于 1970 年提出的。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的的 List、Map、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。</p>
<p>Bloom Filter 会使用一个较大的 bit 数组来保存所有的数据，数组中的每个元素都只占用 1 bit ，并且每个元素只能是 0 或者 1（代表 false 或者 true），这也是 Bloom Filter 节省内存的核心所在。这样来算的话，申请一个 100w 个元素的位数组只占用 1000000Bit / 8 = 125000 Byte = 125000/1024 kb ≈ 122kb 的空间。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-bit-table.png" alt="位数组" tabindex="0"><figcaption>位数组</figcaption></figure>
<p>总结：<strong>一个名叫 Bloom 的人提出了一种来检索元素是否在给定大集合中的数据结构，这种数据结构是高效且性能很好的，但缺点是具有一定的错误识别率和删除难度。并且，理论情况下，添加到集合中的元素越多，误报的可能性就越大。</strong></p>
<h2> 布隆过滤器的原理介绍</h2>
<p><strong>当一个元素加入布隆过滤器中的时候，会进行如下操作：</strong></p>
<ol>
<li>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。</li>
<li>根据得到的哈希值，在位数组中把对应下标的值置为 1。</li>
</ol>
<p><strong>当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行如下操作：</strong></p>
<ol>
<li>对给定元素再次进行相同的哈希计算；</li>
<li>得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</li>
</ol>
<p>Bloom Filter 的简单原理图如下：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-simple-schematic-diagram.png" alt="Bloom Filter 的简单原理示意图" tabindex="0"><figcaption>Bloom Filter 的简单原理示意图</figcaption></figure>
<p>如图所示，当字符串存储要加入到布隆过滤器中时，该字符串首先由多个哈希函数生成不同的哈希值，然后将对应的位数组的下标设置为 1（当位数组初始化时，所有位置均为 0）。当第二次存储相同字符串时，因为先前的对应位置已设置为 1，所以很容易知道此值已经存在（去重非常方便）。</p>
<p>如果我们需要判断某个字符串是否在布隆过滤器中时，只需要对给定字符串再次进行相同的哈希计算，得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</p>
<p><strong>不同的字符串可能哈希出来的位置相同，这种情况我们可以适当增加位数组大小或者调整我们的哈希函数。</strong></p>
<p>综上，我们可以得出：<strong>布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。</strong></p>
<h2> 布隆过滤器使用场景</h2>
<ol>
<li>判断给定数据是否存在：比如判断一个数字是否存在于包含大量数字的数字集中（数字集很大，上亿）、 防止缓存穿透（判断请求的数据是否有效避免直接绕过缓存请求数据库）等等、邮箱的垃圾邮件过滤（判断一个邮件地址是否在垃圾邮件列表中）、黑名单功能（判断一个IP地址或手机号码是否在黑名单中）等等。</li>
<li>去重：比如爬给定网址的时候对已经爬取过的 URL 去重、对巨量的 QQ号/订单号去重。</li>
</ol>
<p>去重场景也需要用到判断给定数据是否存在，因此布隆过滤器主要是为了解决海量数据的存在性问题。</p>
<h2> 编码实战</h2>
<h3> 通过 Java 编程手动实现布隆过滤器</h3>
<p>我们上面已经说了布隆过滤器的原理，知道了布隆过滤器的原理之后就可以自己手动实现一个了。</p>
<p>如果你想要手动实现一个的话，你需要：</p>
<ol>
<li>一个合适大小的位数组保存数据</li>
<li>几个不同的哈希函数</li>
<li>添加元素到位数组（布隆过滤器）的方法实现</li>
<li>判断给定元素是否存在于位数组（布隆过滤器）的方法实现。</li>
</ol>
<p>下面给出一个我觉得写的还算不错的代码（参考网上已有代码改进得到，对于所有类型对象皆适用）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 利用 Google 开源的 Guava 中自带的布隆过滤器</h3>
<p>自己实现的目的主要是为了让自己搞懂布隆过滤器的原理，Guava 中布隆过滤器的实现算是比较权威的，所以实际项目中我们不需要手动实现一个布隆过滤器。</p>
<p>首先我们需要在项目中引入 Guava 的依赖：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际使用如下：</p>
<p>我们创建了一个最多存放 最多 1500 个整数的布隆过滤器，并且我们可以容忍误判的概率为百分之（0.01）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的示例中，当 <code>mightContain()</code> 方法返回 <em>true</em> 时，我们可以 99％确定该元素在过滤器中，当过滤器返回 <em>false</em> 时，我们可以 100％确定该元素不存在于过滤器中。</p>
<p><strong>Guava 提供的布隆过滤器的实现还是很不错的（想要详细了解的可以看一下它的源码实现），但是它有一个重大的缺陷就是只能单机使用（另外，容量扩展也不容易），而现在互联网一般都是分布式的场景。为了解决这个问题，我们就需要用到 Redis 中的布隆过滤器了。</strong></p>
<h2> Redis 中的布隆过滤器</h2>
<h3> 介绍</h3>
<p>Redis v4.0 之后有了 Module（模块/插件） 功能，Redis Modules 让 Redis 可以使用外部模块扩展其功能 。布隆过滤器就是其中的 Module。详情可以查看 Redis 官方对 Redis Modules 的介绍：https://redis.io/modules</p>
<p>另外，官网推荐了一个 RedisBloom 作为 Redis 布隆过滤器的 Module，地址：https://github.com/RedisBloom/RedisBloom
其他还有：</p>
<ul>
<li>redis-lua-scaling-bloom-filter（lua 脚本实现）：https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter</li>
<li>pyreBloom（Python 中的快速 Redis 布隆过滤器）：https://github.com/seomoz/pyreBloom</li>
<li>......</li>
</ul>
<p>RedisBloom 提供了多种语言的客户端支持，包括：Python、Java、JavaScript 和 PHP。</p>
<h3> 使用 Docker 安装</h3>
<p>如果我们需要体验 Redis 中的布隆过滤器非常简单，通过 Docker 就可以了！我们直接在 Google 搜索 <strong>docker redis bloomfilter</strong> 然后在排除广告的第一条搜素结果就找到了我们想要的答案（这是我平常解决问题的一种方式，分享一下），具体地址：https://hub.docker.com/r/redislabs/rebloom/ （介绍的很详细 ）。</p>
<p><strong>具体操作如下：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 常用命令一览</h3>
<blockquote>
<p>注意：key : 布隆过滤器的名称，item : 添加的元素。</p>
</blockquote>
<ol>
<li><strong><code>BF.ADD</code></strong>：将元素添加到布隆过滤器中，如果该过滤器尚不存在，则创建该过滤器。格式：<code>BF.ADD {key} {item}</code>。</li>
<li><strong><code>BF.MADD</code></strong> : 将一个或多个元素添加到“布隆过滤器”中，并创建一个尚不存在的过滤器。该命令的操作方式<code>BF.ADD</code>与之相同，只不过它允许多个输入并返回多个值。格式：<code>BF.MADD {key} {item} [item ...]</code> 。</li>
<li><strong><code>BF.EXISTS</code></strong> : 确定元素是否在布隆过滤器中存在。格式：<code>BF.EXISTS {key} {item}</code>。</li>
<li><strong><code>BF.MEXISTS</code></strong>：确定一个或者多个元素是否在布隆过滤器中存在格式：<code>BF.MEXISTS {key} {item} [item ...]</code>。</li>
</ol>
<p>另外， <code>BF. RESERVE</code> 命令需要单独介绍一下：</p>
<p>这个命令的格式如下：</p>
<p><code>BF. RESERVE {key} {error_rate} {capacity} [EXPANSION expansion]</code> 。</p>
<p>下面简单介绍一下每个参数的具体含义：</p>
<ol>
<li>key：布隆过滤器的名称</li>
<li>error_rate : 期望的误报率。该值必须介于 0 到 1 之间。例如，对于期望的误报率 0.1％（1000 中为 1），error_rate 应该设置为 0.001。该数字越接近零，则每个项目的内存消耗越大，并且每个操作的 CPU 使用率越高。</li>
<li>capacity: 过滤器的容量。当实际存储的元素个数超过这个值之后，性能将开始下降。实际的降级将取决于超出限制的程度。随着过滤器元素数量呈指数增长，性能将线性下降。</li>
</ol>
<p>可选参数：</p>
<ul>
<li>expansion：如果创建了一个新的子过滤器，则其大小将是当前过滤器的大小乘以<code>expansion</code>。默认扩展值为 2。这意味着每个后续子过滤器将是前一个子过滤器的两倍。</li>
</ul>
<h3> 实际使用</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-bit-table.png" type="image/png"/>
    </item>
    <item>
      <title>图</title>
      <link>https://javaguide.cn/cs-basics/data-structure/graph.html</link>
      <guid>https://javaguide.cn/cs-basics/data-structure/graph.html</guid>
      <source url="https://javaguide.cn/rss.xml">图</source>
      <description>图是一种较为复杂的非线性结构。 为啥说其较为复杂呢？ 根据前面的内容，我们知道： 线性数据结构的元素满足唯一的线性关系，每个元素(除第一个和最后一个外)只有一个直接前趋和一个直接后继。 树形数据结构的元素之间有着明显的层次关系。 但是，图形结构的元素之间的关系是任意的。 何为图呢？ 简单来说，图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为：G(V,E)，其中，G 表示一个图，V 表示顶点的集合，E 表示边的集合。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>图是一种较为复杂的非线性结构。 <strong>为啥说其较为复杂呢？</strong></p>
<p>根据前面的内容，我们知道：</p>
<ul>
<li>线性数据结构的元素满足唯一的线性关系，每个元素(除第一个和最后一个外)只有一个直接前趋和一个直接后继。</li>
<li>树形数据结构的元素之间有着明显的层次关系。</li>
</ul>
<p>但是，图形结构的元素之间的关系是任意的。</p>
<p><strong>何为图呢？</strong> 简单来说，图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为：<strong>G(V,E)</strong>，其中，G 表示一个图，V 表示顶点的集合，E 表示边的集合。</p>
<p>下图所展示的就是图这种数据结构，并且还是一张有向图。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/directed-graph.png" alt="有向图" tabindex="0"><figcaption>有向图</figcaption></figure>
<p>图在我们日常生活中的例子很多！比如我们在社交软件上好友关系就可以用图来表示。</p>
<h2> 图的基本概念</h2>
<h3> 顶点</h3>
<p>图中的数据元素，我们称之为顶点，图至少有一个顶点（非空有穷集合）</p>
<p>对应到好友关系图，每一个用户就代表一个顶点。</p>
<h3> 边</h3>
<p>顶点之间的关系用边表示。</p>
<p>对应到好友关系图，两个用户是好友的话，那两者之间就存在一条边。</p>
<h3> 度</h3>
<p>度表示一个顶点包含多少条边，在有向图中，还分为出度和入度，出度表示从该顶点出去的边的条数，入度表示进入该顶点的边的条数。</p>
<p>对应到好友关系图，度就代表了某个人的好友数量。</p>
<h3> 无向图和有向图</h3>
<p>边表示的是顶点之间的关系，有的关系是双向的，比如同学关系，A 是 B 的同学，那么 B 也肯定是 A 的同学，那么在表示 A 和 B 的关系时，就不用关注方向，用不带箭头的边表示，这样的图就是无向图。</p>
<p>有的关系是有方向的，比如父子关系，师生关系，微博的关注关系，A 是 B 的爸爸，但 B 肯定不是 A 的爸爸，A 关注 B，B 不一定关注 A。在这种情况下，我们就用带箭头的边表示二者的关系，这样的图就是有向图。</p>
<h3> 无权图和带权图</h3>
<p>对于一个关系，如果我们只关心关系的有无，而不关心关系有多强，那么就可以用无权图表示二者的关系。</p>
<p>对于一个关系，如果我们既关心关系的有无，也关心关系的强度，比如描述地图上两个城市的关系，需要用到距离，那么就用带权图来表示，带权图中的每一条边一个数值表示权值，代表关系的强度。</p>
<p>下图就是一个带权有向图。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/weighted-directed-graph.png" alt="带权有向图" tabindex="0"><figcaption>带权有向图</figcaption></figure>
<h2> 图的存储</h2>
<h3> 邻接矩阵存储</h3>
<p>邻接矩阵将图用二维矩阵存储，是一种较为直观的表示方式。</p>
<p>如果第 i 个顶点和第 j 个顶点之间有关系，且关系权值为 n，则 <code>A[i][j]=n</code> 。</p>
<p>在无向图中，我们只关心关系的有无，所以当顶点 i 和顶点 j 有关系时，<code>A[i][j]</code>=1，当顶点 i 和顶点 j 没有关系时，<code>A[i][j]</code>=0。如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/adjacency-matrix-representation-of-undirected-graph.png" alt="无向图的邻接矩阵存储" tabindex="0"><figcaption>无向图的邻接矩阵存储</figcaption></figure>
<p>值得注意的是：<strong>无向图的邻接矩阵是一个对称矩阵，因为在无向图中，顶点 i 和顶点 j 有关系，则顶点 j 和顶点 i 必有关系。</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/adjacency-matrix-representation-of-directed-graph.png" alt="有向图的邻接矩阵存储" tabindex="0"><figcaption>有向图的邻接矩阵存储</figcaption></figure>
<p>邻接矩阵存储的方式优点是简单直接（直接使用一个二维数组即可），并且，在获取两个定点之间的关系的时候也非常高效（直接获取指定位置的数组元素的值即可）。但是，这种存储方式的缺点也比较明显，那就是比较浪费空间，</p>
<h3> 邻接表存储</h3>
<p>针对上面邻接矩阵比较浪费内存空间的问题，诞生了图的另外一种存储方法—<strong>邻接表</strong> 。</p>
<p>邻接链表使用一个链表来存储某个顶点的所有后继相邻顶点。对于图中每个顶点 Vi，把所有邻接于 Vi 的顶点 Vj 链成一个单链表，这个单链表称为顶点 Vi 的 <strong>邻接表</strong>。如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/adjacency-list-representation-of-undirected-graph.png" alt="无向图的邻接表存储" tabindex="0"><figcaption>无向图的邻接表存储</figcaption></figure>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/adjacency-list-representation-of-directed-graph.png" alt="有向图的邻接表存储" tabindex="0"><figcaption>有向图的邻接表存储</figcaption></figure>
<p>大家可以数一数邻接表中所存储的元素的个数以及图中边的条数，你会发现：</p>
<ul>
<li>在无向图中，邻接表元素个数等于边的条数的两倍，如左图所示的无向图中，边的条数为 7，邻接表存储的元素个数为 14。</li>
<li>在有向图中，邻接表元素个数等于边的条数，如右图所示的有向图中，边的条数为 8，邻接表存储的元素个数为 8。</li>
</ul>
<h2> 图的搜索</h2>
<h3> 广度优先搜索</h3>
<p>广度优先搜索就像水面上的波纹一样一层一层向外扩展，如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search.png" alt="广度优先搜索图示" tabindex="0"><figcaption>广度优先搜索图示</figcaption></figure>
<p><strong>广度优先搜索的具体实现方式用到了之前所学过的线性数据结构——队列</strong> 。具体过程如下图所示：</p>
<p><strong>第 1 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search1.png" alt="广度优先搜索1" tabindex="0"><figcaption>广度优先搜索1</figcaption></figure>
<p><strong>第 2 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search2.png" alt="广度优先搜索2" tabindex="0"><figcaption>广度优先搜索2</figcaption></figure>
<p><strong>第 3 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search3.png" alt="广度优先搜索3" tabindex="0"><figcaption>广度优先搜索3</figcaption></figure>
<p><strong>第 4 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search4.png" alt="广度优先搜索4" tabindex="0"><figcaption>广度优先搜索4</figcaption></figure>
<p><strong>第 5 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search5.png" alt="广度优先搜索5" tabindex="0"><figcaption>广度优先搜索5</figcaption></figure>
<p><strong>第 6 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/breadth-first-search6.png" alt="广度优先搜索6" tabindex="0"><figcaption>广度优先搜索6</figcaption></figure>
<h3> 深度优先搜索</h3>
<p>深度优先搜索就是“一条路走到黑”，从源顶点开始，一直走到没有后继节点，才回溯到上一顶点，然后继续“一条路走到黑”，如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search.png" alt="深度优先搜索图示" tabindex="0"><figcaption>深度优先搜索图示</figcaption></figure>
<p><strong>和广度优先搜索类似，深度优先搜索的具体实现用到了另一种线性数据结构——栈</strong> 。具体过程如下图所示：</p>
<p><strong>第 1 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search1.png" alt="深度优先搜索1" tabindex="0"><figcaption>深度优先搜索1</figcaption></figure>
<p><strong>第 2 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search2.png" alt="深度优先搜索2" tabindex="0"><figcaption>深度优先搜索2</figcaption></figure>
<p><strong>第 3 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search3.png" alt="深度优先搜索3" tabindex="0"><figcaption>深度优先搜索3</figcaption></figure>
<p><strong>第 4 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search4.png" alt="深度优先搜索4" tabindex="0"><figcaption>深度优先搜索4</figcaption></figure>
<p><strong>第 5 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search5.png" alt="深度优先搜索5" tabindex="0"><figcaption>深度优先搜索5</figcaption></figure>
<p><strong>第 6 步：</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/depth-first-search6.png" alt="深度优先搜索6" tabindex="0"><figcaption>深度优先搜索6</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/directed-graph.png" type="image/png"/>
    </item>
    <item>
      <title>堆</title>
      <link>https://javaguide.cn/cs-basics/data-structure/heap.html</link>
      <guid>https://javaguide.cn/cs-basics/data-structure/heap.html</guid>
      <source url="https://javaguide.cn/rss.xml">堆</source>
      <description>堆 什么是堆 堆是一种满足以下条件的树： 堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。或者说，任意一个节点的值都大于等于（或小于等于）所有子节点的值。 大家可以把堆(最大堆)理解为一个公司,这个公司很公平,谁能力强谁就当老大,不存在弱的人当老大,老大手底下的人一定不会比他强。这样有助于理解后续堆的操作。 !!!特别提示： 很多博客说堆是完全二叉树，其实并非如此，堆不一定是完全二叉树，只是为了方便存储和索引，我们通常用完全二叉树的形式来表示堆，事实上，广为人知的斐波那契堆和二项堆就不是完全二叉树,它们甚至都不是二叉树。 （二叉）堆是一个数组，它可以被看成是一个 近似的完全二叉树。——《算法导论》第三版</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 堆</h1>
<h2> 什么是堆</h2>
<p>堆是一种满足以下条件的树：</p>
<p>堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。或者说，任意一个节点的值都大于等于（或小于等于）所有子节点的值。</p>
<blockquote>
<p>大家可以把堆(最大堆)理解为一个公司,这个公司很公平,谁能力强谁就当老大,不存在弱的人当老大,老大手底下的人一定不会比他强。这样有助于理解后续堆的操作。</p>
</blockquote>
<p><strong>!!!特别提示：</strong></p>
<ul>
<li>很多博客说堆是完全二叉树，其实并非如此，<strong>堆不一定是完全二叉树</strong>，只是为了方便存储和索引，我们通常用完全二叉树的形式来表示堆，事实上，广为人知的斐波那契堆和二项堆就不是完全二叉树,它们甚至都不是二叉树。</li>
<li>（<strong>二叉</strong>）堆是一个数组，它可以被看成是一个 <strong>近似的完全二叉树</strong>。——《算法导论》第三版</li>
</ul>
<p>大家可以尝试判断下面给出的图是否是堆？</p>
<figure><figcaption></figcaption></figure>
<p>第 1 个和第 2 个是堆。第 1 个是最大堆，每个节点都比子树中所有节点大。第 2 个是最小堆，每个节点都比子树中所有节点小。</p>
<p>第 3 个不是，第三个中，根结点 1 比 2 和 15 小，而 15 却比 3 大，19 比 5 大，不满足堆的性质。</p>
<h2> 堆的用途</h2>
<p>当我们只关心所有数据中的最大值或者最小值，存在多次获取最大值或者最小值，多次插入或删除数据时，就可以使用堆。</p>
<p>有小伙伴可能会想到用有序数组，初始化一个有序数组时间复杂度是 <code>O(nlog(n))</code>，查找最大值或者最小值时间复杂度都是 <code>O(1)</code>，但是，涉及到更新（插入或删除）数据时，时间复杂度为 <code>O(n)</code>，即使是使用复杂度为 <code>O(log(n))</code> 的二分法找到要插入或者删除的数据，在移动数据时也需要 <code>O(n)</code> 的时间复杂度。</p>
<p><strong>相对于有序数组而言，堆的主要优势在于插入和删除数据效率较高。</strong> 因为堆是基于完全二叉树实现的，所以在插入和删除数据时，只需要在二叉树中上下移动节点，时间复杂度为 <code>O(log(n))</code>，相比有序数组的 <code>O(n)</code>，效率更高。而最大值或最小值的获取，则是堆的另一个优势，时间复杂度为 <code>O(1)</code>，相比有序数组的 <code>O(log(n))</code>，更快速。</p>
<p>不过，需要注意的是：Heap 初始化的时间复杂度为 <code>O(n)</code>，而非<code>O(nlogn)</code>。</p>
<h2> 堆的分类</h2>
<p>堆分为 <strong>最大堆</strong> 和 <strong>最小堆</strong>。二者的区别在于节点的排序方式。</p>
<ul>
<li><strong>最大堆</strong>：堆中的每一个节点的值都大于等于子树中所有节点的值</li>
<li><strong>最小堆</strong>：堆中的每一个节点的值都小于等于子树中所有节点的值</li>
</ul>
<p>如下图所示，图 1 是最大堆，图 2 是最小堆</p>
<figure><figcaption></figcaption></figure>
<h2> 堆的存储</h2>
<p>之前介绍树的时候说过，由于完全二叉树的优秀性质，利用数组存储二叉树即节省空间，又方便索引（若根结点的序号为 1，那么对于树中任意节点 i，其左子节点序号为 <code>2*i</code>，右子节点序号为 <code>2*i+1</code>）。</p>
<p>为了方便存储和索引，（二叉）堆可以用完全二叉树的形式进行存储。存储的方式如下图所示：</p>
<figure><figcaption>堆的存储</figcaption></figure>
<h2> 堆的操作</h2>
<p>堆的更新操作主要包括两种 : <strong>插入元素</strong> 和 <strong>删除堆顶元素</strong>。操作过程需要着重掌握和理解。</p>
<blockquote>
<p>在进入正题之前，再重申一遍，堆是一个公平的公司，有能力的人自然会走到与他能力所匹配的位置</p>
</blockquote>
<h3> 插入元素</h3>
<blockquote>
<p>插入元素，作为一个新入职的员工，初来乍到，这个员工需要从基层做起</p>
</blockquote>
<p><strong>1.将要插入的元素放到最后</strong></p>
<figure><figcaption>堆-插入元素-1</figcaption></figure>
<blockquote>
<p>有能力的人会逐渐升职加薪，是金子总会发光的！！！</p>
</blockquote>
<p><strong>2.从底向上，如果父结点比该元素小，则该节点和父结点交换，直到无法交换</strong></p>
<figure><figcaption>堆-插入元素2</figcaption></figure>
<figure><figcaption>堆-插入元素3</figcaption></figure>
<h3> 删除堆顶元素</h3>
<p>根据堆的性质可知，最大堆的堆顶元素为所有元素中最大的，最小堆的堆顶元素是所有元素中最小的。当我们需要多次查找最大元素或者最小元素的时候，可以利用堆来实现。</p>
<p>删除堆顶元素后，为了保持堆的性质，需要对堆的结构进行调整，我们将这个过程称之为"<strong>堆化</strong>"，堆化的方法分为两种：</p>
<ul>
<li>一种是自底向上的堆化，上述的插入元素所使用的就是自底向上的堆化，元素从最底部向上移动。</li>
<li>另一种是自顶向下堆化，元素由最顶部向下移动。在讲解删除堆顶元素的方法时，我将阐述这两种操作的过程，大家可以体会一下二者的不同。</li>
</ul>
<h4> 自底向上堆化</h4>
<blockquote>
<p>在堆这个公司中，会出现老大离职的现象，老大离职之后，他的位置就空出来了</p>
</blockquote>
<p>首先删除堆顶元素，使得数组中下标为 1 的位置空出。</p>
<figure><figcaption>删除堆顶元素1</figcaption></figure>
<blockquote>
<p>那么他的位置由谁来接替呢，当然是他的直接下属了，谁能力强就让谁上呗</p>
</blockquote>
<p>比较根结点的左子节点和右子节点，也就是下标为 2,3 的数组元素，将较大的元素填充到根结点(下标为 1)的位置。</p>
<figure><figcaption>删除堆顶元素2</figcaption></figure>
<blockquote>
<p>这个时候又空出一个位置了，老规矩，谁有能力谁上</p>
</blockquote>
<p>一直循环比较空出位置的左右子节点，并将较大者移至空位，直到堆的最底部</p>
<figure><figcaption>删除堆顶元素3</figcaption></figure>
<p>这个时候已经完成了自底向上的堆化，没有元素可以填补空缺了，但是，我们可以看到数组中出现了“气泡”，这会导致存储空间的浪费。接下来我们试试自顶向下堆化。</p>
<h4> 自顶向下堆化</h4>
<p>自顶向下的堆化用一个词形容就是“石沉大海”，那么第一件事情，就是把石头抬起来，从海面扔下去。这个石头就是堆的最后一个元素，我们将最后一个元素移动到堆顶。</p>
<figure><figcaption>删除堆顶元素4</figcaption></figure>
<p>然后开始将这个石头沉入海底，不停与左右子节点的值进行比较，和较大的子节点交换位置，直到无法交换位置。</p>
<figure><figcaption>删除堆顶元素5</figcaption></figure>
<figure><figcaption>删除堆顶元素6</figcaption></figure>
<h3> 堆的操作总结</h3>
<ul>
<li><strong>插入元素</strong>：先将元素放至数组末尾，再自底向上堆化，将末尾元素上浮</li>
<li><strong>删除堆顶元素</strong>：删除堆顶元素，将末尾元素放至堆顶，再自顶向下堆化，将堆顶元素下沉。也可以自底向上堆化，只是会产生“气泡”，浪费存储空间。最好采用自顶向下堆化的方式。</li>
</ul>
<h2> 堆排序</h2>
<p>堆排序的过程分为两步：</p>
<ul>
<li>第一步是建堆，将一个无序的数组建立为一个堆</li>
<li>第二步是排序，将堆顶元素取出，然后对剩下的元素进行堆化，反复迭代，直到所有元素被取出为止。</li>
</ul>
<h3> 建堆</h3>
<p>如果你已经足够了解堆化的过程，那么建堆的过程掌握起来就比较容易了。建堆的过程就是一个对所有非叶节点的自顶向下堆化过程。</p>
<p>首先要了解哪些是非叶节点，最后一个节点的父结点及它之前的元素，都是非叶节点。也就是说，如果节点个数为 n，那么我们需要对 n/2 到 1 的节点进行自顶向下（沉底）堆化。</p>
<p>具体过程如下图：</p>
<figure><figcaption>建堆1</figcaption></figure>
<p>将初始的无序数组抽象为一棵树，图中的节点个数为 6，所以 4,5,6 节点为叶节点，1,2,3 节点为非叶节点，所以要对 1-3 号节点进行自顶向下（沉底）堆化，注意，顺序是从后往前堆化，从 3 号节点开始，一直到 1 号节点。
3 号节点堆化结果：</p>
<figure><figcaption>建堆1</figcaption></figure>
<p>2 号节点堆化结果：</p>
<figure><figcaption>建堆1</figcaption></figure>
<p>1 号节点堆化结果：</p>
<figure><figcaption>建堆1</figcaption></figure>
<p>至此，数组所对应的树已经成为了一个最大堆，建堆完成！</p>
<h3> 排序</h3>
<p>由于堆顶元素是所有元素中最大的，所以我们重复取出堆顶元素，将这个最大的堆顶元素放至数组末尾，并对剩下的元素进行堆化即可。</p>
<p>现在思考两个问题：</p>
<ul>
<li>删除堆顶元素后需要执行自顶向下（沉底）堆化还是自底向上（上浮）堆化？</li>
<li>取出的堆顶元素存在哪，新建一个数组存？</li>
</ul>
<p>先回答第一个问题，我们需要执行自顶向下（沉底）堆化，这个堆化一开始要将末尾元素移动至堆顶，这个时候末尾的位置就空出来了，由于堆中元素已经减小，这个位置不会再被使用，所以我们可以将取出的元素放在末尾。</p>
<p>机智的小伙伴已经发现了，这其实是做了一次交换操作，将堆顶和末尾元素调换位置，从而将取出堆顶元素和堆化的第一步(将末尾元素放至根结点位置)进行合并。</p>
<p>详细过程如下图所示：</p>
<p>取出第一个元素并堆化：</p>
<figure><figcaption>堆排序1</figcaption></figure>
<p>取出第二个元素并堆化：</p>
<figure><figcaption>堆排序2</figcaption></figure>
<p>取出第三个元素并堆化：</p>
<figure><figcaption>堆排序3</figcaption></figure>
<p>取出第四个元素并堆化：</p>
<figure><figcaption>堆排序4</figcaption></figure>
<p>取出第五个元素并堆化：</p>
<figure><figcaption>堆排序5</figcaption></figure>
<p>取出第六个元素并堆化：</p>
<figure><figcaption>堆排序6</figcaption></figure>
<p>堆排序完成！</p>
]]></content:encoded>
    </item>
    <item>
      <title>线性数据结构</title>
      <link>https://javaguide.cn/cs-basics/data-structure/linear-data-structure.html</link>
      <guid>https://javaguide.cn/cs-basics/data-structure/linear-data-structure.html</guid>
      <source url="https://javaguide.cn/rss.xml">线性数据结构</source>
      <description>1. 数组 数组（Array） 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。 我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。 数组的特点是：提供随机访问 并且容量有限。 假如数组的长度为 n。 访问：O（1）//访问特定位置的元素 插入：O（n ）//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时 删除：O（n）//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 1. 数组</h2>
<p><strong>数组（Array）</strong> 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。</p>
<p>我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。</p>
<p>数组的特点是：<strong>提供随机访问</strong> 并且容量有限。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/array.png" alt="数组" tabindex="0"><figcaption>数组</figcaption></figure>
<h2> 2. 链表</h2>
<h3> 2.1. 链表简介</h3>
<p><strong>链表（LinkedList）</strong> 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。</p>
<p>链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。</p>
<p>使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。</p>
<h3> 2.2. 链表分类</h3>
<p><strong>常见链表分类：</strong></p>
<ol>
<li>单链表</li>
<li>双向链表</li>
<li>循环链表</li>
<li>双向循环链表</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.2.1. 单链表</h4>
<p><strong>单链表</strong> 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/single-linkedlist.png" alt="单链表" tabindex="0"><figcaption>单链表</figcaption></figure>
<h4> 2.2.2. 循环链表</h4>
<p><strong>循环链表</strong> 其实是一种特殊的单链表，和单链表不同的是循环链表的尾结点不是指向 null，而是指向链表的头结点。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/circular-linkedlist.png" alt="循环链表" tabindex="0"><figcaption>循环链表</figcaption></figure>
<h4> 2.2.3. 双向链表</h4>
<p><strong>双向链表</strong> 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/bidirectional-linkedlist.png" alt="双向链表" tabindex="0"><figcaption>双向链表</figcaption></figure>
<h4> 2.2.4. 双向循环链表</h4>
<p><strong>双向循环链表</strong> 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/bidirectional-circular-linkedlist.png" alt="双向循环链表" tabindex="0"><figcaption>双向循环链表</figcaption></figure>
<h3> 2.3. 应用场景</h3>
<ul>
<li>如果需要支持随机访问的话，链表没办法做到。</li>
<li>如果需要存储的数据元素的个数不确定，并且需要经常添加和删除数据的话，使用链表比较合适。</li>
<li>如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。</li>
</ul>
<h3> 2.4. 数组 vs 链表</h3>
<ul>
<li>数组支持随机访问，而链表不支持。</li>
<li>数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。</li>
<li>数组的大小固定，而链表则天然支持动态扩容。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！</li>
</ul>
<h2> 3. 栈</h2>
<h3> 3.1. 栈简介</h3>
<p><strong>栈 (Stack)</strong> 只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 <strong>后进先出（LIFO, Last In First Out）</strong> 的原理运作。<strong>在栈中，push 和 pop 的操作都发生在栈顶。</strong></p>
<p>栈常用一维数组或链表来实现，用数组实现的栈叫作 <strong>顺序栈</strong> ，用链表实现的栈叫作 <strong>链式栈</strong> 。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/栈.png" alt="栈" tabindex="0"><figcaption>栈</figcaption></figure>
<h3> 3.2. 栈的常见应用常见应用场景</h3>
<p>当我们我们要处理的数据只涉及在一端插入和删除数据，并且满足 <strong>后进先出（LIFO, Last In First Out）</strong> 的特性时，我们就可以使用栈这个数据结构。</p>
<h4> 3.2.1. 实现浏览器的回退和前进功能</h4>
<p>我们只需要使用两个栈(Stack1 和 Stack2)和就能实现这个功能。比如你按顺序查看了 1,2,3,4 这四个页面，我们依次把 1,2,3,4 这四个页面压入 Stack1 中。当你想回头看 2 这个页面的时候，你点击回退按钮，我们依次把 4,3 这两个页面从 Stack1 弹出，然后压入 Stack2 中。假如你又想回到页面 3，你点击前进按钮，我们将 3 页面从 Stack2 弹出，然后压入到 Stack1 中。示例图如下:</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/栈实现浏览器倒退和前进.png" alt="栈实现浏览器倒退和前进" tabindex="0"><figcaption>栈实现浏览器倒退和前进</figcaption></figure>
<h4> 3.2.2. 检查符号是否成对出现</h4>
<blockquote>
<p>给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'{'</code>，<code>'}'</code>，<code>'['</code>，<code>']'</code> 的字符串，判断该字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ol>
<p>比如 "()"、"()[]{}"、"{[]}" 都是有效字符串，而 "(]"、"([)]" 则不是。</p>
</blockquote>
<p>这个问题实际是 Leetcode 的一道题目，我们可以利用栈 <code>Stack</code> 来解决这个问题。</p>
<ol>
<li>首先我们将括号间的对应规则存放在 <code>Map</code> 中，这一点应该毋容置疑；</li>
<li>创建一个栈。遍历字符串，如果字符是左括号就直接加入<code>stack</code>中，否则将<code>stack</code> 的栈顶元素与这个括号做比较，如果不相等就直接返回 false。遍历结束，如果<code>stack</code>为空，返回 <code>true</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3.2.3. 反转字符串</h4>
<p>将字符串中的每个字符先入栈再出栈就可以了。</p>
<h4> 3.2.4. 维护函数调用</h4>
<p>最后一个被调用的函数必须先完成执行，符合栈的 <strong>后进先出（LIFO, Last In First Out）</strong> 特性。</p>
<h3> 3.3. 栈的实现</h3>
<p>栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。</p>
<p>下面我们使用数组来实现一个栈，并且这个栈具有<code>push()</code>、<code>pop()</code>（返回栈顶元素并出栈）、<code>peek()</code> （返回栈顶元素不出栈）、<code>isEmpty()</code>、<code>size()</code>这些基本的方法。</p>
<blockquote>
<p>提示：每次入栈之前先判断栈的容量是否够用，如果不够用就用<code>Arrays.copyOf()</code>进行扩容；</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4. 队列</h2>
<h3> 4.1. 队列简介</h3>
<p><strong>队列（Queue）</strong> 是 <strong>先进先出 (FIFO，First In, First Out)</strong> 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 <strong>顺序队列</strong> ，用链表实现的队列叫作 <strong>链式队列</strong> 。<strong>队列只允许在后端（rear）进行插入操作也就是入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue</strong></p>
<p>队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/queue.png" alt="队列" tabindex="0"><figcaption>队列</figcaption></figure>
<h3> 4.2. 队列分类</h3>
<h4> 4.2.1. 单队列</h4>
<p>单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为 <strong>顺序队列（数组实现）</strong> 和 <strong>链式队列（链表实现）</strong>。</p>
<p><strong>顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。</strong></p>
<p>假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 <strong>”假溢出“</strong> 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。</p>
<blockquote>
<p>为了避免当只有一个元素的时候，队头和队尾重合使处理变得麻烦，所以引入两个指针，front 指针指向对头元素，rear 指针指向队列最后一个元素的下一个位置，这样当 front 等于 rear 时，此队列不是还剩一个元素，而是空队列。——From 《大话数据结构》</p>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/seq-queue-false-overflow.png" alt="顺序队列假溢出" tabindex="0"><figcaption>顺序队列假溢出</figcaption></figure>
<h4> 4.2.2. 循环队列</h4>
<p>循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。</p>
<p>还是用上面的图，我们将 rear 指针指向数组下标为 0 的位置就不会有越界问题了。当我们再向队列中添加元素的时候， rear 向后移动。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/circular-queue.png" alt="循环队列" tabindex="0"><figcaption>循环队列</figcaption></figure>
<p>顺序队列中，我们说 <code>front==rear</code> 的时候队列为空，循环队列中则不一样，也可能为满，如上图所示。解决办法有两种：</p>
<ol>
<li>可以设置一个标志变量 <code>flag</code>,当 <code>front==rear</code> 并且 <code>flag=0</code> 的时候队列为空，当<code>front==rear</code> 并且 <code>flag=1</code> 的时候队列为满。</li>
<li>队列为空的时候就是 <code>front==rear</code> ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置，如下图所示，那么现在判断队列是否为满的条件就是：<code>(rear+1) % QueueSize= front</code> 。</li>
</ol>
<h3> 4.3. 常见应用场景</h3>
<p>当我们需要按照一定顺序来处理数据的时候可以考虑使用队列这个数据结构。</p>
<ul>
<li><strong>阻塞队列：</strong> 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。</li>
<li><strong>线程池中的请求/任务队列：</strong> 线程池中没有空闲线程时，新的任务请求线程资源时，线程池该如何处理呢？答案是将这些请求放在队列中，当有空闲线程的时候，会循环中反复从队列中获取任务来执行。队列分为无界队列(基于链表)和有界队列(基于数组)。无界队列的特点就是可以一直入列，除非系统资源耗尽，比如：<code>FixedThreadPool</code> 使用无界队列 <code>LinkedBlockingQueue</code>。但是有界队列就不一样了，当队列满的话后面再有任务/请求就会拒绝，在 Java 中的体现就是会抛出<code>java.util.concurrent.RejectedExecutionException</code> 异常。</li>
<li>Linux 内核进程队列（按优先级排队）</li>
<li>现实生活中的派对，播放器上的播放列表;</li>
<li>消息队列</li>
<li>等等......</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/array.png" type="image/png"/>
    </item>
    <item>
      <title>红黑树</title>
      <link>https://javaguide.cn/cs-basics/data-structure/red-black-tree.html</link>
      <guid>https://javaguide.cn/cs-basics/data-structure/red-black-tree.html</guid>
      <source url="https://javaguide.cn/rss.xml">红黑树</source>
      <description>红黑树 红黑树特点 : 每个节点非红即黑； 根节点总是黑色的； 每个叶子节点都是黑色的空节点（NIL 节点）； 如果节点是红色的，则它的子节点必须是黑色的（反之不一定）； 从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。 红黑树的应用：TreeMap、TreeSet 以及 JDK1.8 的 HashMap 底层都用到了红黑树。 为什么要用红黑树？ 简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。详细了解可以查看 漫画：什么是红黑树？（也介绍到了二叉查找树，非常推荐）</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 红黑树</h1>
<p><strong>红黑树特点</strong> :</p>
<ol>
<li>每个节点非红即黑；</li>
<li>根节点总是黑色的；</li>
<li>每个叶子节点都是黑色的空节点（NIL 节点）；</li>
<li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；</li>
<li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。</li>
</ol>
<p><strong>红黑树的应用</strong>：TreeMap、TreeSet 以及 JDK1.8 的 HashMap 底层都用到了红黑树。</p>
<p><strong>为什么要用红黑树？</strong> 简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。详细了解可以查看 <a href="https://juejin.im/post/5a27c6946fb9a04509096248#comment" target="_blank" rel="noopener noreferrer">漫画：什么是红黑树？</a>（也介绍到了二叉查找树，非常推荐）</p>
<p><strong>相关阅读</strong>：<a href="https://zhuanlan.zhihu.com/p/24367771" target="_blank" rel="noopener noreferrer">《红黑树深入剖析及 Java 实现》</a>（美团点评技术团队）</p>
]]></content:encoded>
    </item>
    <item>
      <title>树</title>
      <link>https://javaguide.cn/cs-basics/data-structure/tree.html</link>
      <guid>https://javaguide.cn/cs-basics/data-structure/tree.html</guid>
      <source url="https://javaguide.cn/rss.xml">树</source>
      <description>树就是一种类似现实生活中的树的数据结构（倒置的树）。任何一颗非空树只有一个根节点。 一棵树具有以下特点： 一棵树中的任意两个结点有且仅有唯一的一条路径连通。 一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。 一棵树不包含回路。 下图就是一颗树，并且是一颗二叉树。 二叉树</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>树就是一种类似现实生活中的树的数据结构（倒置的树）。任何一颗非空树只有一个根节点。</p>
<p>一棵树具有以下特点：</p>
<ol>
<li>一棵树中的任意两个结点有且仅有唯一的一条路径连通。</li>
<li>一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。</li>
<li>一棵树不包含回路。</li>
</ol>
<p>下图就是一颗树，并且是一颗二叉树。</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/二叉树-2.png" alt="二叉树" tabindex="0"><figcaption>二叉树</figcaption></figure>
<p>如上图所示，通过上面这张图说明一下树中的常用概念：</p>
<ul>
<li><strong>节点</strong>：树中的每个元素都可以统称为节点。</li>
<li><strong>根节点</strong>：顶层节点或者说没有父节点的节点。上图中 A 节点就是根节点。</li>
<li><strong>父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点。上图中的 B 节点是 D 节点、E 节点的父节点。</li>
<li><strong>子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点。上图中 D 节点、E 节点是 B 节点的子节点。</li>
<li><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点。上图中 D 节点、E 节点的共同父节点是 B 节点，故 D 和 E 为兄弟节点。</li>
<li><strong>叶子节点</strong>：没有子节点的节点。上图中的 D、F、H、I 都是叶子节点。</li>
<li><strong>节点的高度</strong>：该节点到叶子节点的最长路径所包含的边数。</li>
<li><strong>节点的深度</strong>：根节点到该节点的路径所包含的边数</li>
<li><strong>节点的层数</strong>：节点的深度+1。</li>
<li><strong>树的高度</strong>：根节点的高度。</li>
</ul>
<blockquote>
<p>关于树的深度和高度的定义可以看 stackoverflow 上的这个问题：<a href="https://stackoverflow.com/questions/2603692/what-is-the-difference-between-tree-depth-and-height" target="_blank" rel="noopener noreferrer">What is the difference between tree depth and height?</a> 。</p>
</blockquote>
<h2> 二叉树的分类</h2>
<p><strong>二叉树</strong>（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。</p>
<p><strong>二叉树</strong> 的分支通常被称作“<strong>左子树</strong>”或“<strong>右子树</strong>”。并且，<strong>二叉树</strong> 的分支具有左右次序，不能随意颠倒。</p>
<p><strong>二叉树</strong> 的第 i 层至多拥有 <code>2^(i-1)</code> 个节点，深度为 k 的二叉树至多总共有 <code>2^(k+1)-1</code> 个节点（满二叉树的情况），至少有 2^(k) 个节点（关于节点的深度的定义国内争议比较多，我个人比较认可维基百科对<a href="https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)#/%E6%9C%AF%E8%AF%AD" target="_blank" rel="noopener noreferrer">节点深度的定义</a>）。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/image-20220119112736158.png" alt="危机百科对节点深度的定义" tabindex="0"><figcaption>危机百科对节点深度的定义</figcaption></figure>
<h3> 满二叉树</h3>
<p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是 <strong>满二叉树</strong>。也就是说，如果一个二叉树的层数为 K，且结点总数是(2^k) -1 ，则它就是 <strong>满二叉树</strong>。如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/full-binary-tree.png" alt="满二叉树" tabindex="0"><figcaption>满二叉树</figcaption></figure>
<h3> 完全二叉树</h3>
<p>除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则这个二叉树就是 <strong>完全二叉树</strong> 。</p>
<p>大家可以想象为一棵树从根结点开始扩展，扩展完左子节点才能开始扩展右子节点，每扩展完一层，才能继续扩展下一层。如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/complete-binary-tree.png" alt="完全二叉树" tabindex="0"><figcaption>完全二叉树</figcaption></figure>
<p>完全二叉树有一个很好的性质：<strong>父结点和子节点的序号有着对应关系。</strong></p>
<p>细心的小伙伴可能发现了，当根节点的值为 1 的情况下，若父结点的序号是 i，那么左子节点的序号就是 2i，右子节点的序号是 2i+1。这个性质使得完全二叉树利用数组存储时可以极大地节省空间，以及利用序号找到某个节点的父结点和子节点，后续二叉树的存储会详细介绍。</p>
<h3> 平衡二叉树</h3>
<p><strong>平衡二叉树</strong> 是一棵二叉排序树，且具有以下性质：</p>
<ol>
<li>可以是一棵空树</li>
<li>如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</li>
</ol>
<p>平衡二叉树的常用实现方法有 <strong>红黑树</strong>、<strong>AVL 树</strong>、<strong>替罪羊树</strong>、<strong>加权平衡树</strong>、<strong>伸展树</strong> 等。</p>
<p>在给大家展示平衡二叉树之前，先给大家看一棵树：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/oblique-tree.png" alt="斜树" tabindex="0"><figcaption>斜树</figcaption></figure>
<p><strong>你管这玩意儿叫树？？？</strong></p>
<p>没错，这玩意儿还真叫树，只不过这棵树已经退化为一个链表了，我们管它叫 <strong>斜树</strong>。</p>
<p><strong>如果这样，那我为啥不直接用链表呢?</strong></p>
<p>谁说不是呢？</p>
<p>二叉树相比于链表，由于父子节点以及兄弟节点之间往往具有某种特殊的关系，这种关系使得我们在树中对数据进行<strong>搜索</strong>和<strong>修改</strong>时，相对于链表更加快捷便利。</p>
<p>但是，如果二叉树退化为一个链表了，那么那么树所具有的优秀性质就难以表现出来，效率也会大打折，为了避免这样的情况，我们希望每个做 “家长”（父结点） 的，都 <strong>一碗水端平</strong>，分给左儿子和分给右儿子的尽可能一样多，相差最多不超过一层，如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/balanced-binary-tree.png" alt="平衡二叉树" tabindex="0"><figcaption>平衡二叉树</figcaption></figure>
<h2> 二叉树的存储</h2>
<p>二叉树的存储主要分为 <strong>链式存储</strong> 和 <strong>顺序存储</strong> 两种：</p>
<h3> 链式存储</h3>
<p>和链表类似，二叉树的链式存储依靠指针将各个节点串联起来，不需要连续的存储空间。</p>
<p>每个节点包括三个属性：</p>
<ul>
<li>数据 data。data 不一定是单一的数据，根据不同情况，可以是多个具有不同类型的数据。</li>
<li>左节点指针 left</li>
<li>右节点指针 right。</li>
</ul>
<p>可是 JAVA 没有指针啊！</p>
<p>那就直接引用对象呗（别问我对象哪里找）</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/chain-store-binary-tree.png" alt="链式存储二叉树" tabindex="0"><figcaption>链式存储二叉树</figcaption></figure>
<h3> 顺序存储</h3>
<p>顺序存储就是利用数组进行存储，数组中的每一个位置仅存储节点的 data，不存储左右子节点的指针，子节点的索引通过数组下标完成。根结点的序号为 1，对于每个节点 Node，假设它存储在数组中下标为 i 的位置，那么它的左子节点就存储在 2i 的位置，它的右子节点存储在下标为 2i+1 的位置。</p>
<p>一棵完全二叉树的数组顺序存储如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/sequential-storage.png" alt="完全二叉树的数组顺序存储" tabindex="0"><figcaption>完全二叉树的数组顺序存储</figcaption></figure>
<p>大家可以试着填写一下存储如下二叉树的数组，比较一下和完全二叉树的顺序存储有何区别：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/sequential-storage2.png" alt="非完全二叉树的数组顺序存储" tabindex="0"><figcaption>非完全二叉树的数组顺序存储</figcaption></figure>
<p>可以看到，如果我们要存储的二叉树不是完全二叉树，在数组中就会出现空隙，导致内存利用率降低</p>
<h2> 二叉树的遍历</h2>
<h3> 先序遍历</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/preorder-traversal.png" alt="先序遍历" tabindex="0"><figcaption>先序遍历</figcaption></figure>
<p>二叉树的先序遍历，就是先输出根结点，再遍历左子树，最后遍历右子树，遍历左子树和右子树的时候，同样遵循先序遍历的规则，也就是说，我们可以递归实现先序遍历。</p>
<p>代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 中序遍历</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/inorder-traversal.png" alt="中序遍历" tabindex="0"><figcaption>中序遍历</figcaption></figure>
<p>二叉树的中序遍历，就是先递归中序遍历左子树，再输出根结点的值，再递归中序遍历右子树，大家可以想象成一巴掌把树压扁，父结点被拍到了左子节点和右子节点的中间，如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/inorder-traversal2.png" alt="中序遍历" tabindex="0"><figcaption>中序遍历</figcaption></figure>
<p>代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 后序遍历</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/postorder-traversal.png" alt="后序遍历" tabindex="0"><figcaption>后序遍历</figcaption></figure>
<p>二叉树的后序遍历，就是先递归后序遍历左子树，再递归后序遍历右子树，最后输出根结点的值</p>
<p>代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/二叉树-2.png" type="image/png"/>
    </item>
    <item>
      <title>Elasticsearch常见面试题总结(付费)</title>
      <link>https://javaguide.cn/database/elasticsearch/elasticsearch-questions-01.html</link>
      <guid>https://javaguide.cn/database/elasticsearch/elasticsearch-questions-01.html</guid>
      <source url="https://javaguide.cn/rss.xml">Elasticsearch常见面试题总结(付费)</source>
      <description>Elasticsearch 相关的面试题为我的知识星球（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。</description>
      <category>数据库</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>Elasticsearch</strong> 相关的面试题为我的<a href="/about-the-author/zhishixingqiu-two-years.html" target="blank">知识星球</a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了<a href="/zhuanlan/java-mian-shi-zhi-bei.html" target="blank">《Java 面试指北》</a>中。</p>
<figure><img src="https://oss.javaguide.cn/javamianshizhibei/elasticsearch-questions.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北》</a>（点击链接即可查看详细介绍）的部分内容展示如下，你可以将其看作是 <a href="https://javaguide.cn/#/" target="_blank" rel="noopener noreferrer">JavaGuide</a> 的补充完善，两者可以配合使用。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/image-20220304102536445.png" alt="《Java 面试指北》内容概览" tabindex="0"><figcaption>《Java 面试指北》内容概览</figcaption></figure>
<h2> 星球介绍</h2>
<p>为了帮助更多同学准备 Java 面试以及学习 Java ，我创建了一个纯粹的<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer"> Java 面试知识星球</a>。虽然收费只有培训班/训练营的百分之一，但是知识星球里的内容质量更高，提供的服务也更全面，非常适合准备 Java 面试和学习 Java 的同学。</p>
<p><strong>欢迎准备 Java 面试以及学习 Java 的同学加入我的 <a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">知识星球</a>，干货非常多，学习氛围也很不错！收费虽然是白菜价，但星球里的内容或许比你参加上万的培训班质量还要高。</strong></p>
<p>下面是星球提供的部分服务（点击下方图片即可获取知识星球的详细介绍）：</p>
<figure><a href="/about-the-author/zhishixingqiu-two-years.html" target="blank"><img src="https://oss.javaguide.cn/xingqiu/xingqiufuwu.png" alt="星球服务" tabindex="0"></a><figcaption>星球服务</figcaption></figure>
<p><strong>我有自己的原则，不割韭菜，用心做内容，真心希望帮助到你！</strong></p>
<p>如果你感兴趣的话，不妨花 3 分钟左右看看星球的详细介绍：<a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球详细介绍</a>。</p>
<h2> 如何加入？</h2>
<p><strong>方式一（不推荐）</strong>：扫描下面的 10 元优惠卷直接加入（续费半价不到）。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/xingqiuyouhuijuan-10.jpg" alt="知识星球10元优惠卷" tabindex="0"><figcaption>知识星球10元优惠卷</figcaption></figure>
<p>使用这种方式进入的话，建议你也添加一下我的个人微信（**备注“星球”**即可），方便后续交流沟通。</p>
<p><strong>方式二（推荐）</strong>：添加我的个人微信（<strong>javaguide1024</strong>）领取一个 <strong>30</strong> 元的星球专属优惠券（续费半价不到）。</p>
<p><strong>一定要备注“优惠卷”</strong>，不然通过不了。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/weixin-guidege666.jpeg" alt="个人微信" tabindex="0"><figcaption>个人微信</figcaption></figure>
<p><strong>无任何套路，无任何潜在收费项。用心做内容，不割韭菜！</strong></p>
<p>进入星球之后，记得查看 <strong><a href="https://t.zsxq.com/0d18KSarv" target="_blank" rel="noopener noreferrer">星球使用指南</a></strong> （一定要看！） 。</p>
<p>随着时间推移，星球积累的干货资源越来越多，我花在星球上的时间也越来越多，星球的价格会逐步向上调整，想要加入的同学一定要尽早。</p>
<p>不过， <strong>一定要确定需要再进</strong> 。并且， <strong>三天之内觉得内容不满意可以全额退款</strong> 。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/javamianshizhibei/elasticsearch-questions.png" type="image/png"/>
    </item>
    <item>
      <title>Linux 基础知识总结</title>
      <link>https://javaguide.cn/cs-basics/operating-system/linux-intro.html</link>
      <guid>https://javaguide.cn/cs-basics/operating-system/linux-intro.html</guid>
      <source url="https://javaguide.cn/rss.xml">Linux 基础知识总结</source>
      <description>简单介绍一下 Java 程序员必知的 Linux 的一些概念以及常见命令。 初探 Linux Linux 简介 通过以下三点可以概括 Linux 到底是什么： 类 Unix 系统：Linux 是一种自由、开放源码的类似 Unix 的操作系统 Linux 本质是指 Linux 内核：严格来讲，Linux 这个词本身只表示 Linux 内核，单独的 Linux 内核并不能成为一个可以正常工作的操作系统。所以，就有了各种 Linux 发行版。 Linux 之父(林纳斯·本纳第克特·托瓦兹 Linus Benedict Torvalds)：一个编程领域的传奇式人物，真大佬！我辈崇拜敬仰之楷模。他是 Linux 内核 的最早作者，随后发起了这个开源项目，担任 Linux 内核的首要架构师。他还发起了 Git 这个开源项目，并为主要的开发者。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>简单介绍一下 Java 程序员必知的 Linux 的一些概念以及常见命令。</p>
<h2> 初探 Linux</h2>
<h3> Linux 简介</h3>
<p>通过以下三点可以概括 Linux 到底是什么：</p>
<ul>
<li><strong>类 Unix 系统</strong>：Linux 是一种自由、开放源码的类似 Unix 的操作系统</li>
<li><strong>Linux 本质是指 Linux 内核</strong>：严格来讲，Linux 这个词本身只表示 Linux 内核，单独的 Linux 内核并不能成为一个可以正常工作的操作系统。所以，就有了各种 Linux 发行版。</li>
<li><strong>Linux 之父(林纳斯·本纳第克特·托瓦兹 Linus Benedict Torvalds)</strong>：一个编程领域的传奇式人物，真大佬！我辈崇拜敬仰之楷模。他是 <strong>Linux 内核</strong> 的最早作者，随后发起了这个开源项目，担任 Linux 内核的首要架构师。他还发起了 Git 这个开源项目，并为主要的开发者。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux/linux-father.png" alt="Linux 之父" tabindex="0"><figcaption>Linux 之父</figcaption></figure>
<h3> Linux 诞生</h3>
<p>1989 年，Linus Torvalds 进入芬兰陆军新地区旅，服 11 个月的国家义务兵役，军衔为少尉，主要服务于计算机部门，任务是弹道计算。服役期间，购买了安德鲁·斯图尔特·塔能鲍姆所著的教科书及 minix 源代码，开始研究操作系统。1990 年，他退伍后回到大学，开始接触 Unix。</p>
<blockquote>
<p><strong>Minix</strong> 是一个迷你版本的类 Unix 操作系统，由塔能鲍姆教授为了教学之用而创作，采用微核心设计。它启发了 Linux 内核的创作。</p>
</blockquote>
<p>1991 年，Linus Torvalds 开源了 Linux 内核。Linux 以一只可爱的企鹅作为标志，象征着敢作敢为、热爱生活。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux/Linux-Logo.png" alt="OPINION: Make the switch to a Linux operating system | Opinion ..." tabindex="0"><figcaption>OPINION: Make the switch to a Linux operating system | Opinion ...</figcaption></figure>
<h3> 常见的 Linux 发行版本</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux/linux.png" alt="Linux 操作系统" tabindex="0"><figcaption>Linux 操作系统</figcaption></figure>
<p>Linus Torvalds 开源的只是 Linux 内核，我们上面也提到了操作系统内核的作用。一些组织或厂商将 Linux 内核与各种软件和文档包装起来，并提供系统安装界面和系统配置、设定与管理工具，就构成了 Linux 的发行版本。</p>
<blockquote>
<p>内核主要负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理。</p>
</blockquote>
<p>Linux 的发行版本可以大体分为两类：</p>
<ul>
<li><strong>商业公司维护的发行版本</strong>：比如 Red Hat 公司维护支持的 Red Hat Enterprise Linux (RHEL)。</li>
<li><strong>社区组织维护的发行版本</strong>：比如基于 Red Hat Enterprise Linux（RHEL）的 CentOS、基于 Debian 的 Ubuntu。</li>
</ul>
<p>对于初学者学习 Linux ，推荐选择 CentOS，原因如下：</p>
<ul>
<li>CentOS 免费且开放源代码；</li>
<li>CentOS 基于 RHEL，功能与 RHEL 高度一致，安全稳定、性能优秀。</li>
</ul>
<h2> Linux 文件系统</h2>
<h3> Linux 文件系统简介</h3>
<p>在 Linux 操作系统中，一切被操作系统管理的资源，如网络接口卡、磁盘驱动器、打印机、输入输出设备、普通文件或目录等，都被视为文件。这是 Linux 系统中一个重要的概念，即"一切都是文件"。</p>
<p>这种概念源自 UNIX 哲学，即将所有资源都抽象为文件的方式来进行管理和访问。Linux 的文件系统也借鉴了 UNIX 文件系统的设计理念。这种设计使得 Linux 系统可以通过统一的文件接口来管理和操作不同类型的资源，从而实现了一种统一的文件操作方式。例如，可以使用类似于读写文件的方式来对待网络接口、磁盘驱动器、设备文件等，使得操作和管理这些资源更加统一和简便。</p>
<p>这种文件为中心的设计理念为 Linux 系统带来了灵活性和可扩展性，使得 Linux 成为一种强大的操作系统。同时，这也是 Linux 系统的一大特点，深受广大用户和开发者的喜欢和推崇。</p>
<h3> inode 介绍</h3>
<p>inode 是 Linux/Unix 文件系统的基础。那 inode 到是什么?有什么作用呢?</p>
<p>通过以下五点可以概括 inode 到底是什么：</p>
<ol>
<li>硬盘的最小存储单位是扇区(Sector)，块(block)由多个扇区组成。文件数据存储在块中。块的最常见的大小是 4kb，约为 8 个连续的扇区组成（每个扇区存储 512 字节）。一个文件可能会占用多个 block，但是一个块只能存放一个文件。虽然，我们将文件存储在了块(block)中，但是我们还需要一个空间来存储文件的 <strong>元信息 metadata</strong>：如某个文件被分成几块、每一块在的地址、文件拥有者，创建时间，权限，大小等。这种 <strong>存储文件元信息的区域就叫 inode</strong>，译为索引节点：<strong>i（index）+node</strong>。 <strong>每个文件都有一个唯一的 inode，存储文件的元信息。</strong></li>
<li>inode 是一种固定大小的数据结构，其大小在文件系统创建时就确定了，并且在文件的生命周期内保持不变。</li>
<li>inode 的访问速度非常快，因为系统可以直接通过 inode 号码定位到文件的元数据信息，无需遍历整个文件系统。</li>
<li>inode 的数量是有限的，每个文件系统只能包含固定数量的 inode。这意味着当文件系统中的 inode 用完时，无法再创建新的文件或目录，即使磁盘上还有可用空间。因此，在创建文件系统时，需要根据文件和目录的预期数量来合理分配 inode 的数量。</li>
<li>可以使用 <code>stat</code> 命令可以查看文件的 inode 信息，包括文件的 inode 号、文件类型、权限、所有者、文件大小、修改时间。</li>
</ol>
<p>简单来说：inode 就是用来维护某个文件被分成几块、每一块在的地址、文件拥有者，创建时间，权限，大小等信息。</p>
<p>再总结一下 inode 和 block：</p>
<ul>
<li><strong>inode</strong>：记录文件的属性信息，可以使用 <code>stat</code> 命令查看 inode 信息。</li>
<li><strong>block</strong>：实际文件的内容，如果一个文件大于一个块时候，那么将占用多个 block，但是一个块只能存放一个文件。（因为数据是由 inode 指向的，如果有两个文件的数据存放在同一个块中，就会乱套了）</li>
</ul>
<figure><figcaption>文件inode信息</figcaption></figure>
<p>可以看出，Linux/Unix 操作系统使用 inode 区分不同的文件。这样做的好处是，即使文件名被修改或删除，文件的 inode 号码不会改变，从而可以避免一些因文件重命名、移动或删除导致的错误。同时，inode 也可以提供更高的文件系统性能，因为 inode 的访问速度非常快，可以直接通过 inode 号码定位到文件的元数据信息，无需遍历整个文件系统。</p>
<p>不过，使用 inode 号码也使得文件系统在用户和应用程序层面更加抽象和复杂，需要通过系统命令或文件系统接口来访问和管理文件的 inode 信息。</p>
<h3> 硬链接和软链接</h3>
<p>在 Linux/类 Unix 系统上，文件链接（File Link）是一种特殊的文件类型，可以在文件系统中指向另一个文件。常见的文件链接类型有两种：</p>
<p><strong>1、硬链接（Hard Link）</strong></p>
<ul>
<li>在 Linux/类 Unix 文件系统中，每个文件和目录都有一个唯一的索引节点（inode）号，用来标识该文件或目录。硬链接通过 inode 节点号建立连接，硬链接和源文件的 inode 节点号相同，两者对文件系统来说是完全平等的（可以看作是互为硬链接，源头是同一份文件），删除其中任何一个对另外一个没有影响，可以通过给文件设置硬链接文件来防止重要文件被误删。</li>
<li>只有删除了源文件和所有对应的硬链接文件，该文件才会被真正删除。</li>
<li>硬链接具有一些限制，不能对目录以及不存在的文件创建硬链接，并且，硬链接也不能跨越文件系统。</li>
<li><code>ln</code> 命令用于创建硬链接。</li>
</ul>
<p><strong>2、软链接（Symbolic Link 或 Symlink）</strong></p>
<ul>
<li>软链接和源文件的 inode 节点号不同，而是指向一个文件路径。</li>
<li>源文件删除后，软链接依然存在，但是指向的是一个无效的文件路径。</li>
<li>软连接类似于 Windows 系统中的快捷方式。</li>
<li>不同于硬链接，可以对目录或者不存在的文件创建软链接，并且，软链接可以跨越文件系统。</li>
<li><code>ln -s</code> 命令用于创建软链接。</li>
</ul>
<p><strong>硬链接为什么不能跨文件系统？</strong></p>
<p>我们之前提到过，硬链接是通过 inode 节点号建立连接的，而硬链接和源文件共享相同的 inode 节点号。</p>
<p>然而，每个文件系统都有自己的独立 inode 表，且每个 inode 表只维护该文件系统内的 inode。如果在不同的文件系统之间创建硬链接，可能会导致 inode 节点号冲突的问题，即目标文件的 inode 节点号已经在该文件系统中被使用。</p>
<h3> Linux 文件类型</h3>
<p>Linux 支持很多文件类型，其中非常重要的文件类型有: <strong>普通文件</strong>，<strong>目录文件</strong>，<strong>链接文件</strong>，<strong>设备文件</strong>，<strong>管道文件</strong>，<strong>Socket 套接字文件</strong> 等。</p>
<ul>
<li><strong>普通文件（-）</strong>：用于存储信息和数据， Linux 用户可以根据访问权限对普通文件进行查看、更改和删除。比如：图片、声音、PDF、text、视频、源代码等等。</li>
<li><strong>目录文件（d，directory file）</strong>：目录也是文件的一种，用于表示和管理系统中的文件，目录文件中包含一些文件名和子目录名。打开目录事实上就是打开目录文件。</li>
<li><strong>符号链接文件（l，symbolic link）</strong>：保留了指向文件的地址而不是文件本身。</li>
<li><strong>字符设备（c，char）</strong>：用来访问字符设备比如键盘。</li>
<li><strong>设备文件（b，block）</strong>：用来访问块设备比如硬盘、软盘。</li>
<li><strong>管道文件(p，pipe)</strong> : 一种特殊类型的文件，用于进程之间的通信。</li>
<li><strong>套接字文件(s，socket)</strong>：用于进程间的网络通信，也可以用于本机之间的非网络通信。</li>
</ul>
<p>每种文件类型都有不同的用途和属性，可以通过命令如<code>ls</code>、<code>file</code>等来查看文件的类型信息。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Linux 目录树</h3>
<p>Linux 使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。
</p>
<p><strong>常见目录说明：</strong></p>
<ul>
<li><strong>/bin：</strong> 存放二进制可执行文件(ls、cat、mkdir 等)，常用命令一般都在这里；</li>
<li><strong>/etc：</strong> 存放系统管理和配置文件；</li>
<li><strong>/home：</strong> 存放所有用户文件的根目录，是用户主目录的基点，比如用户 user 的主目录就是/home/user，可以用~user 表示；</li>
<li><strong>/usr：</strong> 用于存放系统应用程序；</li>
<li><strong>/opt：</strong> 额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把 tomcat 等都安装到这里；</li>
<li><strong>/proc：</strong> 虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息；</li>
<li><strong>/root：</strong> 超级用户（系统管理员）的主目录（特权阶级^o^）；</li>
<li><strong>/sbin:</strong> 存放二进制可执行文件，只有 root 才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如 ifconfig 等；</li>
<li><strong>/dev：</strong> 用于存放设备文件；</li>
<li><strong>/mnt：</strong> 系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统；</li>
<li><strong>/boot：</strong> 存放用于系统引导时使用的各种文件；</li>
<li><strong>/lib 和/lib64：</strong> 存放着和系统运行相关的库文件 ；</li>
<li><strong>/tmp：</strong> 用于存放各种临时文件，是公用的临时文件存储点；</li>
<li><strong>/var：</strong> 用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等；</li>
<li><strong>/lost+found：</strong> 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows 下叫什么.chk）就在这里。</li>
</ul>
<h2> Linux 常用命令</h2>
<p>下面只是给出了一些比较常用的命令。</p>
<p>推荐一个 Linux 命令快查网站，非常不错，大家如果遗忘某些命令或者对某些命令不理解都可以在这里得到解决。Linux 命令在线速查手册：https://wangchujiang.com/linux-command/ 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux/linux-command-search.png" alt=" Linux 命令快查" tabindex="0"><figcaption> Linux 命令快查</figcaption></figure>
<p>另外，<a href="https://www.shell.how/" target="_blank" rel="noopener noreferrer">shell.how</a> 这个网站可以用来解释常见命令的意思，对你学习 Linux 基本命令以及其他常用命令（如 Git、NPM）。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux/shell-now.png" alt="shell.how 使用示例" tabindex="0"><figcaption>shell.how 使用示例</figcaption></figure>
<h3> 目录切换</h3>
<ul>
<li><code>cd usr</code>：切换到该目录下 usr 目录</li>
<li><code>cd ..（或cd../）</code>：切换到上一层目录</li>
<li><code>cd /</code>：切换到系统根目录</li>
<li><code>cd ~</code>：切换到用户主目录</li>
<li><strong><code>cd -</code>：</strong> 切换到上一个操作所在目录</li>
</ul>
<h3> 目录操作</h3>
<ul>
<li><code>ls</code>：显示目录中的文件和子目录的列表。例如：<code>ls /home</code>，显示 <code>/home</code> 目录下的文件和子目录列表。</li>
<li><code>ll</code>：<code>ll</code> 是 <code>ls -l</code> 的别名，ll 命令可以看到该目录下的所有目录和文件的详细信息</li>
<li><code>mkdir [选项] 目录名</code>：创建新目录（增）。例如：<code>mkdir -m 755 my_directory</code>，创建一个名为 <code>my_directory</code> 的新目录，并将其权限设置为 755，即所有用户对该目录有读、写和执行的权限。</li>
<li><code>find [路径] [表达式]</code>：在指定目录及其子目录中搜索文件或目录（查），非常强大灵活。例如：① 列出当前目录及子目录下所有文件和文件夹: <code>find .</code>；② 在<code>/home</code>目录下查找以 <code>.txt</code> 结尾的文件名:<code>find /home -name "*.txt"</code> ,忽略大小写: <code>find /home -i name "*.txt"</code> ；③ 当前目录及子目录下查找所有以 <code>.txt</code> 和 <code>.pdf</code> 结尾的文件:<code>find . \( -name "*.txt" -o -name "*.pdf" \)</code>或<code>find . -name "*.txt" -o -name "*.pdf"</code>。</li>
<li><code>pwd</code>：显示当前工作目录的路径。</li>
<li><code>rmdir [选项] 目录名</code>：删除空目录（删）。例如：<code>rmdir -p my_directory</code>，删除名为 <code>my_directory</code> 的空目录，并且会递归删除<code>my_directory</code>的空父目录，直到遇到非空目录或根目录。</li>
<li><code>rm [选项] 文件或目录名</code>：删除文件/目录（删）。例如：<code>rm -r my_directory</code>，删除名为 <code>my_directory</code> 的目录，<code>-r</code>(recursive,递归) 表示会递归删除指定目录及其所有子目录和文件。</li>
<li><code>cp [选项] 源文件/目录 目标文件/目录</code>：复制文件或目录（移）。例如：<code>cp file.txt /home/file.txt</code>，将 <code>file.txt</code> 文件复制到 <code>/home</code> 目录下，并重命名为 <code>file.txt</code>。<code>cp -r source destination</code>，将 <code>source</code> 目录及其下的所有子目录和文件复制到 <code>destination</code> 目录下，并保留源文件的属性和目录结构。</li>
<li><code>mv [选项] 源文件/目录 目标文件/目录</code>：移动文件或目录（移），也可以用于重命名文件或目录。例如：<code>mv file.txt /home/file.txt</code>，将 <code>file.txt</code> 文件移动到 <code>/home</code> 目录下，并重命名为 <code>file.txt</code>。<code>mv</code> 与 <code>cp</code> 的结果不同，<code>mv</code> 好像文件“搬家”，文件个数并未增加。而 <code>cp</code> 对文件进行复制，文件个数增加了。</li>
</ul>
<h3> 文件操作</h3>
<p>像 <code>mv</code>、<code>cp</code>、<code>rm</code> 等文件和目录都适用的命令，这里就不重复列举了。</p>
<ul>
<li><code>touch [选项] 文件名..</code>：创建新文件或更新已存在文件（增）。例如：<code>touch file1.txt file2.txt file3.txt</code> ，创建 3 个文件。</li>
<li><code>ln [选项] &lt;源文件&gt; &lt;硬链接/软链接文件&gt;</code>：创建硬链接/软链接。例如：<code>ln -s file.txt file_link</code>，创建名为 <code>file_link</code> 的软链接，指向 <code>file.txt</code> 文件。<code>-s</code> 选项代表的就是创建软链接，s 即 symbolic（软链接又名符号链接） 。</li>
<li><code>cat/more/less/tail 文件名</code>：文件的查看（查） 。命令 <code>tail -f 文件</code> 可以对某个文件进行动态监控，例如 Tomcat 的日志文件， 会随着程序的运行，日志会变化，可以使用 <code>tail -f catalina-2016-11-11.log</code> 监控 文 件的变化 。</li>
<li><code>vim 文件名</code>：修改文件的内容（改）。vim 编辑器是 Linux 中的强大组件，是 vi 编辑器的加强版，vim 编辑器的命令和快捷方式有很多，但此处不一一阐述，大家也无需研究的很透彻，使用 vim 编辑修改文件的方式基本会使用就可以了。在实际开发中，使用 vim 编辑器主要作用就是修改配置文件，下面是一般步骤：<code>vim 文件------&gt;进入文件-----&gt;命令模式------&gt;按i进入编辑模式-----&gt;编辑文件 -------&gt;按Esc进入底行模式-----&gt;输入：wq/q!</code> （输入 wq 代表写入内容并退出，即保存；输入 q!代表强制退出不保存）。</li>
</ul>
<h3> 文件压缩</h3>
<p><strong>1）打包并压缩文件：</strong></p>
<p>Linux 中的打包文件一般是以 <code>.tar</code> 结尾的，压缩的命令一般是以 <code>.gz</code> 结尾的。而一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般 <code>.tar.gz</code>。</p>
<p>命令：<code>tar -zcvf 打包压缩后的文件名 要打包压缩的文件</code> ，其中：</p>
<ul>
<li>z：调用 gzip 压缩命令进行压缩</li>
<li>c：打包文件</li>
<li>v：显示运行过程</li>
<li>f：指定文件名</li>
</ul>
<p>比如：假如 test 目录下有三个文件分别是：<code>aaa.txt</code>、 <code>bbb.txt</code>、<code>ccc.txt</code>，如果我们要打包 <code>test</code> 目录并指定压缩后的压缩包名称为 <code>test.tar.gz</code> 可以使用命令：<code>tar -zcvf test.tar.gz aaa.txt bbb.txt ccc.txt</code> 或 <code>tar -zcvf test.tar.gz /test/</code> 。</p>
<p><strong>2）解压压缩包：</strong></p>
<p>命令：<code>tar [-xvf] 压缩文件</code></p>
<p>其中 x 代表解压</p>
<p>示例：</p>
<ul>
<li>将 <code>/test</code> 下的 <code>test.tar.gz</code> 解压到当前目录下可以使用命令：<code>tar -xvf test.tar.gz</code></li>
<li>将 /test 下的 test.tar.gz 解压到根目录/usr 下:<code>tar -xvf test.tar.gz -C /usr</code>（<code>-C</code> 代表指定解压的位置）</li>
</ul>
<h3> 文件传输</h3>
<ul>
<li><code>scp [选项] 源文件 远程文件</code> （scp 即 secure copy，安全复制）：用于通过 SSH 协议进行安全的文件传输，可以实现从本地到远程主机的上传和从远程主机到本地的下载。例如：<code>scp -r my_directory user@remote:/home/user</code> ，将本地目录<code>my_directory</code>上传到远程服务器 <code>/home/user</code> 目录下。<code>scp -r user@remote:/home/user/my_directory</code> ，将远程服务器的 <code>/home/user</code> 目录下的<code>my_directory</code>目录下载到本地。需要注意的是，<code>scp</code> 命令需要在本地和远程系统之间建立 SSH 连接进行文件传输，因此需要确保远程服务器已经配置了 SSH 服务，并且具有正确的权限和认证方式。</li>
<li><code>rsync [选项] 源文件 远程文件</code> : 可以在本地和远程系统之间高效地进行文件复制，并且能够智能地处理增量复制，节省带宽和时间。例如：<code>rsync -r my_directory user@remote:/home/user</code>，将本地目录<code>my_directory</code>上传到远程服务器 <code>/home/user</code> 目录下。</li>
<li><code>ftp</code> (File Transfer Protocol)：提供了一种简单的方式来连接到远程 FTP 服务器并进行文件上传、下载、删除等操作。使用之前需要先连接登录远程 FTP 服务器，进入 FTP 命令行界面后，可以使用 <code>put</code> 命令将本地文件上传到远程主机，可以使用<code>get</code>命令将远程主机的文件下载到本地，可以使用 <code>delete</code> 命令删除远程主机的文件。这里就不进行演示了。</li>
</ul>
<h3> 文件权限</h3>
<p>操作系统中每个文件都拥有特定的权限、所属用户和所属组。权限是操作系统用来限制资源访问的机制，在 Linux 中权限一般分为读(readable)、写(writable)和执行(excutable)，分为三组。分别对应文件的属主(owner)，属组(group)和其他用户(other)，通过这样的机制来限制哪些用户、哪些组可以对特定的文件进行什么样的操作。</p>
<p>通过 <strong><code>ls -l</code></strong> 命令我们可以 查看某个目录下的文件或目录的权限</p>
<p>示例：在随意某个目录下<code>ls -l</code></p>
<figure><figcaption></figcaption></figure>
<p>第一列的内容的信息解释如下：</p>
<figure><figcaption></figcaption></figure>
<blockquote>
<p>下面将详细讲解文件的类型、Linux 中权限以及文件有所有者、所在组、其它组具体是什么？</p>
</blockquote>
<p><strong>文件的类型：</strong></p>
<ul>
<li>d：代表目录</li>
<li>-：代表文件</li>
<li>l：代表软链接（可以认为是 window 中的快捷方式）</li>
</ul>
<p><strong>Linux 中权限分为以下几种：</strong></p>
<ul>
<li>r：代表权限是可读，r 也可以用数字 4 表示</li>
<li>w：代表权限是可写，w 也可以用数字 2 表示</li>
<li>x：代表权限是可执行，x 也可以用数字 1 表示</li>
</ul>
<p><strong>文件和目录权限的区别：</strong></p>
<p>对文件和目录而言，读写执行表示不同的意义。</p>
<p>对于文件：</p>
<table>
<thead>
<tr>
<th style="text-align:left">权限名称</th>
<th style="text-align:right">可执行操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">r</td>
<td style="text-align:right">可以使用 cat 查看文件的内容</td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:right">可以修改文件的内容</td>
</tr>
<tr>
<td style="text-align:left">x</td>
<td style="text-align:right">可以将其运行为二进制文件</td>
</tr>
</tbody>
</table>
<p>对于目录：</p>
<table>
<thead>
<tr>
<th style="text-align:left">权限名称</th>
<th style="text-align:right">可执行操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">r</td>
<td style="text-align:right">可以查看目录下列表</td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:right">可以创建和删除目录下文件</td>
</tr>
<tr>
<td style="text-align:left">x</td>
<td style="text-align:right">可以使用 cd 进入目录</td>
</tr>
</tbody>
</table>
<p>需要注意的是：<strong>超级用户可以无视普通用户的权限，即使文件目录权限是 000，依旧可以访问。</strong></p>
<p><strong>在 linux 中的每个用户必须属于一个组，不能独立于组外。在 linux 中每个文件有所有者、所在组、其它组的概念。</strong></p>
<ul>
<li><strong>所有者(u)</strong>：一般为文件的创建者，谁创建了该文件，就天然的成为该文件的所有者，用 <code>ls ‐ahl</code> 命令可以看到文件的所有者 也可以使用 chown 用户名 文件名来修改文件的所有者 。</li>
<li><strong>文件所在组(g)</strong>：当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组用 <code>ls ‐ahl</code>命令可以看到文件的所有组也可以使用 chgrp 组名 文件名来修改文件所在的组。</li>
<li><strong>其它组(o)</strong>：除开文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组。</li>
</ul>
<blockquote>
<p>我们再来看看如何修改文件/目录的权限。</p>
</blockquote>
<p><strong>修改文件/目录的权限的命令：<code>chmod</code></strong></p>
<p>示例：修改/test 下的 aaa.txt 的权限为文件所有者有全部权限，文件所有者所在的组有读写权限，其他用户只有读的权限。</p>
<p><strong><code>chmod u=rwx,g=rw,o=r aaa.txt</code></strong> 或者 <strong><code>chmod 764 aaa.txt</code></strong></p>
<figure><figcaption></figcaption></figure>
<p><strong>补充一个比较常用的东西:</strong></p>
<p>假如我们装了一个 zookeeper，我们每次开机到要求其自动启动该怎么办？</p>
<ol>
<li>新建一个脚本 zookeeper</li>
<li>为新建的脚本 zookeeper 添加可执行权限，命令是:<code>chmod +x zookeeper</code></li>
<li>把 zookeeper 这个脚本添加到开机启动项里面，命令是：<code>chkconfig --add zookeeper</code></li>
<li>如果想看看是否添加成功，命令是：<code>chkconfig --list</code></li>
</ol>
<h3> 用户管理</h3>
<p>Linux 系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p><strong>Linux 用户管理相关命令:</strong></p>
<ul>
<li><code>useradd [选项] 用户名</code>:创建用户账号。使用<code>useradd</code>指令所建立的帐号，实际上是保存在 <code>/etc/passwd</code>文本文件中。</li>
<li><code>userdel [选项] 用户名</code>:删除用户帐号。</li>
<li><code>usermod [选项] 用户名</code>:修改用户账号的属性和配置比如用户名、用户 ID、家目录。</li>
<li><code>passwd [选项] 用户名</code>: 设置用户的认证信息，包括用户密码、密码过期时间等。。例如：<code>passwd -S 用户名</code> ，显示用户账号密码信息。<code>passwd -d 用户名</code>: 清除用户密码，会导致用户无法登录。<code>passwd 用户名</code>，修改用户密码，随后系统会提示输入新密码并确认密码。</li>
<li><code>su [选项] 用户名</code>（su 即 Switch User，切换用户）：在当前登录的用户和其他用户之间切换身份。</li>
</ul>
<h3> 用户组管理</h3>
<p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同 Linux 系统对用户组的规定有所不同，如 Linux 下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新。</p>
<p><strong>Linux 系统用户组的管理相关命令:</strong></p>
<ul>
<li><code>groupadd [选项] 用户组</code> :增加一个新的用户组。</li>
<li><code>groupdel 用户组</code>:要删除一个已有的用户组。</li>
<li><code>groupmod [选项] 用户组</code> : 修改用户组的属性。</li>
</ul>
<h3> 系统状态</h3>
<ul>
<li><code>top [选项]</code>：用于实时查看系统的 CPU 使用率、内存使用率、进程信息等。</li>
<li><code>htop [选项]</code>：类似于 <code>top</code>，但提供了更加交互式和友好的界面，可让用户交互式操作，支持颜色主题，可横向或纵向滚动浏览进程列表，并支持鼠标操作。</li>
<li><code>uptime [选项]</code>：用于查看系统总共运行了多长时间、系统的平均负载等信息。</li>
<li><code>vmstat [间隔时间] [重复次数]</code>：vmstat （Virtual Memory Statistics） 的含义为显示虚拟内存状态，但是它可以报告关于进程、内存、I/O 等系统整体运行状态。</li>
<li><code>free [选项]</code>：用于查看系统的内存使用情况，包括已用内存、可用内存、缓冲区和缓存等。</li>
<li><code>df [选项] [文件系统]</code>：用于查看系统的磁盘空间使用情况，包括磁盘空间的总量、已使用量和可用量等，可以指定文件系统上。例如：<code>df -a</code>，查看全部文件系统。</li>
<li><code>du [选项] [文件]</code>：用于查看指定目录或文件的磁盘空间使用情况，可以指定不同的选项来控制输出格式和单位。</li>
<li><code>sar [选项] [时间间隔] [重复次数]</code>：用于收集、报告和分析系统的性能统计信息，包括系统的 CPU 使用、内存使用、磁盘 I/O、网络活动等详细信息。它的特点是可以连续对系统取样，获得大量的取样数据。取样数据和分析的结果都可以存入文件，使用它时消耗的系统资源很小。</li>
<li><code>ps [选项]</code>：用于查看系统中的进程信息，包括进程的 ID、状态、资源使用情况等。<code>ps -ef</code>/<code>ps -aux</code>：这两个命令都是查看当前系统正在运行进程，两者的区别是展示格式不同。如果想要查看特定的进程可以使用这样的格式：<code>ps aux|grep redis</code> （查看包括 redis 字符串的进程），也可使用 <code>pgrep redis -a</code>。</li>
<li><code>systemctl [命令] [服务名称]</code>：用于管理系统的服务和单元，可以查看系统服务的状态、启动、停止、重启等。</li>
</ul>
<h3> 网络通信</h3>
<ul>
<li><code>ping [选项] 目标主机</code>：测试与目标主机的网络连接。</li>
<li><code>ifconfig</code> 或 <code>ip</code>：用于查看系统的网络接口信息，包括网络接口的 IP 地址、MAC 地址、状态等。</li>
<li><code>netstat [选项]</code>：用于查看系统的网络连接状态和网络统计信息，可以查看当前的网络连接情况、监听端口、网络协议等。</li>
<li><code>ss [选项]</code>：比 <code>netstat</code> 更好用，提供了更快速、更详细的网络连接信息。</li>
</ul>
<h3> 其他</h3>
<ul>
<li><code>sudo + 其他命令</code>：以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。</li>
<li><code>grep 要搜索的字符串 要搜索的文件 --color</code>：搜索命令，--color 代表高亮显示。</li>
<li><code>kill -9 进程的pid</code>：杀死进程（-9 表示强制终止）先用 ps 查找进程，然后用 kill 杀掉。</li>
<li><code>shutdown</code>：<code>shutdown -h now</code>：指定现在立即关机；<code>shutdown +5 "System will shutdown after 5 minutes"</code>：指定 5 分钟后关机，同时送出警告信息给登入用户。</li>
<li><code>reboot</code>：<code>reboot</code>：重开机。<code>reboot -w</code>：做个重开机的模拟（只有纪录并不会真的重开机）。</li>
</ul>
<h2> Linux 环境变量</h2>
<p>在 Linux 系统中，环境变量是用来定义系统运行环境的一些参数，比如每个用户不同的主目录（HOME）。</p>
<h3> 环境变量分类</h3>
<p>按照作用域来分，环境变量可以简单的分成:</p>
<ul>
<li>用户级别环境变量 : <code>~/.bashrc</code>、<code>~/.bash_profile</code>。</li>
<li>系统级别环境变量 : <code>/etc/bashrc</code>、<code>/etc/environment</code>、<code>/etc/profile</code>、<code>/etc/profile.d</code>。</li>
</ul>
<p>上述配置文件执行先后顺序为：<code>/etc/environment</code> –&gt; <code>/etc/profile</code> –&gt; <code>/etc/profile.d</code> –&gt; <code>~/.bash_profile</code> –&gt; <code>/etc/bashrc</code> –&gt; <code>~/.bashrc</code></p>
<p>如果要修改系统级别环境变量文件，需要管理员具备对该文件的写入权限。</p>
<p>建议用户级别环境变量在 <code>~/.bash_profile</code>中配置，系统级别环境变量在 <code>/etc/profile.d</code> 中配置。</p>
<p>按照生命周期来分，环境变量可以简单的分成:</p>
<ul>
<li>永久的：需要用户修改相关的配置文件，变量永久生效。</li>
<li>临时的：用户利用 <code>export</code> 命令，在当前终端下声明环境变量，关闭 shell 终端失效。</li>
</ul>
<h3> 读取环境变量</h3>
<p>通过 <code>export</code> 命令可以输出当前系统定义的所有环境变量。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 <code>export</code> 命令之外， <code>env</code> 命令也可以列出所有环境变量。</p>
<p><code>echo</code> 命令可以输出指定环境变量的值。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 环境变量修改</h3>
<p>通过 <code>export</code>命令可以修改指定的环境变量。不过，这种方式修改环境变量仅仅对当前 shell 终端生效，关闭 shell 终端就会失效。修改完成之后，立即生效。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 <code>vim</code> 命令修改环境变量配置文件。这种方式修改环境变量永久有效。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果修改的是系统级别环境变量则对所有用户生效，如果修改的是用户级别环境变量则仅对当前用户生效。</p>
<p>修改完成之后，需要 <code>source</code> 命令让其生效或者关闭 shell 终端重新登录。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux/linux-father.png" type="image/png"/>
    </item>
    <item>
      <title>操作系统常见面试题总结(上)</title>
      <link>https://javaguide.cn/cs-basics/operating-system/operating-system-basic-questions-01.html</link>
      <guid>https://javaguide.cn/cs-basics/operating-system/operating-system-basic-questions-01.html</guid>
      <source url="https://javaguide.cn/rss.xml">操作系统常见面试题总结(上)</source>
      <description>这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版：《Java 面试指北 》 (质量很高，专为面试打造，配合 JavaGuide 食用)。 知识星球：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 JavaGuide 知识星球（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">这是一则或许对你有用的小广告</p>
<ul>
<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北 》</a></strong> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li>
<li><strong>知识星球</strong>：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 <strong><a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球</a></strong>（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</li>
</ul>
</div>
<p>很多读者抱怨计算操作系统的知识点比较繁杂，自己也没有多少耐心去看，但是面试的时候又经常会遇到。所以，我带着我整理好的操作系统的常见问题来啦！这篇文章总结了一些我觉得比较重要的操作系统相关的问题比如 <strong>用户态和内核态、系统调用、进程和线程、死锁、内存管理、虚拟内存、文件系统</strong>等等。</p>
<p>这篇文章只是对一些操作系统比较重要概念的一个概览，深入学习的话，建议大家还是老老实实地去看书。另外， 这篇文章的很多内容参考了《现代操作系统》第三版这本书，非常感谢。</p>
<p>开始本文的内容之前，我们先聊聊为什么要学习操作系统。</p>
<ul>
<li><strong>从对个人能力方面提升来说</strong>：操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。比如说我们开发的系统使用的缓存（比如 Redis）和操作系统的高速缓存就很像。CPU 中的高速缓存有很多种，不过大部分都是为了解决 CPU 处理速度和内存处理速度不对等的问题。我们还可以把内存看作外存的高速缓存，程序运行的时候我们把外存的数据复制到内存，由于内存的处理速度远远高于外存，这样提高了处理速度。同样地，我们使用的 Redis 缓存就是为了解决程序处理速度和访问常规关系型数据库速度不对等的问题。高速缓存一般会按照局部性原理（2-8 原则）根据相应的淘汰算法保证缓存中的数据是经常会被访问的。我们平常使用的 Redis 缓存很多时候也会按照 2-8 原则去做，很多淘汰算法都和操作系统中的类似。既说了 2-8 原则，那就不得不提命中率了，这是所有缓存概念都通用的。简单来说也就是你要访问的数据有多少能直接在缓存中直接找到。命中率高的话，一般表明你的缓存设计比较合理，系统处理速度也相对较快。</li>
<li><strong>从面试角度来说</strong>：尤其是校招，对于操作系统方面知识的考察是非常非常多的。</li>
</ul>
<p><strong>简单来说，学习操作系统能够提高自己思考的深度以及对技术的理解力，并且，操作系统方面的知识也是面试必备。</strong></p>
<h2> 操作系统基础</h2>
<figure><img src="https://oss.javaguide.cn/2020-8/image-20200807161118901.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 什么是操作系统？</h3>
<p>通过以下四点可以概括操作系统到底是什么：</p>
<ol>
<li>操作系统（Operating System，简称 OS）是管理计算机硬件与软件资源的程序，是计算机的基石。</li>
<li>操作系统本质上是一个运行在计算机上的软件程序 ，主要用于管理计算机硬件和软件资源。 举例：运行在你电脑上的所有应用程序都通过操作系统来调用系统内存以及磁盘等等硬件。</li>
<li>操作系统存在屏蔽了硬件层的复杂性。 操作系统就像是硬件使用的负责人，统筹着各种相关事项。</li>
<li>操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理。 内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。</li>
</ol>
<p>很多人容易把操作系统的内核（Kernel）和中央处理器（CPU，Central Processing Unit）弄混。你可以简单从下面两点来区别：</p>
<ol>
<li>操作系统的内核（Kernel）属于操作系统层面，而 CPU 属于硬件。</li>
<li>CPU 主要提供运算，处理各种指令的能力。内核（Kernel）主要负责系统管理比如内存管理，它屏蔽了对硬件的操作。</li>
</ol>
<p>下图清晰说明了应用程序、内核、CPU 这三者的关系。</p>
<figure><img src="https://oss.javaguide.cn/2020-8/Kernel_Layout.png" alt="Kernel_Layout" tabindex="0"><figcaption>Kernel_Layout</figcaption></figure>
<h3> 操作系统主要有哪些功能？</h3>
<p>从资源管理的角度来看，操作系统有 6 大功能：</p>
<ol>
<li><strong>进程和线程的管理</strong>：进程的创建、撤销、阻塞、唤醒，进程间的通信等。</li>
<li><strong>存储管理</strong>：内存的分配和管理、外存（磁盘等）的分配和管理等。</li>
<li><strong>文件管理</strong>：文件的读、写、创建及删除等。</li>
<li><strong>设备管理</strong>：完成设备（输入输出设备和外部存储设备等）的请求或释放，以及设备启动等功能。</li>
<li><strong>网络管理</strong>：操作系统负责管理计算机网络的使用。网络是计算机系统中连接不同计算机的方式，操作系统需要管理计算机网络的配置、连接、通信和安全等，以提供高效可靠的网络服务。</li>
<li><strong>安全管理</strong>：用户的身份认证、访问控制、文件加密等，以防止非法用户对系统资源的访问和操作。</li>
</ol>
<h3> 常见的操作系统有哪些？</h3>
<h4> Windows</h4>
<p>目前最流行的个人桌面操作系统 ，不做多的介绍，大家都清楚。界面简单易操作，软件生态非常好。</p>
<p><em>玩玩电脑游戏还是必须要有 Windows 的，所以我现在是一台 Windows 用于玩游戏，一台 Mac 用于平时日常开发和学习使用。</em></p>
<figure><figcaption>windows</figcaption></figure>
<h4> Unix</h4>
<p>最早的多用户、多任务操作系统 。后面崛起的 Linux 在很多方面都参考了 Unix。</p>
<p>目前这款操作系统已经逐渐逐渐退出操作系统的舞台。</p>
<figure><figcaption>unix</figcaption></figure>
<h4> Linux</h4>
<p><strong>Linux 是一套免费使用、开源的类 Unix 操作系统。</strong> Linux 存在着许多不同的发行版本，但它们都使用了 <strong>Linux 内核</strong> 。</p>
<blockquote>
<p>严格来讲，Linux 这个词本身只表示 Linux 内核，在 GNU/Linux 系统中，Linux 实际就是 Linux 内核，而该系统的其余部分主要是由 GNU 工程编写和提供的程序组成。单独的 Linux 内核并不能成为一个可以正常工作的操作系统。</p>
<p><strong>很多人更倾向使用 “GNU/Linux” 一词来表达人们通常所说的 “Linux”。</strong></p>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux/linux.png" alt="Linux 操作系统" tabindex="0"><figcaption>Linux 操作系统</figcaption></figure>
<h4> Mac OS</h4>
<p>苹果自家的操作系统，编程体验和 Linux 相当，但是界面、软件生态以及用户体验各方面都要比 Linux 操作系统更好。</p>
<figure><figcaption>macos</figcaption></figure>
<h3> 用户态和内核态</h3>
<h4> 什么是用户态和内核态？</h4>
<p>根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别：</p>
<ul>
<li><strong>用户态(User Mode)</strong> : 用户态运行的进程可以直接读取用户程序的数据，拥有较低的权限。当应用程序需要执行某些需要特殊权限的操作，例如读写磁盘、网络通信等，就需要向操作系统发起系统调用请求，进入内核态。</li>
<li><strong>内核态(Kernel Mode)</strong>：内核态运行的进程几乎可以访问计算机的任何资源包括系统的内存空间、设备、驱动程序等，不受限制，拥有非常高的权限。当操作系统接收到进程的系统调用请求时，就会从用户态切换到内核态，执行相应的系统调用，并将结果返回给进程，最后再从内核态切换回用户态。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/usermode-and-kernelmode.png" alt="用户态和内核态" tabindex="0"><figcaption>用户态和内核态</figcaption></figure>
<p>内核态相比用户态拥有更高的特权级别，因此能够执行更底层、更敏感的操作。不过，由于进入内核态需要付出较高的开销（需要进行一系列的上下文切换和权限检查），应该尽量减少进入内核态的次数，以提高系统的性能和稳定性。</p>
<h4> 为什么要有用户态和内核态？只有一个内核态不行么？</h4>
<ul>
<li>在 CPU 的所有指令中，有一些指令是比较危险的比如内存分配、设置时钟、IO 处理等，如果所有的程序都能使用这些指令的话，会对系统的正常运行造成灾难性地影响。因此，我们需要限制这些危险指令只能内核态运行。这些只能由操作系统内核态执行的指令也被叫做 <strong>特权指令</strong> 。</li>
<li>如果计算机系统中只有一个内核态，那么所有程序或进程都必须共享系统资源，例如内存、CPU、硬盘等，这将导致系统资源的竞争和冲突，从而影响系统性能和效率。并且，这样也会让系统的安全性降低，毕竟所有程序或进程都具有相同的特权级别和访问权限。</li>
</ul>
<p>因此，同时具有用户态和内核态主要是为了保证计算机系统的安全性、稳定性和性能。</p>
<h4> 用户态和内核态是如何切换的？</h4>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/the-way-switch-between-user-mode-and-kernel-mode.drawio.png" alt="用户态切换到内核态的 3 种方式" tabindex="0"><figcaption>用户态切换到内核态的 3 种方式</figcaption></figure>
<p>用户态切换到内核态的 3 种方式：</p>
<ol>
<li><strong>系统调用（Trap）</strong>：用户态进程 <strong>主动</strong> 要求切换到内核态的一种方式，主要是为了使用内核态才能做的事情比如读取磁盘资源。系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现。</li>
<li><strong>中断（Interrupt）</strong>：当外围设备完成用户请求的操作后，会向 CPU 发出相应的中断信号，这时 CPU 会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。</li>
<li><strong>异常（Exception）</strong>：当 CPU 在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。</li>
</ol>
<p>在系统的处理上，中断和异常类似，都是通过中断向量表来找到相应的处理程序进行处理。区别在于，中断来自处理器外部，不是由任何一条专门的指令造成，而异常是执行当前指令的结果。</p>
<h3> 系统调用</h3>
<h4> 什么是系统调用？</h4>
<p>我们运行的程序基本都是运行在用户态，如果我们调用操作系统提供的内核态级别的子功能咋办呢？那就需要系统调用了！</p>
<p>也就是说在我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/system-call.png" alt="系统调用" tabindex="0"><figcaption>系统调用</figcaption></figure>
<p>这些系统调用按功能大致可分为如下几类：</p>
<ul>
<li>设备管理：完成设备（输入输出设备和外部存储设备等）的请求或释放，以及设备启动等功能。</li>
<li>文件管理：完成文件的读、写、创建及删除等功能。</li>
<li>进程管理：进程的创建、撤销、阻塞、唤醒，进程间的通信等功能。</li>
<li>内存管理：完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。</li>
</ul>
<p>系统调用和普通库函数调用非常相似，只是系统调用由操作系统内核提供，运行于内核态，而普通的库函数调用由函数库或用户自己提供，运行于用户态。</p>
<p>总结：系统调用是应用程序与操作系统之间进行交互的一种方式，通过系统调用，应用程序可以访问操作系统底层资源例如文件、设备、网络等。</p>
<h4> 系统调用的过程了解吗？</h4>
<p>系统调用的过程可以简单分为以下几个步骤：</p>
<ol>
<li>用户态的程序发起系统调用，因为系统调用中涉及一些特权指令（只能由操作系统内核态执行的指令），用户态程序权限不足，因此会中断执行，也就是 Trap（Trap 是一种中断）。</li>
<li>发生中断后，当前 CPU 执行的程序会中断，跳转到中断处理程序。内核程序开始执行，也就是开始处理系统调用。</li>
<li>内核处理完成后，主动触发 Trap，这样会再次发生中断，切换回用户态工作。</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/system-call-procedure.png" alt="系统调用的过程" tabindex="0"><figcaption>系统调用的过程</figcaption></figure>
<h2> 进程和线程</h2>
<h3> 什么是进程和线程？</h3>
<ul>
<li><strong>进程（Process）</strong> 是指计算机中正在运行的一个程序实例。举例：你打开的微信就是一个进程。</li>
<li><strong>线程（Thread）</strong> 也被称为轻量级进程，更加轻量。多个线程可以在同一个进程中同时执行，并且共享进程的资源比如内存空间、文件句柄、网络连接等。举例：你打开的微信里就有一个线程专门用来拉取别人发你的最新的消息。</li>
</ul>
<h3> 进程和线程的区别是什么？</h3>
<p>下图是 Java 内存区域，我们从 JVM 的角度来说一下线程和进程之间的关系吧！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.8.png" alt="Java 运行时数据区域（JDK1.8 之后）" tabindex="0"><figcaption>Java 运行时数据区域（JDK1.8 之后）</figcaption></figure>
<p>从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的<strong>堆</strong>和<strong>方法区 (JDK1.8 之后的元空间)<strong>资源，但是每个线程有自己的</strong>程序计数器</strong>、<strong>虚拟机栈</strong> 和 <strong>本地方法栈</strong>。</p>
<p><strong>总结：</strong></p>
<ul>
<li>线程是进程划分成的更小的运行单位,一个进程在其执行的过程中可以产生多个线程。</li>
<li>线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。</li>
<li>线程执行开销小，但不利于资源的管理和保护；而进程正相反。</li>
</ul>
<h3> 有了进程为什么还需要线程?</h3>
<ul>
<li>进程切换是一个开销很大的操作，线程切换的成本较低。</li>
<li>线程更轻量，一个进程可以创建多个线程。</li>
<li>多个线程可以并发处理不同的任务，更有效地利用了多处理器和多核计算机。而进程只能在一个时间干一件事，如果在执行过程中遇到阻塞问题比如 IO 阻塞就会挂起直到结果返回。</li>
<li>同一进程内的线程共享内存和文件，因此它们之间相互通信无须调用内核。</li>
</ul>
<h3> 为什么要使用多线程?</h3>
<p>先从总体上来说：</p>
<ul>
<li><strong>从计算机底层来说：</strong> 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。</li>
<li><strong>从当代互联网发展趋势来说：</strong> 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。</li>
</ul>
<p>再深入到计算机底层来探讨：</p>
<ul>
<li><strong>单核时代</strong>：在单核时代多线程主要是为了提高单进程利用 CPU 和 IO 系统的效率。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。</li>
<li><strong>多核时代</strong>: 多核时代多线程主要是为了提高进程利用多核 CPU 的能力。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间/CPU 核心数）。</li>
</ul>
<h3> 线程间的同步的方式有哪些？</h3>
<p>线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。</p>
<p>下面是几种常见的线程同步的方式：</p>
<ol>
<li><strong>互斥锁(Mutex)</strong>：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 <code>synchronized</code> 关键词和各种 <code>Lock</code> 都是这种机制。</li>
<li><strong>读写锁（Read-Write Lock）</strong>：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。</li>
<li><strong>信号量(Semaphore)</strong>：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</li>
<li><strong>屏障（Barrier）</strong>：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 <code>CyclicBarrier</code> 是这种机制。</li>
<li><strong>事件(Event)</strong> :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。</li>
</ol>
<h3> PCB 是什么？包含哪些信息？</h3>
<p><strong>PCB（Process Control Block）</strong> 即进程控制块，是操作系统中用来管理和跟踪进程的数据结构，每个进程都对应着一个独立的 PCB。你可以将 PCB 视为进程的大脑。</p>
<p>当操作系统创建一个新进程时，会为该进程分配一个唯一的进程 ID，并且为该进程创建一个对应的进程控制块。当进程执行时，PCB 中的信息会不断变化，操作系统会根据这些信息来管理和调度进程。</p>
<p>PCB 主要包含下面几部分的内容：</p>
<ul>
<li>进程的描述信息，包括进程的名称、标识符等等；</li>
<li>进程的调度信息，包括进程阻塞原因、进程状态（就绪、运行、阻塞等）、进程优先级（标识进程的重要程度）等等；</li>
<li>进程对资源的需求情况，包括 CPU 时间、内存空间、I/O 设备等等。</li>
<li>进程打开的文件信息，包括文件描述符、文件类型、打开模式等等。</li>
<li>处理机的状态信息（由处理机的各种寄存器中的内容组成的），包括通用寄存器、指令计数器、程序状态字 PSW、用户栈指针。</li>
<li>......</li>
</ul>
<h3> 进程有哪几种状态?</h3>
<p>我们一般把进程大致分为 5 种状态，这一点和线程很像！</p>
<ul>
<li><strong>创建状态(new)</strong>：进程正在被创建，尚未到就绪状态。</li>
<li><strong>就绪状态(ready)</strong>：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。</li>
<li><strong>运行状态(running)</strong>：进程正在处理器上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)。</li>
<li><strong>阻塞状态(waiting)</strong>：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待 IO 操作完成。即使处理器空闲，该进程也不能运行。</li>
<li><strong>结束状态(terminated)</strong>：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/state-transition-of-process.png" alt="进程状态图转换图" tabindex="0"><figcaption>进程状态图转换图</figcaption></figure>
<h3> 进程间的通信方式有哪些？</h3>
<blockquote>
<p>下面这部分总结参考了:<a href="https://www.jianshu.com/p/c1015f5ffa74" target="_blank" rel="noopener noreferrer">《进程间通信 IPC (InterProcess Communication)》</a> 这篇文章，推荐阅读，总结的非常不错。</p>
</blockquote>
<ol>
<li><strong>管道/匿名管道(Pipes)</strong>：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。</li>
<li><strong>有名管道(Named Pipes)</strong> : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 <strong>先进先出(First In First Out)</strong> 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。</li>
<li><strong>信号(Signal)</strong>：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</li>
<li><strong>消息队列(Message Queuing)</strong>：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。<strong>消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。</strong></li>
<li><strong>信号量(Semaphores)</strong>：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li>
<li><strong>共享内存(Shared memory)</strong>：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。</li>
<li><strong>套接字(Sockets)</strong> : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</li>
</ol>
<h3> 进程的调度算法有哪些?</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/scheduling-algorithms-of-process.png" alt="常见进程调度算法" tabindex="0"><figcaption>常见进程调度算法</figcaption></figure>
<p>这是一个很重要的知识点！为了确定首先执行哪个进程以及最后执行哪个进程以实现最大 CPU 利用率，计算机科学家已经定义了一些算法，它们是：</p>
<ul>
<li><strong>先到先服务调度算法(FCFS，First Come, First Served)</strong> : 从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>
<li><strong>短作业优先的调度算法(SJF，Shortest Job First)</strong> : 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>
<li><strong>时间片轮转调度算法（RR，Round-Robin）</strong> : 时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li>
<li><strong>多级反馈队列调度算法（MFQ，Multi-level Feedback Queue）</strong>：前面介绍的几种进程调度的算法都有一定的局限性。如<strong>短进程优先的调度算法，仅照顾了短进程而忽略了长进程</strong> 。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前<strong>被公认的一种较好的进程调度算法</strong>，UNIX 操作系统采取的便是这种调度算法。</li>
<li><strong>优先级调度算法（Priority）</strong>：为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li>
</ul>
<h3> 什么是僵尸进程和孤儿进程？</h3>
<p>在 Unix/Linux 系统中，子进程通常是通过 fork()系统调用创建的，该调用会创建一个新的进程，该进程是原有进程的一个副本。子进程和父进程的运行是相互独立的，它们各自拥有自己的 PCB，即使父进程结束了，子进程仍然可以继续运行。</p>
<p>当一个进程调用 exit()系统调用结束自己的生命时，内核会释放该进程的所有资源，包括打开的文件、占用的内存等，但是该进程对应的 PCB 依然存在于系统中。这些信息只有在父进程调用 wait()或 waitpid()系统调用时才会被释放，以便让父进程得到子进程的状态信息。</p>
<p>这样的设计可以让父进程在子进程结束时得到子进程的状态信息，并且可以防止出现“僵尸进程”（即子进程结束后 PCB 仍然存在但父进程无法得到状态信息的情况）。</p>
<ul>
<li><strong>僵尸进程</strong>：子进程已经终止，但是其父进程仍在运行，且父进程没有调用 wait()或 waitpid()等系统调用来获取子进程的状态信息，释放子进程占用的资源，导致子进程的 PCB 依然存在于系统中，但无法被进一步使用。这种情况下，子进程被称为“僵尸进程”。避免僵尸进程的产生，父进程需要及时调用 wait()或 waitpid()系统调用来回收子进程。</li>
<li><strong>孤儿进程</strong>：一个进程的父进程已经终止或者不存在，但是该进程仍在运行。这种情况下，该进程就是孤儿进程。孤儿进程通常是由于父进程意外终止或未及时调用 wait()或 waitpid()等系统调用来回收子进程导致的。为了避免孤儿进程占用系统资源，操作系统会将孤儿进程的父进程设置为 init 进程（进程号为 1），由 init 进程来回收孤儿进程的资源。</li>
</ul>
<h3> 如何查看是否有僵尸进程？</h3>
<p>Linux 下可以使用 Top 命令查找，<code>zombie</code> 值表示僵尸进程的数量，为 0 则代表没有僵尸进程。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/zombie-process-view.jpg" alt="僵尸进程查看" tabindex="0"><figcaption>僵尸进程查看</figcaption></figure>
<p>下面这个命令可以定位僵尸进程以及该僵尸进程的父进程：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 死锁</h2>
<h3> 什么是死锁？</h3>
<p>死锁（Deadlock）描述的是这样一种情况：多个进程/线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于进程/线程被无限期地阻塞，因此程序不可能正常终止。</p>
<h3> 能列举一个操作系统发生死锁的例子吗？</h3>
<p>假设有两个进程 A 和 B，以及两个资源 X 和 Y，它们的分配情况如下：</p>
<table>
<thead>
<tr>
<th>进程</th>
<th>占用资源</th>
<th>需求资源</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>X</td>
<td>Y</td>
</tr>
<tr>
<td>B</td>
<td>Y</td>
<td>X</td>
</tr>
</tbody>
</table>
<p>此时，进程 A 占用资源 X 并且请求资源 Y，而进程 B 已经占用了资源 Y 并请求资源 X。两个进程都在等待对方释放资源，无法继续执行，陷入了死锁状态。</p>
<h3> 产生死锁的四个必要条件是什么?</h3>
<ol>
<li><strong>互斥</strong>：资源必须处于非共享模式，即一次只有一个进程可以使用。如果另一进程申请该资源，那么必须等待直到该资源被释放为止。</li>
<li><strong>占有并等待</strong>：一个进程至少应该占有一个资源，并等待另一资源，而该资源被其他进程所占有。</li>
<li><strong>非抢占</strong>：资源不能被抢占。只能在持有资源的进程完成任务后，该资源才会被释放。</li>
<li><strong>循环等待</strong>：有一组等待进程 <code>{P0, P1,..., Pn}</code>， <code>P0</code> 等待的资源被 <code>P1</code> 占有，<code>P1</code> 等待的资源被 <code>P2</code> 占有，......，<code>Pn-1</code> 等待的资源被 <code>Pn</code> 占有，<code>Pn</code> 等待的资源被 <code>P0</code> 占有。</li>
</ol>
<p><strong>注意 ⚠️</strong>：这四个条件是产生死锁的 <strong>必要条件</strong> ，也就是说只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</p>
<p>下面是百度百科对必要条件的解释：</p>
<blockquote>
<p>如果没有事物情况 A，则必然没有事物情况 B，也就是说如果有事物情况 B 则一定有事物情况 A，那么 A 就是 B 的必要条件。从逻辑学上看，B 能推导出 A，A 就是 B 的必要条件，等价于 B 是 A 的充分条件。</p>
</blockquote>
<h3> 能写一个模拟产生死锁的代码吗？</h3>
<p>下面通过一个实际的例子来模拟下图展示的线程死锁：</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-4/2019-4死锁1.png" alt="线程死锁示意图 " tabindex="0"><figcaption>线程死锁示意图 </figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程 A 通过 <code>synchronized (resource1)</code> 获得 <code>resource1</code> 的监视器锁，然后通过<code>Thread.sleep(1000);</code>让线程 A 休眠 1s 为的是让线程 B 得到执行然后获取到 <code>resource2</code> 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。</p>
<h3> 解决死锁的方法</h3>
<p>解决死锁的方法可以从多个角度去分析，一般的情况下，有<strong>预防，避免，检测和解除四种</strong>。</p>
<ul>
<li>
<p><strong>预防</strong> 是采用某种策略，<strong>限制并发进程对资源的请求</strong>，从而使得死锁的必要条件在系统执行的任何时间上都不满足。</p>
</li>
<li>
<p><strong>避免</strong>则是系统在分配资源时，根据资源的使用情况<strong>提前做出预测</strong>，从而<strong>避免死锁的发生</strong></p>
</li>
<li>
<p><strong>检测</strong>是指系统设有<strong>专门的机构</strong>，当死锁发生时，该机构能够检测死锁的发生，并精确地确定与死锁有关的进程和资源。</p>
</li>
<li>
<p><strong>解除</strong> 是与检测相配套的一种措施，用于<strong>将进程从死锁状态下解脱出来</strong>。</p>
</li>
</ul>
<h4> 死锁的预防</h4>
<p>死锁四大必要条件上面都已经列出来了，很显然，只要破坏四个必要条件中的任何一个就能够预防死锁的发生。</p>
<p>破坏第一个条件 <strong>互斥条件</strong>：使得资源是可以同时访问的，这是种简单的方法，磁盘就可以用这种方法管理，但是我们要知道，有很多资源 <strong>往往是不能同时访问的</strong> ，所以这种做法在大多数的场合是行不通的。</p>
<p>破坏第三个条件 <strong>非抢占</strong>：也就是说可以采用 <strong>剥夺式调度算法</strong>，但剥夺式调度方法目前一般仅适用于 <strong>主存资源</strong> 和 <strong>处理器资源</strong> 的分配，并不适用于所有的资源，会导致 <strong>资源利用率下降</strong>。</p>
<p>所以一般比较实用的 <strong>预防死锁的方法</strong>，是通过考虑破坏第二个条件和第四个条件。</p>
<p><strong>1、静态分配策略</strong></p>
<p>静态分配策略可以破坏死锁产生的第二个条件（占有并等待）。所谓静态分配策略，就是指一个进程必须在执行前就申请到它所需要的全部资源，并且知道它所要的资源都得到满足之后才开始执行。进程要么占有所有的资源然后开始执行，要么不占有资源，不会出现占有一些资源等待一些资源的情况。</p>
<p>静态分配策略逻辑简单，实现也很容易，但这种策略 <strong>严重地降低了资源利用率</strong>，因为在每个进程所占有的资源中，有些资源是在比较靠后的执行时间里采用的，甚至有些资源是在额外的情况下才使用的，这样就可能造成一个进程占有了一些 <strong>几乎不用的资源而使其他需要该资源的进程产生等待</strong> 的情况。</p>
<p><strong>2、层次分配策略</strong></p>
<p>层次分配策略破坏了产生死锁的第四个条件(循环等待)。在层次分配策略下，所有的资源被分成了多个层次，一个进程得到某一次的一个资源后，它只能再申请较高一层的资源；当一个进程要释放某层的一个资源时，必须先释放所占用的较高层的资源，按这种策略，是不可能出现循环等待链的，因为那样的话，就出现了已经申请了较高层的资源，反而去申请了较低层的资源，不符合层次分配策略，证明略。</p>
<h4> 死锁的避免</h4>
<p>上面提到的 <strong>破坏</strong> 死锁产生的四个必要条件之一就可以成功 <strong>预防系统发生死锁</strong> ，但是会导致 <strong>低效的进程运行</strong> 和 <strong>资源使用率</strong> 。而死锁的避免相反，它的角度是允许系统中<strong>同时存在四个必要条件</strong> ，只要掌握并发进程中与每个进程有关的资源动态申请情况，做出 <strong>明智和合理的选择</strong> ，仍然可以避免死锁，因为四大条件仅仅是产生死锁的必要条件。</p>
<p>我们将系统的状态分为 <strong>安全状态</strong> 和 <strong>不安全状态</strong> ，每当在未申请者分配资源前先测试系统状态，若把系统资源分配给申请者会产生死锁，则拒绝分配，否则接受申请，并为它分配资源。</p>
<blockquote>
<p>如果操作系统能够保证所有的进程在有限的时间内得到需要的全部资源，则称系统处于安全状态，否则说系统是不安全的。很显然，系统处于安全状态则不会发生死锁，系统若处于不安全状态则可能发生死锁。</p>
</blockquote>
<p>那么如何保证系统保持在安全状态呢？通过算法，其中最具有代表性的 <strong>避免死锁算法</strong> 就是 Dijkstra 的银行家算法，银行家算法用一句话表达就是：当一个进程申请使用资源的时候，<strong>银行家算法</strong> 通过先 <strong>试探</strong> 分配给该进程资源，然后通过 <strong>安全性算法</strong> 判断分配后系统是否处于安全状态，若不安全则试探分配作废，让该进程继续等待，若能够进入到安全的状态，则就 <strong>真的分配资源给该进程</strong>。</p>
<p>银行家算法详情可见：<a href="https://blog.csdn.net/qq_33414271/article/details/80245715" target="_blank" rel="noopener noreferrer">《一句话+一张图说清楚——银行家算法》</a> 。</p>
<p>操作系统教程书中讲述的银行家算法也比较清晰，可以一看.</p>
<p>死锁的避免(银行家算法)改善了 <strong>资源使用率低的问题</strong> ，但是它要不断地检测每个进程对各类资源的占用和申请情况，以及做 <strong>安全性检查</strong> ，需要花费较多的时间。</p>
<h4> 死锁的检测</h4>
<p>对资源的分配加以限制可以 <strong>预防和避免</strong> 死锁的发生，但是都不利于各进程对系统资源的<strong>充分共享</strong>。解决死锁问题的另一条途径是 <strong>死锁检测和解除</strong> (这里突然联想到了乐观锁和悲观锁，感觉死锁的检测和解除就像是 <strong>乐观锁</strong> ，分配资源时不去提前管会不会发生死锁了，等到真的死锁出现了再来解决嘛，而 <strong>死锁的预防和避免</strong> 更像是悲观锁，总是觉得死锁会出现，所以在分配资源的时候就很谨慎)。</p>
<p>这种方法对资源的分配不加以任何限制，也不采取死锁避免措施，但系统 <strong>定时地运行一个 “死锁检测”</strong> 的程序，判断系统内是否出现死锁，如果检测到系统发生了死锁，再采取措施去解除它。</p>
<h5> 进程-资源分配图</h5>
<p>操作系统中的每一刻时刻的<strong>系统状态</strong>都可以用<strong>进程-资源分配图</strong>来表示，进程-资源分配图是描述进程和资源申请及分配关系的一种有向图，可用于<strong>检测系统是否处于死锁状态</strong>。</p>
<p>用一个方框表示每一个资源类，方框中的黑点表示该资源类中的各个资源，每个键进程用一个圆圈表示，用 <strong>有向边</strong> 来表示<strong>进程申请资源和资源被分配的情况</strong>。</p>
<p>图中 2-21 是<strong>进程-资源分配图</strong>的一个例子，其中共有三个资源类，每个进程的资源占有和申请情况已清楚地表示在图中。在这个例子中，由于存在 <strong>占有和等待资源的环路</strong> ，导致一组进程永远处于等待资源的状态，发生了 <strong>死锁</strong>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/process-resource-allocation-diagram.jpg" alt="进程-资源分配图" tabindex="0"><figcaption>进程-资源分配图</figcaption></figure>
<p>进程-资源分配图中存在环路并不一定是发生了死锁。因为循环等待资源仅仅是死锁发生的必要条件，而不是充分条件。图 2-22 便是一个有环路而无死锁的例子。虽然进程 P1 和进程 P3 分别占用了一个资源 R1 和一个资源 R2，并且因为等待另一个资源 R2 和另一个资源 R1 形成了环路，但进程 P2 和进程 P4 分别占有了一个资源 R1 和一个资源 R2，它们申请的资源得到了满足，在有限的时间里会归还资源，于是进程 P1 或 P3 都能获得另一个所需的资源，环路自动解除，系统也就不存在死锁状态了。</p>
<h5> 死锁检测步骤</h5>
<p>知道了死锁检测的原理，我们可以利用下列步骤编写一个 <strong>死锁检测</strong> 程序，检测系统是否产生了死锁。</p>
<ol>
<li>如果进程-资源分配图中无环路，则此时系统没有发生死锁</li>
<li>如果进程-资源分配图中有环路，且每个资源类仅有一个资源，则系统中已经发生了死锁。</li>
<li>如果进程-资源分配图中有环路，且涉及到的资源类有多个资源，此时系统未必会发生死锁。如果能在进程-资源分配图中找出一个 <strong>既不阻塞又非独立的进程</strong> ，该进程能够在有限的时间内归还占有的资源，也就是把边给消除掉了，重复此过程，直到能在有限的时间内 <strong>消除所有的边</strong> ，则不会发生死锁，否则会发生死锁。(消除边的过程类似于 <strong>拓扑排序</strong>)</li>
</ol>
<h4> 死锁的解除</h4>
<p>当死锁检测程序检测到存在死锁发生时，应设法让其解除，让系统从死锁状态中恢复过来，常用的解除死锁的方法有以下四种：</p>
<ol>
<li><strong>立即结束所有进程的执行，重新启动操作系统</strong>：这种方法简单，但以前所在的工作全部作废，损失很大。</li>
<li><strong>撤销涉及死锁的所有进程，解除死锁后继续运行</strong>：这种方法能彻底打破<strong>死锁的循环等待</strong>条件，但将付出很大代价，例如有些进程可能已经计算了很长时间，由于被撤销而使产生的部分结果也被消除了，再重新执行时还要再次进行计算。</li>
<li><strong>逐个撤销涉及死锁的进程，回收其资源直至死锁解除。</strong></li>
<li><strong>抢占资源</strong>：从涉及死锁的一个或几个进程中抢占资源，把夺得的资源再分配给涉及死锁的进程直至死锁解除。</li>
</ol>
<h2> 参考</h2>
<ul>
<li>《计算机操作系统—汤小丹》第四版</li>
<li>《深入理解计算机系统》</li>
<li>《重学操作系统》</li>
<li>操作系统为什么要分用户态和内核态：https://blog.csdn.net/chen134225/article/details/81783980</li>
<li>从根上理解用户态与内核态：https://juejin.cn/post/6923863670132850701</li>
<li>什么是僵尸进程与孤儿进程：https://blog.csdn.net/a745233700/article/details/120715371</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/2020-8/image-20200807161118901.png" type="image/png"/>
    </item>
    <item>
      <title>操作系统常见面试题总结(下)</title>
      <link>https://javaguide.cn/cs-basics/operating-system/operating-system-basic-questions-02.html</link>
      <guid>https://javaguide.cn/cs-basics/operating-system/operating-system-basic-questions-02.html</guid>
      <source url="https://javaguide.cn/rss.xml">操作系统常见面试题总结(下)</source>
      <description>内存管理 内存管理主要做了什么？ 内存管理主要做的事情 操作系统的内存管理非常重要，主要负责下面这些事情： 内存的分配与回收：对进程所需的内存进行分配和释放，malloc 函数：申请内存，free 函数：释放内存。 地址转换：将程序中的虚拟地址转换成内存中的物理地址。 内存扩充：当系统没有足够的内存时，利用虚拟内存技术或自动覆盖技术，从逻辑上扩充内存。 内存映射：将一个文件直接映射到进程的进程空间中，这样可以通过内存指针用读写内存的办法直接存取文件内容，速度更快。 内存优化：通过调整内存分配策略和回收算法来优化内存使用效率。 内存安全：保证进程之间使用内存互不干扰，避免一些恶意程序通过修改内存来破坏系统的安全性。 ......</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 内存管理</h2>
<h3> 内存管理主要做了什么？</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/memory-management-roles.png" alt="内存管理主要做的事情" tabindex="0"><figcaption>内存管理主要做的事情</figcaption></figure>
<p>操作系统的内存管理非常重要，主要负责下面这些事情：</p>
<ul>
<li><strong>内存的分配与回收</strong>：对进程所需的内存进行分配和释放，malloc 函数：申请内存，free 函数：释放内存。</li>
<li><strong>地址转换</strong>：将程序中的虚拟地址转换成内存中的物理地址。</li>
<li><strong>内存扩充</strong>：当系统没有足够的内存时，利用虚拟内存技术或自动覆盖技术，从逻辑上扩充内存。</li>
<li><strong>内存映射</strong>：将一个文件直接映射到进程的进程空间中，这样可以通过内存指针用读写内存的办法直接存取文件内容，速度更快。</li>
<li><strong>内存优化</strong>：通过调整内存分配策略和回收算法来优化内存使用效率。</li>
<li><strong>内存安全</strong>：保证进程之间使用内存互不干扰，避免一些恶意程序通过修改内存来破坏系统的安全性。</li>
<li>......</li>
</ul>
<h3> 什么是内存碎片？</h3>
<p>内存碎片是由内存的申请和释放产生的，通常分为下面两种：</p>
<ul>
<li><strong>内部内存碎片(Internal Memory Fragmentation，简称为内存碎片)</strong>：已经分配给进程使用但未被使用的内存。导致内部内存碎片的主要原因是，当采用固定比例比如 2 的幂次方进行内存分配时，进程所分配的内存可能会比其实际所需要的大。举个例子，一个进程只需要 65 字节的内存，但为其分配了 128（2^7） 大小的内存，那 63 字节的内存就成为了内部内存碎片。</li>
<li><strong>外部内存碎片(External Memory Fragmentation，简称为外部碎片)</strong>：由于未分配的连续内存区域太小，以至于不能满足任意进程所需要的内存分配请求，这些小片段且不连续的内存空间被称为外部碎片。也就是说，外部内存碎片指的是那些并未分配给进程但又不能使用的内存。我们后面介绍的分段机制就会导致外部内存碎片。</li>
</ul>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/internal-and-external-fragmentation.png" alt="内存碎片" tabindex="0"><figcaption>内存碎片</figcaption></figure>
<p>内存碎片会导致内存利用率下降，如何减少内存碎片是内存管理要非常重视的一件事情。</p>
<h3> 常见的内存管理方式有哪些？</h3>
<p>内存管理方式可以简单分为下面两种：</p>
<ul>
<li><strong>连续内存管理</strong>：为一个用户程序分配一个连续的内存空间，内存利用率一般不高。</li>
<li><strong>非连续内存管理</strong>：允许一个程序使用的内存分布在离散或者说不相邻的内存中，相对更加灵活一些。</li>
</ul>
<h4> 连续内存管理</h4>
<p><strong>块式管理</strong> 是早期计算机操作系统的一种连续内存管理方式，存在严重的内存碎片问题。块式管理会将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为内部内存碎片。除了内部内存碎片之外，由于两个内存块之间可能还会有外部内存碎片，这些不连续的外部内存碎片由于太小了无法再进行分配。</p>
<p>在 Linux 系统中，连续内存管理采用了 <strong>伙伴系统（Buddy System）算法</strong> 来实现，这是一种经典的连续内存分配算法，可以有效解决外部内存碎片的问题。伙伴系统的主要思想是将内存按 2 的幂次划分（每一块内存大小都是 2 的幂次比如 2^6=64 KB），并将相邻的内存块组合成一对伙伴（注意：<strong>必须是相邻的才是伙伴</strong>）。</p>
<p>当进行内存分配时，伙伴系统会尝试找到大小最合适的内存块。如果找到的内存块过大，就将其一分为二，分成两个大小相等的伙伴块。如果还是大的话，就继续切分，直到到达合适的大小为止。</p>
<p>假设两块相邻的内存块都被释放，系统会将这两个内存块合并，进而形成一个更大的内存块，以便后续的内存分配。这样就可以减少内存碎片的问题，提高内存利用率。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux-buddy-system.png" alt="伙伴系统（Buddy System）内存管理" tabindex="0"><figcaption>伙伴系统（Buddy System）内存管理</figcaption></figure>
<p>虽然解决了外部内存碎片的问题，但伙伴系统仍然存在内存利用率不高的问题（内部内存碎片）。这主要是因为伙伴系统只能分配大小为 2^n 的内存块，因此当需要分配的内存大小不是 2^n 的整数倍时，会浪费一定的内存空间。举个例子：如果要分配 65 大小的内存快，依然需要分配 2^7=128 大小的内存块。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/buddy-system-memory-waste.png" alt="伙伴系统内存浪费问题" tabindex="0"><figcaption>伙伴系统内存浪费问题</figcaption></figure>
<p>对于内部内存碎片的问题，Linux 采用 <strong>SLAB</strong> 进行解决。由于这部分内容不是本篇文章的重点，这里就不详细介绍了。</p>
<h4> 非连续内存管理</h4>
<p>非连续内存管理存在下面 3 种方式：</p>
<ul>
<li><strong>段式管理</strong>：以段(—段连续的物理内存)的形式管理/分配物理内存。应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。</li>
<li><strong>页式管理</strong>：把物理内存分为连续等长的物理页，应用程序的虚拟地址空间划也被分为连续等长的虚拟页，现代操作系统广泛使用的一种内存管理方式。</li>
<li><strong>段页式管理机制</strong>：结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页。</li>
</ul>
<h3> 虚拟内存</h3>
<h4> 什么是虚拟内存?有什么用？</h4>
<p><strong>虚拟内存(Virtual Memory)</strong> 是计算机系统内存管理非常重要的一个技术，本质上来说它只是逻辑存在的，是一个假想出来的内存空间，主要作用是作为进程访问主存（物理内存）的桥梁并简化内存管理。</p>
<figure><img src="https://oss.javaguide.cn/xingqiu/virtual-memory.png" alt="虚拟内存作为进程访问主存的桥梁" tabindex="0"><figcaption>虚拟内存作为进程访问主存的桥梁</figcaption></figure>
<p>总结来说，虚拟内存主要提供了下面这些能力：</p>
<ul>
<li><strong>隔离进程</strong>：物理内存通过虚拟地址空间访问，虚拟地址空间与进程一一对应。每个进程都认为自己拥有了整个物理内存，进程之间彼此隔离，一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。</li>
<li><strong>提升物理内存利用率</strong>：有了虚拟地址空间后，操作系统只需要将进程当前正在使用的部分数据或指令加载入物理内存。</li>
<li><strong>简化内存管理</strong>：进程都有一个一致且私有的虚拟地址空间，程序员不用和真正的物理内存打交道，而是借助虚拟地址空间访问物理内存，从而简化了内存管理。</li>
<li><strong>多个进程共享物理内存</strong>：进程在运行过程中，会加载许多操作系统的动态库。这些库对于每个进程而言都是公用的，它们在内存中实际只会加载一份，这部分称为共享内存。</li>
<li><strong>提高内存使用安全性</strong>：控制进程对物理内存的访问，隔离不同进程的访问权限，提高系统的安全性。</li>
<li><strong>提供更大的可使用内存空间</strong>：可以让程序拥有超过系统物理内存大小的可用内存空间。这是因为当物理内存不够用时，可以利用磁盘充当，将物理内存页（通常大小为 4 KB）保存到磁盘文件（会影响读写速度），数据或代码页会根据需要在物理内存与磁盘之间移动。</li>
</ul>
<h4> 没有虚拟内存有什么问题？</h4>
<p>如果没有虚拟内存的话，程序直接访问和操作的都是物理内存，看似少了一层中介，但多了很多问题。</p>
<p><strong>具体有什么问题呢？</strong> 这里举几个例子说明(参考虚拟内存提供的能力回答这个问题)：</p>
<ol>
<li>用户程序可以访问任意物理内存，可能会不小心操作到系统运行必需的内存，进而造成操作系统崩溃，严重影响系统的安全。</li>
<li>同时运行多个程序容易崩溃。比如你想同时运行一个微信和一个 QQ 音乐，微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就可能会造成微信这个程序会崩溃。</li>
<li>程序运行过程中使用的所有数据或指令都要载入物理内存，根据局部性原理，其中很大一部分可能都不会用到，白白占用了宝贵的物理内存资源。</li>
<li>......</li>
</ol>
<h4> 什么是虚拟地址和物理地址？</h4>
<p><strong>物理地址（Physical Address）</strong> 是真正的物理内存中地址，更具体点来说是内存地址寄存器中的地址。程序中访问的内存地址不是物理地址，而是 <strong>虚拟地址（Virtual Address）</strong> 。</p>
<p>也就是说，我们编程开发的时候实际就是在和虚拟地址打交道。比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的虚拟地址。</p>
<p>操作系统一般通过 CPU 芯片中的一个重要组件 <strong>MMU(Memory Management Unit，内存管理单元)</strong> 将虚拟地址转换为物理地址，这个过程被称为 <strong>地址翻译/地址转换（Address Translation）</strong> 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/physical-virtual-address-translation.png" alt="地址翻译过程" tabindex="0"><figcaption>地址翻译过程</figcaption></figure>
<p>通过 MMU 将虚拟地址转换为物理地址后，再通过总线传到物理内存设备，进而完成相应的物理内存读写请求。</p>
<p>MMU 将虚拟地址翻译为物理地址的主要机制有两种: <strong>分段机制</strong> 和 <strong>分页机制</strong> 。</p>
<h4> 什么是虚拟地址空间和物理地址空间？</h4>
<ul>
<li>虚拟地址空间是虚拟地址的集合，是虚拟内存的范围。每一个进程都有一个一致且私有的虚拟地址空间。</li>
<li>物理地址空间是物理地址的集合，是物理内存的范围。</li>
</ul>
<h4> 虚拟地址与物理内存地址是如何映射的？</h4>
<p>MMU 将虚拟地址翻译为物理地址的主要机制有 3 种:</p>
<ol>
<li>分段机制</li>
<li>分页机制</li>
<li>段页机制</li>
</ol>
<p>其中，现代操作系统广泛采用分页机制，需要重点关注！</p>
<h3> 分段机制</h3>
<p><strong>分段机制（Segmentation）</strong> 以段(—段 <strong>连续</strong> 的物理内存)的形式管理/分配物理内存。应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。</p>
<h4> 段表有什么用？地址翻译过程是怎样的？</h4>
<p>分段管理通过 <strong>段表（Segment Table）</strong> 映射虚拟地址和物理地址。</p>
<p>分段机制下的虚拟地址由两部分组成：</p>
<ul>
<li><strong>段号</strong>：标识着该虚拟地址属于整个虚拟地址空间中的哪一个段。</li>
<li><strong>段内偏移量</strong>：相对于该段起始地址的偏移量。</li>
</ul>
<p>具体的地址翻译过程如下：</p>
<ol>
<li>MMU 首先解析得到虚拟地址中的段号；</li>
<li>通过段号去该应用程序的段表中取出对应的段信息（找到对应的段表项）；</li>
<li>从段信息中取出该段的起始地址（物理地址）加上虚拟地址中的段内偏移量得到最终的物理地址。</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/segment-virtual-address-composition.png" alt="分段机制下的地址翻译过程" tabindex="0"><figcaption>分段机制下的地址翻译过程</figcaption></figure>
<p>段表中还存有诸如段长(可用于检查虚拟地址是否超出合法范围)、段类型（该段的类型，例如代码段、数据段等）等信息。</p>
<p><strong>通过段号一定要找到对应的段表项吗？得到最终的物理地址后对应的物理内存一定存在吗？</strong></p>
<p>不一定。段表项可能并不存在：</p>
<ul>
<li><strong>段表项被删除</strong>：软件错误、软件恶意行为等情况可能会导致段表项被删除。</li>
<li><strong>段表项还未创建</strong>：如果系统内存不足或者无法分配到连续的物理内存块就会导致段表项无法被创建。</li>
</ul>
<h4> 分段机制为什么会导致内存外部碎片？</h4>
<p>分段机制容易出现外部内存碎片，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。从而造成物理内存资源利用率的降低。</p>
<p>举个例子：假设可用物理内存为 5G 的系统使用分段机制分配内存。现在有 4 个进程，每个进程的内存占用情况如下：</p>
<ul>
<li>进程 1：0~1G（第 1 段）</li>
<li>进程 2：1~3G（第 2 段）</li>
<li>进程 3：3~4.5G（第 3 段）</li>
<li>进程 4：4.5~5G（第 4 段）</li>
</ul>
<p>此时，我们关闭了进程 1 和进程 4，则第 1 段和第 4 段的内存会被释放，空闲物理内存还有 1.5G。由于这 1.5G 物理内存并不是连续的，导致没办法将空闲的物理内存分配给一个需要 1.5G 物理内存的进程。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/segment-external-memory-fragmentation.png" alt="分段机制导致外部内存碎片" tabindex="0"><figcaption>分段机制导致外部内存碎片</figcaption></figure>
<h3> 分页机制</h3>
<p><strong>分页机制（Paging）</strong> 把主存（物理内存）分为连续等长的物理页，应用程序的虚拟地址空间划也被分为连续等长的虚拟页。现代操作系统广泛采用分页机制。</p>
<p><strong>注意：这里的页是连续等长的，不同于分段机制下不同长度的段。</strong></p>
<p>在分页机制下，应用程序虚拟地址空间中的任意虚拟页可以被映射到物理内存中的任意物理页上，因此可以实现物理内存资源的离散分配。分页机制按照固定页大小分配物理内存，使得物理内存资源易于管理，可有效避免分段机制中外部内存碎片的问题。</p>
<h4> 页表有什么用？地址翻译过程是怎样的？</h4>
<p>分页管理通过 <strong>页表（Page Table）</strong> 映射虚拟地址和物理地址。我这里画了一张基于单级页表进行地址翻译的示意图。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/page-table.png" alt="单级页表" tabindex="0"><figcaption>单级页表</figcaption></figure>
<p>在分页机制下，每个应用程序都会有一个对应的页表。</p>
<p>分页机制下的虚拟地址由两部分组成：</p>
<ul>
<li><strong>页号</strong>：通过虚拟页号可以从页表中取出对应的物理页号；</li>
<li><strong>页内偏移量</strong>：物理页起始地址+页内偏移量=物理内存地址。</li>
</ul>
<p>具体的地址翻译过程如下：</p>
<ol>
<li>MMU 首先解析得到虚拟地址中的虚拟页号；</li>
<li>通过虚拟页号去该应用程序的页表中取出对应的物理页号（找到对应的页表项）；</li>
<li>用该物理页号对应的物理页起始地址（物理地址）加上虚拟地址中的页内偏移量得到最终的物理地址。</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/paging-virtual-address-composition.png" alt="分页机制下的地址翻译过程" tabindex="0"><figcaption>分页机制下的地址翻译过程</figcaption></figure>
<p>页表中还存有诸如访问标志（标识该页面有没有被访问过）、脏数据标识位等信息。</p>
<p><strong>通过虚拟页号一定要找到对应的物理页号吗？找到了物理页号得到最终的物理地址后对应的物理页一定存在吗？</strong></p>
<p>不一定！可能会存在 <strong>页缺失</strong> 。也就是说，物理内存中没有对应的物理页或者物理内存中有对应的物理页但虚拟页还未和物理页建立映射（对应的页表项不存在）。关于页缺失的内容，后面会详细介绍到。</p>
<h4> 单级页表有什么问题？为什么需要多级页表？</h4>
<p>以 32 位的环境为例，虚拟地址空间范围共有 2^32（4G）。假设 一个页的大小是 2^12（4KB），那页表项共有 4G / 4K = 2^20 个。每个页表项为一个地址，占用 4 字节，2^20 * 2^2/1024*1024= 4MB。也就是说一个程序啥都不干，页表大小就得占用 4M。</p>
<p>系统运行的应用程序多起来的话，页表的开销还是非常大的。而且，绝大部分应用程序可能只能用到页表中的几项，其他的白白浪费了。</p>
<p>为了解决这个问题，操作系统引入了 <strong>多级页表</strong> ，多级页表对应多个页表，每个页表也前一个页表相关联。32 位系统一般为二级页表，64 位系统一般为四级页表。</p>
<p>这里以二级页表为例进行介绍：二级列表分为一级页表和二级页表。一级页表共有 1024 个页表项，一级页表又关联二级页表，二级页表同样共有 1024 个页表项。二级页表中的一级页表项是一对多的关系，二级页表按需加载（只会用到很少一部分二级页表），进而节省空间占用。</p>
<p>假设只需要 2 个二级页表，那两级页表的内存占用情况为: 4KB（一级页表占用） + 4KB * 2（二级页表占用） = 12 KB。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/multilevel-page-table.png" alt="多级页表" tabindex="0"><figcaption>多级页表</figcaption></figure>
<p>多级页表属于时间换空间的典型场景，利用增加页表查询的次数减少页表占用的空间。</p>
<h4> TLB 有什么用？使用 TLB 之后的地址翻译流程是怎样的？</h4>
<p>为了提高虚拟地址到物理地址的转换速度，操作系统在 <strong>页表方案</strong> 基础之上引入了 <strong>转址旁路缓存(Translation Lookasjde Buffer，TLB，也被称为快表)</strong> 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/physical-virtual-address-translation-mmu.png" alt="加入 TLB 之后的地址翻译" tabindex="0"><figcaption>加入 TLB 之后的地址翻译</figcaption></figure>
<p>在主流的 AArch64 和 x86-64 体系结构下，TLB 属于 (Memory Management Unit，内存管理单元) 内部的单元，本质上就是一块高速缓存（Cache），缓存了虚拟页号到物理页号的映射关系，你可以将其简单看作是存储着键（虚拟页号）值（物理页号）对的哈希表。</p>
<p>使用 TLB 之后的地址翻译流程是这样的：</p>
<ol>
<li>用虚拟地址中的虚拟页号作为 key 去 TLB 中查询；</li>
<li>如果能查到对应的物理页的话，就不用再查询页表了，这种情况称为 TLB 命中（TLB hit)。</li>
<li>如果不能查到对应的物理页的话，还是需要去查询主存中的页表，同时将页表中的该映射表项添加到 TLB 中，这种情况称为 TLB 未命中（TLB miss)。</li>
<li>当 TLB 填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/page-table-tlb.png" alt="使用 TLB 之后的地址翻译流程" tabindex="0"><figcaption>使用 TLB 之后的地址翻译流程</figcaption></figure>
<p>由于页表也在主存中，因此在没有 TLB 之前，每次读写内存数据时 CPU 要访问两次主存。有了 TLB 之后，对于存在于 TLB 中的页表数据只需要访问一次主存即可。</p>
<p>TLB 的设计思想非常简单，但命中率往往非常高，效果很好。这就是因为被频繁访问的页就是其中的很小一部分。</p>
<p>看完了之后你会发现快表和我们平时经常在开发系统中使用的缓存（比如 Redis）很像，的确是这样的，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。</p>
<h4> 换页机制有什么用？</h4>
<p>换页机制的思想是当物理内存不够用的时候，操作系统选择将一些物理页的内容放到磁盘上去，等要用到的时候再将它们读取到物理内存中。也就是说，换页机制利用磁盘这种较低廉的存储设备扩展的物理内存。</p>
<p>这也就解释了一个日常使用电脑常见的问题：为什么操作系统中所有进程运行所需的物理内存即使比真实的物理内存要大一些，这些进程也是可以正常运行的，只是运行速度会变慢。</p>
<p>这同样是一种时间换空间的策略，你用 CPU 的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的物理内存空间来支持程序的运行。</p>
<h4> 什么是页缺失？</h4>
<p>根据维基百科:</p>
<blockquote>
<p>页缺失（Page Fault，又名硬错误、硬中断、分页错误、寻页缺失、缺页中断、页故障等）指的是当软件试图访问已映射在虚拟地址空间中，但是目前并未被加载在物理内存中的一个分页时，由 MMU 所发出的中断。</p>
</blockquote>
<p>常见的页缺失有下面这两种：</p>
<ul>
<li><strong>硬性页缺失（Hard Page Fault）</strong>：物理内存中没有对应的物理页。于是，Page Fault Handler 会指示 CPU 从已经打开的磁盘文件中读取相应的内容到物理内存，而后交由 MMU 建立相应的虚拟页和物理页的映射关系。</li>
<li><strong>软性页缺失（Soft Page Fault）</strong>：物理内存中有对应的物理页，但虚拟页还未和物理页建立映射。于是，Page Fault Handler 会指示 MMU 建立相应的虚拟页和物理页的映射关系。</li>
</ul>
<p>发生上面这两种缺页错误的时候，应用程序访问的是有效的物理内存，只是出现了物理页缺失或者虚拟页和物理页的映射关系未建立的问题。如果应用程序访问的是无效的物理内存的话，还会出现 <strong>无效缺页错误（Invalid Page Fault）</strong> 。</p>
<h4> 常见的页面置换算法有哪些?</h4>
<p>当发生硬性页缺失时，如果物理内存中没有空闲的物理页面可用的话。操作系统就必须将物理内存中的一个物理页淘汰出去，这样就可以腾出空间来加载新的页面了。</p>
<p>用来选择淘汰哪一个物理页的规则叫做 <strong>页面置换算法</strong> ，我们可以把页面置换算法看成是淘汰物物理页的规则。</p>
<p>页缺失太频繁的发生会非常影响性能，一个好的页面置换算法应该是可以减少页缺失出现的次数。</p>
<p>常见的页面置换算法有下面这 5 种（其他还有很多页面置换算法都是基于这些算法改进得来的）：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/image-20230409113009139.png" alt="常见的页面置换算法" tabindex="0"><figcaption>常见的页面置换算法</figcaption></figure>
<ol>
<li><strong>最佳页面置换算法（OPT，Optimal）</strong>：优先选择淘汰的页面是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若干页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现，只是理论最优的页面置换算法，可以作为衡量其他置换算法优劣的标准。</li>
<li><strong>先进先出页面置换算法（FIFO，First In First Out）</strong> : 最简单的一种页面置换算法，总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。该算法易于实现和理解，一般只需要通过一个 FIFO 队列即可需求。不过，它的性能并不是很好。</li>
<li><strong>最近最久未使用页面置换算法（LRU ，Least Recently Used）</strong>：LRU 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。LRU 算法是根据各页之前的访问情况来实现，因此是易于实现的。OPT 算法是根据各页未来的访问情况来实现，因此是不可实现的。</li>
<li><strong>最少使用页面置换算法（LFU，Least Frequently Used）</strong> : 和 LRU 算法比较像，不过该置换算法选择的是之前一段时间内使用最少的页面作为淘汰页。</li>
<li><strong>时钟页面置换算法（Clock）</strong>：可以认为是一种最近未使用算法，即逐出的页面都是最近没有使用的那个。</li>
</ol>
<p><strong>FIFO 页面置换算法性能为何不好？</strong></p>
<p>主要原因主要有二：</p>
<ol>
<li><strong>经常访问或者需要长期存在的页面会被频繁调入调出</strong>：较早调入的页往往是经常被访问或者需要长期存在的页，这些页会被反复调入和调出。</li>
<li><strong>存在 Belady 现象</strong>：被置换的页面并不是进程不会访问的，有时就会出现分配的页面数增多但缺页率反而提高的异常现象。出现该异常的原因是因为 FIFO 算法只考虑了页面进入内存的顺序，而没有考虑页面访问的频率和紧迫性。</li>
</ol>
<p><strong>哪一种页面置换算法实际用的比较多？</strong></p>
<p>LRU 算法是实际使用中应用的比较多，也被认为是最接近 OPT 的页面置换算法。</p>
<p>不过，需要注意的是，实际应用中这些算法会被做一些改进，就比如 InnoDB Buffer Pool（ InnoDB 缓冲池，MySQL 数据库中用于管理缓存页面的机制）就改进了传统的 LRU 算法，使用了一种称为"Adaptive LRU"的算法（同时结合了 LRU 和 LFU 算法的思想）。</p>
<h3> 分页机制和分段机制有哪些共同点和区别？</h3>
<p><strong>共同点</strong>：</p>
<ul>
<li>都是非连续内存管理的方式。</li>
<li>都采用了地址映射的方法，将虚拟地址映射到物理地址，以实现对内存的管理和保护。</li>
</ul>
<p><strong>区别</strong>：</p>
<ul>
<li>分页机制以页面为单位进行内存管理，而分段机制以段为单位进行内存管理。页的大小是固定的，由操作系统决定，通常为 2 的幂次方。而段的大小不固定，取决于我们当前运行的程序。</li>
<li>页是物理单位，即操作系统将物理内存划分成固定大小的页面，每个页面的大小通常是 2 的幂次方，例如 4KB、8KB 等等。而段则是逻辑单位，是为了满足程序对内存空间的逻辑需求而设计的，通常根据程序中数据和代码的逻辑结构来划分。</li>
<li>分段机制容易出现外部内存碎片，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。分页机制解决了外部内存碎片的问题，但仍然可能会出现内部内存碎片。</li>
<li>分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息。</li>
<li>分页机制对程序没有任何要求，程序只需要按照虚拟地址进行访问即可；而分段机制需要程序员将程序分为多个段，并且显式地使用段寄存器来访问不同的段。</li>
</ul>
<h3> 段页机制</h3>
<p>结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页。</p>
<p>在段页式机制下，地址翻译的过程分为两个步骤：</p>
<ol>
<li>段式地址映射。</li>
<li>页式地址映射。</li>
</ol>
<h3> 局部性原理</h3>
<p>要想更好地理解虚拟内存技术，必须要知道计算机中著名的 <strong>局部性原理（Locality Principle）</strong>。另外，局部性原理既适用于程序结构，也适用于数据结构，是非常重要的一个概念。</p>
<p>局部性原理是指在程序执行过程中，数据和指令的访问存在一定的空间和时间上的局部性特点。其中，时间局部性是指一个数据项或指令在一段时间内被反复使用的特点，空间局部性是指一个数据项或指令在一段时间内与其相邻的数据项或指令被反复使用的特点。</p>
<p>在分页机制中，页表的作用是将虚拟地址转换为物理地址，从而完成内存访问。在这个过程中，局部性原理的作用体现在两个方面：</p>
<ul>
<li><strong>时间局部性</strong>：由于程序中存在一定的循环或者重复操作，因此会反复访问同一个页或一些特定的页，这就体现了时间局部性的特点。为了利用时间局部性，分页机制中通常采用缓存机制来提高页面的命中率，即将最近访问过的一些页放入缓存中，如果下一次访问的页已经在缓存中，就不需要再次访问内存，而是直接从缓存中读取。</li>
<li><strong>空间局部性</strong>：由于程序中数据和指令的访问通常是具有一定的空间连续性的，因此当访问某个页时，往往会顺带访问其相邻的一些页。为了利用空间局部性，分页机制中通常采用预取技术来预先将相邻的一些页读入内存缓存中，以便在未来访问时能够直接使用，从而提高访问速度。</li>
</ul>
<p>总之，局部性原理是计算机体系结构设计的重要原则之一，也是许多优化算法的基础。在分页机制中，利用时间局部性和空间局部性，采用缓存和预取技术，可以提高页面的命中率，从而提高内存访问效率</p>
<h2> 文件系统</h2>
<h3> 文件系统主要做了什么？</h3>
<p>文件系统主要负责管理和组织计算机存储设备上的文件和目录，其功能包括以下几个方面：</p>
<ol>
<li><strong>存储管理</strong>：将文件数据存储到物理存储介质中，并且管理空间分配，以确保每个文件都有足够的空间存储，并避免文件之间发生冲突。</li>
<li><strong>文件管理</strong>：文件的创建、删除、移动、重命名、压缩、加密、共享等等。</li>
<li><strong>目录管理</strong>：目录的创建、删除、移动、重命名等等。</li>
<li><strong>文件访问控制</strong>：管理不同用户或进程对文件的访问权限，以确保用户只能访问其被授权访问的文件，以保证文件的安全性和保密性。</li>
</ol>
<h3> 硬链接和软链接有什么区别？</h3>
<p>在 Linux/类 Unix 系统上，文件链接（File Link）是一种特殊的文件类型，可以在文件系统中指向另一个文件。常见的文件链接类型有两种：</p>
<p><strong>1、硬链接（Hard Link）</strong></p>
<ul>
<li>在 Linux/类 Unix 文件系统中，每个文件和目录都有一个唯一的索引节点（inode）号，用来标识该文件或目录。硬链接通过 inode 节点号建立连接，硬链接和源文件的 inode 节点号相同，两者对文件系统来说是完全平等的（可以看作是互为硬链接，源头是同一份文件），删除其中任何一个对另外一个没有影响，可以通过给文件设置硬链接文件来防止重要文件被误删。</li>
<li>只有删除了源文件和所有对应的硬链接文件，该文件才会被真正删除。</li>
<li>硬链接具有一些限制，不能对目录以及不存在的文件创建硬链接，并且，硬链接也不能跨越文件系统。</li>
<li><code>ln</code> 命令用于创建硬链接。</li>
</ul>
<p><strong>2、软链接（Symbolic Link 或 Symlink）</strong></p>
<ul>
<li>软链接和源文件的 inode 节点号不同，而是指向一个文件路径。</li>
<li>源文件删除后，软链接依然存在，但是指向的是一个无效的文件路径。</li>
<li>软连接类似于 Windows 系统中的快捷方式。</li>
<li>不同于硬链接，可以对目录或者不存在的文件创建软链接，并且，软链接可以跨越文件系统。</li>
<li><code>ln -s</code> 命令用于创建软链接。</li>
</ul>
<h3> 硬链接为什么不能跨文件系统？</h3>
<p>我们之前提到过，硬链接是通过 inode 节点号建立连接的，而硬链接和源文件共享相同的 inode 节点号。</p>
<p>然而，每个文件系统都有自己的独立 inode 表，且每个 inode 表只维护该文件系统内的 inode。如果在不同的文件系统之间创建硬链接，可能会导致 inode 节点号冲突的问题，即目标文件的 inode 节点号已经在该文件系统中被使用。</p>
<h3> 提高文件系统性能的方式有哪些？</h3>
<ul>
<li><strong>优化硬件</strong>：使用高速硬件设备（如 SSD、NVMe）替代传统的机械硬盘，使用 RAID（Redundant Array of Inexpensive Disks）等技术提高磁盘性能。</li>
<li><strong>选择合适的文件系统选型</strong>：不同的文件系统具有不同的特性，对于不同的应用场景选择合适的文件系统可以提高系统性能。</li>
<li><strong>运用缓存</strong>：访问磁盘的效率比较低，可以运用缓存来减少磁盘的访问次数。不过，需要注意缓存命中率，缓存命中率过低的话，效果太差。</li>
<li><strong>避免磁盘过度使用</strong>：注意磁盘的使用率，避免将磁盘用满，尽量留一些剩余空间，以免对文件系统的性能产生负面影响。</li>
<li><strong>对磁盘进行合理的分区</strong>：合理的磁盘分区方案，能够使文件系统在不同的区域存储文件，从而减少文件碎片，提高文件读写性能。</li>
</ul>
<h3> 常见的磁盘调度算法有哪些？</h3>
<p>磁盘调度算法是操作系统中对磁盘访问请求进行排序和调度的算法，其目的是提高磁盘的访问效率。</p>
<p>一次磁盘读写操作的时间由磁盘寻道/寻找时间、延迟时间和传输时间决定。磁盘调度算法可以通过改变到达磁盘请求的处理顺序，减少磁盘寻道时间和延迟时间。</p>
<p>常见的磁盘调度算法有下面这 6 种（其他还有很多磁盘调度算法都是基于这些算法改进得来的）：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/disk-scheduling-algorithms.png" alt="常见的磁盘调度算法" tabindex="0"><figcaption>常见的磁盘调度算法</figcaption></figure>
<ol>
<li><strong>先来先服务算法（First-Come First-Served，FCFS）</strong>：按照请求到达磁盘调度器的顺序进行处理，先到达的请求的先被服务。FCFS 算法实现起来比较简单，不存在算法开销。不过，由于没有考虑磁头移动的路径和方向，平均寻道时间较长。同时，该算法容易出现饥饿问题，即一些后到的磁盘请求可能需要等待很长时间才能得到服务。</li>
<li><strong>最短寻道时间优先算法（Shortest Seek Time First，SSTF）</strong>：也被称为最佳服务优先（Shortest Service Time First，SSTF）算法，优先选择距离当前磁头位置最近的请求进行服务。SSTF 算法能够最小化磁头的寻道时间，但容易出现饥饿问题，即磁头附近的请求不断被服务，远离磁头的请求长时间得不到响应。实际应用中，需要优化一下该算法的实现，避免出现饥饿问题。</li>
<li><strong>扫描算法（SCAN）</strong>：也被称为电梯（Elevator）算法，基本思想和电梯非常类似。磁头沿着一个方向扫描磁盘，如果经过的磁道有请求就处理，直到到达磁盘的边界，然后改变移动方向，依此往复。SCAN 算法能够保证所有的请求得到服务，解决了饥饿问题。但是，如果磁头从一个方向刚扫描完，请求才到的话。这个请求就需要等到磁头从相反方向过来之后才能得到处理。</li>
<li><strong>循环扫描算法（Circular Scan，C-SCAN）</strong>：SCAN 算法的变体，只在磁盘的一侧进行扫描，并且只按照一个方向扫描，直到到达磁盘边界，然后回到磁盘起点，重新开始循环。</li>
<li><strong>边扫描边观察算法（LOOK）</strong>：SCAN 算法中磁头到了磁盘的边界才改变移动方向，这样可能会做很多无用功，因为磁头移动方向上可能已经没有请求需要处理了。LOOK 算法对 SCAN 算法进行了改进，如果磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向，依此往复。也就是边扫描边观察指定方向上还有无请求，因此叫 LOOK。</li>
<li><strong>均衡循环扫描算法（C-LOOK）</strong>：C-SCAN 只有到达磁盘边界时才能改变磁头移动方向，并且磁头返回时也需要返回到磁盘起点，这样可能会做很多无用功。C-LOOK 算法对 C-SCAN 算法进行了改进，如果磁头移动的方向上已经没有磁道访问请求了，就可以立即让磁头返回，并且磁头只需要返回到有磁道访问请求的位置即可。</li>
</ol>
<h2> 参考</h2>
<ul>
<li>《计算机操作系统—汤小丹》第四版</li>
<li>《深入理解计算机系统》</li>
<li>《重学操作系统》</li>
<li>《现代操作系统原理与实现》</li>
<li>王道考研操作系统知识点整理：https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/13.html</li>
<li>内存管理之伙伴系统与 SLAB：https://blog.csdn.net/qq_44272681/article/details/124199068</li>
<li>为什么 Linux 需要虚拟内存：https://draveness.me/whys-the-design-os-virtual-memory/</li>
<li>程序员的自我修养（七）：内存缺页错误：https://liam.page/2017/09/01/page-fault/</li>
<li>虚拟内存的那点事儿：https://juejin.cn/post/6844903507594575886</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/memory-management-roles.png" type="image/png"/>
    </item>
    <item>
      <title>Shell 编程基础知识总结</title>
      <link>https://javaguide.cn/cs-basics/operating-system/shell-intro.html</link>
      <guid>https://javaguide.cn/cs-basics/operating-system/shell-intro.html</guid>
      <source url="https://javaguide.cn/rss.xml">Shell 编程基础知识总结</source>
      <description>Shell 编程在我们的日常开发工作中非常实用，目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。 这篇文章我会简单总结一下 Shell 编程基础知识，带你入门 Shell 编程！ 走进 Shell 编程的大门 为什么要学 Shell？ 学一个东西，我们大部分情况都是往实用性方向着想。从工作角度来讲，学习 Shell 是为了提高我们自己工作效率，提高产出，让我们在更少的时间完成更多的事情。 很多人会说 Shell 编程属于运维方面的知识了，应该是运维人员来做，我们做后端开发的没必要学。我觉得这种说法大错特错，相比于专门做 Linux 运维的人员来说，我们对 Shell 编程掌握程度的要求要比他们低，但是 Shell 编程也是我们必须要掌握的！</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>Shell 编程在我们的日常开发工作中非常实用，目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。</p>
<p>这篇文章我会简单总结一下 Shell 编程基础知识，带你入门 Shell 编程！</p>
<h2> 走进 Shell 编程的大门</h2>
<h3> 为什么要学 Shell？</h3>
<p>学一个东西，我们大部分情况都是往实用性方向着想。从工作角度来讲，学习 Shell 是为了提高我们自己工作效率，提高产出，让我们在更少的时间完成更多的事情。</p>
<p>很多人会说 Shell 编程属于运维方面的知识了，应该是运维人员来做，我们做后端开发的没必要学。我觉得这种说法大错特错，相比于专门做 Linux 运维的人员来说，我们对 Shell 编程掌握程度的要求要比他们低，但是 Shell 编程也是我们必须要掌握的！</p>
<p>目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。</p>
<p>两者之间，Shell 几乎是 IT 企业必须使用的运维自动化编程语言，特别是在运维工作中的服务监控、业务快速部署、服务启动停止、数据备份及处理、日志分析等环节里，shell 是不可缺的。Python 更适合处理复杂的业务逻辑，以及开发复杂的运维软件工具，实现通过 web 访问等。Shell 是一个命令解释器，解释执行用户所输入的命令和程序。一输入命令，就立即回应的交互的对话方式。</p>
<p>另外，了解 shell 编程也是大部分互联网公司招聘后端开发人员的要求。下图是我截取的一些知名互联网公司对于 Shell 编程的要求。</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-16/60190220.jpg" alt="大型互联网公司对于shell编程技能的要求" tabindex="0"><figcaption>大型互联网公司对于shell编程技能的要求</figcaption></figure>
<h3> 什么是 Shell？</h3>
<p>简单来说“Shell 编程就是对一堆 Linux 命令的逻辑化处理”。</p>
<p>W3Cschool 上的一篇文章是这样介绍 Shell 的，如下图所示。
<img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-26/19456505.jpg" alt="什么是 Shell？"></p>
<h3> Shell 编程的 Hello World</h3>
<p>学习任何一门编程语言第一件事就是输出 HelloWorld 了！下面我会从新建文件到 shell 代码编写来说下 Shell 编程如何输出 Hello World。</p>
<p>(1)新建一个文件 helloworld.sh :<code>touch helloworld.sh</code>，扩展名为 sh（sh 代表 Shell）（扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了）</p>
<p>(2) 使脚本具有执行权限：<code>chmod +x helloworld.sh</code></p>
<p>(3) 使用 vim 命令修改 helloworld.sh 文件：<code>vim helloworld.sh</code>(vim 文件------&gt;进入文件-----&gt;命令模式------&gt;按 i 进入编辑模式-----&gt;编辑文件 -------&gt;按 Esc 进入底行模式-----&gt;输入:wq/q! （输入 wq 代表写入内容并退出，即保存；输入 q!代表强制退出不保存。）)</p>
<p>helloworld.sh 内容如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shell 中 # 符号表示注释。<strong>shell 的第一行比较特殊，一般都会以#!开始来指定使用的 shell 类型。在 linux 中，除了 bash shell 以外，还有很多版本的 shell， 例如 zsh、dash 等等...不过 bash shell 还是我们使用最多的。</strong></p>
<p>(4) 运行脚本:<code>./helloworld.sh</code> 。（注意，一定要写成 <code>./helloworld.sh</code> ，而不是 <code>helloworld.sh</code> ，运行其它二进制的程序也一样，直接写 <code>helloworld.sh</code> ，linux 系统会去 PATH 里寻找有没有叫 helloworld.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 <code>helloworld.sh</code> 是会找不到命令的，要用<code>./helloworld.sh</code> 告诉系统说，就在当前目录找。）</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-16/55296212.jpg" alt="shell 编程Hello World" tabindex="0"><figcaption>shell 编程Hello World</figcaption></figure>
<h2> Shell 变量</h2>
<h3> Shell 编程中的变量介绍</h3>
<p><strong>Shell 编程中一般分为三种变量：</strong></p>
<ol>
<li><strong>我们自己定义的变量（自定义变量）:</strong> 仅在当前 Shell 实例中有效，其他 Shell 启动的程序不能访问局部变量。</li>
<li><strong>Linux 已定义的环境变量</strong>（环境变量， 例如：<code>PATH</code>, ​<code>HOME</code> 等..., 这类变量我们可以直接使用），使用 <code>env</code> 命令可以查看所有的环境变量，而 set 命令既可以查看环境变量也可以查看自定义变量。</li>
<li><strong>Shell 变量</strong>：Shell 变量是由 Shell 程序设置的特殊变量。Shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 Shell 的正常运行</li>
</ol>
<p><strong>常用的环境变量:</strong></p>
<blockquote>
<p>PATH 决定了 shell 将到哪些目录中寻找命令或程序<br>
HOME 当前用户主目录<br>
HISTSIZE 　历史记录数<br>
LOGNAME 当前用户的登录名<br>
HOSTNAME 　指主机的名称<br>
SHELL 当前用户 Shell 类型<br>
LANGUAGE 　语言相关的环境变量，多语言可以修改此环境变量<br>
MAIL 　当前用户的邮件存放目录<br>
PS1 　基本提示符，对于 root 用户是#，对于普通用户是$</p>
</blockquote>
<p><strong>使用 Linux 已定义的环境变量：</strong></p>
<p>比如我们要看当前用户目录可以使用：<code>echo $HOME</code>命令；如果我们要看当前用户 Shell 类型 可以使用<code>echo $SHELL</code>命令。可以看出，使用方法非常简单。</p>
<p><strong>使用自己定义的变量：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-17/19835037.jpg" alt="使用自己定义的变量" tabindex="0"><figcaption>使用自己定义的变量</figcaption></figure>
<p><strong>Shell 编程中的变量名的命名的注意事项：</strong></p>
<ul>
<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头，但是可以使用下划线（_）开头。</li>
<li>中间不能有空格，可以使用下划线（_）。</li>
<li>不能使用标点符号。</li>
<li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。</li>
</ul>
<h3> Shell 字符串入门</h3>
<p>字符串是 shell 编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号。这点和 Java 中有所不同。</p>
<p>在单引号中所有的特殊符号，如$和反引号都没有特殊含义。在双引号中，除了"$"、"\"、反引号和感叹号（需开启 <code>history expansion</code>），其他的字符没有特殊含义。</p>
<p><strong>单引号字符串：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出内容：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>双引号字符串：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出内容：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> Shell 字符串常见操作</h3>
<p><strong>拼接字符串：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-17/51148933.jpg" alt="输出结果" tabindex="0"><figcaption>输出结果</figcaption></figure>
<p><strong>获取字符串长度：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 expr 命令时，表达式中的运算符左右必须包含空格，如果不包含空格，将会输出表达式本身:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于某些运算符，还需要我们使用符号<code>\</code>进行转义，否则就会提示语法错误。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>截取子字符串:</strong></p>
<p>简单的字符串截取：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据表达式截取：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Shell 数组</h3>
<p>bash 支持一维数组（不支持多维数组），并且没有限定数组的大小。我下面给了大家一个关于数组操作的 Shell 代码示例，通过该示例大家可以知道如何创建数组、获取数组长度、获取/删除特定位置的数组元素、删除整个数组以及遍历数组。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Shell 基本运算符</h2>
<blockquote>
<p>说明：图片来自《菜鸟教程》</p>
</blockquote>
<p>Shell 编程支持下面几种运算符</p>
<ul>
<li>算数运算符</li>
<li>关系运算符</li>
<li>布尔运算符</li>
<li>字符串运算符</li>
<li>文件测试运算符</li>
</ul>
<h3> 算数运算符</h3>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-22/4937342.jpg" alt="算数运算符" tabindex="0"><figcaption>算数运算符</figcaption></figure>
<p>我以加法运算符做一个简单的示例（注意：不是单引号，是反引号）：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 关系运算符</h3>
<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-22/64391380.jpg" alt="shell关系运算符" tabindex="0"><figcaption>shell关系运算符</figcaption></figure>
<p>通过一个简单的示例演示关系运算符的使用，下面 shell 程序的作用是当 score=100 的时候输出 A 否则输出 B。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 逻辑运算符</h3>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-22/60545848.jpg" alt="逻辑运算符" tabindex="0"><figcaption>逻辑运算符</figcaption></figure>
<p>示例：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 布尔运算符</h3>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-22/93961425.jpg" alt="布尔运算符" tabindex="0"><figcaption>布尔运算符</figcaption></figure>
<p>这里就不做演示了，应该挺简单的。</p>
<h3> 字符串运算符</h3>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-22/309094.jpg" alt=" 字符串运算符" tabindex="0"><figcaption> 字符串运算符</figcaption></figure>
<p>简单示例：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 文件相关运算符</h3>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-22/60359774.jpg" alt="文件相关运算符" tabindex="0"><figcaption>文件相关运算符</figcaption></figure>
<p>使用方式很简单，比如我们定义好了一个文件路径<code>file="/usr/learnshell/test.sh"</code> 如果我们想判断这个文件是否可读，可以这样<code>if [ -r $file ]</code> 如果想判断这个文件是否可写，可以这样<code>-w $file</code>，是不是很简单。</p>
<h2> shell 流程控制</h2>
<h3> if 条件语句</h3>
<p>简单的 if else-if else 的条件语句示例</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相信大家通过上面的示例就已经掌握了 shell 编程中的 if 条件语句。不过，还要提到的一点是，不同于我们常见的 Java 以及 PHP 中的 if 条件语句，shell if 条件语句中不能包含空语句也就是什么都不做的语句。</p>
<h3> for 循环语句</h3>
<p>通过下面三个简单的示例认识 for 循环语句最基本的使用，实际上 for 循环语句的功能比下面你看到的示例展现的要大得多。</p>
<p><strong>输出当前列表中的数据：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>产生 10 个随机数：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出 1 到 5:</strong></p>
<p>通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要,下面来看一个例子：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> while 语句</h3>
<p><strong>基本的 while 循环语句：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>while 循环可用于读取键盘信息：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出内容:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>无限循环：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> shell 函数</h2>
<h3> 不带参数没有返回值的函数</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 有返回值的函数</h3>
<p><strong>输入两个数字之后相加并返回结果：</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 带参数的函数</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-16/60190220.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>MongoDB常见面试题总结（上）</title>
      <link>https://javaguide.cn/database/mongodb/mongodb-questions-01.html</link>
      <guid>https://javaguide.cn/database/mongodb/mongodb-questions-01.html</guid>
      <source url="https://javaguide.cn/rss.xml">MongoDB常见面试题总结（上）</source>
      <description>少部分内容参考了 MongoDB 官方文档的描述，在此说明一下。 MongoDB 基础 MongoDB 是什么？ MongoDB 是一个基于 分布式文件存储 的开源 NoSQL 数据库系统，由 C++ 编写的。MongoDB 提供了 面向文档 的存储方式，操作起来比较简单和容易，支持“无模式”的数据建模，可以存储比较复杂的数据类型，是一款非常流行的 文档类型数据库 。</description>
      <category>数据库</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>少部分内容参考了 MongoDB 官方文档的描述，在此说明一下。</p>
</blockquote>
<h2> MongoDB 基础</h2>
<h3> MongoDB 是什么？</h3>
<p>MongoDB 是一个基于 <strong>分布式文件存储</strong> 的开源 NoSQL 数据库系统，由 <strong>C++</strong> 编写的。MongoDB 提供了 <strong>面向文档</strong> 的存储方式，操作起来比较简单和容易，支持“<strong>无模式</strong>”的数据建模，可以存储比较复杂的数据类型，是一款非常流行的 <strong>文档类型数据库</strong> 。</p>
<p>在高负载的情况下，MongoDB 天然支持水平扩展和高可用，可以很方便地添加更多的节点/实例，以保证服务性能和可用性。在许多场景下，MongoDB 可以用于代替传统的关系型数据库或键/值存储方式，皆在为 Web 应用提供可扩展的高可用高性能数据存储解决方案。</p>
<h3> MongoDB 的存储结构是什么？</h3>
<p>MongoDB 的存储结构区别于传统的关系型数据库，主要由如下三个单元组成：</p>
<ul>
<li><strong>文档（Document）</strong>：MongoDB 中最基本的单元，由 BSON 键值对（key-value）组成，类似于关系型数据库中的行（Row）。</li>
<li><strong>集合（Collection）</strong>：一个集合可以包含多个文档，类似于关系型数据库中的表（Table）。</li>
<li><strong>数据库（Database）</strong>：一个数据库中可以包含多个集合，可以在 MongoDB 中创建多个数据库，类似于关系型数据库中的数据库（Database）。</li>
</ul>
<p>也就是说，MongoDB 将数据记录存储为文档 （更具体来说是<a href="https://www.mongodb.com/docs/manual/core/document/#std-label-bson-document-format" target="_blank" rel="noopener noreferrer">BSON 文档</a>），这些文档在集合中聚集在一起，数据库中存储一个或多个文档集合。</p>
<p><strong>SQL 与 MongoDB 常见术语对比</strong>：</p>
<table>
<thead>
<tr>
<th>SQL</th>
<th>MongoDB</th>
</tr>
</thead>
<tbody>
<tr>
<td>表（Table）</td>
<td>集合（Collection）</td>
</tr>
<tr>
<td>行（Row）</td>
<td>文档（Document）</td>
</tr>
<tr>
<td>列（Col）</td>
<td>字段（Field）</td>
</tr>
<tr>
<td>主键（Primary Key）</td>
<td>对象 ID（Objectid）</td>
</tr>
<tr>
<td>索引（Index）</td>
<td>索引（Index）</td>
</tr>
<tr>
<td>嵌套表（Embedded Table）</td>
<td>嵌入式文档（Embedded Document）</td>
</tr>
<tr>
<td>数组（Array）</td>
<td>数组（Array）</td>
</tr>
</tbody>
</table>
<h4> 文档</h4>
<p>MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。字段的值可能包括其他文档、数组和文档数组。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/crud-annotated-document..png" alt="MongoDB 文档" tabindex="0"><figcaption>MongoDB 文档</figcaption></figure>
<p>文档的键是字符串。除了少数例外情况，键可以使用任意 UTF-8 字符。</p>
<ul>
<li>键不能含有 <code>\0</code>(空字符）。这个字符用来表示键的结尾。</li>
<li><code>.</code> 和 <code>$</code> 有特别的意义，只有在特定环境下才能使用。</li>
<li>以下划线<code>_</code>开头的键是保留的(不是严格要求的)。</li>
</ul>
<p><strong>BSON [bee·sahn]</strong> 是 Binary <a href="http://json.org/" target="_blank" rel="noopener noreferrer">JSON</a>的简称，是 JSON 文档的二进制表示，支持将文档和数组嵌入到其他文档和数组中，还包含允许表示不属于 JSON 规范的数据类型的扩展。有关 BSON 规范的内容，可以参考 <a href="http://bsonspec.org/" target="_blank" rel="noopener noreferrer">bsonspec.org</a>，另见<a href="https://www.mongodb.com/docs/manual/reference/bson-types/" target="_blank" rel="noopener noreferrer">BSON 类型</a>。</p>
<p>根据维基百科对 BJSON 的介绍，BJSON 的遍历速度优于 JSON，这也是 MongoDB 选择 BSON 的主要原因，但 BJSON 需要更多的存储空间。</p>
<blockquote>
<p>与 JSON 相比，BSON 着眼于提高存储和扫描效率。BSON 文档中的大型元素以长度字段为前缀以便于扫描。在某些情况下，由于长度前缀和显式数组索引的存在，BSON 使用的空间会多于 JSON。</p>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/bsonspec.org.png" alt="BSON 官网首页" tabindex="0"><figcaption>BSON 官网首页</figcaption></figure>
<h4> 集合</h4>
<p>MongoDB 集合存在于数据库中，<strong>没有固定的结构</strong>，也就是 <strong>无模式</strong> 的，这意味着可以往集合插入不同格式和类型的数据。不过，通常情况下，插入集合中的数据都会有一定的关联性。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/crud-annotated-collection.png" alt="MongoDB 集合" tabindex="0"><figcaption>MongoDB 集合</figcaption></figure>
<p>集合不需要事先创建，当第一个文档插入或者第一个索引创建时，如果该集合不存在，则会创建一个新的集合。</p>
<p>集合名可以是满足下列条件的任意 UTF-8 字符串：</p>
<ul>
<li>集合名不能是空字符串<code>""</code>。</li>
<li>集合名不能含有 <code>\0</code> （空字符)，这个字符表示集合名的结尾。</li>
<li>集合名不能以"system."开头，这是为系统集合保留的前缀。例如 <code>system.users</code> 这个集合保存着数据库的用户信息，<code>system.namespaces</code> 集合保存着所有数据库集合的信息。</li>
<li>集合名必须以下划线或者字母符号开始，并且不能包含 <code>$</code>。</li>
</ul>
<h4> 数据库</h4>
<p>数据库用于存储所有集合，而集合又用于存储所有文档。一个 MongoDB 中可以创建多个数据库，每一个数据库都有自己的集合和权限。</p>
<p>MongoDB 预留了几个特殊的数据库。</p>
<ul>
<li><strong>admin</strong> : admin 数据库主要是保存 root 用户和角色。例如，system.users 表存储用户，system.roles 表存储角色。一般不建议用户直接操作这个数据库。将一个用户添加到这个数据库，且使它拥有 admin 库上的名为 dbAdminAnyDatabase 的角色权限，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如关闭服务器。</li>
<li><strong>local</strong> : local 数据库是不会被复制到其他分片的，因此可以用来存储本地单台服务器的任意 collection。一般不建议用户直接使用 local 库存储任何数据，也不建议进行 CRUD 操作，因为数据无法被正常备份与恢复。</li>
<li><strong>config</strong> : 当 MongoDB 使用分片设置时，config 数据库可用来保存分片的相关信息。</li>
<li><strong>test</strong> : 默认创建的测试库，连接 <a href="https://mongoing.com/docs/reference/program/mongod.html" target="_blank" rel="noopener noreferrer">mongod</a> 服务时，如果不指定连接的具体数据库，默认就会连接到 test 数据库。</li>
</ul>
<p>数据库名可以是满足以下条件的任意 UTF-8 字符串：</p>
<ul>
<li>不能是空字符串<code>""</code>。</li>
<li>不得含有<code>' '</code>（空格)、<code>.</code>、<code>$</code>、<code>/</code>、<code>\</code>和 <code>\0</code> (空字符)。</li>
<li>应全部小写。</li>
<li>最多 64 字节。</li>
</ul>
<p>数据库名最终会变成文件系统里的文件，这也就是有如此多限制的原因。</p>
<h3> MongoDB 有什么特点？</h3>
<ul>
<li><strong>数据记录被存储为文档</strong>：MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。</li>
<li><strong>模式自由</strong>：集合的概念类似 MySQL 里的表，但它不需要定义任何模式，能够用更少的数据对象表现复杂的领域模型对象。</li>
<li><strong>支持多种查询方式</strong>：MongoDB 查询 API 支持读写操作 (CRUD)以及数据聚合、文本搜索和地理空间查询。</li>
<li><strong>支持 ACID 事务</strong>：NoSQL 数据库通常不支持事务，为了可扩展和高性能进行了权衡。不过，也有例外，MongoDB 就支持事务。与关系型数据库一样，MongoDB 事务同样具有 ACID 特性。MongoDB 单文档原生支持原子性，也具备事务的特性。MongoDB 4.0 加入了对多文档事务的支持，但只支持复制集部署模式下的事务，也就是说事务的作用域限制为一个副本集内。MongoDB 4.2 引入了分布式事务，增加了对分片集群上多文档事务的支持，并合并了对副本集上多文档事务的现有支持。</li>
<li><strong>高效的二进制存储</strong>：存储在集合中的文档，是以键值对的形式存在的。键用于唯一标识一个文档，一般是 ObjectId 类型，值是以 BSON 形式存在的。BSON = Binary JSON， 是在 JSON 基础上加了一些类型及元数据描述的格式。</li>
<li><strong>自带数据压缩功能</strong>：存储同样的数据所需的资源更少。</li>
<li><strong>支持 mapreduce</strong>：通过分治的方式完成复杂的聚合任务。不过，从 MongoDB 5.0 开始，map-reduce 已经不被官方推荐使用了，替代方案是 <a href="https://www.mongodb.com/docs/manual/core/aggregation-pipeline/" target="_blank" rel="noopener noreferrer">聚合管道</a>。聚合管道提供比 map-reduce 更好的性能和可用性。</li>
<li><strong>支持多种类型的索引</strong>：MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。</li>
<li><strong>支持 failover</strong>：提供自动故障恢复的功能，主节点发生故障时，自动从从节点中选举出一个新的主节点，确保集群的正常使用，这对于客户端来说是无感知的。</li>
<li><strong>支持分片集群</strong>：MongoDB 支持集群自动切分数据，让集群存储更多的数据，具备更强的性能。在数据插入和更新时，能够自动路由和存储。</li>
<li><strong>支持存储大文件</strong>：MongoDB 的单文档存储空间要求不超过 16MB。对于超过 16MB 的大文件，MongoDB 提供了 GridFS 来进行存储，通过 GridFS，可以将大型数据进行分块处理，然后将这些切分后的小文档保存在数据库中。</li>
</ul>
<h3> MongoDB 适合什么应用场景？</h3>
<p><strong>MongoDB 的优势在于其数据模型和存储引擎的灵活性、架构的可扩展性以及对强大的索引支持。</strong></p>
<p>选用 MongoDB 应该充分考虑 MongoDB 的优势，结合实际项目的需求来决定：</p>
<ul>
<li>随着项目的发展，使用类 JSON 格式（BSON）保存数据是否满足项目需求？MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。</li>
<li>是否需要大数据量的存储？是否需要快速水平扩展？MongoDB 支持分片集群，可以很方便地添加更多的节点（实例），让集群存储更多的数据，具备更强的性能。</li>
<li>是否需要更多类型索引来满足更多应用场景？MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。</li>
<li>......</li>
</ul>
<h2> MongoDB 存储引擎</h2>
<h3> MongoDB 支持哪些存储引擎？</h3>
<p>存储引擎（Storage Engine）是数据库的核心组件，负责管理数据在内存和磁盘中的存储方式。</p>
<p>与 MySQL 一样，MongoDB 采用的也是 <strong>插件式的存储引擎架构</strong> ，支持不同类型的存储引擎，不同的存储引擎解决不同场景的问题。在创建数据库或集合时，可以指定存储引擎。</p>
<blockquote>
<p>插件式的存储引擎架构可以实现 Server 层和存储引擎层的解耦，可以支持多种存储引擎，如 MySQL 既可以支持 B-Tree 结构的 InnoDB 存储引擎，还可以支持 LSM 结构的 RocksDB 存储引擎。</p>
</blockquote>
<p>在存储引擎刚出来的时候，默认是使用 MMAPV1 存储引擎，MongoDB4.x 版本不再支持 MMAPv1 存储引擎。</p>
<p>现在主要有下面这两种存储引擎：</p>
<ul>
<li><strong>WiredTiger 存储引擎</strong>：自 MongoDB 3.2 以后，默认的存储引擎为 <a href="https://www.mongodb.com/docs/manual/core/wiredtiger/" target="_blank" rel="noopener noreferrer">WiredTiger 存储引擎</a> 。非常适合大多数工作负载，建议用于新部署。WiredTiger 提供文档级并发模型、检查点和数据压缩（后文会介绍到）等功能。</li>
<li><strong>In-Memory 存储引擎</strong>：<a href="https://www.mongodb.com/docs/manual/core/inmemory/" target="_blank" rel="noopener noreferrer">In-Memory 存储引擎</a>在 MongoDB Enterprise 中可用。它不是将文档存储在磁盘上，而是将它们保留在内存中以获得更可预测的数据延迟。</li>
</ul>
<p>此外，MongoDB 3.0 提供了 <strong>可插拔的存储引擎 API</strong> ，允许第三方为 MongoDB 开发存储引擎，这点和 MySQL 也比较类似。</p>
<h3> WiredTiger 基于 LSM Tree 还是 B+ Tree？</h3>
<p>目前绝大部分流行的数据库存储引擎都是基于 B/B+ Tree 或者 LSM(Log Structured Merge) Tree 来实现的。对于 NoSQL 数据库来说，绝大部分（比如 HBase、Cassandra、RocksDB）都是基于 LSM 树，MongoDB 不太一样。</p>
<p>上面也说了，自 MongoDB 3.2 以后，默认的存储引擎为 WiredTiger 存储引擎。在 WiredTiger 引擎官网上，我们发现 WiredTiger 使用的是 B+ 树作为其存储结构：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，WiredTiger 还支持 <a href="https://source.wiredtiger.com/3.1.0/lsm.html" target="_blank" rel="noopener noreferrer">LSM(Log Structured Merge)</a> 树作为存储结构，MongoDB 在使用 WiredTiger 作为存储引擎时，默认使用的是 B+ 树。</p>
<p>如果想要了解 MongoDB 使用 B 树的原因，可以看看这篇文章：<a href="https://mp.weixin.qq.com/s/mMWdpbYRiT6LQcdaj4hgXQ" target="_blank" rel="noopener noreferrer">为什么 MongoDB 使用 B 树？</a>。</p>
<p>使用 B+ 树时，WiredTiger 以 <strong>page</strong> 为基本单位往磁盘读写数据。B+ 树的每个节点为一个 page，共有三种类型的 page：</p>
<ul>
<li><strong>root page（根节点）</strong>：B+ 树的根节点。</li>
<li><strong>internal page（内部节点）</strong>：不实际存储数据的中间索引节点。</li>
<li><strong>leaf page（叶子节点）</strong>：真正存储数据的叶子节点，包含一个页头（page header）、块头（block header）和真正的数据（key/value），其中页头定义了页的类型、页中实际载荷数据的大小、页中记录条数等信息；块头定义了此页的 checksum、块在磁盘上的寻址位置等信息。</li>
</ul>
<p>其整体结构如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/mongodb-b-plus-tree-integral-structure.png" alt="WiredTiger B+树整体结构" tabindex="0"><figcaption>WiredTiger B+树整体结构</figcaption></figure>
<p>如果想要深入研究学习 WiredTiger 存储引擎，推荐阅读 MongoDB 中文社区的 <a href="https://mongoing.com/archives/category/wiredtiger%e5%ad%98%e5%82%a8%e5%bc%95%e6%93%8e%e7%b3%bb%e5%88%97" target="_blank" rel="noopener noreferrer">WiredTiger 存储引擎系列</a>。</p>
<h2> MongoDB 聚合</h2>
<h3> MongoDB 聚合有什么用？</h3>
<p>实际项目中，我们经常需要将多个文档甚至是多个集合汇总到一起计算分析（比如求和、取最大值）并返回计算后的结果，这个过程被称为 <strong>聚合操作</strong> 。</p>
<p>根据官方文档介绍，我们可以使用聚合操作来：</p>
<ul>
<li>将来自多个文档的值组合在一起。</li>
<li>对集合中的数据进行的一系列运算。</li>
<li>分析数据随时间的变化。</li>
</ul>
<h3> MongoDB 提供了哪几种执行聚合的方法？</h3>
<p>MongoDB 提供了两种执行聚合的方法：</p>
<ul>
<li><strong>聚合管道（Aggregation Pipeline）</strong>：执行聚合操作的首选方法。</li>
<li><strong>单一目的聚合方法（Single purpose aggregation methods）</strong>：也就是单一作用的聚合函数比如 <code>count()</code>、<code>distinct()</code>、<code>estimatedDocumentCount()</code>。</li>
</ul>
<p>绝大部分文章中还提到了 <strong>map-reduce</strong> 这种聚合方法。不过，从 MongoDB 5.0 开始，map-reduce 已经不被官方推荐使用了，替代方案是 <a href="https://www.mongodb.com/docs/manual/core/aggregation-pipeline/" target="_blank" rel="noopener noreferrer">聚合管道</a>。聚合管道提供比 map-reduce 更好的性能和可用性。</p>
<p>MongoDB 聚合管道由多个阶段组成，每个阶段在文档通过管道时转换文档。每个阶段接收前一个阶段的输出，进一步处理数据，并将其作为输入数据发送到下一个阶段。</p>
<p>每个管道的工作流程是：</p>
<ol>
<li>接受一系列原始数据文档</li>
<li>对这些文档进行一系列运算</li>
<li>结果文档输出给下一个阶段</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/mongodb-aggregation-stage.png" alt="管道的工作流程" tabindex="0"><figcaption>管道的工作流程</figcaption></figure>
<p><strong>常用阶段操作符</strong>：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>$match</td>
<td>匹配操作符，用于对文档集合进行筛选</td>
</tr>
<tr>
<td>$project</td>
<td>投射操作符，用于重构每一个文档的字段，可以提取字段，重命名字段，甚至可以对原有字段进行操作后新增字段</td>
</tr>
<tr>
<td>$sort</td>
<td>排序操作符，用于根据一个或多个字段对文档进行排序</td>
</tr>
<tr>
<td>$limit</td>
<td>限制操作符，用于限制返回文档的数量</td>
</tr>
<tr>
<td>$skip</td>
<td>跳过操作符，用于跳过指定数量的文档</td>
</tr>
<tr>
<td>$count</td>
<td>统计操作符，用于统计文档的数量</td>
</tr>
<tr>
<td>$group</td>
<td>分组操作符，用于对文档集合进行分组</td>
</tr>
<tr>
<td>$unwind</td>
<td>拆分操作符，用于将数组中的每一个值拆分为单独的文档</td>
</tr>
<tr>
<td>$lookup</td>
<td>连接操作符，用于连接同一个数据库中另一个集合，并获取指定的文档，类似于 populate</td>
</tr>
</tbody>
</table>
<p>更多操作符介绍详见官方文档：<a href="https://docs.mongodb.com/manual/reference/operator/aggregation/" target="_blank" rel="noopener noreferrer">https://docs.mongodb.com/manual/reference/operator/aggregation/</a></p>
<p>阶段操作符用于 <code>db.collection.aggregate</code> 方法里面，数组参数中的第一层。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是 MongoDB 官方文档中的一个例子：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> MongoDB 事务</h2>
<blockquote>
<p>MongoDB 事务想要搞懂原理还是比较花费时间的，我自己也没有搞太明白。因此，我这里只是简单介绍一下 MongoDB 事务，想要了解原理的小伙伴，可以自行搜索查阅相关资料。</p>
<p>这里推荐几篇文章，供大家参考：</p>
<ul>
<li><a href="https://mongoing.com/archives/82187" target="_blank" rel="noopener noreferrer">技术干货| MongoDB 事务原理</a></li>
<li><a href="https://developer.aliyun.com/article/782494" target="_blank" rel="noopener noreferrer">MongoDB 一致性模型设计与实现</a></li>
<li><a href="https://www.mongodb.com/docs/upcoming/core/transactions/" target="_blank" rel="noopener noreferrer">MongoDB 官方文档对事务的介绍</a></li>
</ul>
</blockquote>
<p>我们在介绍 NoSQL 数据的时候也说过，NoSQL 数据库通常不支持事务，为了可扩展和高性能进行了权衡。不过，也有例外，MongoDB 就支持事务。</p>
<p>与关系型数据库一样，MongoDB 事务同样具有 ACID 特性：</p>
<ul>
<li><strong>原子性</strong>（<code>Atomicity</code>）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>
<li><strong>一致性</strong>（<code>Consistency</code>）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li>
<li><strong>隔离性</strong>（<code>Isolation</code>）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的。WiredTiger 存储引擎支持读未提交（ read-uncommitted ）、读已提交（ read-committed ）和快照（ snapshot ）隔离，MongoDB 启动时默认选快照隔离。在不同隔离级别下，一个事务的生命周期内，可能出现脏读、不可重复读、幻读等现象。</li>
<li><strong>持久性</strong>（<code>Durability</code>）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>
</ul>
<p>关于事务的详细介绍这篇文章就不多说了，感兴趣的可以看看我写的<a href="/database/mysql/mysql-questions-01.html" target="blank">MySQL 常见面试题总结</a>这篇文章，里面有详细介绍到。</p>
<p>MongoDB 单文档原生支持原子性，也具备事务的特性。当谈论 MongoDB 事务的时候，通常指的是 <strong>多文档</strong> 。MongoDB 4.0 加入了对多文档 ACID 事务的支持，但只支持复制集部署模式下的 ACID 事务，也就是说事务的作用域限制为一个副本集内。MongoDB 4.2 引入了 <strong>分布式事务</strong> ，增加了对分片集群上多文档事务的支持，并合并了对副本集上多文档事务的现有支持。</p>
<p>根据官方文档介绍：</p>
<blockquote>
<p>从 MongoDB 4.2 开始，分布式事务和多文档事务在 MongoDB 中是一个意思。分布式事务是指分片集群和副本集上的多文档事务。从 MongoDB 4.2 开始，多文档事务（无论是在分片集群还是副本集上）也称为分布式事务。</p>
</blockquote>
<p>在大多数情况下，多文档事务比单文档写入会产生更大的性能成本。对于大部分场景来说， <a href="https://www.mongodb.com/docs/upcoming/core/data-model-design/#std-label-data-modeling-embedding" target="_blank" rel="noopener noreferrer">非规范化数据模型（嵌入式文档和数组）</a> 依然是最佳选择。也就是说，适当地对数据进行建模可以最大限度地减少对多文档事务的需求。</p>
<p><strong>注意</strong>：</p>
<ul>
<li>从 MongoDB 4.2 开始，多文档事务支持副本集和分片集群，其中：主节点使用 WiredTiger 存储引擎，同时从节点使用 WiredTiger 存储引擎或 In-Memory 存储引擎。在 MongoDB 4.0 中，只有使用 WiredTiger 存储引擎的副本集支持事务。</li>
<li>在 MongoDB 4.2 及更早版本中，你无法在事务中创建集合。从 MongoDB 4.4 开始，您可以在事务中创建集合和索引。有关详细信息，请参阅 <a href="https://www.mongodb.com/docs/upcoming/core/transactions/#std-label-transactions-create-collections-indexes" target="_blank" rel="noopener noreferrer">在事务中创建集合和索引</a>。</li>
</ul>
<h2> MongoDB 数据压缩</h2>
<p>借助 WiredTiger 存储引擎（ MongoDB 3.2 后的默认存储引擎），MongoDB 支持对所有集合和索引进行压缩。压缩以额外的 CPU 为代价最大限度地减少存储使用。</p>
<p>默认情况下，WiredTiger 使用 <a href="https://github.com/google/snappy" target="_blank" rel="noopener noreferrer">Snappy</a> 压缩算法（谷歌开源，旨在实现非常高的速度和合理的压缩，压缩比 3 ～ 5 倍）对所有集合使用块压缩，对所有索引使用前缀压缩。</p>
<p>除了 Snappy 之外，对于集合还有下面这些压缩算法：</p>
<ul>
<li><a href="https://github.com/madler/zlib" target="_blank" rel="noopener noreferrer">zlib</a>：高度压缩算法，压缩比 5 ～ 7 倍</li>
<li><a href="https://github.com/facebook/zstd" target="_blank" rel="noopener noreferrer">Zstandard</a>（简称 zstd）：Facebook 开源的一种快速无损压缩算法，针对 zlib 级别的实时压缩场景和更好的压缩比，提供更高的压缩率和更低的 CPU 使用率，MongoDB 4.2 开始可用。</li>
</ul>
<p>WiredTiger 日志也会被压缩，默认使用的也是 Snappy 压缩算法。如果日志记录小于或等于 128 字节，WiredTiger 不会压缩该记录。</p>
<h2> 参考</h2>
<ul>
<li>MongoDB 官方文档（主要参考资料，以官方文档为准）：<a href="https://www.mongodb.com/docs/manual/" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/docs/manual/</a></li>
<li>《MongoDB 权威指南》</li>
<li>技术干货| MongoDB 事务原理 - MongoDB 中文社区：<a href="https://mongoing.com/archives/82187" target="_blank" rel="noopener noreferrer">https://mongoing.com/archives/82187</a></li>
<li>Transactions - MongoDB 官方文档：<a href="https://www.mongodb.com/docs/manual/core/transactions/" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/docs/manual/core/transactions/</a></li>
<li>WiredTiger Storage Engine - MongoDB 官方文档：<a href="https://www.mongodb.com/docs/manual/core/wiredtiger/" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/docs/manual/core/wiredtiger/</a></li>
<li>WiredTiger 存储引擎之一：基础数据结构分析：<a href="https://mongoing.com/topic/archives-35143" target="_blank" rel="noopener noreferrer">https://mongoing.com/topic/archives-35143</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/database/mongodb/crud-annotated-document..png" type="image/png"/>
    </item>
    <item>
      <title>MongoDB常见面试题总结（下）</title>
      <link>https://javaguide.cn/database/mongodb/mongodb-questions-02.html</link>
      <guid>https://javaguide.cn/database/mongodb/mongodb-questions-02.html</guid>
      <source url="https://javaguide.cn/rss.xml">MongoDB常见面试题总结（下）</source>
      <description>MongoDB 索引 MongoDB 索引有什么用? 和关系型数据库类似，MongoDB 中也有索引。索引的目的主要是用来提高查询效率，如果没有索引的话，MongoDB 必须执行 集合扫描 ，即扫描集合中的每个文档，以选择与查询语句匹配的文档。如果查询存在合适的索引，MongoDB 可以使用该索引来限制它必须检查的文档数量。并且，MongoDB 可以使用索引中的排序返回排序后的结果。 虽然索引可以显著缩短查询时间，但是使用索引、维护索引是有代价的。在执行写入操作时，除了要更新文档之外，还必须更新索引，这必然会影响写入的性能。因此，当有大量写操作而读操作少时，或者不考虑读操作的性能时，都不推荐建立索引。</description>
      <category>数据库</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> MongoDB 索引</h2>
<h3> MongoDB 索引有什么用?</h3>
<p>和关系型数据库类似，MongoDB 中也有索引。索引的目的主要是用来提高查询效率，如果没有索引的话，MongoDB 必须执行 <strong>集合扫描</strong> ，即扫描集合中的每个文档，以选择与查询语句匹配的文档。如果查询存在合适的索引，MongoDB 可以使用该索引来限制它必须检查的文档数量。并且，MongoDB 可以使用索引中的排序返回排序后的结果。</p>
<p>虽然索引可以显著缩短查询时间，但是使用索引、维护索引是有代价的。在执行写入操作时，除了要更新文档之外，还必须更新索引，这必然会影响写入的性能。因此，当有大量写操作而读操作少时，或者不考虑读操作的性能时，都不推荐建立索引。</p>
<h3> MongoDB 支持哪些类型的索引？</h3>
<p><strong>MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。</strong></p>
<ul>
<li><strong>单字段索引：</strong> 建立在单个字段上的索引，索引创建的排序顺序无所谓，MongoDB 可以头/尾开始遍历。</li>
<li><strong>复合索引：</strong> 建立在多个字段上的索引，也可以称之为组合索引、联合索引。</li>
<li><strong>多键索引</strong>：MongoDB 的一个字段可能是数组，在对这种字段创建索引时，就是多键索引。MongoDB 会为数组的每个值创建索引。就是说你可以按照数组里面的值做条件来查询，这个时候依然会走索引。</li>
<li><strong>哈希索引</strong>：按数据的哈希值索引，用在哈希分片集群上。</li>
<li><strong>文本索引：</strong> 支持对字符串内容的文本搜索查询。文本索引可以包含任何值为字符串或字符串元素数组的字段。一个集合只能有一个文本搜索索引，但该索引可以覆盖多个字段。MongoDB 虽然支持全文索引，但是性能低下，暂时不建议使用。</li>
<li><strong>地理位置索引：</strong> 基于经纬度的索引，适合 2D 和 3D 的位置查询。</li>
<li><strong>唯一索引</strong>：确保索引字段不会存储重复值。如果集合已经存在了违反索引的唯一约束的文档，则后台创建唯一索引会失败。</li>
<li><strong>TTL 索引</strong>：TTL 索引提供了一个过期机制，允许为每一个文档设置一个过期时间，当一个文档达到预设的过期时间之后就会被删除。</li>
<li>......</li>
</ul>
<h3> 复合索引中字段的顺序有影响吗？</h3>
<p>复合索引中字段的顺序非常重要，例如下图中的复合索引由<code>{userid:1, score:-1}</code>组成，则该复合索引首先按照<code>userid</code>升序排序；然后再每个<code>userid</code>的值内，再按照<code>score</code>降序排序。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/mongodb-composite-index.png" alt="复合索引" tabindex="0"><figcaption>复合索引</figcaption></figure>
<p>在复合索引中，按照何种方式排序，决定了该索引在查询中是否能被应用到。</p>
<p>走复合索引的排序：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不走复合索引的排序：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过 explain 进行分析：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 复合索引遵循左前缀原则吗？</h3>
<p><strong>MongoDB 的复合索引遵循左前缀原则</strong>：拥有多个键的索引，可以同时得到所有这些键的前缀组成的索引，但不包括除左前缀之外的其他子集。比如说，有一个类似 <code>{a: 1, b: 1, c: 1, ..., z: 1}</code> 这样的索引，那么实际上也等于有了 <code>{a: 1}</code>、<code>{a: 1, b: 1}</code>、<code>{a: 1, b: 1, c: 1}</code> 等一系列索引，但是不会有 <code>{b: 1}</code> 这样的非左前缀的索引。</p>
<h3> 什么是 TTL 索引？</h3>
<p>TTL 索引提供了一个过期机制，允许为每一个文档设置一个过期时间 <code>expireAfterSeconds</code> ，当一个文档达到预设的过期时间之后就会被删除。TTL 索引除了有 <code>expireAfterSeconds</code> 属性外，和普通索引一样。</p>
<p>数据过期对于某些类型的信息很有用，比如机器生成的事件数据、日志和会话信息，这些信息只需要在数据库中保存有限的时间。</p>
<p><strong>TTL 索引运行原理</strong>：</p>
<ul>
<li>MongoDB 会开启一个后台线程读取该 TTL 索引的值来判断文档是否过期，但不会保证已过期的数据会立马被删除，因后台线程每 60 秒触发一次删除任务，且如果删除的数据量较大，会存在上一次的删除未完成，而下一次的任务已经开启的情况，导致过期的数据也会出现超过了数据保留时间 60 秒以上的现象。</li>
<li>对于副本集而言，TTL 索引的后台进程只会在 Primary 节点开启，在从节点会始终处于空闲状态，从节点的数据删除是由主库删除后产生的 oplog 来做同步。</li>
</ul>
<p><strong>TTL 索引限制</strong>：</p>
<ul>
<li>TTL 索引是单字段索引。复合索引不支持 TTL</li>
<li><code>_id</code>字段不支持 TTL 索引。</li>
<li>无法在上限集合(Capped Collection)上创建 TTL 索引，因为 MongoDB 无法从上限集合中删除文档。</li>
<li>如果某个字段已经存在非 TTL 索引，那么在该字段上无法再创建 TTL 索引。</li>
</ul>
<h3> 什么是覆盖索引查询？</h3>
<p>根据官方文档介绍，覆盖查询是以下的查询：</p>
<ul>
<li>所有的查询字段是索引的一部分。</li>
<li>结果中返回的所有字段都在同一索引中。</li>
<li>查询中没有字段等于<code>null</code>。</li>
</ul>
<p>由于所有出现在查询中的字段是索引的一部分， MongoDB 无需在整个数据文档中检索匹配查询条件和返回使用相同索引的查询结果。因为索引存在于内存中，从索引中获取数据比通过扫描文档读取数据要快得多。</p>
<p>举个例子：我们有如下 <code>users</code> 集合:</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 <code>users</code> 集合中创建联合索引，字段为 <code>gender</code> 和 <code>user_name</code> :</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，该索引会覆盖以下查询：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了让指定的索引覆盖查询，必须显式地指定 <code>_id: 0</code> 来从结果中排除 <code>_id</code> 字段，因为索引不包括 <code>_id</code> 字段。</p>
<h2> MongoDB 高可用</h2>
<h3> 复制集群</h3>
<h4> 什么是复制集群？</h4>
<p>MongoDB 的复制集群又称为副本集群，是一组维护相同数据集合的 mongod 进程。</p>
<p>客户端连接到整个 Mongodb 复制集群，主节点机负责整个复制集群的写，从节点可以进行读操作，但默认还是主节点负责整个复制集群的读。主节点发生故障时，自动从从节点中选举出一个新的主节点，确保集群的正常使用，这对于客户端来说是无感知的。</p>
<p>通常来说，一个复制集群包含 1 个主节点（Primary），多个从节点（Secondary）以及零个或 1 个仲裁节点（Arbiter）。</p>
<ul>
<li><strong>主节点</strong>：整个集群的写操作入口，接收所有的写操作，并将集合所有的变化记录到操作日志中，即 oplog。主节点挂掉之后会自动选出新的主节点。</li>
<li><strong>从节点</strong>：从主节点同步数据，在主节点挂掉之后选举新节点。不过，从节点可以配置成 0 优先级，阻止它在选举中成为主节点。</li>
<li><strong>仲裁节点</strong>：这个是为了节约资源或者多机房容灾用，只负责主节点选举时投票不存数据，保证能有节点获得多数赞成票。</li>
</ul>
<p>下图是一个典型的三成员副本集群：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/replica-set-read-write-operations-primary.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>主节点与备节点之间是通过 <strong>oplog（操作日志）</strong> 来同步数据的。oplog 是 local 库下的一个特殊的 <strong>上限集合(Capped Collection)</strong> ，用来保存写操作所产生的增量日志，类似于 MySQL 中 的 Binlog。</p>
<blockquote>
<p>上限集合类似于定长的循环队列，数据顺序追加到集合的尾部，当集合空间达到上限时，它会覆盖集合中最旧的文档。上限集合的数据将会被顺序写入到磁盘的固定空间内，所以，I/O 速度非常快，如果不建立索引，性能更好。</p>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/replica-set-primary-with-two-secondaries.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>当主节点上的一个写操作完成后，会向 oplog 集合写入一条对应的日志，而从节点则通过这个 oplog 不断拉取到新的日志，在本地进行回放以达到数据同步的目的。</p>
<p>副本集最多有一个主节点。 如果当前主节点不可用，一个选举会抉择出新的主节点。MongoDB 的节点选举规则能够保证在 Primary 挂掉之后选取的新节点一定是集群中数据最全的一个。</p>
<h4> 为什么要用复制集群？</h4>
<ul>
<li><strong>实现 failover</strong>：提供自动故障恢复的功能，主节点发生故障时，自动从从节点中选举出一个新的主节点，确保集群的正常使用，这对于客户端来说是无感知的。</li>
<li><strong>实现读写分离</strong>：我们可以设置从节点上可以读取数据，主节点负责写入数据，这样的话就实现了读写分离，减轻了主节点读写压力过大的问题。MongoDB 4.0 之前版本如果主库压力不大,不建议读写分离，因为写会阻塞读，除非业务对响应时间不是非常关注以及读取历史数据接受一定时间延迟。</li>
</ul>
<h3> 分片集群</h3>
<h4> 什么是分片集群？</h4>
<p>分片集群是 MongoDB 的分布式版本，相较副本集，分片集群数据被均衡的分布在不同分片中， 不仅大幅提升了整个集群的数据容量上限，也将读写的压力分散到不同分片，以解决副本集性能瓶颈的难题。</p>
<p>MongoDB 的分片集群由如下三个部分组成（下图来源于<a href="https://www.mongodb.com/docs/manual/sharding/" target="_blank" rel="noopener noreferrer">官方文档对分片集群的介绍</a>）：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/sharded-cluster-production-architecture.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<ul>
<li><strong>Config Servers</strong>：配置服务器，本质上是一个 MongoDB 的副本集，负责存储集群的各种元数据和配置，如分片地址、Chunks 等</li>
<li><strong>Mongos</strong>：路由服务，不存具体数据，从 Config 获取集群配置讲请求转发到特定的分片，并且整合分片结果返回给客户端。</li>
<li><strong>Shard</strong>：每个分片是整体数据的一部分子集，从 MongoDB3.6 版本开始，每个 Shard 必须部署为副本集（replica set）架构</li>
</ul>
<h4> 为什么要用分片集群？</h4>
<p>随着系统数据量以及吞吐量的增长，常见的解决办法有两种：垂直扩展和水平扩展。</p>
<p>垂直扩展通过增加单个服务器的能力来实现，比如磁盘空间、内存容量、CPU 数量等；水平扩展则通过将数据存储到多个服务器上来实现，根据需要添加额外的服务器以增加容量。</p>
<p>类似于 Redis Cluster，MongoDB 也可以通过分片实现 <strong>水平扩展</strong> 。水平扩展这种方式更灵活，可以满足更大数据量的存储需求，支持更高吞吐量。并且，水平扩展所需的整体成本更低，仅仅需要相对较低配置的单机服务器即可，代价是增加了部署的基础设施和维护的复杂性。</p>
<p>也就是说当你遇到如下问题时，可以使用分片集群解决：</p>
<ul>
<li>存储容量受单机限制，即磁盘资源遭遇瓶颈。</li>
<li>读写能力受单机限制，可能是 CPU、内存或者网卡等资源遭遇瓶颈，导致读写能力无法扩展。</li>
</ul>
<h4> 什么是分片键？</h4>
<p><strong>分片键（Shard Key）</strong> 是数据分区的前提， 从而实现数据分发到不同服务器上，减轻服务器的负担。也就是说，分片键决定了集合内的文档如何在集群的多个分片间的分布状况。</p>
<p>分片键就是文档里面的一个字段，但是这个字段不是普通的字段，有一定的要求：</p>
<ul>
<li>它必须在所有文档中都出现。</li>
<li>它必须是集合的一个索引，可以是单索引或复合索引的前缀索引，不能是多索引、文本索引或地理空间位置索引。</li>
<li>MongoDB 4.2 之前的版本，文档的分片键字段值不可变。MongoDB 4.2 版本开始，除非分片键字段是不可变的 <code>_id</code> 字段，否则您可以更新文档的分片键值。MongoDB 5.0 版本开始，实现了实时重新分片（live resharding），可以实现分片键的完全重新选择。</li>
<li>它的大小不能超过 512 字节。</li>
</ul>
<h4> 如何选择分片键？</h4>
<p>选择合适的片键对 sharding 效率影响很大，主要基于如下四个因素（摘自<a href="https://cloud.tencent.com/document/product/240/44611" target="_blank" rel="noopener noreferrer">分片集群使用注意事项 - - 腾讯云文档</a>）：</p>
<ul>
<li><strong>取值基数</strong> 取值基数建议尽可能大，如果用小基数的片键，因为备选值有限，那么块的总数量就有限，随着数据增多，块的大小会越来越大，导致水平扩展时移动块会非常困难。 例如：选择年龄做一个基数，范围最多只有 100 个，随着数据量增多，同一个值分布过多时，导致 chunck 的增长超出 chuncksize 的范围，引起 jumbo chunk，从而无法迁移，导致数据分布不均匀，性能瓶颈。</li>
<li><strong>取值分布</strong> 取值分布建议尽量均匀，分布不均匀的片键会造成某些块的数据量非常大，同样有上面数据分布不均匀，性能瓶颈的问题。</li>
<li><strong>查询带分片</strong> 查询时建议带上分片，使用分片键进行条件查询时，mongos 可以直接定位到具体分片，否则 mongos 需要将查询分发到所有分片，再等待响应返回。</li>
<li><strong>避免单调递增或递减</strong> 单调递增的 sharding key，数据文件挪动小，但写入会集中，导致最后一篇的数据量持续增大，不断发生迁移，递减同理。</li>
</ul>
<p>综上，在选择片键时要考虑以上 4 个条件，尽可能满足更多的条件，才能降低 MoveChunks 对性能的影响，从而获得最优的性能体验。</p>
<h4> 分片策略有哪些？</h4>
<p>MongoDB 支持两种分片算法来满足不同的查询需求（摘自<a href="https://help.aliyun.com/document_detail/64561.html?spm=a2c4g.11186623.0.0.3121565eQhUGGB#h2--shard-key-3" target="_blank" rel="noopener noreferrer">MongoDB 分片集群介绍 - 阿里云文档</a>）：</p>
<p><strong>1、基于范围的分片</strong>：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/example-of-scope-based-sharding.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>MongoDB 按照分片键（Shard Key）的值的范围将数据拆分为不同的块（Chunk），每个块包含了一段范围内的数据。当分片键的基数大、频率低且值非单调变更时，范围分片更高效。</p>
<ul>
<li>优点：Mongos 可以快速定位请求需要的数据，并将请求转发到相应的 Shard 节点中。</li>
<li>缺点：可能导致数据在 Shard 节点上分布不均衡，容易造成读写热点，且不具备写分散性。</li>
<li>适用场景：分片键的值不是单调递增或单调递减、分片键的值基数大且重复的频率低、需要范围查询等业务场景。</li>
</ul>
<p><strong>2、基于 Hash 值的分片</strong></p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/example-of-hash-based-sharding.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>MongoDB 计算单个字段的哈希值作为索引值，并以哈希值的范围将数据拆分为不同的块（Chunk）。</p>
<ul>
<li>优点：可以将数据更加均衡地分布在各 Shard 节点中，具备写分散性。</li>
<li>缺点：不适合进行范围查询，进行范围查询时，需要将读请求分发到所有的 Shard 节点。</li>
<li>适用场景：分片键的值存在单调递增或递减、片键的值基数大且重复的频率低、需要写入的数据随机分发、数据读取随机性较大等业务场景。</li>
</ul>
<p>除了上述两种分片策略，您还可以配置 <strong>复合片键</strong> ，例如由一个低基数的键和一个单调递增的键组成。</p>
<h4> 分片数据如何存储？</h4>
<p><strong>Chunk（块）</strong> 是 MongoDB 分片集群的一个核心概念，其本质上就是由一组 Document 组成的逻辑数据单元。每个 Chunk 包含一定范围片键的数据，互不相交且并集为全部数据，即离散数学中<strong>划分</strong>的概念。</p>
<p>分片集群不会记录每条数据在哪个分片上，而是记录 Chunk 在哪个分片上一级这个 Chunk 包含哪些数据。</p>
<p>默认情况下，一个 Chunk 的最大值默认为 64MB（可调整，取值范围为 1~1024 MB。如无特殊需求，建议保持默认值），进行数据插入、更新、删除时，如果此时 Mongos 感知到了目标 Chunk 的大小或者其中的数据量超过上限，则会触发 <strong>Chunk 分裂</strong>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/chunk-splitting-shard-a.png" alt="Chunk 分裂" tabindex="0"><figcaption>Chunk 分裂</figcaption></figure>
<p>数据的增长会让 Chunk 分裂得越来越多。这个时候，各个分片上的 Chunk 数量可能会不平衡。Mongos 中的 <strong>均衡器(Balancer)</strong> 组件就会执行自动平衡，尝试使各个 Shard 上 Chunk 的数量保持均衡，这个过程就是 <strong>再平衡（Rebalance）</strong>。默认情况下，数据库和集合的 Rebalance 是开启的。</p>
<p>如下图所示，随着数据插入，导致 Chunk 分裂，让 AB 两个分片有 3 个 Chunk，C 分片只有一个，这个时候就会把 B 分配的迁移一个到 C 分片实现集群数据均衡。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/mongo-reblance-three-shards.png" alt="Chunk 迁移" tabindex="0"><figcaption>Chunk 迁移</figcaption></figure>
<blockquote>
<p>Balancer 是 MongoDB 的一个运行在 Config Server 的 Primary 节点上(自 MongoDB 3.4 版本起)的后台进程，它监控每个分片上 Chunk 数量，并在某个分片上 Chunk 数量达到阈值进行迁移。</p>
</blockquote>
<p>Chunk 只会分裂，不会合并，即使 chunkSize 的值变大。</p>
<p>Rebalance 操作是比较耗费系统资源的，我们可以通过在业务低峰期执行、预分片或者设置 Rebalance 时间窗等方式来减少其对 MongoDB 正常使用所带来的影响。</p>
<h4> Chunk 迁移原理是什么？</h4>
<p>关于 Chunk 迁移原理的详细介绍，推荐阅读 MongoDB 中文社区的<a href="https://mongoing.com/archives/77479" target="_blank" rel="noopener noreferrer">一文读懂 MongoDB chunk 迁移</a>这篇文章。</p>
<h2> 学习资料推荐</h2>
<ul>
<li><a href="https://docs.mongoing.com/" target="_blank" rel="noopener noreferrer">MongoDB 中文手册|官方文档中文版</a>（推荐）：基于 4.2 版本，不断与官方最新版保持同步。</li>
<li><a href="https://mongoing.com/archives/docs/mongodb%e5%88%9d%e5%ad%a6%e8%80%85%e6%95%99%e7%a8%8b/mongodb%e5%a6%82%e4%bd%95%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93%e5%92%8c%e9%9b%86%e5%90%88" target="_blank" rel="noopener noreferrer">MongoDB 初学者教程——7 天学习 MongoDB</a>：快速入门。</li>
<li><a href="https://www.cnblogs.com/dxflqm/p/16643981.html" target="_blank" rel="noopener noreferrer">SpringBoot 整合 MongoDB 实战 - 2022</a>：很不错的一篇 MongoDB 入门文章，主要围绕 MongoDB 的 Java 客户端使用进行基本的增删改查操作介绍。</li>
</ul>
<h2> 参考</h2>
<ul>
<li>MongoDB 官方文档（主要参考资料，以官方文档为准）：<a href="https://www.mongodb.com/docs/manual/" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/docs/manual/</a></li>
<li>《MongoDB 权威指南》</li>
<li>Indexes - MongoDB 官方文档：<a href="https://www.mongodb.com/docs/manual/indexes/" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/docs/manual/indexes/</a></li>
<li>MongoDB - 索引知识 - 程序员翔仔 - 2022：<a href="https://fatedeity.cn/posts/database/mongodb-index-knowledge.html" target="_blank" rel="noopener noreferrer">https://fatedeity.cn/posts/database/mongodb-index-knowledge.html</a></li>
<li>MongoDB - 索引: <a href="https://www.cnblogs.com/Neeo/articles/14325130.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/Neeo/articles/14325130.html</a></li>
<li>Sharding - MongoDB 官方文档：<a href="https://www.mongodb.com/docs/manual/sharding/" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/docs/manual/sharding/</a></li>
<li>MongoDB 分片集群介绍 - 阿里云文档：<a href="https://help.aliyun.com/document_detail/64561.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/64561.html</a></li>
<li>分片集群使用注意事项 - - 腾讯云文档：<a href="https://cloud.tencent.com/document/product/240/44611" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/document/product/240/44611</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/database/mongodb/mongodb-composite-index.png" type="image/png"/>
    </item>
    <item>
      <title>应用层常见协议总结（应用层）</title>
      <link>https://javaguide.cn/cs-basics/network/application-layer-protocol.html</link>
      <guid>https://javaguide.cn/cs-basics/network/application-layer-protocol.html</guid>
      <source url="https://javaguide.cn/rss.xml">应用层常见协议总结（应用层）</source>
      <description>HTTP:超文本传输协议 超文本传输协议（HTTP，HyperText Transfer Protocol) 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。 HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP Request（请求），服务器响应请求并返回 HTTP Response（响应），整个过程如下图所示。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> HTTP:超文本传输协议</h2>
<p><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong> 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</p>
<p>HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP Request（请求），服务器响应请求并返回 HTTP Response（响应），整个过程如下图所示。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/450px-HTTP-Header.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>HTTP 协议基于 TCP 协议，发送 HTTP 请求之前首先要建立 TCP 连接也就是要经历 3 次握手。目前使用的 HTTP 协议大部分都是 1.1。在 1.1 的协议里面，默认是开启了 Keep-Alive 的，这样的话建立的连接就可以在多次请求中被复用了。</p>
<p>另外， HTTP 协议是”无状态”的协议，它无法记录客户端用户的状态，一般我们都是通过 Session 来记录客户端用户的状态。</p>
<h2> SMTP:简单邮件传输(发送)协议</h2>
<p><strong>简单邮件传输(发送)协议（SMTP，Simple Mail Transfer Protocol）</strong> 基于 TCP 协议，是一种用于发送电子邮件的协议</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/what-is-smtp.png" alt="SMTP 协议" tabindex="0"><figcaption>SMTP 协议</figcaption></figure>
<p>注意 ⚠️：<strong>接受邮件的协议不是 SMTP 而是 POP3 协议。</strong></p>
<p>SMTP 协议这块涉及的内容比较多，下面这两个问题比较重要：</p>
<ol>
<li>电子邮件的发送过程</li>
<li>如何判断邮箱是真正存在的？</li>
</ol>
<p><strong>电子邮件的发送过程？</strong></p>
<p>比如我的邮箱是“dabai@cszhinan.com”，我要向“xiaoma@qq.com”发送邮件，整个过程可以简单分为下面几步：</p>
<ol>
<li>通过 <strong>SMTP</strong> 协议，我将我写好的邮件交给 163 邮箱服务器（邮局）。</li>
<li>163 邮箱服务器发现我发送的邮箱是 qq 邮箱，然后它使用 SMTP 协议将我的邮件转发到 qq 邮箱服务器。</li>
<li>qq 邮箱服务器接收邮件之后就通知邮箱为“xiaoma@qq.com”的用户来收邮件，然后用户就通过 <strong>POP3/IMAP</strong> 协议将邮件取出。</li>
</ol>
<p><strong>如何判断邮箱是真正存在的？</strong></p>
<p>很多场景(比如邮件营销)下面我们需要判断我们要发送的邮箱地址是否真的存在，这个时候我们可以利用 SMTP 协议来检测：</p>
<ol>
<li>查找邮箱域名对应的 SMTP 服务器地址</li>
<li>尝试与服务器建立连接</li>
<li>连接成功后尝试向需要验证的邮箱发送邮件</li>
<li>根据返回结果判定邮箱地址的真实性</li>
</ol>
<p>推荐几个在线邮箱是否有效检测工具：</p>
<ol>
<li>https://verify-email.org/</li>
<li>http://tool.chacuo.net/mailverify</li>
<li>https://www.emailcamel.com/</li>
</ol>
<h2> POP3/IMAP:邮件接收的协议</h2>
<p>这两个协议没必要多做阐述，只需要了解 <strong>POP3 和 IMAP 两者都是负责邮件接收的协议</strong> 即可（二者也是基于 TCP 协议）。另外，需要注意不要将这两者和 SMTP 协议搞混淆了。<strong>SMTP 协议只负责邮件的发送，真正负责接收的协议是 POP3/IMAP。</strong></p>
<p>IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</p>
<h2> FTP:文件传输协议</h2>
<p><strong>FTP 协议</strong> 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。</p>
<p>FTP 是基于客户—服务器（C/S）模型而设计的，在客户端与 FTP 服务器之间建立两个连接。如果我们要基于 FTP 协议开发一个文件传输的软件的话，首先需要搞清楚 FTP 的原理。关于 FTP 的原理，很多书籍上已经描述的非常详细了：</p>
<blockquote>
<p>FTP 的独特的优势同时也是与其它客户服务器程序最大的不同点就在于它在两台通信的主机之间使用了两条 TCP 连接（其它客户服务器应用程序一般只有一条 TCP 连接）：</p>
<ol>
<li>控制连接：用于传送控制信息（命令和响应）</li>
<li>数据连接：用于数据传送；</li>
</ol>
<p>这种将命令和数据分开传送的思想大大提高了 FTP 的效率。</p>
</blockquote>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/ftp.png" alt="FTP工作过程" tabindex="0"><figcaption>FTP工作过程</figcaption></figure>
<p>注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。因此，FTP 传输的文件可能会被窃听或篡改。建议在传输敏感数据时使用更安全的协议，如 SFTP（一种基于 SSH 协议的安全文件传输协议，用于在网络上安全地传输文件）。</p>
<h2> Telnet:远程登陆协议</h2>
<p><strong>Telnet 协议</strong> 基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/Telnet_is_vulnerable_to_eavesdropping-2.png" alt="Telnet:远程登陆协议" tabindex="0"><figcaption>Telnet:远程登陆协议</figcaption></figure>
<h2> SSH:安全的网络传输协议</h2>
<p><strong>SSH（Secure Shell）</strong> 基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务。</p>
<p>SSH 的经典用途是登录到远程电脑中执行命令。除此之外，SSH 也支持隧道协议、端口映射和 X11 连接。借助 SFTP 或 SCP 协议，SSH 还可以传输文件。</p>
<p>SSH 使用客户端-服务器模型，默认端口是 22。SSH 是一个守护进程，负责实时监听客户端请求，并进行处理。大多数现代操作系统都提供了 SSH。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/ssh-client-server.png" alt="SSH:安全的网络传输协议" tabindex="0"><figcaption>SSH:安全的网络传输协议</figcaption></figure>
<h2> RTP:实时传输协议</h2>
<p>RTP（Real-time Transport Protocol，实时传输协议）通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</p>
<p>RTP 协议分为两种子协议：</p>
<ul>
<li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：传输具有实时特性的数据。</li>
<li><strong>RTCP（RTP Control Protocol，RTP 控制协议）</strong>：提供实时传输过程中的统计信息（如网络延迟、丢包率等），WebRTC 正是根据这些信息处理丢包</li>
</ul>
<h2> DNS:域名系统</h2>
<p>DNS（Domain Name System，域名管理系统）基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png" alt="DNS:域名系统" tabindex="0"><figcaption>DNS:域名系统</figcaption></figure>
<h2> 参考</h2>
<ul>
<li>《计算机网络自顶向下方法》（第七版）</li>
<li>RTP 协议介绍:https://mthli.xyz/rtp-introduction/</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/450px-HTTP-Header.png" type="image/png"/>
    </item>
    <item>
      <title>ARP 协议详解(网络层)</title>
      <link>https://javaguide.cn/cs-basics/network/arp.html</link>
      <guid>https://javaguide.cn/cs-basics/network/arp.html</guid>
      <source url="https://javaguide.cn/rss.xml">ARP 协议详解(网络层)</source>
      <description>每当我们学习一个新的网络协议的时候，都要把他结合到 OSI 七层模型中，或者是 TCP/IP 协议栈中来学习，一是要学习该协议在整个网络协议栈中的位置，二是要学习该协议解决了什么问题，地位如何？三是要学习该协议的工作原理，以及一些更深入的细节。 ARP 协议，可以说是在协议栈中属于一个偏底层的、非常重要的、又非常简单的通信协议。 开始阅读这篇文章之前，你可以先看看下面几个问题： ARP 协议在协议栈中的位置？ ARP 协议在协议栈中的位置非常重要，在理解了它的工作原理之后，也很难说它到底是网络层协议，还是链路层协议，因为它恰恰串联起了网络层和链路层。国外的大部分教程通常将 ARP 协议放在网络层。 ARP 协议解决了什么问题，地位如何？ ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。 ARP 工作原理？ 只希望大家记住几个关键词：ARP 表、广播问询、单播响应。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>每当我们学习一个新的网络协议的时候，都要把他结合到 OSI 七层模型中，或者是 TCP/IP 协议栈中来学习，一是要学习该协议在整个网络协议栈中的位置，二是要学习该协议解决了什么问题，地位如何？三是要学习该协议的工作原理，以及一些更深入的细节。</p>
<p><strong>ARP 协议</strong>，可以说是在协议栈中属于一个<strong>偏底层的、非常重要的、又非常简单的</strong>通信协议。</p>
<p>开始阅读这篇文章之前，你可以先看看下面几个问题：</p>
<ol>
<li><strong>ARP 协议在协议栈中的位置？</strong> ARP 协议在协议栈中的位置非常重要，在理解了它的工作原理之后，也很难说它到底是网络层协议，还是链路层协议，因为它恰恰串联起了网络层和链路层。国外的大部分教程通常将 ARP 协议放在网络层。</li>
<li><strong>ARP 协议解决了什么问题，地位如何？</strong> ARP 协议，全称 <strong>地址解析协议（Address Resolution Protocol）</strong>，它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li>
<li><strong>ARP 工作原理？</strong> 只希望大家记住几个关键词：<strong>ARP 表、广播问询、单播响应</strong>。</li>
</ol>
<h2> MAC 地址</h2>
<p>在介绍 ARP 协议之前，有必要介绍一下 MAC 地址。</p>
<p>MAC 地址的全称是 <strong>媒体访问控制地址（Media Access Control Address）</strong>。如果说，互联网中每一个资源都由 IP 地址唯一标识（IP 协议内容），那么一切网络设备都由 MAC 地址唯一标识。</p>
<figure><figcaption>路由器的背面就会注明 MAC 位址</figcaption></figure>
<p>可以理解为，MAC 地址是一个网络设备真正的身份证号，IP 地址只是一种不重复的定位方式（比如说住在某省某市某街道的张三，这种逻辑定位是 IP 地址，他的身份证号才是他的 MAC 地址），也可以理解为 MAC 地址是身份证号，IP 地址是邮政地址。MAC 地址也有一些别称，如 LAN 地址、物理地址、以太网地址等。</p>
<blockquote>
<p>还有一点要知道的是，不仅仅是网络资源才有 IP 地址，网络设备也有 IP 地址，比如路由器。但从结构上说，路由器等网络设备的作用是组成一个网络，而且通常是内网，所以它们使用的 IP 地址通常是内网 IP，内网的设备在与内网以外的设备进行通信时，需要用到 NAT 协议。</p>
</blockquote>
<p>MAC 地址的长度为 6 字节（48 比特），地址空间大小有 280 万亿之多（$2^{48}$），MAC 地址由 IEEE 统一管理与分配，理论上，一个网络设备中的网卡上的 MAC 地址是永久的。不同的网卡生产商从 IEEE 那里购买自己的 MAC 地址空间（MAC 的前 24 比特），也就是前 24 比特由 IEEE 统一管理，保证不会重复。而后 24 比特，由各家生产商自己管理，同样保证生产的两块网卡的 MAC 地址不会重复。</p>
<p>MAC 地址具有可携带性、永久性，身份证号永久地标识一个人的身份，不论他到哪里都不会改变。而 IP 地址不具有这些性质，当一台设备更换了网络，它的 IP 地址也就可能发生改变，也就是它在互联网中的定位发生了变化。</p>
<p>最后，记住，MAC 地址有一个特殊地址：FF-FF-FF-FF-FF-FF（全 1 地址），该地址表示广播地址。</p>
<h2> ARP 协议工作原理</h2>
<p>ARP 协议工作时有一个大前提，那就是 <strong>ARP 表</strong>。</p>
<p>在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 <code>&lt;IP, MAC, TTL&gt;</code> 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。</p>
<p>ARP 的工作原理将分两种场景讨论：</p>
<ol>
<li><strong>同一局域网内的 MAC 寻址</strong>；</li>
<li><strong>从一个局域网到另一个局域网中的网络设备的寻址</strong>。</li>
</ol>
<h3> 同一局域网内的 MAC 寻址</h3>
<p>假设当前有如下场景：IP 地址为<code>137.196.7.23</code>的主机 A，想要给同一局域网内的 IP 地址为<code>137.196.7.14</code>主机 B，发送 IP 数据报文。</p>
<blockquote>
<p>再次强调，当主机发送 IP 数据报文时（网络层），仅知道目的地的 IP 地址，并不清楚目的地的 MAC 地址，而 ARP 协议就是解决这一问题的。</p>
</blockquote>
<p>为了达成这一目标，主机 A 将不得不通过 ARP 协议来获取主机 B 的 MAC 地址，并将 IP 报文封装成链路层帧，发送到下一跳上。在该局域网内，关于此将按照时间顺序，依次发生如下事件：</p>
<ol>
<li>
<p>主机 A 检索自己的 ARP 表，发现 ARP 表中并无主机 B 的 IP 地址对应的映射条目，也就无从知道主机 B 的 MAC 地址。</p>
</li>
<li>
<p>主机 A 将构造一个 ARP 查询分组，并将其广播到所在的局域网中。</p>
<p>ARP 分组是一种特殊报文，ARP 分组有两类，一种是查询分组，另一种是响应分组，它们具有相同的格式，均包含了发送和接收的 IP 地址、发送和接收的 MAC 地址。当然了，查询分组中，发送的 IP 地址，即为主机 A 的 IP 地址，接收的 IP 地址即为主机 B 的 IP 地址，发送的 MAC 地址也是主机 A 的 MAC 地址，但接收的 MAC 地址绝不会是主机 B 的 MAC 地址（因为这正是我们要问询的！），而是一个特殊值——<code>FF-FF-FF-FF-FF-FF</code>，之前说过，该 MAC 地址是广播地址，也就是说，查询分组将广播给该局域网内的所有设备。</p>
</li>
<li>
<p>主机 A 构造的查询分组将在该局域网内广播，理论上，每一个设备都会收到该分组，并检查查询分组的接收 IP 地址是否为自己的 IP 地址，如果是，说明查询分组已经到达了主机 B，否则，该查询分组对当前设备无效，丢弃之。</p>
</li>
<li>
<p>主机 B 收到了查询分组之后，验证是对自己的问询，接着构造一个 ARP 响应分组，该分组的目的地只有一个——主机 A，发送给主机 A。同时，主机 B 提取查询分组中的 IP 地址和 MAC 地址信息，在自己的 ARP 表中构造一条主机 A 的 IP-MAC 映射记录。</p>
<p>ARP 响应分组具有和 ARP 查询分组相同的构造，不同的是，发送和接受的 IP 地址恰恰相反，发送的 MAC 地址为发送者本身，目标 MAC 地址为查询分组的发送者，也就是说，ARP 响应分组只有一个目的地，而非广播。</p>
</li>
<li>
<p>主机 A 终将收到主机 B 的响应分组，提取出该分组中的 IP 地址和 MAC 地址后，构造映射信息，加入到自己的 ARP 表中。</p>
</li>
</ol>
<figure><figcaption></figcaption></figure>
<p>在整个过程中，有几点需要补充说明的是：</p>
<ol>
<li>主机 A 想要给主机 B 发送 IP 数据报，如果主机 B 的 IP-MAC 映射信息已经存在于主机 A 的 ARP 表中，那么主机 A 无需广播，只需提取 MAC 地址并构造链路层帧发送即可。</li>
<li>ARP 表中的映射信息是有生存周期的，典型值为 20 分钟。</li>
<li>目标主机接收到了问询主机构造的问询报文后，将先把问询主机的 IP-MAC 映射存进自己的 ARP 表中，这样才能获取到响应的目标 MAC 地址，顺利的发送响应分组。</li>
</ol>
<p>总结来说，ARP 协议是一个<strong>广播问询，单播响应</strong>协议。</p>
<h3> 不同局域网内的 MAC 寻址</h3>
<p>更复杂的情况是，发送主机 A 和接收主机 B 不在同一个子网中，假设一个一般场景，两台主机所在的子网由一台路由器联通。这里需要注意的是，一般情况下，我们说网络设备都有一个 IP 地址和一个 MAC 地址，这里说的网络设备，更严谨的说法应该是一个接口。路由器作为互联设备，具有多个接口，每个接口同样也应该具备不重复的 IP 地址和 MAC 地址。因此，在讨论 ARP 表时，路由器的多个接口都各自维护一个 ARP 表，而非一个路由器只维护一个 ARP 表。</p>
<p>接下来，回顾同一子网内的 MAC 寻址，如果主机 A 发送一个广播问询分组，那么 A 所在的子网内所有设备（接口）都将会捕获该分组，因为该分组的目的 IP 与发送主机A的IP在同一个子网中。但是当目的IP与A不在同一子网时，A所在子网内将不会有设备成功接收该分组。那么，主机 A 应该发送怎样的查询分组呢？整个过程按照时间顺序发生的事件如下：</p>
<ol>
<li>
<p>主机 A 查询 ARP 表，期望寻找到目标路由器的本子网接口的 MAC 地址。</p>
<p>目标路由器指的是，根据目的主机 B 的 IP 地址，分析出 B 所在的子网，能够把报文转发到 B 所在子网的那个路由器。</p>
</li>
<li>
<p>主机 A 未能找到目标路由器的本子网接口的 MAC 地址，将采用 ARP 协议，问询到该 MAC 地址，由于目标接口与主机 A 在同一个子网内，该过程与同一局域网内的 MAC 寻址相同。</p>
</li>
<li>
<p>主机 A 获取到目标接口的 MAC 地址，先构造 IP 数据报，其中源 IP 是 A 的 IP 地址，目的 IP 地址是 B 的 IP 地址，再构造链路层帧，其中源 MAC 地址是 A 的 MAC 地址，目的 MAC 地址是<strong>本子网内与路由器连接的接口的 MAC 地址</strong>。主机 A 将把这个链路层帧，以单播的方式，发送给目标接口。</p>
</li>
<li>
<p>目标接口接收到了主机 A 发过来的链路层帧，解析，根据目的 IP 地址，查询转发表，将该 IP 数据报转发到与主机 B 所在子网相连的接口上。</p>
<p>到此，该帧已经从主机 A 所在的子网，转移到了主机 B 所在的子网了。</p>
</li>
<li>
<p>路由器接口查询 ARP 表，期望寻找到主机 B 的 MAC 地址。</p>
</li>
<li>
<p>路由器接口如未能找到主机 B 的 MAC 地址，将采用 ARP 协议，广播问询，单播响应，获取到主机 B 的 MAC 地址。</p>
</li>
<li>
<p>路由器接口将对 IP 数据报重新封装成链路层帧，目标 MAC 地址为主机 B 的 MAC 地址，单播发送，直到目的地。</p>
</li>
</ol>
<figure><figcaption></figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>《计算机网络》（谢希仁）内容总结</title>
      <link>https://javaguide.cn/cs-basics/network/computer-network-xiexiren-summary.html</link>
      <guid>https://javaguide.cn/cs-basics/network/computer-network-xiexiren-summary.html</guid>
      <source url="https://javaguide.cn/rss.xml">《计算机网络》（谢希仁）内容总结</source>
      <description>本文是我在大二学习计算机网络期间整理， 大部分内容都来自于谢希仁老师的《计算机网络》第七版 这本书。为了内容更容易理解，我对之前的整理进行了一波重构，并配上了一些相关的示意图便于理解。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>本文是我在大二学习计算机网络期间整理， 大部分内容都来自于谢希仁老师的<a href="https://www.elias.ltd/usr/local/etc/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E7%AC%AC7%E7%89%88%EF%BC%89%E8%B0%A2%E5%B8%8C%E4%BB%81.pdf" target="_blank" rel="noopener noreferrer">《计算机网络》第七版 </a>这本书。为了内容更容易理解，我对之前的整理进行了一波重构，并配上了一些相关的示意图便于理解。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb5d8645cd55484ab0177f25a13e97db~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>相关问题：<a href="https://www.zhihu.com/question/327872966" target="_blank" rel="noopener noreferrer">如何评价谢希仁的计算机网络（第七版）？ - 知乎</a> 。</p>
<h2> 1. 计算机网络概述</h2>
<h3> 1.1. 基本术语</h3>
<ol>
<li><strong>结点 （node）</strong>：网络中的结点可以是计算机，集线器，交换机或路由器等。</li>
<li><strong>链路（link ）</strong> : 从一个结点到另一个结点的一段物理线路。中间没有任何其他交点。</li>
<li><strong>主机（host）</strong>：连接在因特网上的计算机。</li>
<li><strong>ISP（Internet Service Provider）</strong>：因特网服务提供者（提供商）。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e77e26123d404d438d0c5943e3c65893~tplv-k3u1fbpfcp-zoom-1.image" alt="ISP (Internet Service Provider) Definition" tabindex="0"><figcaption>ISP (Internet Service Provider) Definition</figcaption></figure>
<ol start="5">
<li><strong>IXP（Internet eXchange Point）</strong>：互联网交换点 IXP 的主要作用就是允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f9a6ddaa09441ceac11cb77f7a69d8f~tplv-k3u1fbpfcp-zoom-1.image" alt="IXP Traffic Levels During the Stratos Skydive — RIPE Labs" tabindex="0"><figcaption>IXP Traffic Levels During the Stratos Skydive — RIPE Labs</figcaption></figure>
<p style="text-align:center;font-size:13px;color:gray">https://labs.ripe.net/Members/fergalc/ixp-traffic-during-stratos-skydive</p>
<ol start="6">
<li><strong>RFC(Request For Comments)</strong>：意思是“请求评议”，包含了关于 Internet 几乎所有的重要的文字资料。</li>
<li><strong>广域网 WAN（Wide Area Network）</strong>：任务是通过长距离运送主机发送的数据。</li>
<li><strong>城域网 MAN（Metropolitan Area Network）</strong>：用来将多个局域网进行互连。</li>
<li><strong>局域网 LAN（Local Area Network）</strong>：学校或企业大多拥有多个互连的局域网。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb48d21b2e984a63a26250010d7adac4~tplv-k3u1fbpfcp-zoom-1.image" alt="MAN &amp; WMAN | Red de área metropolitana, Redes informaticas, Par trenzado" tabindex="0"><figcaption>MAN &amp; WMAN | Red de área metropolitana, Redes informaticas, Par trenzado</figcaption></figure>
<p style="text-align:center;font-size:13px;color:gray">http://conexionesmanwman.blogspot.com/</p>
<ol start="10">
<li><strong>个人区域网 PAN（Personal Area Network）</strong>：在个人工作的地方把属于个人使用的电子设备用无线技术连接起来的网络 。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54bd7b420388494fbe917e3c9c13f1a7~tplv-k3u1fbpfcp-zoom-1.image" alt="Advantages and disadvantages of personal area network (PAN) - IT Release" tabindex="0"><figcaption>Advantages and disadvantages of personal area network (PAN) - IT Release</figcaption></figure>
<p style="text-align:center;font-size:13px;color:gray">https://www.itrelease.com/2018/07/advantages-and-disadvantages-of-personal-area-network-pan/</p>
<ol start="12">
<li><strong>分组（packet ）</strong>：因特网中传送的数据单元。由首部 header 和数据段组成。分组又称为包，首部可称为包头。</li>
<li><strong>存储转发（store and forward ）</strong>：路由器收到一个分组，先检查分组是否正确，并过滤掉冲突包错误。确定包正确后，取出目的地址，通过查找表找到想要发送的输出端口地址，然后将该包发送出去。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/addb6b2211444a4da9e0ffc129dd444f~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<ol start="14">
<li><strong>带宽（bandwidth）</strong>：在计算机网络中，表示在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。常用来表示网络的通信线路所能传送数据的能力。单位是“比特每秒”，记为 b/s。</li>
<li><strong>吞吐量（throughput ）</strong>：表示在单位时间内通过某个网络（或信道、接口）的数据量。吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。吞吐量受网络的带宽或网络的额定速率的限制。</li>
</ol>
<h3> 1.2. 重要知识点总结</h3>
<ol>
<li><strong>计算机网络（简称网络）把许多计算机连接在一起，而互联网把许多网络连接在一起，是网络的网络。</strong></li>
<li>小写字母 i 开头的 internet（互联网）是通用名词，它泛指由多个计算机网络相互连接而成的网络。在这些网络之间的通信协议（即通信规则）可以是任意的。大写字母 I 开头的 Internet（互联网）是专用名词，它指全球最大的，开放的，由众多网络相互连接而成的特定的互联网，并采用 TCP/IP 协议作为通信规则，其前身为 ARPANET。Internet 的推荐译名为因特网，现在一般流行称为互联网。</li>
<li>路由器是实现分组交换的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。分组交换采用存储转发技术，表示把一个报文（要发送的整块数据）分为几个分组后再进行传送。在发送报文之前，先把较长的报文划分成为一个个更小的等长数据段。在每个数据端的前面加上一些由必要的控制信息组成的首部后，就构成了一个分组。分组又称为包。分组是在互联网中传送的数据单元，正是由于分组的头部包含了诸如目的地址和源地址等重要控制信息，每一个分组才能在互联网中独立的选择传输路径，并正确地交付到分组传输的终点。</li>
<li>互联网按工作方式可划分为边缘部分和核心部分。主机在网络的边缘部分，其作用是进行信息处理。由大量网络和连接这些网络的路由器组成核心部分，其作用是提供连通性和交换。</li>
<li>计算机通信是计算机中进程（即运行着的程序）之间的通信。计算机网络采用的通信方式是客户-服务器方式（C/S 方式）和对等连接方式（P2P 方式）。</li>
<li>客户和服务器都是指通信中所涉及的应用进程。客户是服务请求方，服务器是服务提供方。</li>
<li>按照作用范围的不同，计算机网络分为广域网 WAN，城域网 MAN，局域网 LAN，个人区域网 PAN。</li>
<li><strong>计算机网络最常用的性能指标是：速率，带宽，吞吐量，时延（发送时延，处理时延，排队时延），时延带宽积，往返时间和信道利用率。</strong></li>
<li>网络协议即协议，是为进行网络中的数据交换而建立的规则。计算机网络的各层以及其协议集合，称为网络的体系结构。</li>
<li><strong>五层体系结构由应用层，运输层，网络层（网际层），数据链路层，物理层组成。运输层最主要的协议是 TCP 和 UDP 协议，网络层最重要的协议是 IP 协议。</strong></li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acec0fa44041449b8088872dcd7c0b3a~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>下面的内容会介绍计算机网络的五层体系结构：<strong>物理层+数据链路层+网络层（网际层）+运输层+应用层</strong>。</p>
<h2> 2. 物理层（Physical Layer）</h2>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf1bfdd36e5f4bde94aea44bbe7a6f8a~tplv-k3u1fbpfcp-zoom-1.image" alt="物理层" tabindex="0"><figcaption>物理层</figcaption></figure>
<h3> 2.1. 基本术语</h3>
<ol>
<li><strong>数据（data）</strong> :运送消息的实体。</li>
<li><strong>信号（signal）</strong>：数据的电气的或电磁的表现。或者说信号是适合在传输介质上传输的对象。</li>
<li><strong>码元（ code）</strong>：在使用时间域（或简称为时域）的波形来表示数字信号时，代表不同离散数值的基本波形。</li>
<li><strong>单工（simplex ）</strong> : 只能有一个方向的通信而没有反方向的交互。</li>
<li><strong>半双工（half duplex ）</strong>：通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li>
<li><strong>全双工（full duplex）</strong> : 通信的双方可以同时发送和接收信息。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1f02095b7c34eafb3c255ee81f58c2a~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<ol start="7">
<li><strong>失真</strong>：失去真实性，主要是指接受到的信号和发送的信号不同，有磨损和衰减。影响失真程度的因素：1.码元传输速率 2.信号传输距离 3.噪声干扰 4.传输媒体质量</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f939342f543046459ffabdc476f7bca4~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<ol start="8">
<li><strong>奈氏准则</strong> : 在任何信道中，码元的传输的效率是有上限的，传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的判决（即识别）成为不可能。</li>
<li><strong>香农定理</strong>：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</li>
<li><strong>基带信号（baseband signal）</strong> : 来自信源的信号。指没有经过调制的数字信号或模拟信号。</li>
<li><strong>带通（频带）信号（bandpass signal）</strong>：把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道），这里调制过后的信号就是带通信号。</li>
<li><strong>调制（modulation ）</strong> : 对信号源的信息进行处理后加到载波信号上，使其变为适合在信道传输的形式的过程。</li>
<li><strong>信噪比（signal-to-noise ratio ）</strong> : 指信号的平均功率和噪声的平均功率之比，记为 S/N。信噪比（dB）=10*log10（S/N）。</li>
<li><strong>信道复用（channel multiplexing ）</strong>：指多个用户共享同一个信道。（并不一定是同时）。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d9bf7b3db324ae7a88fcedcbace45d8~tplv-k3u1fbpfcp-zoom-1.image" alt="信道复用技术" tabindex="0"><figcaption>信道复用技术</figcaption></figure>
<ol start="15">
<li><strong>比特率（bit rate ）</strong>：单位时间（每秒）内传送的比特数。</li>
<li><strong>波特率（baud rate）</strong>：单位时间载波调制状态改变的次数。针对数据信号对载波的调制速率。</li>
<li><strong>复用（multiplexing）</strong>：共享信道的方法。</li>
<li><strong>ADSL（Asymmetric Digital Subscriber Line ）</strong>：非对称数字用户线。</li>
<li><strong>光纤同轴混合网（HFC 网）</strong> :在目前覆盖范围很广的有线电视网的基础上开发的一种居民宽带接入网</li>
</ol>
<h3> 2.2. 重要知识点总结</h3>
<ol>
<li><strong>物理层的主要任务就是确定与传输媒体接口有关的一些特性，如机械特性，电气特性，功能特性，过程特性。</strong></li>
<li>一个数据通信系统可划分为三大部分，即源系统，传输系统，目的系统。源系统包括源点（或源站，信源）和发送器，目的系统包括接收器和终点。</li>
<li><strong>通信的目的是传送消息。如话音，文字，图像等都是消息，数据是运送消息的实体。信号则是数据的电气或电磁的表现。</strong></li>
<li>根据信号中代表消息的参数的取值方式不同，信号可分为模拟信号（或连续信号）和数字信号（或离散信号）。在使用时间域（简称时域）的波形表示数字信号时，代表不同离散数值的基本波形称为码元。</li>
<li>根据双方信息交互的方式，通信可划分为单向通信（或单工通信），双向交替通信（或半双工通信），双向同时通信（全双工通信）。</li>
<li>来自信源的信号称为基带信号。信号要在信道上传输就要经过调制。调制有基带调制和带通调制之分。最基本的带通调制方法有调幅，调频和调相。还有更复杂的调制方法，如正交振幅调制。</li>
<li>要提高数据在信道上的传递速率，可以使用更好的传输媒体，或使用先进的调制技术。但数据传输速率不可能任意被提高。</li>
<li>传输媒体可分为两大类，即导引型传输媒体（双绞线，同轴电缆，光纤）和非导引型传输媒体（无线，红外，大气激光）。</li>
<li>为了有效利用光纤资源，在光纤干线和用户之间广泛使用无源光网络 PON。无源光网络无需配备电源，其长期运营成本和管理成本都很低。最流行的无源光网络是以太网无源光网络 EPON 和吉比特无源光网络 GPON。</li>
</ol>
<h3> 2.3. 补充</h3>
<h4> 2.3.1. 物理层主要做啥？</h4>
<p>物理层主要做的事情就是 <strong>透明地传送比特流</strong>。也可以将物理层的主要任务描述为确定与传输媒体的接口的一些特性，即：机械特性（接口所用接线器的一些物理属性如形状和尺寸），电气特性（接口电缆的各条线上出现的电压的范围），功能特性（某条线上出现的某一电平的电压的意义），过程特性（对于不同功能的各种可能事件的出现顺序）。</p>
<p><strong>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。</strong> 现有的计算机网络中的硬件设备和传输媒体的种类非常繁多，而且通信手段也有许多不同的方式。物理层的作用正是尽可能地屏蔽掉这些传输媒体和通信手段的差异，使物理层上面的数据链路层感觉不到这些差异，这样就可以使数据链路层只考虑完成本层的协议和服务，而不必考虑网络的具体传输媒体和通信手段是什么。</p>
<h4> 2.3.2. 几种常用的信道复用技术</h4>
<ol>
<li><strong>频分复用(FDM)</strong>：所有用户在同样的时间占用不同的带宽资源。</li>
<li><strong>时分复用（TDM）</strong>：所有用户在不同的时间占用同样的频带宽度（分时不分频）。</li>
<li><strong>统计时分复用 (Statistic TDM)</strong>：改进的时分复用，能够明显提高信道的利用率。</li>
<li><strong>码分复用(CDM)</strong>：用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰。这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li>
<li><strong>波分复用( WDM)</strong>：波分复用就是光的频分复用。</li>
</ol>
<h4> 2.3.3. 几种常用的宽带接入技术，主要是 ADSL 和 FTTx</h4>
<p>用户到互联网的宽带接入方法有非对称数字用户线 ADSL（用数字技术对现有的模拟电话线进行改造，而不需要重新布线。ADSL 的快速版本是甚高速数字用户线 VDSL。），光纤同轴混合网 HFC（是在目前覆盖范围很广的有线电视网的基础上开发的一种居民宽带接入网）和 FTTx（即光纤到······）。</p>
<h2> 3. 数据链路层（Data Link Layer）</h2>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83ec6dafc8c14ca185bafb656d86f0b2~tplv-k3u1fbpfcp-zoom-1.image" alt="数据链路层" tabindex="0"><figcaption>数据链路层</figcaption></figure>
<h3> 3.1. 基本术语</h3>
<ol>
<li><strong>链路（link）</strong>：一个结点到相邻结点的一段物理链路。</li>
<li><strong>数据链路（data link）</strong>：把实现控制数据运输的协议的硬件和软件加到链路上就构成了数据链路。</li>
<li><strong>循环冗余检验 CRC（Cyclic Redundancy Check）</strong>：为了保证数据传输的可靠性，CRC 是数据链路层广泛使用的一种检错技术。</li>
<li><strong>帧（frame）</strong>：一个数据链路层的传输单元，由一个数据链路层首部和其携带的封包所组成协议数据单元。</li>
<li><strong>MTU（Maximum Transfer Uint ）</strong>：最大传送单元。帧的数据部分的的长度上限。</li>
<li><strong>误码率 BER（Bit Error Rate ）</strong>：在一段时间内，传输错误的比特占所传输比特总数的比率。</li>
<li><strong>PPP（Point-to-Point Protocol ）</strong>：点对点协议。即用户计算机和 ISP 进行通信时所使用的数据链路层协议。以下是 PPP 帧的示意图：
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b0310d3103c4149a725a28aaf001899~tplv-k3u1fbpfcp-zoom-1.image" alt="PPP"></li>
<li><strong>MAC 地址（Media Access Control 或者 Medium Access Control）</strong>：意译为媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置。在 OSI 模型中，第三层网络层负责 IP 地址，第二层数据链路层则负责 MAC 地址。因此一个主机会有一个 MAC 地址，而每个网络位置会有一个专属于它的 IP 地址 。地址是识别某个系统的重要标识符，“名字指出我们所要寻找的资源，地址指出资源所在的地方，路由告诉我们如何到达该处。”</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/057b83e7ec5b4c149e56255a3be89141~tplv-k3u1fbpfcp-zoom-1.image" alt="ARP (Address Resolution Protocol) explained" tabindex="0"><figcaption>ARP (Address Resolution Protocol) explained</figcaption></figure>
<ol start="9">
<li><strong>网桥（bridge）</strong>：一种用于数据链路层实现中继，连接两个或多个局域网的网络互连设备。</li>
<li><strong>交换机（switch ）</strong>：广义的来说，交换机指的是一种通信系统中完成信息交换的设备。这里工作在数据链路层的交换机指的是交换式集线器，其实质是一个多接口的网桥</li>
</ol>
<h3> 3.2. 重要知识点总结</h3>
<ol>
<li>链路是从一个结点到相邻结点的一段物理链路，数据链路则在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</li>
<li>数据链路层使用的主要是<strong>点对点信道</strong>和<strong>广播信道</strong>两种。</li>
<li>数据链路层传输的协议数据单元是帧。数据链路层的三个基本问题是：<strong>封装成帧</strong>，<strong>透明传输</strong>和<strong>差错检测</strong></li>
<li><strong>循环冗余检验 CRC</strong> 是一种检错方法，而帧检验序列 FCS 是添加在数据后面的冗余码</li>
<li><strong>点对点协议 PPP</strong> 是数据链路层使用最多的一种协议，它的特点是：简单，只检测差错而不去纠正差错，不使用序号，也不进行流量控制，可同时支持多种网络层协议</li>
<li>PPPoE 是为宽带上网的主机使用的链路层协议</li>
<li><strong>局域网的优点是：具有广播功能，从一个站点可方便地访问全网；便于系统的扩展和逐渐演变；提高了系统的可靠性，可用性和生存性。</strong></li>
<li>计算机与外接局域网通信需要通过通信适配器（或网络适配器），它又称为网络接口卡或网卡。<strong>计算器的硬件地址就在适配器的 ROM 中</strong>。</li>
<li>以太网采用的无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢掉，其他什么也不做</li>
<li>以太网采用的协议是具有冲突检测的<strong>载波监听多点接入 CSMA/CD</strong>。协议的特点是：<strong>发送前先监听，边发送边监听，一旦发现总线上出现了碰撞，就立即停止发送。然后按照退避算法等待一段随机时间后再次发送。</strong> 因此，每一个站点在自己发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。以太网上的各站点平等地争用以太网信道</li>
<li>以太网的适配器具有过滤功能，它只接收单播帧，广播帧和多播帧。</li>
<li>使用集线器可以在物理层扩展以太网（扩展后的以太网仍然是一个网络）</li>
</ol>
<h3> 3.3. 补充</h3>
<ol>
<li>数据链路层的点对点信道和广播信道的特点，以及这两种信道所使用的协议（PPP 协议以及 CSMA/CD 协议）的特点</li>
<li>数据链路层的三个基本问题：<strong>封装成帧</strong>，<strong>透明传输</strong>，<strong>差错检测</strong></li>
<li>以太网的 MAC 层硬件地址</li>
<li>适配器，转发器，集线器，网桥，以太网交换机的作用以及适用场合</li>
</ol>
<h2> 4. 网络层（Network Layer）</h2>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/775dc8136bec486aad4f1182c68f24cd~tplv-k3u1fbpfcp-zoom-1.image" alt="网络层" tabindex="0"><figcaption>网络层</figcaption></figure>
<h3> 4.1. 基本术语</h3>
<ol>
<li><strong>虚电路（Virtual Circuit）</strong> : 在两个终端设备的逻辑或物理端口之间，通过建立的双向的透明传输通道。虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li>
<li><strong>IP（Internet Protocol ）</strong> : 网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一，是 TCP/IP 体系结构网际层的核心。配套的有 ARP，RARP，ICMP，IGMP。</li>
<li><strong>ARP（Address Resolution Protocol）</strong> : 地址解析协议。地址解析协议 ARP 把 IP 地址解析为硬件地址。</li>
<li><strong>ICMP（Internet Control Message Protocol ）</strong>：网际控制报文协议 （ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告）。</li>
<li><strong>子网掩码（subnet mask ）</strong>：它是一种用来指明一个 IP 地址的哪些位标识的是主机所在的子网以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合 IP 地址一起使用。</li>
<li><strong>CIDR（ Classless Inter-Domain Routing ）</strong>：无分类域间路由选择 （特点是消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，并使用各种长度的“网络前缀”(network-prefix)来代替分类地址中的网络号和子网号）。</li>
<li><strong>默认路由（default route）</strong>：当在路由表中查不到能到达目的地址的路由时，路由器选择的路由。默认路由还可以减小路由表所占用的空间和搜索路由表所用的时间。</li>
<li><strong>路由选择算法（Virtual Circuit）</strong>：路由选择协议的核心部分。因特网采用自适应的，分层次的路由选择协议。</li>
</ol>
<h3> 4.2. 重要知识点总结</h3>
<ol>
<li><strong>TCP/IP 协议中的网络层向上只提供简单灵活的，无连接的，尽最大努力交付的数据报服务。网络层不提供服务质量的承诺，不保证分组交付的时限，所传送的分组可能出错、丢失、重复和失序。进程之间通信的可靠性由运输层负责</strong></li>
<li>在互联网的交付有两种，一是在本网络直接交付不用经过路由器，另一种是和其他网络的间接交付，至少经过一个路由器，但最后一次一定是直接交付</li>
<li>分类的 IP 地址由网络号字段（指明网络）和主机号字段（指明主机）组成。网络号字段最前面的类别指明 IP 地址的类别。IP 地址是一种分等级的地址结构。IP 地址管理机构分配 IP 地址时只分配网络号，主机号由得到该网络号的单位自行分配。路由器根据目的主机所连接的网络号来转发分组。一个路由器至少连接到两个网络，所以一个路由器至少应当有两个不同的 IP 地址</li>
<li>IP 数据报分为首部和数据两部分。首部的前一部分是固定长度，共 20 字节，是所有 IP 数据包必须具有的（源地址，目的地址，总长度等重要地段都固定在首部）。一些长度可变的可选字段固定在首部的后面。IP 首部中的生存时间给出了 IP 数据报在互联网中所能经过的最大路由器数。可防止 IP 数据报在互联网中无限制的兜圈子。</li>
<li><strong>地址解析协议 ARP 把 IP 地址解析为硬件地址。ARP 的高速缓存可以大大减少网络上的通信量。因为这样可以使主机下次再与同样地址的主机通信时，可以直接从高速缓存中找到所需要的硬件地址而不需要再去以广播方式发送 ARP 请求分组</strong></li>
<li>无分类域间路由选择 CIDR 是解决目前 IP 地址紧缺的一个好办法。CIDR 记法在 IP 地址后面加上斜线“/”，然后写上前缀所占的位数。前缀（或网络前缀）用来指明网络，前缀后面的部分是后缀，用来指明主机。CIDR 把前缀都相同的连续的 IP 地址组成一个“CIDR 地址块”，IP 地址分配都以 CIDR 地址块为单位。</li>
<li>网际控制报文协议是 IP 层的协议。ICMP 报文作为 IP 数据报的数据，加上首部后组成 IP 数据报发送出去。使用 ICMP 数据报并不是为了实现可靠传输。ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。ICMP 报文的种类有两种，即 ICMP 差错报告报文和 ICMP 询问报文。</li>
<li><strong>要解决 IP 地址耗尽的问题，最根本的办法是采用具有更大地址空间的新版本 IP 协议-IPv6。</strong> IPv6 所带来的变化有 ① 更大的地址空间（采用 128 位地址）② 灵活的首部格式 ③ 改进的选项 ④ 支持即插即用 ⑤ 支持资源的预分配 ⑥IPv6 的首部改为 8 字节对齐。</li>
<li><strong>虚拟专用网络 VPN 利用公用的互联网作为本机构专用网之间的通信载体。VPN 内使用互联网的专用地址。一个 VPN 至少要有一个路由器具有合法的全球 IP 地址，这样才能和本系统的另一个 VPN 通过互联网进行通信。所有通过互联网传送的数据都需要加密。</strong></li>
<li>MPLS 的特点是：① 支持面向连接的服务质量 ② 支持流量工程，平衡网络负载 ③ 有效的支持虚拟专用网 VPN。MPLS 在入口节点给每一个 IP 数据报打上固定长度的“标记”，然后根据标记在第二层（链路层）用硬件进行转发（在标记交换路由器中进行标记交换），因而转发速率大大加快。</li>
</ol>
<h2> 5. 传输层（Transport Layer）</h2>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fe85e137e7f4f03a580512200a59609~tplv-k3u1fbpfcp-zoom-1.image" alt="传输层" tabindex="0"><figcaption>传输层</figcaption></figure>
<h3> 5.1. 基本术语</h3>
<ol>
<li><strong>进程（process）</strong>：指计算机中正在运行的程序实体。</li>
<li><strong>应用进程互相通信</strong>：一台主机的进程和另一台主机中的一个进程交换数据的过程（另外注意通信真正的端点不是主机而是主机中的进程，也就是说端到端的通信是应用进程之间的通信）。</li>
<li><strong>传输层的复用与分用</strong>：复用指发送方不同的进程都可以通过同一个运输层协议传送数据。分用指接收方的运输层在剥去报文的首部后能把这些数据正确的交付到目的应用进程。</li>
<li><strong>TCP（Transmission Control Protocol）</strong>：传输控制协议。</li>
<li><strong>UDP（User Datagram Protocol）</strong>：用户数据报协议。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b136e69e0b9b426782f77623dcf098bd~tplv-k3u1fbpfcp-zoom-1.image" alt="TCP和UDP" tabindex="0"><figcaption>TCP和UDP</figcaption></figure>
<ol start="6">
<li><strong>端口（port）</strong>：端口的目的是为了确认对方机器的哪个进程在与自己进行交互，比如 MSN 和 QQ 的端口不同，如果没有端口就可能出现 QQ 进程和 MSN 交互错误。端口又称协议端口号。</li>
<li><strong>停止等待协议（stop-and-wait）</strong>：指发送方每发送完一个分组就停止发送，等待对方确认，在收到确认之后在发送下一个分组。</li>
<li><strong>流量控制</strong> : 就是让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。</li>
<li><strong>拥塞控制</strong>：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。</li>
</ol>
<h3> 5.2. 重要知识点总结</h3>
<ol>
<li><strong>运输层提供应用进程之间的逻辑通信，也就是说，运输层之间的通信并不是真正在两个运输层之间直接传输数据。运输层向应用层屏蔽了下面网络的细节（如网络拓补，所采用的路由选择协议等），它使应用进程之间看起来好像两个运输层实体之间有一条端到端的逻辑通信信道。</strong></li>
<li><strong>网络层为主机提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信。</strong></li>
<li>运输层的两个重要协议是用户数据报协议 UDP 和传输控制协议 TCP。按照 OSI 的术语，两个对等运输实体在通信时传送的数据单位叫做运输协议数据单元 TPDU（Transport Protocol Data Unit）。但在 TCP/IP 体系中，则根据所使用的协议是 TCP 或 UDP，分别称之为 TCP 报文段或 UDP 用户数据报。</li>
<li><strong>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式。 TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的传输服务，难以避免地增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。</strong></li>
<li>硬件端口是不同硬件设备进行交互的接口，而软件端口是应用层各种协议进程与运输实体进行层间交互的一种地址。UDP 和 TCP 的首部格式中都有源端口和目的端口这两个重要字段。当运输层收到 IP 层交上来的运输层报文时，就能够根据其首部中的目的端口号把数据交付应用层的目的应用层。（两个进程之间进行通信不光要知道对方 IP 地址而且要知道对方的端口号(为了找到对方计算机中的应用进程)）</li>
<li>运输层用一个 16 位端口号标志一个端口。端口号只有本地意义，它只是为了标志计算机应用层中的各个进程在和运输层交互时的层间接口。在互联网的不同计算机中，相同的端口号是没有关联的。协议端口号简称端口。虽然通信的终点是应用进程，但只要把所发送的报文交到目的主机的某个合适端口，剩下的工作（最后交付目的进程）就由 TCP 和 UDP 来完成。</li>
<li>运输层的端口号分为服务器端使用的端口号（0˜1023 指派给熟知端口，1024˜49151 是登记端口号）和客户端暂时使用的端口号（49152˜65535）</li>
<li><strong>UDP 的主要特点是 ① 无连接 ② 尽最大努力交付 ③ 面向报文 ④ 无拥塞控制 ⑤ 支持一对一，一对多，多对一和多对多的交互通信 ⑥ 首部开销小（只有四个字段：源端口，目的端口，长度和检验和）</strong></li>
<li><strong>TCP 的主要特点是 ① 面向连接 ② 每一条 TCP 连接只能是一对一的 ③ 提供可靠交付 ④ 提供全双工通信 ⑤ 面向字节流</strong></li>
<li><strong>TCP 用主机的 IP 地址加上主机上的端口号作为 TCP 连接的端点。这样的端点就叫做套接字（socket）或插口。套接字用（IP 地址：端口号）来表示。每一条 TCP 连接唯一地被通信两端的两个端点所确定。</strong></li>
<li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>
<li>为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用流水线传输。流水线传输就是发送方可连续发送多个分组，不必每发完一个分组就停下来等待对方确认。这样可使信道上一直有数据不间断的在传送。这种传输方式可以明显提高信道利用率。</li>
<li>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求 ARQ。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。连续 ARQ 协议可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</li>
<li>TCP 报文段的前 20 个字节是固定的，其后有 40 字节长度的可选字段。如果加入可选字段后首部长度不是 4 的整数倍字节，需要在再在之后用 0 填充。因此，TCP 首部的长度取值为 20+4n 字节,最长为 60 字节。</li>
<li><strong>TCP 使用滑动窗口机制。发送窗口里面的序号表示允许发送的序号。发送窗口后沿的后面部分表示已发送且已收到确认，而发送窗口前沿的前面部分表示不允许发送。发送窗口后沿的变化情况有两种可能，即不动（没有收到新的确认）和前移（收到了新的确认）。发送窗口的前沿通常是不断向前移动的。一般来说，我们总是希望数据传输更快一些。但如果发送方把数据发送的过快，接收方就可能来不及接收，这就会造成数据的丢失。所谓流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收。</strong></li>
<li>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</li>
<li><strong>为了进行拥塞控制，TCP 发送方要维持一个拥塞窗口 cwnd 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</strong></li>
<li><strong>TCP 的拥塞控制采用了四种算法，即慢开始，拥塞避免，快重传和快恢复。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</strong></li>
<li>运输连接的三个阶段，即：连接建立，数据传送和连接释放。</li>
<li><strong>主动发起 TCP 连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫做服务器。TCP 连接采用三报文握手机制。服务器要确认用户的连接请求，然后客户要对服务器的确认进行确认。</strong></li>
<li>TCP 的连接释放采用四报文握手机制。任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送时，则发送连接释放通知，对方确认后就完全关闭了 TCP 连接</li>
</ol>
<h3> 5.3. 补充（重要）</h3>
<p>以下知识点需要重点关注：</p>
<ol>
<li>端口和套接字的意义</li>
<li>UDP 和 TCP 的区别以及两者的应用场景</li>
<li>在不可靠的网络上实现可靠传输的工作原理，停止等待协议和 ARQ 协议</li>
<li>TCP 的滑动窗口，流量控制，拥塞控制和连接管理</li>
<li>TCP 的三次握手，四次挥手机制</li>
</ol>
<h2> 6. 应用层（Application Layer）</h2>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f13f0ee13b24af7bdddf56162eb6602~tplv-k3u1fbpfcp-zoom-1.image" alt="应用层" tabindex="0"><figcaption>应用层</figcaption></figure>
<h3> 6.1. 基本术语</h3>
<ol>
<li><strong>域名系统（DNS）</strong>：域名系统（DNS，Domain Name System）将人类可读的域名 (例如，www.baidu.com) 转换为机器可读的 IP 地址 (例如，220.181.38.148)。我们可以将其理解为专为互联网设计的电话薄。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7da4b07947f4c0094d46dc96a067df0~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p style="text-align:right;font-size:12px">https://www.seobility.net/en/wiki/HTTP_headers</p>
<ol start="2">
<li><strong>文件传输协议（FTP）</strong>：FTP 是 File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于 Internet 上的控制文件的双向传输。同时，它也是一个应用程序（Application）。基于不同的操作系统有不同的 FTP 应用程序，而所有这些应用程序都遵守同一种协议以传输文件。在 FTP 的使用当中，用户经常遇到两个概念："下载"（Download）和"上传"（Upload）。 "下载"文件就是从远程主机拷贝文件至自己的计算机上；"上传"文件就是将文件从自己的计算机中拷贝至远程主机上。用 Internet 语言来说，用户可通过客户机程序向（从）远程主机上传（下载）文件。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3f2caaa361045a38fb89bb9fee15bd3~tplv-k3u1fbpfcp-zoom-1.image" alt="FTP工作过程" tabindex="0"><figcaption>FTP工作过程</figcaption></figure>
<ol start="3">
<li><strong>简单文件传输协议（TFTP）</strong>：TFTP（Trivial File Transfer Protocol,简单文件传输协议）是 TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。端口号为 69。</li>
<li><strong>远程终端协议（TELNET）</strong>：Telnet 协议是 TCP/IP 协议族中的一员，是 Internet 远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用 telnet 程序，用它连接到服务器。终端使用者可以在 telnet 程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个 telnet 会话，必须输入用户名和密码来登录服务器。Telnet 是常用的远程控制 Web 服务器的方法。</li>
<li><strong>万维网（WWW）</strong>：WWW 是环球信息网的缩写，（亦作“Web”、“WWW”、“'W3'”，英文全称为“World Wide Web”），中文名字为“万维网”，"环球网"等，常简称为 Web。分为 Web 客户端和 Web 服务器程序。WWW 可以让 Web 客户端（常用浏览器）访问浏览 Web 服务器上的页面。是一个由许多互相链接的超文本组成的系统，通过互联网访问。在这个系统中，每个有用的事物，称为一样“资源”；并且由一个全局“统一资源标识符”（URI）标识；这些资源通过超文本传输协议（Hypertext Transfer Protocol）传送给用户，而后者通过点击链接来获得资源。万维网联盟（英语：World Wide Web Consortium，简称 W3C），又称 W3C 理事会。1994 年 10 月在麻省理工学院（MIT）计算机科学实验室成立。万维网联盟的创建者是万维网的发明者蒂姆·伯纳斯-李。万维网并不等同互联网，万维网只是互联网所能提供的服务其中之一，是靠着互联网运行的一项服务。</li>
<li><strong>万维网的大致工作工程：</strong></li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba628fd37fdc4ba59c1a74eae32e03b1~tplv-k3u1fbpfcp-zoom-1.image" alt="万维网的大致工作工程" tabindex="0"><figcaption>万维网的大致工作工程</figcaption></figure>
<ol start="7">
<li><strong>统一资源定位符（URL）</strong>：统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</li>
<li><strong>超文本传输协议（HTTP）</strong>：超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。</li>
</ol>
<p>HTTP 协议的本质就是一种浏览器与服务器之间约定好的通信格式。HTTP 的原理如下图所示：</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e3efca026654874bde8be88c96e1783~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<ol start="10">
<li><strong>代理服务器（Proxy Server）</strong>：代理服务器（Proxy Server）是一种网络实体，它又称为万维网高速缓存。 代理服务器把最近的一些请求和响应暂存在本地磁盘中。当新请求到达时，若代理服务器发现这个请求与暂时存放的的请求相同，就返回暂存的响应，而不需要按 URL 的地址再次去互联网访问该资源。代理服务器可在客户端或服务器工作，也可以在中间系统工作。</li>
<li><strong>简单邮件传输协议(SMTP)</strong> : SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。 SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。 通过 SMTP 协议所指定的服务器,就可以把 E-mail 寄到收信人的服务器上了，整个过程只要几分钟。SMTP 服务器则是遵循 SMTP 协议的发送邮件服务器，用来发送或中转发出的电子邮件。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bdccb760474435aae52559f2ef9652f~tplv-k3u1fbpfcp-zoom-1.image" alt="一个电子邮件被发送的过程" tabindex="0"><figcaption>一个电子邮件被发送的过程</figcaption></figure>
<p style="text-align:right;font-size:12px">https://www.campaignmonitor.com/resources/knowledge-base/what-is-the-code-that-makes-bcc-or-cc-operate-in-an-email/</p>
<ol start="11">
<li><strong>搜索引擎</strong> :搜索引擎（Search Engine）是指根据一定的策略、运用特定的计算机程序从互联网上搜集信息，在对信息进行组织和处理后，为用户提供检索服务，将用户检索相关的信息展示给用户的系统。搜索引擎包括全文索引、目录索引、元搜索引擎、垂直搜索引擎、集合式搜索引擎、门户搜索引擎与免费链接列表等。</li>
</ol>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b67fde8d49624602959232683a3275e6~tplv-k3u1fbpfcp-zoom-1.image" alt="搜索引擎" tabindex="0"><figcaption>搜索引擎</figcaption></figure>
<ol start="12">
<li><strong>垂直搜索引擎</strong>：垂直搜索引擎是针对某一个行业的专业搜索引擎，是搜索引擎的细分和延伸，是对网页库中的某类专门的信息进行一次整合，定向分字段抽取出需要的数据进行处理后再以某种形式返回给用户。垂直搜索是相对通用搜索引擎的信息量大、查询不准确、深度不够等提出来的新的搜索引擎服务模式，通过针对某一特定领域、某一特定人群或某一特定需求提供的有一定价值的信息和相关服务。其特点就是“专、精、深”，且具有行业色彩，相比较通用搜索引擎的海量信息无序化，垂直搜索引擎则显得更加专注、具体和深入。</li>
<li><strong>全文索引</strong> :全文索引技术是目前搜索引擎的关键技术。试想在 1M 大小的文件中搜索一个词，可能需要几秒，在 100M 的文件中可能需要几十秒，如果在更大的文件中搜索那么就需要更大的系统开销，这样的开销是不现实的。所以在这样的矛盾下出现了全文索引技术，有时候有人叫倒排文档技术。</li>
<li><strong>目录索引</strong>：目录索引（ search index/directory)，顾名思义就是将网站分门别类地存放在相应的目录中，因此用户在查询信息时，可选择关键词搜索，也可按分类目录逐层查找。</li>
</ol>
<h3> 6.2. 重要知识点总结</h3>
<ol>
<li>文件传输协议（FTP）使用 TCP 可靠的运输服务。FTP 使用客户服务器方式。一个 FTP 服务器进程可以同时为多个用户提供服务。在进行文件传输时，FTP 的客户和服务器之间要先建立两个并行的 TCP 连接:控制连接和数据连接。实际用于传输文件的是数据连接。</li>
<li>万维网客户程序与服务器之间进行交互使用的协议是超文本传输协议 HTTP。HTTP 使用 TCP 连接进行可靠传输。但 HTTP 本身是无连接、无状态的。HTTP/1.1 协议使用了持续连接（分为非流水线方式和流水线方式）</li>
<li>电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人邮箱中，收件人可随时上网到自己使用的邮件服务器读取，相当于电子邮箱。</li>
<li>一个电子邮件系统有三个重要组成构件：用户代理、邮件服务器、邮件协议（包括邮件发送协议，如 SMTP，和邮件读取协议，如 POP3 和 IMAP）。用户代理和邮件服务器都要运行这些协议。</li>
</ol>
<h3> 6.3. 补充（重要）</h3>
<p>以下知识点需要重点关注：</p>
<ol>
<li>应用层的常见协议（重点关注 HTTP 协议）</li>
<li>域名系统-从域名解析出 IP 地址</li>
<li>访问一个网站大致的过程</li>
<li>系统调用和应用编程接口概念</li>
</ol>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb5d8645cd55484ab0177f25a13e97db~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>DNS 域名系统详解（应用层）</title>
      <link>https://javaguide.cn/cs-basics/network/dns.html</link>
      <guid>https://javaguide.cn/cs-basics/network/dns.html</guid>
      <source url="https://javaguide.cn/rss.xml">DNS 域名系统详解（应用层）</source>
      <description>DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是域名和 IP 地址的映射问题。 DNS:域名系统 在实际使用中，有一种情况下，浏览器是可以不必动用 DNS 就可以获知域名和 IP 地址的映射的。浏览器在本地会维护一个hosts列表，一般来说浏览器要先查看要访问的域名是否在hosts列表中，如果有的话，直接提取对应的 IP 地址记录，就好了。如果本地hosts列表内没有域名-IP 对应记录的话，那么 DNS 就闪亮登场了。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是<strong>域名和 IP 地址的映射问题</strong>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png" alt="DNS:域名系统" tabindex="0"><figcaption>DNS:域名系统</figcaption></figure>
<p>在实际使用中，有一种情况下，浏览器是可以不必动用 DNS 就可以获知域名和 IP 地址的映射的。浏览器在本地会维护一个<code>hosts</code>列表，一般来说浏览器要先查看要访问的域名是否在<code>hosts</code>列表中，如果有的话，直接提取对应的 IP 地址记录，就好了。如果本地<code>hosts</code>列表内没有域名-IP 对应记录的话，那么 DNS 就闪亮登场了。</p>
<p>目前 DNS 的设计采用的是分布式、层次数据库结构，<strong>DNS 是应用层协议，基于 UDP 协议之上，端口为 53</strong> 。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-protocol-overview.png" alt="TCP/IP 各层协议概览" tabindex="0"><figcaption>TCP/IP 各层协议概览</figcaption></figure>
<p>DNS 服务器自底向上可以依次分为以下几个层级(所有 DNS 服务器都属于以下四个类别之一):</p>
<ul>
<li>根 DNS 服务器。根 DNS 服务器提供 TLD 服务器的 IP 地址。目前世界上只有 13 组根服务器，我国境内目前仍没有根服务器。</li>
<li>顶级域 DNS 服务器（TLD 服务器）。顶级域是指域名的后缀，如<code>com</code>、<code>org</code>、<code>net</code>和<code>edu</code>等。国家也有自己的顶级域，如<code>uk</code>、<code>fr</code>和<code>ca</code>。TLD 服务器提供了权威 DNS 服务器的 IP 地址。</li>
<li>权威 DNS 服务器。在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。</li>
<li>本地 DNS 服务器。每个 ISP（互联网服务提供商）都有一个自己的本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，它起着代理的作用，并将该请求转发到 DNS 层次结构中。严格说来，不属于 DNS 层级结构。</li>
</ul>
<h2> DNS 工作流程</h2>
<p>以下图为例，介绍 DNS 的查询解析过程。DNS 的查询解析过程分为两种模式：</p>
<ul>
<li><strong>迭代</strong></li>
<li><strong>递归</strong></li>
</ul>
<p>下图是实践中常采用的方式，从请求主机到本地 DNS 服务器的查询是递归的，其余的查询时迭代的。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/DNS-process.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>现在，主机<code>cis.poly.edu</code>想知道<code>gaia.cs.umass.edu</code>的 IP 地址。假设主机<code>cis.poly.edu</code>的本地 DNS 服务器为<code>dns.poly.edu</code>，并且<code>gaia.cs.umass.edu</code>的权威 DNS 服务器为<code>dns.cs.umass.edu</code>。</p>
<ol>
<li>首先，主机<code>cis.poly.edu</code>向本地 DNS 服务器<code>dns.poly.edu</code>发送一个 DNS 请求，该查询报文包含被转换的域名<code>gaia.cs.umass.edu</code>。</li>
<li>本地 DNS 服务器<code>dns.poly.edu</code>检查本机缓存，发现并无记录，也不知道<code>gaia.cs.umass.edu</code>的 IP 地址该在何处，不得不向根服务器发送请求。</li>
<li>根服务器注意到请求报文中含有<code>edu</code>顶级域，因此告诉本地 DNS，你可以向<code>edu</code>的 TLD DNS 发送请求，因为目标域名的 IP 地址很可能在那里。</li>
<li>本地 DNS 获取到了<code>edu</code>的 TLD DNS 服务器地址，向其发送请求，询问<code>gaia.cs.umass.edu</code>的 IP 地址。</li>
<li><code>edu</code>的 TLD DNS 服务器仍不清楚请求域名的 IP 地址，但是它注意到该域名有<code>umass.edu</code>前缀，因此返回告知本地 DNS，<code>umass.edu</code>的权威服务器可能记录了目标域名的 IP 地址。</li>
<li>这一次，本地 DNS 将请求发送给权威 DNS 服务器<code>dns.cs.umass.edu</code>。</li>
<li>终于，由于<code>gaia.cs.umass.edu</code>向权威 DNS 服务器备案过，在这里有它的 IP 地址记录，权威 DNS 成功地将 IP 地址返回给本地 DNS。</li>
<li>最后，本地 DNS 获取到了目标域名的 IP 地址，将其返回给请求主机。</li>
</ol>
<p>除了迭代式查询，还有一种递归式查询如下图，具体过程和上述类似，只是顺序有所不同。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/DNS-process2.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>另外，DNS 的缓存位于本地 DNS 服务器。由于全世界的根服务器甚少，只有 400 多台，分为 13 组，且顶级域的数量也在一个可数的范围内，因此本地 DNS 通常已经缓存了很多 TLD DNS 服务器，所以在实际查找过程中，无需访问根服务器。根服务器通常是被跳过的，不请求的。</p>
<h2> DNS 报文格式</h2>
<p>DNS 的报文格式如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/DNS-packet.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>DNS 报文分为查询和回答报文，两种形式的报文结构相同。</p>
<ul>
<li>标识符。16 比特，用于标识该查询。这个标识符会被复制到对查询的回答报文中，以便让客户用它来匹配发送的请求和接收到的回答。</li>
<li>标志。1 比特的”查询/回答“标识位，<code>0</code>表示查询报文，<code>1</code>表示回答报文；1 比特的”权威的“标志位（当某 DNS 服务器是所请求名字的权威 DNS 服务器时，且是回答报文，使用”权威的“标志）；1 比特的”希望递归“标志位，显式地要求执行递归查询；1 比特的”递归可用“标志位，用于回答报文中，表示 DNS 服务器支持递归查询。</li>
<li>问题数、回答 RR 数、权威 RR 数、附加 RR 数。分别指示了后面 4 类数据区域出现的数量。</li>
<li>问题区域。包含正在被查询的主机名字，以及正被询问的问题类型。</li>
<li>回答区域。包含了对最初请求的名字的资源记录。<strong>在回答报文的回答区域中可以包含多条 RR，因此一个主机名能够有多个 IP 地址。</strong></li>
<li>权威区域。包含了其他权威服务器的记录。</li>
<li>附加区域。包含了其他有帮助的记录。</li>
</ul>
<h2> DNS 记录</h2>
<p>DNS 服务器在响应查询时，需要查询自己的数据库，数据库中的条目被称为<strong>资源记录(Resource Record，RR)</strong>。RR 提供了主机名到 IP 地址的映射。RR 是一个包含了<code>Name</code>, <code>Value</code>, <code>Type</code>, <code>TTL</code>四个字段的四元组。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/20210506174303797.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><code>TTL</code>是该记录的生存时间，它决定了资源记录应当从缓存中删除的时间。</p>
<p><code>Name</code>和<code>Value</code>字段的取值取决于<code>Type</code>：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/20210506170307897.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<ul>
<li>如果<code>Type=A</code>，则<code>Name</code>是主机名信息，<code>Value</code> 是该主机名对应的 IP 地址。这样的 RR 记录了一条主机名到 IP 地址的映射。</li>
<li>如果 <code>Type=AAAA</code> （与 <code>A</code> 记录非常相似），唯一的区别是 A 记录使用的是 IPv4，而 <code>AAAA</code> 记录使用的是 IPv6。</li>
<li>如果<code>Type=CNAME</code> (Canonical Name Record,真实名称记录) ，则<code>Value</code>是别名为<code>Name</code>的主机对应的规范主机名。<code>Value</code>值才是规范主机名。<code>CNAME</code> 记录将一个主机名映射到另一个主机名。<code>CNAME</code> 记录用于为现有的 <code>A</code> 记录创建别名。下文有示例。</li>
<li>如果<code>Type=NS</code>，则<code>Name</code>是个域，而<code>Value</code>是个知道如何获得该域中主机 IP 地址的权威 DNS 服务器的主机名。通常这样的 RR 是由 TLD 服务器发布的。</li>
<li>如果<code>Type=MX</code> ，则<code>Value</code>是个别名为<code>Name</code>的邮件服务器的规范主机名。既然有了 <code>MX</code> 记录，那么邮件服务器可以和其他服务器使用相同的别名。为了获得邮件服务器的规范主机名，需要请求 <code>MX</code> 记录；为了获得其他服务器的规范主机名，需要请求 <code>CNAME</code> 记录。</li>
</ul>
<p><code>CNAME</code>记录总是指向另一则域名，而非 IP 地址。假设有下述 DNS zone：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户查询 <code>bar.example.com</code> 的时候，DNS Server 实际返回的是 <code>foo.example.com</code> 的 IP 地址。</p>
<h2> 参考</h2>
<ul>
<li>DNS 服务器类型：https://www.cloudflare.com/zh-cn/learning/dns/dns-server-types/</li>
<li>DNS Message Resource Record Field Formats：http://www.tcpipguide.com/free/t_DNSMessageResourceRecordFieldFormats-2.htm</li>
<li>Understanding Different Types of Record in DNS Server：https://www.mustbegeek.com/understanding-different-types-of-record-in-dns-server/</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png" type="image/png"/>
    </item>
    <item>
      <title>HTTP 常见状态码总结（应用层）</title>
      <link>https://javaguide.cn/cs-basics/network/http-status-codes.html</link>
      <guid>https://javaguide.cn/cs-basics/network/http-status-codes.html</guid>
      <source url="https://javaguide.cn/rss.xml">HTTP 常见状态码总结（应用层）</source>
      <description>HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。 常见 HTTP 状态码 1xx Informational（信息性状态码） 相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png" alt="常见 HTTP 状态码" tabindex="0"><figcaption>常见 HTTP 状态码</figcaption></figure>
<h3> 1xx Informational（信息性状态码）</h3>
<p>相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。</p>
<h3> 2xx Success（成功状态码）</h3>
<ul>
<li><strong>200 OK</strong>：请求被成功处理。比如我们发送一个查询用户数据的 HTTP 请求到服务端，服务端正确返回了用户数据。这个是我们平时最常见的一个 HTTP 状态码。</li>
<li><strong>201 Created</strong>：请求被成功处理并且在服务端创建了一个新的资源。比如我们通过 POST 请求创建一个新的用户。</li>
<li><strong>202 Accepted</strong>：服务端已经接收到了请求，但是还未处理。</li>
<li><strong>204 No Content</strong>：服务端已经成功处理了请求，但是没有返回任何内容。</li>
</ul>
<p>这里格外提一下 204 状态码，平时学习/工作中见到的次数并不多。</p>
<p><a href="https://tools.ietf.org/html/rfc2616#section-10.2.5" target="_blank" rel="noopener noreferrer">HTTP RFC 2616 对 204 状态码的描述</a>如下：</p>
<blockquote>
<p>The server has fulfilled the request but does not need to return an
entity-body, and might want to return updated metainformation. The
response MAY include new or updated metainformation in the form of
entity-headers, which if present SHOULD be associated with the
requested variant.</p>
<p>If the client is a user agent, it SHOULD NOT change its document view
from that which caused the request to be sent. This response is
primarily intended to allow input for actions to take place without
causing a change to the user agent's active document view, although
any new or updated metainformation SHOULD be applied to the document
currently in the user agent's active view.</p>
<p>The 204 response MUST NOT include a message-body, and thus is always
terminated by the first empty line after the header fields.</p>
</blockquote>
<p>简单来说，204 状态码描述的是我们向服务端发送 HTTP 请求之后，只关注处理结果是否成功的场景。也就是说我们需要的就是一个结果：true/false。</p>
<p>举个例子：你要追一个女孩子，你问女孩子：“我能追你吗？”，女孩子回答：“好！”。我们把这个女孩子当做是服务端就很好理解 204 状态码了。</p>
<h3> 3xx Redirection（重定向状态码）</h3>
<ul>
<li><strong>301 Moved Permanently</strong>：资源被永久重定向了。比如你的网站的网址更换了。</li>
<li><strong>302 Found</strong>：资源被临时重定向了。比如你的网站的某些资源被暂时转移到另外一个网址。</li>
</ul>
<h3> 4xx Client Error（客户端错误状态码）</h3>
<ul>
<li><strong>400 Bad Request</strong>：发送的 HTTP 请求存在问题。比如请求参数不合法、请求方法错误。</li>
<li><strong>401 Unauthorized</strong>：未认证却请求需要认证之后才能访问的资源。</li>
<li><strong>403 Forbidden</strong>：直接拒绝 HTTP 请求，不处理。一般用来针对非法请求。</li>
<li><strong>404 Not Found</strong>：你请求的资源未在服务端找到。比如你请求某个用户的信息，服务端并没有找到指定的用户。</li>
<li><strong>409 Conflict</strong>：表示请求的资源与服务端当前的状态存在冲突，请求无法被处理。</li>
</ul>
<h3> 5xx Server Error（服务端错误状态码）</h3>
<ul>
<li><strong>500 Internal Server Error</strong>：服务端出问题了（通常是服务端出 Bug 了）。比如你服务端处理请求的时候突然抛出异常，但是异常并未在服务端被正确处理。</li>
<li><strong>502 Bad Gateway</strong>：我们的网关将请求转发到服务端，但是服务端返回的却是一个错误的响应。</li>
</ul>
<h3> 参考</h3>
<ul>
<li>https://www.restapitutorial.com/httpstatuscodes.html</li>
<li>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</li>
<li>https://en.wikipedia.org/wiki/List_of_HTTP_status_codes</li>
<li>https://segmentfault.com/a/1190000018264501</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png" type="image/png"/>
    </item>
    <item>
      <title>HTTP vs HTTPS（应用层）</title>
      <link>https://javaguide.cn/cs-basics/network/http-vs-https.html</link>
      <guid>https://javaguide.cn/cs-basics/network/http-vs-https.html</guid>
      <source url="https://javaguide.cn/rss.xml">HTTP vs HTTPS（应用层）</source>
      <description>HTTP 协议 HTTP 协议介绍 HTTP 协议，全称超文本传输协议（Hypertext Transfer Protocol）。顾名思义，HTTP 协议就是用来规范超文本的传输，超文本，也就是网络上的包括文本在内的各式各样的消息，具体来说，主要是来规范浏览器和服务器端的行为的。 并且，HTTP 是一个无状态（stateless）协议，也就是说服务器不维护任何有关客户端过去所发请求的消息。这其实是一种懒政，有状态协议会更加复杂，需要维护状态（历史信息），而且如果客户或服务器失效，会产生状态的不一致，解决这种不一致的代价更高。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> HTTP 协议</h2>
<h3> HTTP 协议介绍</h3>
<p>HTTP 协议，全称超文本传输协议（Hypertext Transfer Protocol）。顾名思义，HTTP 协议就是用来规范超文本的传输，超文本，也就是网络上的包括文本在内的各式各样的消息，具体来说，主要是来规范浏览器和服务器端的行为的。</p>
<p>并且，HTTP 是一个无状态（stateless）协议，也就是说服务器不维护任何有关客户端过去所发请求的消息。这其实是一种懒政，有状态协议会更加复杂，需要维护状态（历史信息），而且如果客户或服务器失效，会产生状态的不一致，解决这种不一致的代价更高。</p>
<h3> HTTP 协议通信过程</h3>
<p>HTTP 是应用层协议，它以 TCP（传输层）作为底层协议，默认端口为 80. 通信过程主要如下：</p>
<ol>
<li>服务器在 80 端口等待客户的请求。</li>
<li>浏览器发起到服务器的 TCP 连接（创建套接字 Socket）。</li>
<li>服务器接收来自浏览器的 TCP 连接。</li>
<li>浏览器（HTTP 客户端）与 Web 服务器（HTTP 服务器）交换 HTTP 消息。</li>
<li>关闭 TCP 连接。</li>
</ol>
<h3> HTTP 协议优点</h3>
<p>扩展性强、速度快、跨平台支持性好。</p>
<h2> HTTPS 协议</h2>
<h3> HTTPS 协议介绍</h3>
<p>HTTPS 协议（Hyper Text Transfer Protocol Secure），是 HTTP 的加强安全版本。HTTPS 是基于 HTTP 的，也是用 TCP 作为底层协议，并额外使用 SSL/TLS 协议用作加密和安全认证。默认端口号是 443.</p>
<p>HTTPS 协议中，SSL 通道通常使用基于密钥的加密算法，密钥长度通常是 40 比特或 128 比特。</p>
<h3> HTTPS 协议优点</h3>
<p>保密性好、信任度高。</p>
<h2> HTTPS 的核心—SSL/TLS 协议</h2>
<p>HTTPS 之所以能达到较高的安全性要求，就是结合了 SSL/TLS 和 TCP 协议，对通信数据进行加密，解决了 HTTP 数据透明的问题。接下来重点介绍一下 SSL/TLS 的工作原理。</p>
<h3> SSL 和 TLS 的区别？</h3>
<p><strong>SSL 和 TLS 没有太大的区别。</strong></p>
<p>SSL 指安全套接字协议（Secure Sockets Layer），首次发布与 1996 年。SSL 的首次发布其实已经是他的 3.0 版本，SSL 1.0 从未面世，SSL 2.0 则具有较大的缺陷（DROWN 缺陷——Decrypting RSA with Obsolete and Weakened eNcryption）。很快，在 1999 年，SSL 3.0 进一步升级，<strong>新版本被命名为 TLS 1.0</strong>。因此，TLS 是基于 SSL 之上的，但由于习惯叫法，通常把 HTTPS 中的核心加密协议混称为 SSL/TLS。</p>
<h3> SSL/TLS 的工作原理</h3>
<h4> 非对称加密</h4>
<p>SSL/TLS 的核心要素是<strong>非对称加密</strong>。非对称加密采用两个密钥——一个公钥，一个私钥。在通信时，私钥仅由解密者保存，公钥由任何一个想与解密者通信的发送者（加密者）所知。可以设想一个场景，</p>
<blockquote>
<p>在某个自助邮局，每个通信信道都是一个邮箱，每一个邮箱所有者都在旁边立了一个牌子，上面挂着一把钥匙：这是我的公钥，发送者请将信件放入我的邮箱，并用公钥锁好。</p>
<p>但是公钥只能加锁，并不能解锁。解锁只能由邮箱的所有者——因为只有他保存着私钥。</p>
<p>这样，通信信息就不会被其他人截获了，这依赖于私钥的保密性。</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>非对称加密的公钥和私钥需要采用一种复杂的数学机制生成（密码学认为，为了较高的安全性，尽量不要自己创造加密方案）。公私钥对的生成算法依赖于单向陷门函数。</p>
<blockquote>
<p>单向函数：已知单向函数 f，给定任意一个输入 x，易计算输出 y=f(x)；而给定一个输出 y，假设存在 f(x)=y，很难根据 f 来计算出 x。</p>
<p>单向陷门函数：一个较弱的单向函数。已知单向陷门函数 f，陷门 h，给定任意一个输入 x，易计算出输出 y=f(x;h)；而给定一个输出 y，假设存在 f(x;h)=y，很难根据 f 来计算出 x，但可以根据 f 和 h 来推导出 x。</p>
</blockquote>
<figure><figcaption>单向函数</figcaption></figure>
<p>上图就是一个单向函数（不是单项陷门函数），假设有一个绝世秘籍，任何知道了这个秘籍的人都可以把苹果汁榨成苹果，那么这个秘籍就是“陷门”了吧。</p>
<p>在这里，函数 f 的计算方法相当于公钥，陷门 h 相当于私钥。公钥 f 是公开的，任何人对已有输入，都可以用 f 加密，而要想根据加密信息还原出原信息，必须要有私钥才行。</p>
<h4> 对称加密</h4>
<p>使用 SSL/TLS 进行通信的双方需要使用非对称加密方案来通信，但是非对称加密设计了较为复杂的数学算法，在实际通信过程中，计算的代价较高，效率太低，因此，SSL/TLS 实际对消息的加密使用的是对称加密。</p>
<blockquote>
<p>对称加密：通信双方共享唯一密钥 k，加解密算法已知，加密方利用密钥 k 加密，解密方利用密钥 k 解密，保密性依赖于密钥 k 的保密性。</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>对称加密的密钥生成代价比公私钥对的生成代价低得多，那么有的人会问了，为什么 SSL/TLS 还需要使用非对称加密呢？因为对称加密的保密性完全依赖于密钥的保密性。在双方通信之前，需要商量一个用于对称加密的密钥。我们知道网络通信的信道是不安全的，传输报文对任何人是可见的，密钥的交换肯定不能直接在网络信道中传输。因此，使用非对称加密，对对称加密的密钥进行加密，保护该密钥不在网络信道中被窃听。这样，通信双方只需要一次非对称加密，交换对称加密的密钥，在之后的信息通信中，使用绝对安全的密钥，对信息进行对称加密，即可保证传输消息的保密性。</p>
<h4> 公钥传输的信赖性</h4>
<p>SSL/TLS 介绍到这里，了解信息安全的朋友又会想到一个安全隐患，设想一个下面的场景：</p>
<blockquote>
<p>客户端 C 和服务器 S 想要使用 SSL/TLS 通信，由上述 SSL/TLS 通信原理，C 需要先知道 S 的公钥，而 S 公钥的唯一获取途径，就是把 S 公钥在网络信道中传输。要注意网络信道通信中有几个前提：</p>
<ol>
<li>任何人都可以捕获通信包</li>
<li>通信包的保密性由发送者设计</li>
<li>保密算法设计方案默认为公开，而（解密）密钥默认是安全的</li>
</ol>
<p>因此，假设 S 公钥不做加密，在信道中传输，那么很有可能存在一个攻击者 A，发送给 C 一个诈包，假装是 S 公钥，其实是诱饵服务器 AS 的公钥。当 C 收获了 AS 的公钥（却以为是 S 的公钥），C 后续就会使用 AS 公钥对数据进行加密，并在公开信道传输，那么 A 将捕获这些加密包，用 AS 的私钥解密，就截获了 C 本要给 S 发送的内容，而 C 和 S 二人全然不知。</p>
<p>同样的，S 公钥即使做加密，也难以避免这种信任性问题，C 被 AS 拐跑了！</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>为了公钥传输的信赖性问题，第三方机构应运而生——证书颁发机构（CA，Certificate Authority）。CA 默认是受信任的第三方。CA 会给各个服务器颁发证书，证书存储在服务器上，并附有 CA 的<strong>电子签名</strong>（见下节）。</p>
<p>当客户端（浏览器）向服务器发送 HTTPS 请求时，一定要先获取目标服务器的证书，并根据证书上的信息，检验证书的合法性。一旦客户端检测到证书非法，就会发生错误。客户端获取了服务器的证书后，由于证书的信任性是由第三方信赖机构认证的，而证书上又包含着服务器的公钥信息，客户端就可以放心的信任证书上的公钥就是目标服务器的公钥。</p>
<h4> 数字签名</h4>
<p>好，到这一小节，已经是 SSL/TLS 的尾声了。上一小节提到了数字签名，数字签名要解决的问题，是防止证书被伪造。第三方信赖机构 CA 之所以能被信赖，就是 <strong>靠数字签名技术</strong> 。</p>
<p>数字签名，是 CA 在给服务器颁发证书时，使用散列+加密的组合技术，在证书上盖个章，以此来提供验伪的功能。具体行为如下：</p>
<blockquote>
<p>CA 知道服务器的公钥，对证书采用散列技术生成一个摘要。CA 使用 CA 私钥对该摘要进行加密，并附在证书下方，发送给服务器。</p>
<p>现在服务器将该证书发送给客户端，客户端需要验证该证书的身份。客户端找到第三方机构 CA，获知 CA 的公钥，并用 CA 公钥对证书的签名进行解密，获得了 CA 生成的摘要。</p>
<p>客户端对证书数据（包含服务器的公钥）做相同的散列处理，得到摘要，并将该摘要与之前从签名中解码出的摘要做对比，如果相同，则身份验证成功；否则验证失败。</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>总结来说，带有证书的公钥传输机制如下：</p>
<ol>
<li>设有服务器 S，客户端 C，和第三方信赖机构 CA。</li>
<li>S 信任 CA，CA 是知道 S 公钥的，CA 向 S 颁发证书。并附上 CA 私钥对消息摘要的加密签名。</li>
<li>S 获得 CA 颁发的证书，将该证书传递给 C。</li>
<li>C 获得 S 的证书，信任 CA 并知晓 CA 公钥，使用 CA 公钥对 S 证书上的签名解密，同时对消息进行散列处理，得到摘要。比较摘要，验证 S 证书的真实性。</li>
<li>如果 C 验证 S 证书是真实的，则信任 S 的公钥（在 S 证书中）。</li>
</ol>
<figure><figcaption></figcaption></figure>
<p>对于数字签名，我这里讲的比较简单，如果你没有搞清楚的话，强烈推荐你看看<a href="https://www.bilibili.com/video/BV18N411X7ty/" target="_blank" rel="noopener noreferrer">数字签名及数字证书原理</a>这个视频，这是我看过最清晰的讲解。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/image-20220321121814946.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> 总结</h2>
<ul>
<li><strong>端口号</strong>：HTTP 默认是 80，HTTPS 默认是 443。</li>
<li><strong>URL 前缀</strong>：HTTP 的 URL 前缀是 <code>http://</code>，HTTPS 的 URL 前缀是 <code>https://</code>。</li>
<li><strong>安全性和资源消耗</strong>：HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>HTTP 1.0 vs HTTP 1.1（应用层）</title>
      <link>https://javaguide.cn/cs-basics/network/http1.0-vs-http1.1.html</link>
      <guid>https://javaguide.cn/cs-basics/network/http1.0-vs-http1.1.html</guid>
      <source url="https://javaguide.cn/rss.xml">HTTP 1.0 vs HTTP 1.1（应用层）</source>
      <description>这篇文章会从下面几个维度来对比 HTTP 1.0 和 HTTP 1.1： 响应状态码 缓存处理 连接方式 Host 头处理 带宽优化 响应状态码 HTTP/1.0 仅定义了 16 种状态码。HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，100 (Continue)——在请求大资源前的预热请求，206 (Partial Content)——范围请求的标识码，409 (Conflict)——请求与当前资源的规定冲突，410 (Gone)——资源已被永久转移，而且没有任何已知的转发地址。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>这篇文章会从下面几个维度来对比 HTTP 1.0 和 HTTP 1.1：</p>
<ul>
<li>响应状态码</li>
<li>缓存处理</li>
<li>连接方式</li>
<li>Host 头处理</li>
<li>带宽优化</li>
</ul>
<h2> 响应状态码</h2>
<p>HTTP/1.0 仅定义了 16 种状态码。HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，<code>100 (Continue)</code>——在请求大资源前的预热请求，<code>206 (Partial Content)</code>——范围请求的标识码，<code>409 (Conflict)</code>——请求与当前资源的规定冲突，<code>410 (Gone)</code>——资源已被永久转移，而且没有任何已知的转发地址。</p>
<h2> 缓存处理</h2>
<p>缓存技术通过避免用户与源服务器的频繁交互，节约了大量的网络带宽，降低了用户接收信息的延迟。</p>
<h3> HTTP/1.0</h3>
<p>HTTP/1.0 提供的缓存机制非常简单。服务器端使用<code>Expires</code>标签来标志（时间）一个响应体，在<code>Expires</code>标志时间内的请求，都会获得该响应体缓存。服务器端在初次返回给客户端的响应体中，有一个<code>Last-Modified</code>标签，该标签标记了被请求资源在服务器端的最后一次修改。在请求头中，使用<code>If-Modified-Since</code>标签，该标签标志一个时间，意为客户端向服务器进行问询：“该时间之后，我要请求的资源是否有被修改过？”通常情况下，请求头中的<code>If-Modified-Since</code>的值即为上一次获得该资源时，响应体中的<code>Last-Modified</code>的值。</p>
<p>如果服务器接收到了请求头，并判断<code>If-Modified-Since</code>时间后，资源确实没有修改过，则返回给客户端一个<code>304 not modified</code>响应头，表示”缓冲可用，你从浏览器里拿吧！”。</p>
<p>如果服务器判断<code>If-Modified-Since</code>时间后，资源被修改过，则返回给客户端一个<code>200 OK</code>的响应体，并附带全新的资源内容，表示”你要的我已经改过的，给你一份新的”。</p>
<figure><figcaption>HTTP1.0cache1</figcaption></figure>
<figure><figcaption>HTTP1.0cache2</figcaption></figure>
<h3> HTTP/1.1</h3>
<p>HTTP/1.1 的缓存机制在 HTTP/1.0 的基础上，大大增加了灵活性和扩展性。基本工作原理和 HTTP/1.0 保持不变，而是增加了更多细致的特性。其中，请求头中最常见的特性就是<code>Cache-Control</code>，详见 MDN Web 文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener noreferrer">Cache-Control</a>.</p>
<h2> 连接方式</h2>
<p><strong>HTTP/1.0 默认使用短连接</strong> ，也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如 JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 TCP 连接，这样就会导致有大量的“握手报文”和“挥手报文”占用了带宽。</p>
<p><strong>为了解决 HTTP/1.0 存在的资源浪费的问题， HTTP/1.1 优化为默认长连接模式 。</strong> 采用长连接模式的请求报文会通知服务端：“我向你请求连接，并且连接成功建立后，请不要关闭”。因此，该 TCP 连接将持续打开，为后续的客户端-服务端的数据交互服务。也就是说在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。</p>
<p>如果 TCP 连接一直保持的话也是对资源的浪费，因此，一些服务器软件（如 Apache）还会支持超时时间的时间。在超时时间之内没有新的请求达到，TCP 连接才会被关闭。</p>
<p>有必要说明的是，HTTP/1.0 仍提供了长连接选项，即在请求头中加入<code>Connection: Keep-alive</code>。同样的，在 HTTP/1.1 中，如果不希望使用长连接选项，也可以在请求头中加入<code>Connection: close</code>，这样会通知服务器端：“我不需要长连接，连接成功后即可关闭”。</p>
<p><strong>HTTP 协议的长连接和短连接，实质上是 TCP 协议的长连接和短连接。</strong></p>
<p><strong>实现长连接需要客户端和服务端都支持长连接。</strong></p>
<h2> Host 头处理</h2>
<p>域名系统（DNS）允许多个主机名绑定到同一个 IP 地址上，但是 HTTP/1.0 并没有考虑这个问题，假设我们有一个资源 URL 是http://example1.org/home.html，HTTP/1.0的请求报文中，将会请求的是<code>GET /home.html HTTP/1.0</code>.也就是不会加入主机名。这样的报文送到服务器端，服务器是理解不了客户端想请求的真正网址。</p>
<p>因此，HTTP/1.1 在请求头中加入了<code>Host</code>字段。加入<code>Host</code>字段的报文头部将会是:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，服务器端就可以确定客户端想要请求的真正的网址了。</p>
<h2> 带宽优化</h2>
<h3> 范围请求</h3>
<p>HTTP/1.1 引入了范围请求（range request）机制，以避免带宽的浪费。当客户端想请求一个文件的一部分，或者需要继续下载一个已经下载了部分但被终止的文件，HTTP/1.1 可以在请求中加入<code>Range</code>头部，以请求（并只能请求字节型数据）数据的一部分。服务器端可以忽略<code>Range</code>头部，也可以返回若干<code>Range</code>响应。</p>
<p>如果一个响应包含部分数据的话，那么将带有<code>206 (Partial Content)</code>状态码。该状态码的意义在于避免了 HTTP/1.0 代理缓存错误地把该响应认为是一个完整的数据响应，从而把他当作为一个请求的响应缓存。</p>
<p>在范围响应中，<code>Content-Range</code>头部标志指示出了该数据块的偏移量和数据块的长度。</p>
<h3> 状态码 100</h3>
<p>HTTP/1.1 中新加入了状态码<code>100</code>。该状态码的使用场景为，存在某些较大的文件请求，服务器可能不愿意响应这种请求，此时状态码<code>100</code>可以作为指示请求是否会被正常响应，过程如下图：</p>
<figure><figcaption>HTTP1.1continue1</figcaption></figure>
<figure><figcaption>HTTP1.1continue2</figcaption></figure>
<p>然而在 HTTP/1.0 中，并没有<code>100 (Continue)</code>状态码，要想触发这一机制，可以发送一个<code>Expect</code>头部，其中包含一个<code>100-continue</code>的值。</p>
<h3> 压缩</h3>
<p>许多格式的数据在传输时都会做预压缩处理。数据的压缩可以大幅优化带宽的利用。然而，HTTP/1.0 对数据压缩的选项提供的不多，不支持压缩细节的选择，也无法区分端到端（end-to-end）压缩或者是逐跳（hop-by-hop）压缩。</p>
<p>HTTP/1.1 则对内容编码（content-codings）和传输编码（transfer-codings）做了区分。内容编码总是端到端的，传输编码总是逐跳的。</p>
<p>HTTP/1.0 包含了<code>Content-Encoding</code>头部，对消息进行端到端编码。HTTP/1.1 加入了<code>Transfer-Encoding</code>头部，可以对消息进行逐跳传输编码。HTTP/1.1 还加入了<code>Accept-Encoding</code>头部，是客户端用来指示他能处理什么样的内容编码。</p>
<h2> 总结</h2>
<ol>
<li><strong>连接方式</strong> : HTTP 1.0 为短连接，HTTP 1.1 支持长连接。</li>
<li><strong>状态响应码</strong> : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，<code>100 (Continue)</code>——在请求大资源前的预热请求，<code>206 (Partial Content)</code>——范围请求的标识码，<code>409 (Conflict)</code>——请求与当前资源的规定冲突，<code>410 (Gone)</code>——资源已被永久转移，而且没有任何已知的转发地址。</li>
<li><strong>缓存处理</strong> : 在 HTTP1.0 中主要使用 header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li>
<li><strong>带宽优化及网络连接的使用</strong> :HTTP1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li>
<li><strong>Host 头处理</strong> : HTTP/1.1 在请求头中加入了<code>Host</code>字段。</li>
</ol>
<h2> 参考资料</h2>
<p><a href="http://www.ra.ethz.ch/cdstore/www8/data/2136/pdf/pd1.pdf" target="_blank" rel="noopener noreferrer">Key differences between HTTP/1.0 and HTTP/1.1</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>NAT 协议详解（网络层）</title>
      <link>https://javaguide.cn/cs-basics/network/nat.html</link>
      <guid>https://javaguide.cn/cs-basics/network/nat.html</guid>
      <source url="https://javaguide.cn/rss.xml">NAT 协议详解（网络层）</source>
      <description>应用场景 NAT 协议（Network Address Translation） 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，Local Area Network，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（Wide Area Network，WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。 这个场景其实不难理解。随着一个个小型办公室、家庭办公室（Small Office, Home Office, SOHO）的出现，为了管理这些 SOHO，一个个子网被设计出来，从而在整个 Internet 中的主机数量将非常庞大。如果每个主机都有一个“绝对唯一”的 IP 地址，那么 IPv4 地址的表达能力可能很快达到上限（$2^{32}$）。因此，实际上，SOHO 子网中的 IP 地址是“相对的”，这在一定程度上也缓解了 IPv4 地址的分配压力。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 应用场景</h2>
<p><strong>NAT 协议（Network Address Translation）</strong> 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，Local Area Network，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（Wide Area Network，WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</p>
<p>这个场景其实不难理解。随着一个个小型办公室、家庭办公室（Small Office, Home Office, SOHO）的出现，为了管理这些 SOHO，一个个子网被设计出来，从而在整个 Internet 中的主机数量将非常庞大。如果每个主机都有一个“绝对唯一”的 IP 地址，那么 IPv4 地址的表达能力可能很快达到上限（$2^{32}$）。因此，实际上，SOHO 子网中的 IP 地址是“相对的”，这在一定程度上也缓解了 IPv4 地址的分配压力。</p>
<p>SOHO 子网的“代理人”，也就是和外界的窗口，通常由路由器扮演。路由器的 LAN 一侧管理着一个小子网，而它的 WAN 接口才是真正参与到 Internet 中的接口，也就有一个“绝对唯一的地址”。NAT 协议，正是在 LAN 中的主机在与 LAN 外界通信时，起到了地址转换的关键作用。</p>
<h2> 细节</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/nat-demo.png" alt="NAT 协议" tabindex="0"><figcaption>NAT 协议</figcaption></figure>
<p>假设当前场景如上图。中间是一个路由器，它的右侧组织了一个 LAN，网络号为<code>10.0.0/24</code>。LAN 侧接口的 IP 地址为<code>10.0.0.4</code>，并且该子网内有至少三台主机，分别是<code>10.0.0.1</code>，<code>10.0.0.2</code>和<code>10.0.0.3</code>。路由器的左侧连接的是 WAN，WAN 侧接口的 IP 地址为<code>138.76.29.7</code>。</p>
<p>首先，针对以上信息，我们有如下事实需要说明：</p>
<ol>
<li>路由器的右侧子网的网络号为<code>10.0.0/24</code>，主机号为<code>10.0.0/8</code>，三台主机地址，以及路由器的 LAN 侧接口地址，均由 DHCP 协议规定。而且，该 DHCP 运行在路由器内部（路由器自维护一个小 DHCP 服务器），从而为子网内提供 DHCP 服务。</li>
<li>路由器的 WAN 侧接口地址同样由 DHCP 协议规定，但该地址是路由器从 ISP（网络服务提供商）处获得，也就是该 DHCP 通常运行在路由器所在区域的 DHCP 服务器上。</li>
</ol>
<p>现在，路由器内部还运行着 NAT 协议，从而为 LAN-WAN 间通信提供地址转换服务。为此，一个很重要的结构是 <strong>NAT 转换表</strong>。为了说明 NAT 的运行细节，假设有以下请求发生：</p>
<ol>
<li>主机<code>10.0.0.1</code>向 IP 地址为<code>128.119.40.186</code>的 Web 服务器（端口 80）发送了 HTTP 请求（如请求页面）。此时，主机<code>10.0.0.1</code>将随机指派一个端口，如<code>3345</code>，作为本次请求的源端口号，将该请求发送到路由器中（目的地址将是<code>128.119.40.186</code>，但会先到达<code>10.0.0.4</code>）。</li>
<li><code>10.0.0.4</code>即路由器的 LAN 接口收到<code>10.0.0.1</code>的请求。路由器将为该请求指派一个新的源端口号，如<code>5001</code>，并将请求报文发送给 WAN 接口<code>138.76.29.7</code>。同时，在 NAT 转换表中记录一条转换记录<strong>138.76.29.7:5001——10.0.0.1:3345</strong>。</li>
<li>请求报文到达 WAN 接口，继续向目的主机<code>128.119.40.186</code>发送。</li>
</ol>
<p>之后，将会有如下响应发生：</p>
<ol>
<li>主机<code>128.119.40.186</code>收到请求，构造响应报文，并将其发送给目的地<code>138.76.29.7:5001</code>。</li>
<li>响应报文到达路由器的 WAN 接口。路由器查询 NAT 转换表，发现<code>138.76.29.7:5001</code>在转换表中有记录，从而将其目的地址和目的端口转换成为<code>10.0.0.1:3345</code>，再发送到<code>10.0.0.4</code>上。</li>
<li>被转换的响应报文到达路由器的 LAN 接口，继而被转发至目的地<code>10.0.0.1</code>。</li>
</ol>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/nat-demo2.png" alt="LAN-WAN 间通信提供地址转换" tabindex="0"><figcaption>LAN-WAN 间通信提供地址转换</figcaption></figure>
<p>🐛 修正（参见：<a href="https://github.com/Snailclimb/JavaGuide/issues/2009" target="_blank" rel="noopener noreferrer">issue#2009</a>）：上图第四步的 Dest 值应该为 <code>10.0.0.1:3345</code> 而不是~~<code>138.76.29.7:5001</code>~~，这里笔误了。</p>
<h2> 划重点</h2>
<p>针对以上过程，有以下几个重点需要强调：</p>
<ol>
<li>当请求报文到达路由器，并被指定了新端口号时，由于端口号有 16 位，因此，通常来说，一个路由器管理的 LAN 中的最大主机数 $≈65500$（$2^{16}$ 的地址空间），但通常 SOHO 子网内不会有如此多的主机数量。</li>
<li>对于目的服务器来说，从来不知道“到底是哪个主机给我发送的请求”，它只知道是来自<code>138.76.29.7:5001</code>的路由器转发的请求。因此，可以说，**路由器在 WAN 和 LAN 之间起到了屏蔽作用，**所有内部主机发送到外部的报文，都具有同一个 IP 地址（不同的端口号），所有外部发送到内部的报文，也都只有一个目的地（不同端口号），是经过了 NAT 转换后，外部报文才得以正确地送达内部主机。</li>
<li>在报文穿过路由器，发生 NAT 转换时，如果 LAN 主机 IP 已经在 NAT 转换表中注册过了，则不需要路由器新指派端口，而是直接按照转换记录穿过路由器。同理，外部报文发送至内部时也如此。</li>
</ol>
<p>总结 NAT 协议的特点，有以下几点：</p>
<ol>
<li>NAT 协议通过对 WAN 屏蔽 LAN，有效地缓解了 IPv4 地址分配压力。</li>
<li>LAN 主机 IP 地址的变更，无需通告 WAN。</li>
<li>WAN 的 ISP 变更接口地址时，无需通告 LAN 内主机。</li>
<li>LAN 主机对 WAN 不可见，不可直接寻址，可以保证一定程度的安全性。</li>
</ol>
<p>然而，NAT 协议由于其独特性，存在着一些争议。比如，可能你已经注意到了，**NAT 协议在 LAN 以外，标识一个内部主机时，使用的是端口号，因为 IP 地址都是相同的。**这种将端口号作为主机寻址的行为，可能会引发一些误会。此外，路由器作为网络层的设备，修改了传输层的分组内容（修改了源 IP 地址和端口号），同样是不规范的行为。但是，尽管如此，NAT 协议作为 IPv4 时代的产物，极大地方便了一些本来棘手的问题，一直被沿用至今。</p>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/network/nat-demo.png" type="image/png"/>
    </item>
    <item>
      <title>网络攻击常见手段总结</title>
      <link>https://javaguide.cn/cs-basics/network/network-attack-means.html</link>
      <guid>https://javaguide.cn/cs-basics/network/network-attack-means.html</guid>
      <source url="https://javaguide.cn/rss.xml">网络攻击常见手段总结</source>
      <description>本文整理完善自TCP/IP 常见攻击手段 - 暖蓝笔记 - 2021这篇文章。 这篇文章的内容主要是介绍 TCP/IP 常见攻击手段，尤其是 DDoS 攻击，也会补充一些其他的常见网络攻击手段。 IP 欺骗 IP 是什么? 在网络中，所有的设备都会分配一个地址。这个地址就仿佛小蓝的家地址「多少号多少室」，这个号就是分配给整个子网的，「室」对应的号码即分配给子网中计算机的，这就是网络中的地址。「号」对应的号码为网络号，「室」对应的号码为主机号，这个地址的整体就是 IP 地址。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文整理完善自<a href="https://mp.weixin.qq.com/s/AZwWrOlLxRSSi-ywBgZ0fA" target="_blank" rel="noopener noreferrer">TCP/IP 常见攻击手段 - 暖蓝笔记 - 2021</a>这篇文章。</p>
</blockquote>
<p>这篇文章的内容主要是介绍 TCP/IP 常见攻击手段，尤其是 DDoS 攻击，也会补充一些其他的常见网络攻击手段。</p>
<h2> IP 欺骗</h2>
<h3> IP 是什么?</h3>
<p>在网络中，所有的设备都会分配一个地址。这个地址就仿佛小蓝的家地址「<strong>多少号多少室</strong>」，这个号就是分配给整个子网的，「<strong>室</strong>」对应的号码即分配给子网中计算机的，这就是网络中的地址。「号」对应的号码为网络号，「<strong>室</strong>」对应的号码为主机号，这个地址的整体就是 <strong>IP 地址</strong>。</p>
<h3> 通过 IP 地址我们能知道什么？</h3>
<p>通过 IP 地址，我们就可以知道判断访问对象服务器的位置，从而将消息发送到服务器。一般发送者发出的消息首先经过子网的集线器，转发到最近的路由器，然后根据路由位置访问下一个路由器的位置，直到终点</p>
<p><strong>IP 头部格式</strong> :</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/843fd07074874ee0b695eca659411b42~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> IP 欺骗技术是什么？</h3>
<p>骗呗，拐骗，诱骗！</p>
<p>IP 欺骗技术就是<strong>伪造</strong>某台主机的 IP 地址的技术。通过 IP 地址的伪装使得某台主机能够<strong>伪装</strong>另外的一台主机，而这台主机往往具有某种特权或者被另外的主机所信任。</p>
<p>假设现在有一个合法用户 <strong>(1.1.1.1)</strong> 已经同服务器建立正常的连接，攻击者构造攻击的 TCP 数据，伪装自己的 IP 为 <strong>1.1.1.1</strong>，并向服务器发送一个带有 RSI 位的 TCP 数据段。服务器接收到这样的数据后，认为从 <strong>1.1.1.1</strong> 发送的连接有错误，就会清空缓冲区中建立好的连接。</p>
<p>这时，如果合法用户 <strong>1.1.1.1</strong> 再发送合法数据，服务器就已经没有这样的连接了，该用户就必须从新开始建立连接。攻击时，伪造大量的 IP 地址，向目标发送 RST 数据，使服务器不对合法用户服务。虽然 IP 地址欺骗攻击有着相当难度，但我们应该清醒地意识到，这种攻击非常广泛，入侵往往从这种攻击开始。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7547a145adf9404aa3a05f01f5ca2e32~tplv-k3u1fbpfcp-zoom-1.image" alt="IP 欺骗 DDoS 攻击" tabindex="0"><figcaption>IP 欺骗 DDoS 攻击</figcaption></figure>
<h3> 如何缓解 IP 欺骗？</h3>
<p>虽然无法预防 IP 欺骗，但可以采取措施来阻止伪造数据包渗透网络。<strong>入口过滤</strong> 是防范欺骗的一种极为常见的防御措施，如 BCP38（通用最佳实践文档）所示。入口过滤是一种数据包过滤形式，通常在<a href="https://www.cloudflare.com/learning/serverless/glossary/what-is-edge-computing/" target="_blank" rel="noopener noreferrer">网络边缘</a>设备上实施，用于检查传入的 IP 数据包并确定其源标头。如果这些数据包的源标头与其来源不匹配或者看上去很可疑，则拒绝这些数据包。一些网络还实施出口过滤，检查退出网络的 IP 数据包，确保这些数据包具有合法源标头，以防止网络内部用户使用 IP 欺骗技术发起出站恶意攻击。</p>
<h2> SYN Flood(洪水)</h2>
<h3> SYN Flood 是什么？</h3>
<p>SYN Flood 是互联网上最原始、最经典的 DDoS（Distributed Denial of Service，分布式拒绝服务）攻击之一，旨在耗尽可用服务器资源，致使服务器无法传输合法流量</p>
<p>SYN Flood 利用了 TCP 协议的三次握手机制，攻击者通常利用工具或者控制僵尸主机向服务器发送海量的变源 IP 地址或变源端口的 TCP SYN 报文，服务器响应了这些报文后就会生成大量的半连接，当系统资源被耗尽后，服务器将无法提供正常的服务。
增加服务器性能，提供更多的连接能力对于 SYN Flood 的海量报文来说杯水车薪，防御 SYN Flood 的关键在于判断哪些连接请求来自于真实源，屏蔽非真实源的请求以保障正常的业务请求能得到服务。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b3d2d4dc8f24890b5957df1c7d6feb8~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> TCP SYN Flood 攻击原理是什么？</h3>
<p><strong>TCP SYN Flood</strong> 攻击利用的是 <strong>TCP</strong> 的三次握手（<strong>SYN -&gt; SYN/ACK -&gt; ACK</strong>），假设连接发起方是 A，连接接受方是 B，即 B 在某个端口（<strong>Port</strong>）上监听 A 发出的连接请求，过程如下图所示，左边是 A，右边是 B。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a39355a1ea404323a11ca6644e009183~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>A 首先发送 <strong>SYN</strong>（Synchronization）消息给 B，要求 B 做好接收数据的准备；B 收到后反馈 <strong>SYN-ACK</strong>（Synchronization-Acknowledgement） 消息给 A，这个消息的目的有两个：</p>
<ul>
<li>向 A 确认已做好接收数据的准备，</li>
<li>同时要求 A 也做好接收数据的准备，此时 B 已向 A 确认好接收状态，并等待 A 的确认，连接处于<strong>半开状态（Half-Open）</strong>，顾名思义只开了一半；A 收到后再次发送 <strong>ACK</strong> (Acknowledgement) 消息给 B，向 B 确认也做好了接收数据的准备，至此三次握手完成，「<strong>连接</strong>」就建立了，</li>
</ul>
<p>大家注意到没有，最关键的一点在于双方是否都按对方的要求进入了<strong>可以接收消息</strong>的状态。而这个状态的确认主要是双方将要使用的<strong>消息序号(<strong>SequenceNum)，<strong>TCP</strong> 为保证消息按发送顺序抵达接收方的上层应用，需要用</strong>消息序号</strong>来标记消息的发送先后顺序的。</p>
<p><strong>TCP</strong>是「<strong>双工</strong>」(Duplex)连接，同时支持双向通信，也就是双方同时可向对方发送消息，其中 <strong>SYN</strong> 和 <strong>SYN-ACK</strong> 消息开启了 A→B 的单向通信通道（B 获知了 A 的消息序号）；<strong>SYN-ACK</strong> 和 <strong>ACK</strong> 消息开启了 B→A 单向通信通道（A 获知了 B 的消息序号）。</p>
<p>上面讨论的是双方在诚实守信，正常情况下的通信。</p>
<p>但实际情况是，网络可能不稳定会丢包，使握手消息不能抵达对方，也可能是对方故意不按规矩来，故意延迟或不发送握手确认消息。</p>
<p>假设 B 通过某 <strong>TCP</strong> 端口提供服务，B 在收到 A 的 <strong>SYN</strong> 消息时，积极的反馈了 <strong>SYN-ACK</strong> 消息，使连接进入<strong>半开状态</strong>，因为 B 不确定自己发给 A 的 <strong>SYN-ACK</strong> 消息或 A 反馈的 ACK 消息是否会丢在半路，所以会给每个待完成的半开连接都设一个<strong>Timer</strong>，如果超过时间还没有收到 A 的 <strong>ACK</strong> 消息，则重新发送一次 <strong>SYN-ACK</strong> 消息给 A，直到重试超过一定次数时才会放弃。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ff1daddcec44d61994f254e664987b4~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0"><figcaption>图片</figcaption></figure>
<p>B 为帮助 A 能顺利连接，需要<strong>分配内核资源</strong>维护半开连接，那么当 B 面临海量的连接 A 时，如上图所示，<strong>SYN Flood</strong> 攻击就形成了。攻击方 A 可以控制肉鸡向 B 发送大量 SYN 消息但不响应 ACK 消息，或者干脆伪造 SYN 消息中的 <strong>Source IP</strong>，使 B 反馈的 <strong>SYN-ACK</strong> 消息石沉大海，导致 B 被大量注定不能完成的半开连接占据，直到资源耗尽，停止响应正常的连接请求。</p>
<h3> SYN Flood 的常见形式有哪些？</h3>
<p><strong>恶意用户可通过三种不同方式发起 SYN Flood 攻击</strong>：</p>
<ol>
<li><strong>直接攻击：</strong> 不伪造 IP 地址的 SYN 洪水攻击称为直接攻击。在此类攻击中，攻击者完全不屏蔽其 IP 地址。由于攻击者使用具有真实 IP 地址的单一源设备发起攻击，因此很容易发现并清理攻击者。为使目标机器呈现半开状态，黑客将阻止个人机器对服务器的 SYN-ACK 数据包做出响应。为此，通常采用以下两种方式实现：部署防火墙规则，阻止除 SYN 数据包以外的各类传出数据包；或者，对传入的所有 SYN-ACK 数据包进行过滤，防止其到达恶意用户机器。实际上，这种方法很少使用（即便使用过也不多见），因为此类攻击相当容易缓解 – 只需阻止每个恶意系统的 IP 地址。哪怕攻击者使用僵尸网络（如 <a href="https://www.cloudflare.com/learning/ddos/glossary/mirai-botnet/" target="_blank" rel="noopener noreferrer">Mirai 僵尸网络</a>），通常也不会刻意屏蔽受感染设备的 IP。</li>
<li><strong>欺骗攻击：</strong> 恶意用户还可以伪造其发送的各个 SYN 数据包的 IP 地址，以便阻止缓解措施并加大身份暴露难度。虽然数据包可能经过伪装，但还是可以通过这些数据包追根溯源。此类检测工作很难开展，但并非不可实现；特别是，如果 Internet 服务提供商 (ISP) 愿意提供帮助，则更容易实现。</li>
<li><strong>分布式攻击（DDoS）：</strong> 如果使用僵尸网络发起攻击，则追溯攻击源头的可能性很低。随着混淆级别的攀升，攻击者可能还会命令每台分布式设备伪造其发送数据包的 IP 地址。哪怕攻击者使用僵尸网络（如 Mirai 僵尸网络），通常也不会刻意屏蔽受感染设备的 IP。</li>
</ol>
<h3> 如何缓解 SYN Flood？</h3>
<h4> 扩展积压工作队列</h4>
<p>目标设备安装的每个操作系统都允许具有一定数量的半开连接。若要响应大量 SYN 数据包，一种方法是增加操作系统允许的最大半开连接数目。为成功扩展最大积压工作，系统必须额外预留内存资源以处理各类新请求。如果系统没有足够的内存，无法应对增加的积压工作队列规模，将对系统性能产生负面影响，但仍然好过拒绝服务。</p>
<h4> 回收最先创建的 TCP 半开连接</h4>
<p>另一种缓解策略是在填充积压工作后覆盖最先创建的半开连接。这项策略要求完全建立合法连接的时间低于恶意 SYN 数据包填充积压工作的时间。当攻击量增加或积压工作规模小于实际需求时，这项特定的防御措施将不奏效。</p>
<h4> SYN Cookie</h4>
<p>此策略要求服务器创建 Cookie。为避免在填充积压工作时断开连接，服务器使用 SYN-ACK 数据包响应每一项连接请求，而后从积压工作中删除 SYN 请求，同时从内存中删除请求，保证端口保持打开状态并做好重新建立连接的准备。如果连接是合法请求并且已将最后一个 ACK 数据包从客户端机器发回服务器，服务器将重建（存在一些限制）SYN 积压工作队列条目。虽然这项缓解措施势必会丢失一些 TCP 连接信息，但好过因此导致对合法用户发起拒绝服务攻击。</p>
<h2> UDP Flood(洪水)</h2>
<h3> UDP Flood 是什么？</h3>
<p><strong>UDP Flood</strong> 也是一种拒绝服务攻击，将大量的用户数据报协议（<strong>UDP</strong>）数据包发送到目标服务器，目的是压倒该设备的处理和响应能力。防火墙保护目标服务器也可能因 <strong>UDP</strong> 泛滥而耗尽，从而导致对合法流量的拒绝服务。</p>
<h3> UDP Flood 攻击原理是什么？</h3>
<p><strong>UDP Flood</strong> 主要通过利用服务器响应发送到其中一个端口的 <strong>UDP</strong> 数据包所采取的步骤。在正常情况下，当服务器在特定端口接收到 <strong>UDP</strong> 数据包时，会经过两个步骤：</p>
<ul>
<li>服务器首先检查是否正在运行正在侦听指定端口的请求的程序。</li>
<li>如果没有程序在该端口接收数据包，则服务器使用 <strong>ICMP</strong>（ping）数据包进行响应，以通知发送方目的地不可达。</li>
</ul>
<p>举个例子。假设今天要联系酒店的小蓝，酒店客服接到电话后先查看房间的列表来确保小蓝在客房内，随后转接给小蓝。</p>
<p>首先，接待员接收到呼叫者要求连接到特定房间的电话。接待员然后需要查看所有房间的清单，以确保客人在房间中可用，并愿意接听电话。碰巧的是，此时如果突然间所有的电话线同时亮起来，那么他们就会很快就变得不堪重负了。</p>
<p>当服务器接收到每个新的 <strong>UDP</strong> 数据包时，它将通过步骤来处理请求，并利用该过程中的服务器资源。发送 <strong>UDP</strong> 报文时，每个报文将包含源设备的 <strong>IP</strong> 地址。在这种类型的 <strong>DDoS</strong> 攻击期间，攻击者通常不会使用自己的真实 <strong>IP</strong> 地址，而是会欺骗 <strong>UDP</strong> 数据包的源 <strong>IP</strong> 地址，从而阻止攻击者的真实位置被暴露并潜在地饱和来自目标的响应数据包服务器。</p>
<p>由于目标服务器利用资源检查并响应每个接收到的 <strong>UDP</strong> 数据包的结果，当接收到大量 <strong>UDP</strong> 数据包时，目标的资源可能会迅速耗尽，导致对正常流量的拒绝服务。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23dbbc8243a84ed181e088e38bffb37a~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<h3> 如何缓解 UDP Flooding？</h3>
<p>大多数操作系统部分限制了 <strong>ICMP</strong> 报文的响应速率，以中断需要 ICMP 响应的 <strong>DDoS</strong> 攻击。这种缓解的一个缺点是在攻击过程中，合法的数据包也可能被过滤。如果 <strong>UDP Flood</strong> 的容量足够高以使目标服务器的防火墙的状态表饱和，则在服务器级别发生的任何缓解都将不足以应对目标设备上游的瓶颈。</p>
<h2> HTTP Flood(洪水)</h2>
<h3> HTTP Flood 是什么？</h3>
<p>HTTP Flood 是一种大规模的 DDoS（Distributed Denial of Service，分布式拒绝服务）攻击，旨在利用 HTTP 请求使目标服务器不堪重负。目标因请求而达到饱和，且无法响应正常流量后，将出现拒绝服务，拒绝来自实际用户的其他请求。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa64869551d94c8d89fa80eaf4395bfa~tplv-k3u1fbpfcp-zoom-1.image" alt="HTTP 洪水攻击" tabindex="0"><figcaption>HTTP 洪水攻击</figcaption></figure>
<h3> HTTP Flood 的攻击原理是什么？</h3>
<p>HTTP 洪水攻击是“第 7 层”DDoS 攻击的一种。第 7 层是 OSI 模型的应用程序层，指的是 HTTP 等互联网协议。HTTP 是基于浏览器的互联网请求的基础，通常用于加载网页或通过互联网发送表单内容。缓解应用程序层攻击特别复杂，因为恶意流量和正常流量很难区分。</p>
<p>为了获得最大效率，恶意行为者通常会利用或创建僵尸网络，以最大程度地扩大攻击的影响。通过利用感染了恶意软件的多台设备，攻击者可以发起大量攻击流量来进行攻击。</p>
<p>HTTP 洪水攻击有两种：</p>
<ul>
<li><strong>HTTP GET 攻击</strong>：在这种攻击形式下，多台计算机或其他设备相互协调，向目标服务器发送对图像、文件或其他资产的多个请求。当目标被传入的请求和响应所淹没时，来自正常流量源的其他请求将被拒绝服务。</li>
<li><strong>HTTP POST 攻击</strong>：一般而言，在网站上提交表单时，服务器必须处理传入的请求并将数据推送到持久层（通常是数据库）。与发送 POST 请求所需的处理能力和带宽相比，处理表单数据和运行必要数据库命令的过程相对密集。这种攻击利用相对资源消耗的差异，直接向目标服务器发送许多 POST 请求，直到目标服务器的容量饱和并拒绝服务为止。</li>
</ul>
<h3> 如何防护 HTTP Flood？</h3>
<p>如前所述，缓解第 7 层攻击非常复杂，而且通常要从多方面进行。一种方法是对发出请求的设备实施质询，以测试它是否是机器人，这与在线创建帐户时常用的 CAPTCHA 测试非常相似。通过提出 JavaScript 计算挑战之类的要求，可以缓解许多攻击。</p>
<p>其他阻止 HTTP 洪水攻击的途径包括使用 Web 应用程序防火墙 (WAF)、管理 IP 信誉数据库以跟踪和有选择地阻止恶意流量，以及由工程师进行动态分析。Cloudflare 具有超过 2000 万个互联网设备的规模优势，能够分析来自各种来源的流量并通过快速更新的 WAF 规则和其他防护策略来缓解潜在的攻击，从而消除应用程序层 DDoS 流量。</p>
<h2> DNS Flood(洪水)</h2>
<h3> DNS Flood 是什么？</h3>
<p>域名系统（DNS）服务器是互联网的“电话簿“；互联网设备通过这些服务器来查找特定 Web 服务器以便访问互联网内容。DNS Flood 攻击是一种分布式拒绝服务（DDoS）攻击，攻击者用大量流量淹没某个域的 DNS 服务器，以尝试中断该域的 DNS 解析。如果用户无法找到电话簿，就无法查找到用于调用特定资源的地址。通过中断 DNS 解析，DNS Flood 攻击将破坏网站、API 或 Web 应用程序响应合法流量的能力。很难将 DNS Flood 攻击与正常的大流量区分开来，因为这些大规模流量往往来自多个唯一地址，查询该域的真实记录，模仿合法流量。</p>
<h3> DNS Flood 的攻击原理是什么？</h3>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97ea11a212924900b10d159226783887~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>域名系统的功能是将易于记忆的名称（例如 example.com）转换成难以记住的网站服务器地址（例如 192.168.0.1），因此成功攻击 DNS 基础设施将导致大多数人无法使用互联网。DNS Flood 攻击是一种相对较新的基于 DNS 的攻击，这种攻击是在高带宽<a href="https://www.cloudflare.com/learning/ddos/glossary/internet-of-things-iot/" target="_blank" rel="noopener noreferrer">物联网（IoT）</a><a href="https://www.cloudflare.com/learning/ddos/what-is-a-ddos-botnet/" target="_blank" rel="noopener noreferrer">僵尸网络</a>（如 <a href="https://www.cloudflare.com/learning/ddos/glossary/mirai-botnet/" target="_blank" rel="noopener noreferrer">Mirai</a>）兴起后激增的。DNS Flood 攻击使用 IP 摄像头、DVR 盒和其他 IoT 设备的高带宽连接直接淹没主要提供商的 DNS 服务器。来自 IoT 设备的大量请求淹没 DNS 提供商的服务，阻止合法用户访问提供商的 DNS 服务器。</p>
<p>DNS Flood 攻击不同于 <a href="https://www.cloudflare.com/zh-cn/learning/ddos/dns-amplification-ddos-attack/" target="_blank" rel="noopener noreferrer">DNS 放大攻击</a>。与 DNS Flood 攻击不同，DNS 放大攻击反射并放大不安全 DNS 服务器的流量，以便隐藏攻击的源头并提高攻击的有效性。DNS 放大攻击使用连接带宽较小的设备向不安全的 DNS 服务器发送无数请求。这些设备对非常大的 DNS 记录发出小型请求，但在发出请求时，攻击者伪造返回地址为目标受害者。这种放大效果让攻击者能借助有限的攻击资源来破坏较大的目标。</p>
<h3> 如何防护 DNS Flood?</h3>
<p>DNS Flood 对传统上基于放大的攻击方法做出了改变。借助轻易获得的高带宽僵尸网络，攻击者现能针对大型组织发动攻击。除非被破坏的 IoT 设备得以更新或替换，否则抵御这些攻击的唯一方法是使用一个超大型、高度分布式的 DNS 系统，以便实时监测、吸收和阻止攻击流量。</p>
<h2> TCP 重置攻击</h2>
<p>在 <strong>TCP</strong> 重置攻击中，攻击者通过向通信的一方或双方发送伪造的消息，告诉它们立即断开连接，从而使通信双方连接中断。正常情况下，如果客户端收发现到达的报文段对于相关连接而言是不正确的，<strong>TCP</strong> 就会发送一个重置报文段，从而导致 <strong>TCP</strong> 连接的快速拆卸。</p>
<p><strong>TCP</strong> 重置攻击利用这一机制，通过向通信方发送伪造的重置报文段，欺骗通信双方提前关闭 TCP 连接。如果伪造的重置报文段完全逼真，接收者就会认为它有效，并关闭 <strong>TCP</strong> 连接，防止连接被用来进一步交换信息。服务端可以创建一个新的 <strong>TCP</strong> 连接来恢复通信，但仍然可能会被攻击者重置连接。万幸的是，攻击者需要一定的时间来组装和发送伪造的报文，所以一般情况下这种攻击只对长连接有杀伤力，对于短连接而言，你还没攻击呢，人家已经完成了信息交换。</p>
<p>从某种意义上来说，伪造 <strong>TCP</strong> 报文段是很容易的，因为 <strong>TCP/IP</strong> 都没有任何内置的方法来验证服务端的身份。有些特殊的 IP 扩展协议（例如 <code>IPSec</code>）确实可以验证身份，但并没有被广泛使用。客户端只能接收报文段，并在可能的情况下使用更高级别的协议（如 <code>TLS</code>）来验证服务端的身份。但这个方法对 <strong>TCP</strong> 重置包并不适用，因为 <strong>TCP</strong> 重置包是 <strong>TCP</strong> 协议本身的一部分，无法使用更高级别的协议进行验证。</p>
<h2> 模拟攻击</h2>
<blockquote>
<p>以下实验是在 <code>OSX</code> 系统中完成的，其他系统请自行测试。</p>
</blockquote>
<p>现在来总结一下伪造一个 <strong>TCP</strong> 重置报文要做哪些事情：</p>
<ul>
<li>嗅探通信双方的交换信息。</li>
<li>截获一个 <code>ACK</code> 标志位置位 1 的报文段，并读取其 <code>ACK</code> 号。</li>
<li>伪造一个 TCP 重置报文段（<code>RST</code> 标志位置为 1），其序列号等于上面截获的报文的 <code>ACK</code> 号。这只是理想情况下的方案，假设信息交换的速度不是很快。大多数情况下为了增加成功率，可以连续发送序列号不同的重置报文。</li>
<li>将伪造的重置报文发送给通信的一方或双方，时其中断连接。</li>
</ul>
<p>为了实验简单，我们可以使用本地计算机通过 <code>localhost</code> 与自己通信，然后对自己进行 TCP 重置攻击。需要以下几个步骤：</p>
<ul>
<li>在两个终端之间建立一个 TCP 连接。</li>
<li>编写一个能嗅探通信双方数据的攻击程序。</li>
<li>修改攻击程序，伪造并发送重置报文。</li>
</ul>
<p>下面正式开始实验。</p>
<blockquote>
<p>建立 TCP 连接</p>
</blockquote>
<p>可以使用 netcat 工具来建立 TCP 连接，这个工具很多操作系统都预装了。打开第一个终端窗口，运行以下命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会启动一个 TCP 服务，监听端口为 <code>8000</code>。接着再打开第二个终端窗口，运行以下命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会尝试与上面的服务建立连接，在其中一个窗口输入一些字符，就会通过 TCP 连接发送给另一个窗口并打印出来。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df0508cbf26446708cf98f8ad514dbea~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<blockquote>
<p>嗅探流量</p>
</blockquote>
<p>编写一个攻击程序，使用 Python 网络库 <code>scapy</code> 来读取两个终端窗口之间交换的数据，并将其打印到终端上。代码比较长，下面为一部份，完整代码后台回复 TCP 攻击，代码的核心是调用 <code>scapy</code> 的嗅探方法：</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27feb834aa9d4b629fd938611ac9972e~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>这段代码告诉 <code>scapy</code> 在 <code>lo0</code> 网络接口上嗅探数据包，并记录所有 TCP 连接的详细信息。</p>
<ul>
<li><strong>iface</strong> : 告诉 scapy 在 <code>lo0</code>（localhost）网络接口上进行监听。</li>
<li><strong>lfilter</strong> : 这是个过滤器，告诉 scapy 忽略所有不属于指定的 TCP 连接（通信双方皆为 <code>localhost</code>，且端口号为 <code>8000</code>）的数据包。</li>
<li><strong>prn</strong> : scapy 通过这个函数来操作所有符合 <code>lfilter</code> 规则的数据包。上面的例子只是将数据包打印到终端，下文将会修改函数来伪造重置报文。</li>
<li><strong>count</strong> : scapy 函数返回之前需要嗅探的数据包数量。</li>
</ul>
<blockquote>
<p>发送伪造的重置报文</p>
</blockquote>
<p>下面开始修改程序，发送伪造的 TCP 重置报文来进行 TCP 重置攻击。根据上面的解读，只需要修改 prn 函数就行了，让其检查数据包，提取必要参数，并利用这些参数来伪造 TCP 重置报文并发送。</p>
<p>例如，假设该程序截获了一个从（<code>src_ip</code>, <code>src_port</code>）发往 （<code>dst_ip</code>, <code>dst_port</code>）的报文段，该报文段的 ACK 标志位已置为 1，ACK 号为 <code>100,000</code>。攻击程序接下来要做的是：</p>
<ul>
<li>由于伪造的数据包是对截获的数据包的响应，所以伪造数据包的源 <code>IP/Port</code> 应该是截获数据包的目的 <code>IP/Port</code>，反之亦然。</li>
<li>将伪造数据包的 <code>RST</code> 标志位置为 1，以表示这是一个重置报文。</li>
<li>将伪造数据包的序列号设置为截获数据包的 ACK 号，因为这是发送方期望收到的下一个序列号。</li>
<li>调用 <code>scapy</code> 的 <code>send</code> 方法，将伪造的数据包发送给截获数据包的发送方。</li>
</ul>
<p>对于我的程序而言，只需将这一行取消注释，并注释这一行的上面一行，就可以全面攻击了。按照步骤 1 的方法设置 TCP 连接，打开第三个窗口运行攻击程序，然后在 TCP 连接的其中一个终端输入一些字符串，你会发现 TCP 连接被中断了！</p>
<blockquote>
<p>进一步实验</p>
</blockquote>
<ol>
<li>可以继续使用攻击程序进行实验，将伪造数据包的序列号加减 1 看看会发生什么，是不是确实需要和截获数据包的 <code>ACK</code> 号完全相同。</li>
<li>打开 <code>Wireshark</code>，监听 lo0 网络接口，并使用过滤器 <code>ip.src == 127.0.0.1 &amp;&amp; ip.dst == 127.0.0.1 &amp;&amp; tcp.port == 8000</code> 来过滤无关数据。你可以看到 TCP 连接的所有细节。</li>
<li>在连接上更快速地发送数据流，使攻击更难执行。</li>
</ol>
<h2> 中间人攻击</h2>
<p>猪八戒要向小蓝表白，于是写了一封信给小蓝，结果第三者小黑拦截到了这封信，把这封信进行了篡改，于是乎在他们之间进行搞破坏行动。这个马文才就是中间人，实施的就是中间人攻击。好我们继续聊聊什么是中间人攻击。</p>
<h3> 什么是中间人?</h3>
<p>攻击中间人攻击英文名叫 Man-in-the-MiddleAttack，简称「MITM 攻击」。指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方 直接对话，但事实上整个会话都被攻击者完全控制。我们画一张图：</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d69b74e63981472b852797f2fa08976f~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0"><figcaption>图片</figcaption></figure>
<p>从这张图可以看到，中间人其实就是攻击者。通过这种原理，有很多实现的用途，比如说，你在手机上浏览不健康网站的时候，手机就会提示你，此网站可能含有病毒，是否继续访问还是做其他的操作等等。</p>
<h3> 中间人攻击的原理是什么？</h3>
<p>举个例子，我和公司签了一个一份劳动合同，一人一份合同。不晓得哪个可能改了合同内容，不知道真假了，怎么搞？只好找专业的机构来鉴定，自然就要花钱。</p>
<p>在安全领域有句话：<strong>我们没有办法杜绝网络犯罪，只好想办法提高网络犯罪的成本</strong>。既然没法杜绝这种情况，那我们就想办法提高作案的成本，今天我们就简单了解下基本的网络安全知识，也是面试中的高频面试题了。</p>
<p>为了避免双方说活不算数的情况，双方引入第三家机构，将合同原文给可信任的第三方机构，只要这个机构不监守自盗，合同就相对安全。</p>
<p><strong>如果第三方机构内部不严格或容易出现纰漏？</strong></p>
<p>虽然我们将合同原文给第三方机构了，为了防止内部人员的更改，需要采取什么措施呢</p>
<p>一种可行的办法是引入 <strong>摘要算法</strong> 。即合同和摘要一起，为了简单的理解摘要。大家可以想象这个摘要为一个函数，这个函数对原文进行了加密，会产生一个唯一的散列值，一旦原文发生一点点变化，那么这个散列值将会变化。</p>
<h4> 有哪些常用的摘要算法呢？</h4>
<p>目前比较常用的加密算法有消息摘要算法和安全散列算法(<strong>SHA</strong>)。<strong>MD5</strong> 是将任意长度的文章转化为一个 128 位的散列值，可是在 2004 年，<strong>MD5</strong> 被证实了容易发生碰撞，即两篇原文产生相同的摘要。这样的话相当于直接给黑客一个后门，轻松伪造摘要。</p>
<p>所以在大部分的情况下都会选择 <strong>SHA 算法</strong> 。</p>
<p><strong>出现内鬼了怎么办？</strong></p>
<p>看似很安全的场面了，理论上来说杜绝了篡改合同的做法。主要某个员工同时具有修改合同和摘要的权利，那搞事儿就是时间的问题了，毕竟没哪个系统可以完全的杜绝员工接触敏感信息，除非敏感信息都不存在。所以能不能考虑将合同和摘要分开存储呢</p>
<p><strong>那如何确保员工不会修改合同呢？</strong></p>
<p>这确实蛮难的，不过办法总比困难多。我们将合同放在双方手中，摘要放在第三方机构，篡改难度进一步加大</p>
<p><strong>那么员工万一和某个用户串通好了呢？</strong></p>
<p>看来放在第三方的机构还是不好使，同样存在不小风险。所以还需要寻找新的方案，这就出现了 <strong>数字签名和证书</strong>。</p>
<h4> 数字证书和签名有什么用？</h4>
<p>同样的，举个例子。Sum 和 Mike 两个人签合同。Sum 首先用 <strong>SHA</strong> 算法计算合同的摘要，然后用自己私钥将摘要加密，得到数字签名。Sum 将合同原文、签名，以及公钥三者都交给 Mike</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4b7d6fca78b45c8840c12411b717f2f~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>如果 Sum 想要证明合同是 Mike 的，那么就要使用 Mike 的公钥，将这个签名解密得到摘要 x，然后 Mike 计算原文的 sha 摘要 Y，随后对比 x 和 y，如果两者相等，就认为数据没有被篡改</p>
<p>在这样的过程中，Mike 是不能更改 Sum 的合同，因为要修改合同不仅仅要修改原文还要修改摘要，修改摘要需要提供 Mike 的私钥，私钥即 Sum 独有的密码，公钥即 Sum 公布给他人使用的密码</p>
<p>总之，公钥加密的数据只能私钥可以解密。私钥加密的数据只有公钥可以解密，这就是 <strong>非对称加密</strong> 。</p>
<p>隐私保护？不是吓唬大家，信息是透明的兄 die，不过尽量去维护个人的隐私吧，今天学习对称加密和非对称加密。</p>
<p>大家先读读这个字"钥",是读"yao"，我以前也是，其实读"yue"</p>
<h4> 什么是对称加密？</h4>
<p>对称加密，顾名思义，加密方与解密方使用同一钥匙(秘钥)。具体一些就是，发送方通过使用相应的加密算法和秘钥，对将要发送的信息进行加密；对于接收方而言，使用解密算法和相同的秘钥解锁信息，从而有能力阅读信息。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef81cb5e2f0a4d3d9ac5a44ecf97e3cc~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0"><figcaption>图片</figcaption></figure>
<h4> 常见的对称加密算法有哪些？</h4>
<p><strong>DES</strong></p>
<p>DES 使用的密钥表面上是 64 位的，然而只有其中的 56 位被实际用于算法，其余 8 位可以被用于奇偶校验，并在算法中被丢弃。因此，<strong>DES</strong> 的有效密钥长度为 56 位，通常称 <strong>DES</strong> 的密钥长度为 56 位。假设秘钥为 56 位，采用暴力破 Jie 的方式，其秘钥个数为 2 的 56 次方，那么每纳秒执行一次解密所需要的时间差不多 1 年的样子。当然，没人这么干。<strong>DES</strong> 现在已经不是一种安全的加密方法，主要因为它使用的 56 位密钥过短。</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9eb3a2bf6cf14132a890bc3447480eeb~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p><strong>IDEA</strong></p>
<p>国际数据加密算法(International Data Encryption Algorithm)。秘钥长度 128 位，优点没有专利的限制。</p>
<p><strong>AES</strong></p>
<p>当 DES 被破解以后，没过多久推出了 <strong>AES</strong> 算法，提供了三种长度供选择，128 位、192 位和 256，为了保证性能不受太大的影响，选择 128 即可。</p>
<p><strong>SM1 和 SM4</strong></p>
<p>之前几种都是国外的，我们国内自行研究了国密 **SM1 **和 <strong>SM4</strong>。其中 S 都属于国家标准，算法公开。优点就是国家的大力支持和认可</p>
<p><strong>总结</strong>：</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/578961e3175540e081e1432c409b075a~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<h4> 常见的非对称加密算法有哪些？</h4>
<p>在对称加密中，发送方与接收方使用相同的秘钥。那么在非对称加密中则是发送方与接收方使用的不同的秘钥。其主要解决的问题是防止在秘钥协商的过程中发生泄漏。比如在对称加密中，小蓝将需要发送的消息加密，然后告诉你密码是 123balala,ok,对于其他人而言，很容易就能劫持到密码是 123balala。那么在非对称的情况下，小蓝告诉所有人密码是 123balala,对于中间人而言，拿到也没用，因为没有私钥。所以，非对称密钥其实主要解决了密钥分发的难题。如下图</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/153cf04a0ecc43c38003f3a1ab198cc0~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>其实我们经常都在使用非对称加密，比如使用多台服务器搭建大数据平台 hadoop，为了方便多台机器设置免密登录，是不是就会涉及到秘钥分发。再比如搭建 docker 集群也会使用相关非对称加密算法。</p>
<p>常见的非对称加密算法：</p>
<ul>
<li>
<p>RSA（RSA 加密算法，RSA Algorithm）：优势是性能比较快，如果想要较高的加密难度，需要很长的秘钥。</p>
</li>
<li>
<p>ECC：基于椭圆曲线提出。是目前加密强度最高的非对称加密算法</p>
</li>
<li>
<p>SM2：同样基于椭圆曲线问题设计。最大优势就是国家认可和大力支持。</p>
</li>
</ul>
<p>总结：</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28b96fb797904d4b818ee237cdc7614c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<h4> 常见的散列算法有哪些？</h4>
<p>这个大家应该更加熟悉了，比如我们平常使用的 MD5 校验，在很多时候，我并不是拿来进行加密，而是用来获得唯一性 ID。在做系统的过程中，存储用户的各种密码信息，通常都会通过散列算法，最终存储其散列值。</p>
<p><strong>MD5</strong></p>
<p>MD5 可以用来生成一个 128 位的消息摘要，它是目前应用比较普遍的散列算法，具体的应用场景你可以自行  参阅。虽然，因为算法的缺陷，它的唯一性已经被破解了，但是大部分场景下，这并不会构成安全问题。但是，如果不是长度受限（32 个字符），我还是不推荐你继续使用 <strong>MD5</strong> 的。</p>
<p><strong>SHA</strong></p>
<p>安全散列算法。<strong>SHA</strong> 分为 <strong>SHA1</strong> 和 <strong>SH2</strong> 两个版本。该算法的思想是接收一段明文，然后以一种不可逆的方式将它转换成一段（通常更小）密文，也可以简单的理解为取一串输入码（称为预映射或信息），并把它们转化为长度较短、位数固定的输出序列即散列值（也称为信息摘要或信息认证代码）的过程。</p>
<p><strong>SM3</strong></p>
<p>国密算法<strong>SM3</strong>。加密强度和 SHA-256 想不多。主要是收到国家的支持。</p>
<p><strong>总结</strong>：</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79c3c2f72d2f44c7abf2d73a49024495~tplv-k3u1fbpfcp-zoom-1.image" alt="图片" tabindex="0"><figcaption>图片</figcaption></figure>
<p><strong>大部分情况下使用对称加密，具有比较不错的安全性。如果需要分布式进行秘钥分发，考虑非对称。如果不需要可逆计算则散列算法。</strong> 因为这段时间有这方面需求，就看了一些这方面的资料，入坑信息安全，就怕以后洗发水都不用买。谢谢大家查看！</p>
<h4> 第三方机构和证书机制有什么用？</h4>
<p>问题还有，此时如果 Sum 否认给过 Mike 的公钥和合同，不久 gg 了</p>
<p>所以需要 Sum 过的话做过的事儿需要足够的信誉，这就引入了 <strong>第三方机构和证书机制</strong> 。</p>
<p>证书之所以会有信用，是因为证书的签发方拥有信用。所以如果 Sum 想让 Mike 承认自己的公钥，Sum 不会直接将公钥给 Mike ，而是提供由第三方机构，含有公钥的证书。如果 Mike 也信任这个机构，法律都认可，那 ik，信任关系成立</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1a3dbf87e3e41ff894f39512a10f66d~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>如上图所示，Sum 将自己的申请提交给机构，产生证书的原文。机构用自己的私钥签名 Sum 的申请原文（先根据原文内容计算摘要，再用私钥加密），得到带有签名信息的证书。Mike 拿到带签名信息的证书，通过第三方机构的公钥进行解密，获得 Sum 证书的摘要、证书的原文。有了 Sum 证书的摘要和原文，Mike 就可以进行验签。验签通过，Mike 就可以确认 Sum 的证书的确是第三方机构签发的。</p>
<p>用上面这样一个机制，合同的双方都无法否认合同。这个解决方案的核心在于需要第三方信用服务机构提供信用背书。这里产生了一个最基础的信任链，如果第三方机构的信任崩溃，比如被黑客攻破，那整条信任链条也就断裂了</p>
<p>为了让这个信任条更加稳固，就需要环环相扣，打造更长的信任链，避免单点信任风险</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1481f0409da94ba6bb0fee69bf0996f8~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>上图中，由信誉最好的根证书机构提供根证书，然后根证书机构去签发二级机构的证书；二级机构去签发三级机构的证书；最后有由三级机构去签发 Sum 证书。</p>
<p>如果要验证 Sum 证书的合法性，就需要用三级机构证书中的公钥去解密 Sum 证书的数字签名。</p>
<p>如果要验证三级机构证书的合法性，就需要用二级机构的证书去解密三级机构证书的数字签名。</p>
<p>如果要验证二级结构证书的合法性，就需要用根证书去解密。</p>
<p>以上，就构成了一个相对长一些的信任链。如果其中一方想要作弊是非常困难的，除非链条中的所有机构同时联合起来，进行欺诈。</p>
<h3> 中间人攻击如何避免?</h3>
<p>既然知道了中间人攻击的原理也知道了他的危险，现在我们看看如何避免。相信我们都遇到过下面这种状况：</p>
<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0dde4b76be6240699312d822a3fe1ed3~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>出现这个界面的很多情况下，都是遇到了中间人攻击的现象，需要对安全证书进行及时地监测。而且大名鼎鼎的 github 网站，也曾遭遇过中间人攻击：</p>
<p>想要避免中间人攻击的方法目前主要有两个：</p>
<ul>
<li>客户端不要轻易相信证书：因为这些证书极有可能是中间人。</li>
<li>App 可以提前预埋证书在本地：意思是我们本地提前有一些证书，这样其他证书就不能再起作用了。</li>
</ul>
<h2> DDOS</h2>
<p>通过上面的描述，总之即好多种攻击都是 <strong>DDOS</strong> 攻击，所以简单总结下这个攻击相关内容。</p>
<p>其实，像全球互联网各大公司，均遭受过大量的 <strong>DDoS</strong>。</p>
<p>2018 年，GitHub 在一瞬间遭到高达 1.35Tbps 的带宽攻击。这次 DDoS 攻击几乎可以堪称是互联网有史以来规模最大、威力最大的 DDoS 攻击了。在 GitHub 遭到攻击后，仅仅一周后，DDoS 攻击又开始对 Google、亚马逊甚至 Pornhub 等网站进行了 DDoS 攻击。后续的 DDoS 攻击带宽最高也达到了 1Tbps。</p>
<h3> DDoS 攻击究竟是什么？</h3>
<p>DDos 全名 Distributed Denial of Service，翻译成中文就是<strong>分布式拒绝服务</strong>。指的是处于不同位置的多个攻击者同时向一个或数个目标发动攻击，是一种分布的、协同的大规模攻击方式。单一的 DoS 攻击一般是采用一对一方式的，它利用网络协议和操作系统的一些缺陷，采用<strong>欺骗和伪装</strong>的策略来进行网络攻击，使网站服务器充斥大量要求回复的信息，消耗网络带宽或系统资源，导致网络或系统不胜负荷以至于瘫痪而停止提供正常的网络服务。</p>
<blockquote>
<p>举个例子</p>
</blockquote>
<p>我开了一家有五十个座位的重庆火锅店，由于用料上等，童叟无欺。平时门庭若市，生意特别红火，而对面二狗家的火锅店却无人问津。二狗为了对付我，想了一个办法，叫了五十个人来我的火锅店坐着却不点菜，让别的客人无法吃饭。</p>
<p>上面这个例子讲的就是典型的 DDoS 攻击，一般来说是指攻击者利用“肉鸡”对目标网站在较短的时间内发起大量请求，大规模消耗目标网站的主机资源，让它无法正常服务。在线游戏、互联网金融等领域是 DDoS 攻击的高发行业。</p>
<p>攻击方式很多，比如 <strong>ICMP Flood</strong>、<strong>UDP Flood</strong>、<strong>NTP Flood</strong>、<strong>SYN Flood</strong>、<strong>CC 攻击</strong>、<strong>DNS Query Flood</strong>等等。</p>
<h3> 如何应对 DDoS 攻击？</h3>
<h4> 高防服务器</h4>
<p>还是拿开的重庆火锅店举例，高防服务器就是我给重庆火锅店增加了两名保安，这两名保安可以让保护店铺不受流氓骚扰，并且还会定期在店铺周围巡逻防止流氓骚扰。</p>
<p>高防服务器主要是指能独立硬防御 50Gbps 以上的服务器，能够帮助网站拒绝服务攻击，定期扫描网络主节点等，这东西是不错，就是贵~</p>
<h4> 黑名单</h4>
<p>面对火锅店里面的流氓，我一怒之下将他们拍照入档，并禁止他们踏入店铺，但是有的时候遇到长得像的人也会禁止他进入店铺。这个就是设置黑名单，此方法秉承的就是“错杀一千，也不放一百”的原则，会封锁正常流量，影响到正常业务。</p>
<h4> DDoS 清洗</h4>
<p><strong>DDos</strong> 清洗，就是我发现客人进店几分钟以后，但是一直不点餐，我就把他踢出店里。</p>
<p><strong>DDoS</strong> 清洗会对用户请求数据进行实时监控，及时发现 <strong>DOS</strong> 攻击等异常流量，在不影响正常业务开展的情况下清洗掉这些异常流量。</p>
<h4> CDN 加速</h4>
<p>CDN 加速，我们可以这么理解：为了减少流氓骚扰，我干脆将火锅店开到了线上，承接外卖服务，这样流氓找不到店在哪里，也耍不来流氓了。</p>
<p>在现实中，CDN 服务将网站访问流量分配到了各个节点中，这样一方面隐藏网站的真实 IP，另一方面即使遭遇 <strong>DDoS</strong> 攻击，也可以将流量分散到各个节点中，防止源站崩溃。</p>
<h2> 参考</h2>
<ul>
<li>HTTP 洪水攻击 - CloudFlare：https://www.cloudflare.com/zh-cn/learning/ddos/http-flood-ddos-attack/</li>
<li>SYN 洪水攻击：https://www.cloudflare.com/zh-cn/learning/ddos/syn-flood-ddos-attack/</li>
<li>什么是 IP 欺骗？：https://www.cloudflare.com/zh-cn/learning/ddos/glossary/ip-spoofing/</li>
<li>什么是 DNS 洪水？| DNS 洪水 DDoS 攻击：https://www.cloudflare.com/zh-cn/learning/ddos/dns-flood-ddos-attack/</li>
</ul>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/843fd07074874ee0b695eca659411b42~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>OSI 和 TCP/IP 网络分层模型详解（基础）</title>
      <link>https://javaguide.cn/cs-basics/network/osi-and-tcp-ip-model.html</link>
      <guid>https://javaguide.cn/cs-basics/network/osi-and-tcp-ip-model.html</guid>
      <source url="https://javaguide.cn/rss.xml">OSI 和 TCP/IP 网络分层模型详解（基础）</source>
      <description>OSI 七层模型 OSI 七层模型 是国际标准化组织提出一个网络分层模型，其大体结构以及每一层提供的功能如下图所示： OSI 七层模型 每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> OSI 七层模型</h2>
<p><strong>OSI 七层模型</strong> 是国际标准化组织提出一个网络分层模型，其大体结构以及每一层提供的功能如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png" alt="OSI 七层模型" tabindex="0"><figcaption>OSI 七层模型</figcaption></figure>
<p>每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。</p>
<p><strong>OSI 的七层体系结构概念清楚，理论也很完整，但是它比较复杂而且不实用，而且有些功能在多个层中重复出现。</strong></p>
<p>上面这种图可能比较抽象，再来一个比较生动的图片。下面这个图片是我在国外的一个网站上看到的，非常赞！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/osi七层模型2.png" alt="osi七层模型2" tabindex="0"><figcaption>osi七层模型2</figcaption></figure>
<p><strong>既然 OSI 七层模型这么厉害，为什么干不过 TCP/IP 四 层模型呢？</strong></p>
<p>的确，OSI 七层模型当时一直被一些大公司甚至一些国家政府支持。这样的背景下，为什么会失败呢？我觉得主要有下面几方面原因：</p>
<ol>
<li>OSI 的专家缺乏实际经验，他们在完成 OSI 标准时缺乏商业驱动力</li>
<li>OSI 的协议实现起来过分复杂，而且运行效率很低</li>
<li>OSI 制定标准的周期太长，因而使得按 OSI 标准生产的设备无法及时进入市场（20 世纪 90 年代初期，虽然整套的 OSI 国际标准都已经制定出来，但基于 TCP/IP 的互联网已经抢先在全球相当大的范围成功运行了）</li>
<li>OSI 的层次划分不太合理，有些功能在多个层次中重复出现。</li>
</ol>
<p>OSI 七层模型虽然失败了，但是却提供了很多不错的理论基础。为了更好地去了解网络分层，OSI 七层模型还是非常有必要学习的。</p>
<p>最后再分享一个关于 OSI 七层模型非常不错的总结图片！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-model-detail.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<h2> TCP/IP 四层模型</h2>
<p><strong>TCP/IP 四层模型</strong> 是目前被广泛采用的一种模型,我们可以将 TCP / IP 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：</p>
<ol>
<li>应用层</li>
<li>传输层</li>
<li>网络层</li>
<li>网络接口层</li>
</ol>
<p>需要注意的是，我们并不能将 TCP/IP 四层模型 和 OSI 七层模型完全精确地匹配起来，不过可以简单将两者对应起来，如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png" alt="TCP/IP 四层模型" tabindex="0"><figcaption>TCP/IP 四层模型</figcaption></figure>
<h3> 应用层（Application layer）</h3>
<p><strong>应用层位于传输层之上，主要提供两个终端设备上的应用程序之间信息交换的服务，它定义了信息交换的格式，消息会交给下一层传输层来传输。</strong> 我们把应用层交互的数据单元称为报文。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-five-layer-sample-diagram.png" alt="" tabindex="0"><figcaption></figcaption></figure>
<p>应用层协议定义了网络通信规则，对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如支持 Web 应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。</p>
<p><strong>应用层常见协议</strong>：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/application-layer-protocol.png" alt="应用层常见协议" tabindex="0"><figcaption>应用层常见协议</figcaption></figure>
<ul>
<li><strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>：基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</li>
<li><strong>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</strong>：基于 TCP 协议，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li>
<li><strong>POP3/IMAP（邮件接收协议）</strong>：基于 TCP 协议，两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li>
<li><strong>FTP（File Transfer Protocol，文件传输协议）</strong> : 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li>
<li><strong>Telnet（远程登陆协议）</strong>：基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li>
<li><strong>SSH（Secure Shell Protocol，安全的网络传输协议）</strong>：基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务</li>
<li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</li>
<li><strong>DNS（Domain Name System，域名管理系统）</strong>: 基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</li>
</ul>
<p>关于这些协议的详细介绍请看 <a href="/cs-basics/network/application-layer-protocol.html" target="blank">应用层常见协议总结（应用层）</a> 这篇文章。</p>
<h3> 传输层（Transport layer）</h3>
<p><strong>传输层的主要任务就是负责向两台终端设备进程之间的通信提供通用的数据传输服务。</strong> 应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。</p>
<p><strong>传输层常见协议</strong>：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/transport-layer-protocol.png" alt="传输层常见协议" tabindex="0"><figcaption>传输层常见协议</figcaption></figure>
<ul>
<li><strong>TCP（Transmisson Control Protocol，传输控制协议 ）</strong>：提供 <strong>面向连接</strong> 的，<strong>可靠</strong> 的数据传输服务。</li>
<li><strong>UDP（User Datagram Protocol，用户数据协议）</strong>：提供 <strong>无连接</strong> 的，<strong>尽最大努力</strong> 的数据传输服务（不保证数据传输的可靠性），简单高效。</li>
</ul>
<h3> 网络层（Network layer）</h3>
<p><strong>网络层负责为分组交换网上的不同主机提供通信服务。</strong> 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报，简称数据报。</p>
<p>⚠️ 注意：<strong>不要把运输层的“用户数据报 UDP”和网络层的“IP 数据报”弄混</strong>。</p>
<p><strong>网络层的还有一个任务就是选择合适的路由，使源主机运输层所传下来的分组，能通过网络层中的路由器找到目的主机。</strong></p>
<p>这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称。</p>
<p>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Internet Protocol）和许多路由选择协议，因此互联网的网络层也叫做 <strong>网际层</strong> 或 <strong>IP 层</strong>。</p>
<p><strong>网络层常见协议</strong>：</p>
<figure><figcaption>网络层常见协议</figcaption></figure>
<ul>
<li><strong>IP（Internet Protocol，网际协议）</strong>：TCP/IP 协议中最重要的协议之一，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。</li>
<li><strong>ARP（Address Resolution Protocol，地址解析协议）</strong>：ARP 协议解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li>
<li><strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>：一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除。例如，Ping 工具就使用了 ICMP 协议来测试网络连通性。</li>
<li><strong>NAT（Network Address Translation，网络地址转换协议）</strong>：NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</li>
<li><strong>OSPF（Open Shortest Path First，开放式最短路径优先）</strong> ）：一种内部网关协议（Interior Gateway Protocol，IGP），也是广泛使用的一种动态路由协议，基于链路状态算法，考虑了链路的带宽、延迟等因素来选择最佳路径。</li>
<li><strong>RIP(Routing Information Protocol，路由信息协议）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是一种动态路由协议，基于距离向量算法，使用固定的跳数作为度量标准，选择跳数最少的路径作为最佳路径。</li>
<li><strong>BGP（Border Gateway Protocol，边界网关协议）</strong>：一种用来在路由选择域之间交换网络层可达性信息（Network Layer Reachability Information，NLRI）的路由选择协议，具有高度的灵活性和可扩展性。</li>
</ul>
<h3> 网络接口层（Network interface layer）</h3>
<p>我们可以把网络接口层看作是数据链路层和物理层的合体。</p>
<ol>
<li>数据链路层(data link layer)通常简称为链路层（ 两台主机之间的数据传输，总是在一段一段的链路上传送的）。<strong>数据链路层的作用是将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</strong></li>
<li><strong>物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异</strong></li>
</ol>
<p>网络接口层重要功能和协议如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-interface-layer-protocol.png" alt="网络接口层重要功能和协议" tabindex="0"><figcaption>网络接口层重要功能和协议</figcaption></figure>
<h3> 总结</h3>
<p>简单总结一下每一层包含的协议和核心技术:</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-protocol-overview.png" alt="TCP/IP 各层协议概览" tabindex="0"><figcaption>TCP/IP 各层协议概览</figcaption></figure>
<p><strong>应用层协议</strong> :</p>
<ul>
<li>HTTP（Hypertext Transfer Protocol，超文本传输协议）</li>
<li>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</li>
<li>POP3/IMAP（邮件接收协议）</li>
<li>FTP（File Transfer Protocol，文件传输协议）</li>
<li>Telnet（远程登陆协议）</li>
<li>SSH（Secure Shell Protocol，安全的网络传输协议）</li>
<li>RTP（Real-time Transport Protocol，实时传输协议）</li>
<li>DNS（Domain Name System，域名管理系统）</li>
<li>......</li>
</ul>
<p><strong>传输层协议</strong> :</p>
<ul>
<li>TCP 协议
<ul>
<li>报文段结构</li>
<li>可靠数据传输</li>
<li>流量控制</li>
<li>拥塞控制</li>
</ul>
</li>
<li>UDP 协议
<ul>
<li>报文段结构</li>
<li>RDT（可靠数据传输协议）</li>
</ul>
</li>
</ul>
<p><strong>网络层协议</strong> :</p>
<ul>
<li>IP（Internet Protocol，网际协议）</li>
<li>ARP（Address Resolution Protocol，地址解析协议）</li>
<li>ICMP 协议（控制报文协议，用于发送控制消息）</li>
<li>NAT（Network Address Translation，网络地址转换协议）</li>
<li>OSPF（Open Shortest Path First，开放式最短路径优先）</li>
<li>RIP(Routing Information Protocol，路由信息协议）</li>
<li>BGP（Border Gateway Protocol，边界网关协议）</li>
<li>......</li>
</ul>
<p><strong>网络接口层</strong> :</p>
<ul>
<li>差错检测技术</li>
<li>多路访问协议（信道复用技术）</li>
<li>CSMA/CD 协议</li>
<li>MAC 协议</li>
<li>以太网技术</li>
<li>......</li>
</ul>
<h2> 网络分层的原因</h2>
<p>在这篇文章的最后，我想聊聊：“为什么网络要分层？”。</p>
<p>说到分层，我们先从我们平时使用框架开发一个后台程序来说，我们往往会按照每一层做不同的事情的原则将系统分为三层（复杂的系统分层会更多）:</p>
<ol>
<li>Repository（数据库操作）</li>
<li>Service（业务操作）</li>
<li>Controller（前后端数据交互）</li>
</ol>
<p><strong>复杂的系统需要分层，因为每一层都需要专注于一类事情。网络分层的原因也是一样，每一层只专注于做一类事情。</strong></p>
<p>好了，再来说回：“为什么网络要分层？”。我觉得主要有 3 方面的原因：</p>
<ol>
<li><strong>各层之间相互独立</strong>：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）<strong>。这个和我们对开发时系统进行分层是一个道理。</strong></li>
<li><strong>提高了整体灵活性</strong>：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。<strong>这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。</strong></li>
<li><strong>大问题化小</strong>：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 <strong>这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。</strong></li>
</ol>
<p>我想到了计算机世界非常非常有名的一句话，这里分享一下：</p>
<blockquote>
<p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决，计算机整个体系从上到下都是按照严格的层次结构设计的。</p>
</blockquote>
<h2> 参考</h2>
<ul>
<li>TCP/IP model vs OSI model：https://fiberbit.com.tw/tcpip-model-vs-osi-model/</li>
<li>Data Encapsulation and the TCP/IP Protocol Stack：https://docs.oracle.com/cd/E19683-01/806-4075/ipov-32/index.html</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png" type="image/png"/>
    </item>
    <item>
      <title>计算机网络常见面试题总结(上)</title>
      <link>https://javaguide.cn/cs-basics/network/other-network-questions.html</link>
      <guid>https://javaguide.cn/cs-basics/network/other-network-questions.html</guid>
      <source url="https://javaguide.cn/rss.xml">计算机网络常见面试题总结(上)</source>
      <description>这是一则或许对你有用的小广告 面试专版：准备 Java 面试的小伙伴可以考虑面试专版：《Java 面试指北 》 (质量很高，专为面试打造，配合 JavaGuide 食用)。 知识星球：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 JavaGuide 知识星球（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">这是一则或许对你有用的小广告</p>
<ul>
<li><strong>面试专版</strong>：准备 Java 面试的小伙伴可以考虑面试专版：<strong><a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html" target="_blank" rel="noopener noreferrer">《Java 面试指北 》</a></strong> (质量很高，专为面试打造，配合 JavaGuide 食用)。</li>
<li><strong>知识星球</strong>：专属面试小册/一对一交流/简历修改/专属求职指南，欢迎加入 <strong><a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html" target="_blank" rel="noopener noreferrer">JavaGuide 知识星球</a></strong>（点击链接即可查看星球的详细介绍，一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</li>
</ul>
</div>
<p>上篇主要是计算机网络基础和应用层相关的内容。</p>
<h2> 计算机网络基础</h2>
<h3> 网络分层模型</h3>
<h4> OSI 七层模型是什么？每一层的作用是什么？</h4>
<p><strong>OSI 七层模型</strong> 是国际标准化组织提出一个网络分层模型，其大体结构以及每一层提供的功能如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png" alt="OSI 七层模型" tabindex="0"><figcaption>OSI 七层模型</figcaption></figure>
<p>每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。</p>
<p><strong>OSI 的七层体系结构概念清楚，理论也很完整，但是它比较复杂而且不实用，而且有些功能在多个层中重复出现。</strong></p>
<p>上面这种图可能比较抽象，再来一个比较生动的图片。下面这个图片是我在国外的一个网站上看到的，非常赞！</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/osi七层模型2.png" alt="osi七层模型2" tabindex="0"><figcaption>osi七层模型2</figcaption></figure>
<h4> TCP/IP 四层模型是什么？每一层的作用是什么？</h4>
<p><strong>TCP/IP 四层模型</strong> 是目前被广泛采用的一种模型,我们可以将 TCP / IP 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：</p>
<ol>
<li>应用层</li>
<li>传输层</li>
<li>网络层</li>
<li>网络接口层</li>
</ol>
<p>需要注意的是，我们并不能将 TCP/IP 四层模型 和 OSI 七层模型完全精确地匹配起来，不过可以简单将两者对应起来，如下图所示：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png" alt="TCP/IP 四层模型" tabindex="0"><figcaption>TCP/IP 四层模型</figcaption></figure>
<p>关于每一层作用的详细介绍，请看 <a href="/cs-basics/network/osi-and-tcp-ip-model.html" target="blank">OSI 和 TCP/IP 网络分层模型详解（基础）</a> 这篇文章。</p>
<h4> 为什么网络要分层？</h4>
<p>说到分层，我们先从我们平时使用框架开发一个后台程序来说，我们往往会按照每一层做不同的事情的原则将系统分为三层（复杂的系统分层会更多）:</p>
<ol>
<li>Repository（数据库操作）</li>
<li>Service（业务操作）</li>
<li>Controller（前后端数据交互）</li>
</ol>
<p><strong>复杂的系统需要分层，因为每一层都需要专注于一类事情。网络分层的原因也是一样，每一层只专注于做一类事情。</strong></p>
<p>好了，再来说回：“为什么网络要分层？”。我觉得主要有 3 方面的原因：</p>
<ol>
<li><strong>各层之间相互独立</strong>：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）<strong>。这个和我们对开发时系统进行分层是一个道理。</strong></li>
<li><strong>提高了整体灵活性</strong>：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。<strong>这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。</strong></li>
<li><strong>大问题化小</strong>：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 <strong>这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。</strong></li>
</ol>
<p>我想到了计算机世界非常非常有名的一句话，这里分享一下：</p>
<blockquote>
<p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决，计算机整个体系从上到下都是按照严格的层次结构设计的。</p>
</blockquote>
<h3> 常见网络协议</h3>
<h4> 应用层有哪些常见的协议？</h4>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/application-layer-protocol.png" alt="应用层常见协议" tabindex="0"><figcaption>应用层常见协议</figcaption></figure>
<ul>
<li><strong>HTTP（Hypertext Transfer Protocol，超文本传输协议）</strong>：基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</li>
<li><strong>SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）</strong>：基于 TCP 协议，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li>
<li><strong>POP3/IMAP（邮件接收协议）</strong>：基于 TCP 协议，两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li>
<li><strong>FTP（File Transfer Protocol，文件传输协议）</strong> : 基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li>
<li><strong>Telnet（远程登陆协议）</strong>：基于 TCP 协议，用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li>
<li><strong>SSH（Secure Shell Protocol，安全的网络传输协议）</strong>：基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务</li>
<li><strong>RTP（Real-time Transport Protocol，实时传输协议）</strong>：通常基于 UDP 协议，但也支持 TCP 协议。它提供了端到端的实时传输数据的功能，但不包含资源预留存、不保证实时传输质量，这些功能由 WebRTC 实现。</li>
<li><strong>DNS（Domain Name System，域名管理系统）</strong>: 基于 UDP 协议，用于解决域名和 IP 地址的映射问题。</li>
</ul>
<p>关于这些协议的详细介绍请看 <a href="/cs-basics/network/application-layer-protocol.html" target="blank">应用层常见协议总结（应用层）</a> 这篇文章。</p>
<h4> 传输层有哪些常见的协议？</h4>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/transport-layer-protocol.png" alt="传输层常见协议" tabindex="0"><figcaption>传输层常见协议</figcaption></figure>
<ul>
<li><strong>TCP（Transmission Control Protocol，传输控制协议 ）</strong>：提供 <strong>面向连接</strong> 的，<strong>可靠</strong> 的数据传输服务。</li>
<li><strong>UDP（User Datagram Protocol，用户数据协议）</strong>：提供 <strong>无连接</strong> 的，<strong>尽最大努力</strong> 的数据传输服务（不保证数据传输的可靠性），简单高效。</li>
</ul>
<h4> 网络层有哪些常见的协议？</h4>
<figure><figcaption>网络层常见协议</figcaption></figure>
<ul>
<li><strong>IP（Internet Protocol，网际协议）</strong>：TCP/IP 协议中最重要的协议之一，属于网络层的协议，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。</li>
<li><strong>ARP（Address Resolution Protocol，地址解析协议）</strong>：ARP 协议解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</li>
<li><strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>：一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除。例如，Ping 工具就使用了 ICMP 协议来测试网络连通性。</li>
<li><strong>NAT（Network Address Translation，网络地址转换协议）</strong>：NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。</li>
<li><strong>OSPF（Open Shortest Path First，开放式最短路径优先）</strong> ）：一种内部网关协议（Interior Gateway Protocol，IGP），也是广泛使用的一种动态路由协议，基于链路状态算法，考虑了链路的带宽、延迟等因素来选择最佳路径。</li>
<li><strong>RIP(Routing Information Protocol，路由信息协议）</strong>：一种内部网关协议（Interior Gateway Protocol，IGP），也是一种动态路由协议，基于距离向量算法，使用固定的跳数作为度量标准，选择跳数最少的路径作为最佳路径。</li>
<li><strong>BGP（Border Gateway Protocol，边界网关协议）</strong>：一种用来在路由选择域之间交换网络层可达性信息（Network Layer Reachability Information，NLRI）的路由选择协议，具有高度的灵活性和可扩展性。</li>
</ul>
<h2> HTTP</h2>
<h3> 从输入 URL 到页面展示到底发生了什么？（非常重要）</h3>
<blockquote>
<p>类似的问题：打开一个网页，整个过程会使用哪些协议？</p>
</blockquote>
<p>图解（图片来源：《图解 HTTP》）：</p>
<img src="https://oss.javaguide.cn/github/javaguide/url输入到展示出来的过程.jpg" style="zoom:50%; ">
<blockquote>
<p>上图有一个错误，请注意，是 OSPF 不是 OPSF。 OSPF（Open Shortest Path First，ospf）开放最短路径优先协议, 是由 Internet 工程任务组开发的路由选择协议</p>
</blockquote>
<p>总体来说分为以下几个过程:</p>
<ol>
<li>DNS 解析</li>
<li>TCP 连接</li>
<li>发送 HTTP 请求</li>
<li>服务器处理请求并返回 HTTP 报文</li>
<li>浏览器解析渲染页面</li>
<li>连接结束</li>
</ol>
<p>具体可以参考下面这两篇文章：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener noreferrer">从输入 URL 到页面加载发生了什么？</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1879758" target="_blank" rel="noopener noreferrer">浏览器从输入网址到页面展示的过程</a></li>
</ul>
<h3> HTTP 状态码有哪些？</h3>
<p>HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http-status-code.png" alt="常见 HTTP 状态码" tabindex="0"><figcaption>常见 HTTP 状态码</figcaption></figure>
<p>关于 HTTP 状态码更详细的总结，可以看我写的这篇文章：<a href="/cs-basics/network/http-status-codes.html" target="blank">HTTP 常见状态码总结（应用层）</a>。</p>
<h3> HTTP Header 中常见的字段有哪些？</h3>
<table>
<thead>
<tr>
<th style="text-align:left">请求头字段名</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Accept</td>
<td style="text-align:left">能够接受的回应内容类型（Content-Types）。</td>
<td style="text-align:left">Accept: text/plain</td>
</tr>
<tr>
<td style="text-align:left">Accept-Charset</td>
<td style="text-align:left">能够接受的字符集</td>
<td style="text-align:left">Accept-Charset: utf-8</td>
</tr>
<tr>
<td style="text-align:left">Accept-Datetime</td>
<td style="text-align:left">能够接受的按照时间来表示的版本</td>
<td style="text-align:left">Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT</td>
</tr>
<tr>
<td style="text-align:left">Accept-Encoding</td>
<td style="text-align:left">能够接受的编码方式列表。参考 HTTP 压缩。</td>
<td style="text-align:left">Accept-Encoding: gzip, deflate</td>
</tr>
<tr>
<td style="text-align:left">Accept-Language</td>
<td style="text-align:left">能够接受的回应内容的自然语言列表。</td>
<td style="text-align:left">Accept-Language: en-US</td>
</tr>
<tr>
<td style="text-align:left">Authorization</td>
<td style="text-align:left">用于超文本传输协议的认证的认证信息</td>
<td style="text-align:left">Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
</tr>
<tr>
<td style="text-align:left">Cache-Control</td>
<td style="text-align:left">用来指定在这次的请求/响应链中的所有缓存机制 都必须 遵守的指令</td>
<td style="text-align:left">Cache-Control: no-cache</td>
</tr>
<tr>
<td style="text-align:left">Connection</td>
<td style="text-align:left">该浏览器想要优先使用的连接类型</td>
<td style="text-align:left">Connection: keep-alive Connection: Upgrade</td>
</tr>
<tr>
<td style="text-align:left">Content-Length</td>
<td style="text-align:left">以 八位字节数组 （8 位的字节）表示的请求体的长度</td>
<td style="text-align:left">Content-Length: 348</td>
</tr>
<tr>
<td style="text-align:left">Content-MD5</td>
<td style="text-align:left">请求体的内容的二进制 MD5 散列值，以 Base64 编码的结果</td>
<td style="text-align:left">Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td>
</tr>
<tr>
<td style="text-align:left">Content-Type</td>
<td style="text-align:left">请求体的 多媒体类型 （用于 POST 和 PUT 请求中）</td>
<td style="text-align:left">Content-Type: application/x-www-form-urlencoded</td>
</tr>
<tr>
<td style="text-align:left">Cookie</td>
<td style="text-align:left">之前由服务器通过 Set- Cookie （下文详述）发送的一个 超文本传输协议 Cookie</td>
<td style="text-align:left">Cookie: $Version=1; Skin=new;</td>
</tr>
<tr>
<td style="text-align:left">Date</td>
<td style="text-align:left">发送该消息的日期和时间(按照 RFC 7231 中定义的"超文本传输协议日期"格式来发送)</td>
<td style="text-align:left">Date: Tue, 15 Nov 1994 08:12:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">Expect</td>
<td style="text-align:left">表明客户端要求服务器做出特定的行为</td>
<td style="text-align:left">Expect: 100-continue</td>
</tr>
<tr>
<td style="text-align:left">From</td>
<td style="text-align:left">发起此请求的用户的邮件地址</td>
<td style="text-align:left">From: <a href="mailto:user@example.com">user@example.com</a></td>
</tr>
<tr>
<td style="text-align:left">Host</td>
<td style="text-align:left">服务器的域名(用于虚拟主机 )，以及服务器所监听的传输控制协议端口号。如果所请求的端口是对应的服务的标准端口，则端口号可被省略。</td>
<td style="text-align:left">Host: en.wikipedia.org:80</td>
</tr>
<tr>
<td style="text-align:left">If-Match</td>
<td style="text-align:left">仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要作用时，用作像 PUT 这样的方法中，仅当从用户上次更新某个资源以来，该资源未被修改的情况下，才更新该资源。</td>
<td style="text-align:left">If-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Modified-Since</td>
<td style="text-align:left">允许在对应的内容未被修改的情况下返回 304 未修改（ 304 Not Modified ）</td>
<td style="text-align:left">If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">If-None-Match</td>
<td style="text-align:left">允许在对应的内容未被修改的情况下返回 304 未修改（ 304 Not Modified ）</td>
<td style="text-align:left">If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Range</td>
<td style="text-align:left">如果该实体未被修改过，则向我发送我所缺少的那一个或多个部分；否则，发送整个新的实体</td>
<td style="text-align:left">If-Range: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td style="text-align:left">If-Unmodified-Since</td>
<td style="text-align:left">仅当该实体自某个特定时间已来未被修改的情况下，才发送回应。</td>
<td style="text-align:left">If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT</td>
</tr>
<tr>
<td style="text-align:left">Max-Forwards</td>
<td style="text-align:left">限制该消息可被代理及网关转发的次数。</td>
<td style="text-align:left">Max-Forwards: 10</td>
</tr>
<tr>
<td style="text-align:left">Origin</td>
<td style="text-align:left">发起一个针对 跨来源资源共享 的请求。</td>
<td style="text-align:left">Origin: <a href="http://www.example-social-network.com/" target="_blank" rel="noopener noreferrer">http://www.example-social-network.com</a></td>
</tr>
<tr>
<td style="text-align:left">Pragma</td>
<td style="text-align:left">与具体的实现相关，这些字段可能在请求/回应链中的任何时候产生多种效果。</td>
<td style="text-align:left">Pragma: no-cache</td>
</tr>
<tr>
<td style="text-align:left">Proxy-Authorization</td>
<td style="text-align:left">用来向代理进行认证的认证信息。</td>
<td style="text-align:left">Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
</tr>
<tr>
<td style="text-align:left">Range</td>
<td style="text-align:left">仅请求某个实体的一部分。字节偏移以 0 开始。参见字节服务。</td>
<td style="text-align:left">Range: bytes=500-999</td>
</tr>
<tr>
<td style="text-align:left">Referer</td>
<td style="text-align:left">表示浏览器所访问的前一个页面，正是那个页面上的某个链接将浏览器带到了当前所请求的这个页面。</td>
<td style="text-align:left">Referer: <a href="https://en.wikipedia.org/wiki/Main_Page" target="_blank" rel="noopener noreferrer">http://en.wikipedia.org/wiki/Main_Page</a></td>
</tr>
<tr>
<td style="text-align:left">TE</td>
<td style="text-align:left">浏览器预期接受的传输编码方式：可使用回应协议头 Transfer-Encoding 字段中的值；</td>
<td style="text-align:left">TE: trailers, deflate</td>
</tr>
<tr>
<td style="text-align:left">Upgrade</td>
<td style="text-align:left">要求服务器升级到另一个协议。</td>
<td style="text-align:left">Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td>
</tr>
<tr>
<td style="text-align:left">User-Agent</td>
<td style="text-align:left">浏览器的浏览器身份标识字符串</td>
<td style="text-align:left">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0</td>
</tr>
<tr>
<td style="text-align:left">Via</td>
<td style="text-align:left">向服务器告知，这个请求是由哪些代理发出的。</td>
<td style="text-align:left">Via: 1.0 fred, 1.1 example.com (Apache/1.1)</td>
</tr>
<tr>
<td style="text-align:left">Warning</td>
<td style="text-align:left">一个一般性的警告，告知，在实体内容体中可能存在错误。</td>
<td style="text-align:left">Warning: 199 Miscellaneous warning</td>
</tr>
</tbody>
</table>
<h3> HTTP 和 HTTPS 有什么区别？（重要）</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http1.0-vs-http1.1.png" alt="HTTP 和 HTTPS 对比" tabindex="0"><figcaption>HTTP 和 HTTPS 对比</figcaption></figure>
<ul>
<li><strong>端口号</strong>：HTTP 默认是 80，HTTPS 默认是 443。</li>
<li><strong>URL 前缀</strong>：HTTP 的 URL 前缀是 <code>http://</code>，HTTPS 的 URL 前缀是 <code>https://</code>。</li>
<li><strong>安全性和资源消耗</strong>：HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li>
<li><strong>SEO（搜索引擎优化）</strong>：搜索引擎通常会更青睐使用 HTTPS 协议的网站，因为 HTTPS 能够提供更高的安全性和用户隐私保护。使用 HTTPS 协议的网站在搜索结果中可能会被优先显示，从而对 SEO 产生影响。</li>
</ul>
<p>关于 HTTP 和 HTTPS 更详细的对比总结，可以看我写的这篇文章：<a href="/cs-basics/network/http-vs-https.html" target="blank">HTTP vs HTTPS（应用层）</a> 。</p>
<h3> HTTP/1.0 和 HTTP/1.1 有什么区别？</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http1.0-vs-http1.1.png" alt="HTTP/1.0 和 HTTP/1.1 对比" tabindex="0"><figcaption>HTTP/1.0 和 HTTP/1.1 对比</figcaption></figure>
<ul>
<li><strong>连接方式</strong> : HTTP/1.0 为短连接，HTTP/1.1 支持长连接。</li>
<li><strong>状态响应码</strong> : HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，<code>100 (Continue)</code>——在请求大资源前的预热请求，<code>206 (Partial Content)</code>——范围请求的标识码，<code>409 (Conflict)</code>——请求与当前资源的规定冲突，<code>410 (Gone)</code>——资源已被永久转移，而且没有任何已知的转发地址。</li>
<li><strong>缓存机制</strong> : 在 HTTP/1.0 中主要使用 Header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，HTTP/1.1 则引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li>
<li><strong>带宽</strong>：HTTP/1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP/1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li>
<li><strong>Host 头（Host Header）处理</strong> :HTTP/1.1 引入了 Host 头字段，允许在同一 IP 地址上托管多个域名，从而支持虚拟主机的功能。而 HTTP/1.0 没有 Host 头字段，无法实现虚拟主机。</li>
</ul>
<p>关于 HTTP/1.0 和 HTTP/1.1 更详细的对比总结，可以看我写的这篇文章：<a href="/cs-basics/network/http1.0-vs-http1.1.html" target="blank">HTTP/1.0 vs HTTP/1.1（应用层）</a> 。</p>
<h3> HTTP/1.1 和 HTTP/2.0 有什么区别？</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http1.1-vs-http2.0.png" alt="HTTP/1.0 和 HTTP/1.1 对比" tabindex="0"><figcaption>HTTP/1.0 和 HTTP/1.1 对比</figcaption></figure>
<ul>
<li><strong>IO 多路复用（Multiplexing）</strong>：HTTP/2.0 在同一连接上可以同时传输多个请求和响应（可以看作是 HTTP/1.1 中长链接的升级版本）。HTTP/1.1 则使用串行方式，每个请求和响应都需要独立的连接。这使得 HTTP/2.0 在处理多个请求时更加高效，减少了网络延迟和提高了性能。</li>
<li><strong>二进制帧（Binary Frames）</strong>：HTTP/2.0 使用二进制帧进行数据传输，而 HTTP/1.1 则使用文本格式的报文。二进制帧更加紧凑和高效，减少了传输的数据量和带宽消耗。</li>
<li><strong>头部压缩（Header Compression）</strong>：HTTP/1.1 支持<code>Body</code>压缩，<code>Header</code>不支持压缩。HTTP/2.0 支持对<code>Header</code>压缩，减少了网络开销。</li>
<li><strong>服务器推送（Server Push）</strong>：HTTP/2.0 支持服务器推送，可以在客户端请求一个资源时，将其他相关资源一并推送给客户端，从而减少了客户端的请求次数和延迟。而 HTTP/1.1 需要客户端自己发送请求来获取相关资源。</li>
</ul>
<h3> HTTP/2.0 和 HTTP/3.0 有什么区别？</h3>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/http2.0-vs-http3.0.png" alt="HTTP/2.0 和 HTTP/3.0 对比" tabindex="0"><figcaption>HTTP/2.0 和 HTTP/3.0 对比</figcaption></figure>
<ul>
<li><strong>传输协议</strong>：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。</li>
<li><strong>连接建立</strong>：HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。</li>
<li><strong>队头阻塞</strong>：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。</li>
<li><strong>错误恢复</strong>：HTTP/3.0 具有更好的错误恢复机制，当出现丢包、延迟等网络问题时，可以更快地进行恢复和重传。而 HTTP/2.0 则需要依赖于 TCP 的错误恢复机制。</li>
<li><strong>安全性</strong>：HTTP/2.0 和 HTTP/3.0 在安全性上都有较高的要求，支持加密通信，但在实现上有所不同。HTTP/2.0 使用 TLS 协议进行加密，而 HTTP/3.0 基于 QUIC 协议，包含了内置的加密和身份验证机制，可以提供更强的安全性。</li>
</ul>
<h3> HTTP 是不保存状态的协议, 如何保存用户状态?</h3>
<p>HTTP 是一种不保存状态，即无状态（stateless）协议。也就是说 HTTP 协议自身不对请求和响应之间的通信状态进行保存。那么我们保存用户状态呢？Session 机制的存在就是为了解决这个问题，Session 的主要作用就是通过服务端记录用户的状态。典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了（一般情况下，服务器会在一定时间内保存这个 Session，过了时间限制，就会销毁这个 Session）。</p>
<p>在服务端保存 Session 的方法很多，最常用的就是内存和数据库(比如是使用内存数据库 redis 保存)。既然 Session 存放在服务器端，那么我们如何实现 Session 跟踪呢？大部分情况下，我们都是通过在 Cookie 中附加一个 Session ID 来方式来跟踪。</p>
<p><strong>Cookie 被禁用怎么办?</strong></p>
<p>最常用的就是利用 URL 重写把 Session ID 直接附加在 URL 路径的后面。</p>
<h3> URI 和 URL 的区别是什么?</h3>
<ul>
<li>URI(Uniform Resource Identifier) 是统一资源标志符，可以唯一标识一个资源。</li>
<li>URL(Uniform Resource Locator) 是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</li>
</ul>
<p>URI 的作用像身份证号一样，URL 的作用更像家庭住址一样。URL 是一种具体的 URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。</p>
<h3> Cookie 和 Session 有什么区别？</h3>
<p>准确点来说，这个问题属于认证授权的范畴，你可以在 <a href="/system-design/security/basis-of-authority-certification.html" target="blank">认证授权基础概念详解</a> 这篇文章中找到详细的答案。</p>
<h2> PING</h2>
<h3> PING 命令的作用是什么？</h3>
<p>PING 命令是一种常用的网络诊断工具，经常用来测试网络中主机之间的连通性和网络延迟。</p>
<p>这里简单举一个例子，我们来 PING 一下百度。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PING 命令的输出结果通常包括以下几部分信息：</p>
<ol>
<li><strong>ICMP Echo Request（请求报文）信息</strong>：序列号、TTL（Time to Live）值。</li>
<li><strong>目标主机的域名或 IP 地址</strong>：输出结果的第一行。</li>
<li><strong>往返时间（RTT，Round-Trip Time）</strong>：从发送 ICMP Echo Request（请求报文）到接收到 ICMP Echo Reply（响应报文）的总时间，用来衡量网络连接的延迟。</li>
<li><strong>统计结果（Statistics）</strong>：包括发送的 ICMP 请求数据包数量、接收到的 ICMP 响应数据包数量、丢包率、往返时间（RTT）的最小、平均、最大和标准偏差值。</li>
</ol>
<p>如果 PING 对应的目标主机无法得到正确的响应，则表明这两个主机之间的连通性存在问题。如果往返时间（RTT）过高，则表明网络延迟过高。</p>
<h3> PING 命令的工作原理是什么？</h3>
<p>PING 基于网络层的 <strong>ICMP（Internet Control Message Protocol，互联网控制报文协议）</strong>，其主要原理就是通过在网络上发送和接收 ICMP 报文实现的。</p>
<p>ICMP 报文中包含了类型字段，用于标识 ICMP 报文类型。ICMP 报文的类型有很多种，但大致可以分为两类：</p>
<ul>
<li><strong>查询报文类型</strong>：向目标主机发送请求并期望得到响应。</li>
<li><strong>差错报文类型</strong>：向源主机发送错误信息，用于报告网络中的错误情况。</li>
</ul>
<p>PING 用到的 ICMP Echo Request（类型为 8 ） 和 ICMP Echo Reply（类型为 0） 属于查询报文类型 。</p>
<ul>
<li>PING 命令会向目标主机发送 ICMP Echo Request。</li>
<li>如果两个主机的连通性正常，目标主机会返回一个对应的 ICMP Echo Reply。</li>
</ul>
<h2> DNS</h2>
<h3> DNS 的作用是什么？</h3>
<p>DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是<strong>域名和 IP 地址的映射问题</strong>。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/dns-overview.png" alt="DNS:域名系统" tabindex="0"><figcaption>DNS:域名系统</figcaption></figure>
<p>在实际使用中，有一种情况下，浏览器是可以不必动用 DNS 就可以获知域名和 IP 地址的映射的。浏览器在本地会维护一个<code>hosts</code>列表，一般来说浏览器要先查看要访问的域名是否在<code>hosts</code>列表中，如果有的话，直接提取对应的 IP 地址记录，就好了。如果本地<code>hosts</code>列表内没有域名-IP 对应记录的话，那么 DNS 就闪亮登场了。</p>
<p>目前 DNS 的设计采用的是分布式、层次数据库结构，<strong>DNS 是应用层协议，基于 UDP 协议之上，端口为 53</strong> 。</p>
<h3> DNS 服务器有哪些？</h3>
<p>DNS 服务器自底向上可以依次分为以下几个层级(所有 DNS 服务器都属于以下四个类别之一):</p>
<ul>
<li>根 DNS 服务器。根 DNS 服务器提供 TLD 服务器的 IP 地址。目前世界上只有 13 组根服务器，我国境内目前仍没有根服务器。</li>
<li>顶级域 DNS 服务器（TLD 服务器）。顶级域是指域名的后缀，如<code>com</code>、<code>org</code>、<code>net</code>和<code>edu</code>等。国家也有自己的顶级域，如<code>uk</code>、<code>fr</code>和<code>ca</code>。TLD 服务器提供了权威 DNS 服务器的 IP 地址。</li>
<li>权威 DNS 服务器。在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。</li>
<li>本地 DNS 服务器。每个 ISP（互联网服务提供商）都有一个自己的本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，它起着代理的作用，并将该请求转发到 DNS 层次结构中。严格说来，不属于 DNS 层级结构</li>
</ul>
<h3> DNS 解析的过程是什么样的？</h3>
<p>整个过程的步骤比较多，我单独写了一篇文章详细介绍：<a href="/cs-basics/network/dns.html" target="blank">DNS 域名系统详解（应用层）</a> 。</p>
<h2> 参考</h2>
<ul>
<li>《图解 HTTP》</li>
<li>《计算机网络自顶向下方法》（第七版）</li>
<li>详解 HTTP/2.0 及 HTTPS 协议：https://juejin.cn/post/7034668672262242318</li>
<li>HTTP 请求头字段大全| HTTP Request Headers：https://www.flysnow.org/tools/table/http-request-headers/</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png" type="image/png"/>
    </item>
    <item>
      <title>计算机网络常见面试题总结(下)</title>
      <link>https://javaguide.cn/cs-basics/network/other-network-questions2.html</link>
      <guid>https://javaguide.cn/cs-basics/network/other-network-questions2.html</guid>
      <source url="https://javaguide.cn/rss.xml">计算机网络常见面试题总结(下)</source>
      <description>下篇主要是传输层和网络层相关的内容。 TCP 与 UDP TCP 与 UDP 的区别（重要） 是否面向连接：UDP 在传送数据之前不需要先建立连接。而 TCP 提供面向连接的服务，在传送数据之前必须先建立连接，数据传送结束后要释放连接。 是否是可靠传输：远地主机在收到 UDP 报文后，不需要给出任何确认，并且不保证数据不丢失，不保证是否顺序到达。TCP 提供可靠的传输服务，TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制。通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达。 是否有状态：这个和上面的“是否可靠传输”相对应。TCP 传输是有状态的，这个有状态说的是 TCP 会去记录自己发送消息的状态比如消息是否发送了、是否被接收了等等。为此 ，TCP 需要维持复杂的连接状态表。而 UDP 是无状态服务，简单来说就是不管发出去之后的事情了（这很渣男！）。 传输效率：由于使用 TCP 进行传输的时候多了连接、确认、重传等机制，所以 TCP 的传输效率要比 UDP 低很多。 传输形式：TCP 是面向字节流的，UDP 是面向报文的。 首部开销：TCP 首部开销（20 ～ 60 字节）比 UDP 首部开销（8 字节）要大。 是否提供广播或多播服务：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多； ......</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>下篇主要是传输层和网络层相关的内容。</p>
<h2> TCP 与 UDP</h2>
<h3> TCP 与 UDP 的区别（重要）</h3>
<ol>
<li><strong>是否面向连接</strong>：UDP 在传送数据之前不需要先建立连接。而 TCP 提供面向连接的服务，在传送数据之前必须先建立连接，数据传送结束后要释放连接。</li>
<li><strong>是否是可靠传输</strong>：远地主机在收到 UDP 报文后，不需要给出任何确认，并且不保证数据不丢失，不保证是否顺序到达。TCP 提供可靠的传输服务，TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制。通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达。</li>
<li><strong>是否有状态</strong>：这个和上面的“是否可靠传输”相对应。TCP 传输是有状态的，这个有状态说的是 TCP 会去记录自己发送消息的状态比如消息是否发送了、是否被接收了等等。为此 ，TCP 需要维持复杂的连接状态表。而 UDP 是无状态服务，简单来说就是不管发出去之后的事情了（<strong>这很渣男！</strong>）。</li>
<li><strong>传输效率</strong>：由于使用 TCP 进行传输的时候多了连接、确认、重传等机制，所以 TCP 的传输效率要比 UDP 低很多。</li>
<li><strong>传输形式</strong>：TCP 是面向字节流的，UDP 是面向报文的。</li>
<li><strong>首部开销</strong>：TCP 首部开销（20 ～ 60 字节）比 UDP 首部开销（8 字节）要大。</li>
<li><strong>是否提供广播或多播服务</strong>：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多；</li>
<li>......</li>
</ol>
<p>我把上面总结的内容通过表格形式展示出来了！确定不点个赞嘛？</p>
<table>
<thead>
<tr>
<th></th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否面向连接</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>是否可靠</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>是否有状态</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>传输效率</td>
<td>较慢</td>
<td>较快</td>
</tr>
<tr>
<td>传输形式</td>
<td>字节流</td>
<td>数据报文段</td>
</tr>
<tr>
<td>首部开销</td>
<td>20 ～ 60 bytes</td>
<td>8 bytes</td>
</tr>
<tr>
<td>是否提供广播或多播服务</td>
<td>否</td>
<td>是</td>
</tr>
</tbody>
</table>
<h3> 什么时候选择 TCP，什么时候选 UDP?</h3>
<ul>
<li><strong>UDP 一般用于即时通信</strong>，比如：语音、 视频、直播等等。这些场景对传输数据的准确性要求不是特别高，比如你看视频即使少个一两帧，实际给人的感觉区别也不大。</li>
<li><strong>TCP 用于对传输准确性要求特别高的场景</strong>，比如文件传输、发送和接收邮件、远程登录等等。</li>
</ul>
<h3> HTTP 基于 TCP 还是 UDP？</h3>
<p><s><strong>HTTP 协议是基于 TCP 协议的</strong>，所以发送 HTTP 请求之前首先要建立 TCP 连接也就是要经历 3 次握手。</s></p>
<p>🐛 修正（参见 <a href="https://github.com/Snailclimb/JavaGuide/issues/1915" target="_blank" rel="noopener noreferrer">issue#1915</a>）：HTTP/3.0 之前是基于 TCP 协议的，而 HTTP/3.0 将弃用 TCP，改用 <strong>基于 UDP 的 QUIC 协议</strong> 。此变化解决了 HTTP/2 中存在的队头阻塞问题。由于 HTTP/2 在单个 TCP 连接上使用了多路复用，受到 TCP 拥塞控制的影响，少量的丢包就可能导致整个 TCP 连接上的所有流被阻塞。另外，HTTP/2.0 需要经过经典的 TCP 三次握手过程（一般是 3 个 RTT）。由于 QUIC 协议的特性，HTTP/3.0 可以避免 TCP 三次握手的延迟，允许在第一次连接时发送数据（0 个 RTT ，零往返时间）。</p>
<p>相关证明可以参考下面这两个链接：</p>
<ul>
<li>https://zh.wikipedia.org/zh/HTTP/3</li>
<li>https://datatracker.ietf.org/doc/rfc9114/</li>
</ul>
<h3> 使用 TCP 的协议有哪些?使用 UDP 的协议有哪些?</h3>
<p><strong>运行于 TCP 协议之上的协议</strong>：</p>
<ol>
<li><strong>HTTP 协议</strong>：超文本传输协议（HTTP，HyperText Transfer Protocol)是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。</li>
<li><strong>HTTPS 协议</strong>：更安全的超文本传输协议(HTTPS,Hypertext Transfer Protocol Secure)，身披 SSL 外衣的 HTTP 协议</li>
<li><strong>FTP 协议</strong>：文件传输协议 FTP（File Transfer Protocol）是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。注意 ⚠️：FTP 是一种不安全的协议，因为它在传输过程中不会对数据进行加密。建议在传输敏感数据时使用更安全的协议，如 SFTP。</li>
<li><strong>SMTP 协议</strong>：简单邮件传输协议（SMTP，Simple Mail Transfer Protocol）的缩写，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。</li>
<li><strong>POP3/IMAP 协议</strong>：两者都是负责邮件接收的协议。IMAP 协议是比 POP3 更新的协议，它在功能和性能上都更加强大。IMAP 支持邮件搜索、标记、分类、归档等高级功能，而且可以在多个设备之间同步邮件状态。几乎所有现代电子邮件客户端和服务器都支持 IMAP。</li>
<li><strong>Telnet 协议</strong>：用于通过一个终端登陆到其他服务器。Telnet 协议的最大缺点之一是所有数据（包括用户名和密码）均以明文形式发送，这有潜在的安全风险。这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</li>
<li><strong>SSH 协议</strong> : SSH（ Secure Shell）是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH 建立在可靠的传输协议 TCP 之上。</li>
<li>......</li>
</ol>
<p><strong>运行于 UDP 协议之上的协议</strong>：</p>
<ol>
<li><strong>DHCP 协议</strong>：动态主机配置协议，动态配置 IP 地址</li>
<li><strong>DNS</strong>：<strong>域名系统（DNS，Domain Name System）将人类可读的域名 (例如，www.baidu.com) 转换为机器可读的 IP 地址 (例如，220.181.38.148)。</strong> 我们可以将其理解为专为互联网设计的电话薄。实际上 DNS 同时支持 UDP 和 TCP 协议。</li>
<li>......</li>
</ol>
<h3> TCP 三次握手和四次挥手（非常重要）</h3>
<p><strong>相关面试题</strong>：</p>
<ul>
<li>为什么要三次握手?</li>
<li>第 2 次握手传回了 ACK，为什么还要传回 SYN？</li>
<li>为什么要四次挥手？</li>
<li>为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？</li>
<li>如果第二次挥手时服务器的 ACK 没有送达客户端，会怎样？</li>
<li>为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？</li>
</ul>
<p><strong>参考答案</strong>：<a href="/cs-basics/network/tcp-connection-and-disconnection.html" target="blank">TCP 三次握手和四次挥手（传输层）</a> 。</p>
<h3> TCP 如何保证传输的可靠性？（重要）</h3>
<p><a href="/cs-basics/network/tcp-reliability-guarantee.html" target="blank">TCP 传输可靠性保障（传输层）</a></p>
<h2> IP</h2>
<h3> IP 协议的作用是什么？</h3>
<p><strong>IP（Internet Protocol，网际协议）</strong> 是 TCP/IP 协议中最重要的协议之一，属于网络层的协议，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。</p>
<p>目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。</p>
<h3> 什么是 IP 地址？IP 寻址如何工作？</h3>
<p>每个连入互联网的设备或域（如计算机、服务器、路由器等）都被分配一个 <strong>IP 地址（Internet Protocol address）</strong>，作为唯一标识符。每个 IP 地址都是一个字符序列，如 192.168.1.1（IPv4）、2001:0db8:85a3:0000:0000:8a2e:0370:7334（IPv6） 。</p>
<p>当网络设备发送 IP 数据包时，数据包中包含了 <strong>源 IP 地址</strong> 和 <strong>目的 IP 地址</strong> 。源 IP 地址用于标识数据包的发送方设备或域，而目的 IP 地址则用于标识数据包的接收方设备或域。这类似于一封邮件中同时包含了目的地地址和回邮地址。</p>
<p>网络设备根据目的 IP 地址来判断数据包的目的地，并将数据包转发到正确的目的地网络或子网络，从而实现了设备间的通信。</p>
<p>这种基于 IP 地址的寻址方式是互联网通信的基础，它允许数据包在不同的网络之间传递，从而实现了全球范围内的网络互联互通。IP 地址的唯一性和全局性保证了网络中的每个设备都可以通过其独特的 IP 地址进行标识和寻址。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/internet_protocol_ip_address_diagram.png" alt="IP 地址使数据包到达其目的地" tabindex="0"><figcaption>IP 地址使数据包到达其目的地</figcaption></figure>
<h3> 什么是 IP 地址过滤？</h3>
<p><strong>IP 地址过滤（IP Address Filtering）</strong> 简单来说就是限制或阻止特定 IP 地址或 IP 地址范围的访问。例如，你有一个图片服务突然被某一个 IP 地址攻击，那我们就可以禁止这个 IP 地址访问图片服务。</p>
<p>IP 地址过滤是一种简单的网络安全措施，实际应用中一般会结合其他网络安全措施，如认证、授权、加密等一起使用。单独使用 IP 地址过滤并不能完全保证网络的安全。</p>
<h3> IPv4 和 IPv6 有什么区别？</h3>
<p><strong>IPv4（Internet Protocol version 4）</strong> 是目前广泛使用的 IP 地址版本，其格式是四组由点分隔的数字，例如：123.89.46.72。IPv4 使用 32 位地址作为其 Internet 地址，这意味着共有约 42 亿（ 2^32）个可用 IP 地址。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/Figure-1-IPv4Addressformatwithdotteddecimalnotation-29c824f6a451d48d8c27759799f0c995.png" alt="IPv4" tabindex="0"><figcaption>IPv4</figcaption></figure>
<p>这么少当然不够用啦！为了解决 IP 地址耗尽的问题，最根本的办法是采用具有更大地址空间的新版本 IP 协议 - <strong>IPv6（Internet Protocol version 6）</strong>。IPv6 地址使用更复杂的格式，该格式使用由单或双冒号分隔的一组数字和字母，例如：2001:0db8:85a3:0000:0000:8a2e:0370:7334 。IPv4 使用 128 位互联网地址，这意味着越有 2^128（3 开头的 39 位数字，恐怖如斯） 个可用 IP 地址。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/Figure-2-IPv6Addressformatwithhexadecimalnotation-7da3a419bd81627a9b2cef3b0efb4940.png" alt="IPv6" tabindex="0"><figcaption>IPv6</figcaption></figure>
<p>除了更大的地址空间之外，IPv6 的优势还包括：</p>
<ul>
<li><strong>无状态地址自动配置（Stateless Address Autoconfiguration，简称 SLAAC）</strong>：主机可以直接通过根据接口标识和网络前缀生成全局唯一的 IPv6 地址，而无需依赖 DHCP（Dynamic Host Configuration Protocol）服务器，简化了网络配置和管理。</li>
<li><strong>NAT（Network Address Translation，网络地址转换） 成为可选项</strong>：IPv6 地址资源充足，可以给全球每个设备一个独立的地址。</li>
<li><strong>对标头结构进行了改进</strong>：IPv6 标头结构相较于 IPv4 更加简化和高效，减少了处理开销，提高了网络性能。</li>
<li><strong>可选的扩展头</strong>：允许在 IPv6 标头中添加不同的扩展头（Extension Headers），用于实现不同类型的功能和选项。</li>
<li><strong>ICMPv6（Internet Control Message Protocol for IPv6）</strong>：IPv6 中的 ICMPv6 相较于 IPv4 中的 ICMP 有了一些改进，如邻居发现、路径 MTU 发现等功能的改进，从而提升了网络的可靠性和性能。</li>
<li>......</li>
</ul>
<h3> NAT 的作用是什么？</h3>
<p><strong>NAT（Network Address Translation，网络地址转换）</strong> 主要用于在不同网络之间转换 IP 地址。它允许将私有 IP 地址（如在局域网中使用的 IP 地址）映射为公有 IP 地址（在互联网中使用的 IP 地址）或者反向映射，从而实现局域网内的多个设备通过单一公有 IP 地址访问互联网。</p>
<p>NAT 不光可以缓解 IPv4 地址资源短缺的问题，还可以隐藏内部网络的实际拓扑结构，使得外部网络无法直接访问内部网络中的设备，从而提高了内部网络的安全性。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/network-address-translation.png" alt="NAT 实现 IP地址转换" tabindex="0"><figcaption>NAT 实现 IP地址转换</figcaption></figure>
<p>相关阅读：<a href="/cs-basics/network/nat.html" target="blank">NAT 协议详解（网络层）</a>。</p>
<h2> ARP</h2>
<h3> 什么是 Mac 地址？</h3>
<p>MAC 地址的全称是 <strong>媒体访问控制地址（Media Access Control Address）</strong>。如果说，互联网中每一个资源都由 IP 地址唯一标识（IP 协议内容），那么一切网络设备都由 MAC 地址唯一标识。</p>
<figure><figcaption>路由器的背面就会注明 MAC 位址</figcaption></figure>
<p>可以理解为，MAC 地址是一个网络设备真正的身份证号，IP 地址只是一种不重复的定位方式（比如说住在某省某市某街道的张三，这种逻辑定位是 IP 地址，他的身份证号才是他的 MAC 地址），也可以理解为 MAC 地址是身份证号，IP 地址是邮政地址。MAC 地址也有一些别称，如 LAN 地址、物理地址、以太网地址等。</p>
<blockquote>
<p>还有一点要知道的是，不仅仅是网络资源才有 IP 地址，网络设备也有 IP 地址，比如路由器。但从结构上说，路由器等网络设备的作用是组成一个网络，而且通常是内网，所以它们使用的 IP 地址通常是内网 IP，内网的设备在与内网以外的设备进行通信时，需要用到 NAT 协议。</p>
</blockquote>
<p>MAC 地址的长度为 6 字节（48 比特），地址空间大小有 280 万亿之多（$2^{48}$），MAC 地址由 IEEE 统一管理与分配，理论上，一个网络设备中的网卡上的 MAC 地址是永久的。不同的网卡生产商从 IEEE 那里购买自己的 MAC 地址空间（MAC 的前 24 比特），也就是前 24 比特由 IEEE 统一管理，保证不会重复。而后 24 比特，由各家生产商自己管理，同样保证生产的两块网卡的 MAC 地址不会重复。</p>
<p>MAC 地址具有可携带性、永久性，身份证号永久地标识一个人的身份，不论他到哪里都不会改变。而 IP 地址不具有这些性质，当一台设备更换了网络，它的 IP 地址也就可能发生改变，也就是它在互联网中的定位发生了变化。</p>
<p>最后，记住，MAC 地址有一个特殊地址：FF-FF-FF-FF-FF-FF（全 1 地址），该地址表示广播地址。</p>
<h3> ARP 协议解决了什么问题地位如何？</h3>
<p>ARP 协议，全称 <strong>地址解析协议（Address Resolution Protocol）</strong>，它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。</p>
<h3> ARP 协议的工作原理？</h3>
<p><a href="/cs-basics/network/arp.html" target="blank">ARP 协议详解(网络层)</a></p>
<h2> 复习建议</h2>
<p>非常推荐大家看一下 《图解 HTTP》 这本书，这本书页数不多，但是内容很是充实，不管是用来系统的掌握网络方面的一些知识还是说纯粹为了应付面试都有很大帮助。下面的一些文章只是参考。大二学习这门课程的时候，我们使用的教材是 《计算机网络第七版》（谢希仁编著），不推荐大家看这本教材，书非常厚而且知识偏理论，不确定大家能不能心平气和的读完。</p>
<h2> 参考</h2>
<ul>
<li>《图解 HTTP》</li>
<li>《计算机网络自顶向下方法》（第七版）</li>
<li>什么是 Internet 协议（IP）？：https://www.cloudflare.com/zh-cn/learning/network-layer/internet-protocol/</li>
<li>What Is NAT and What Are the Benefits of NAT Firewalls?：https://community.fs.com/blog/what-is-nat-and-what-are-the-benefits-of-nat-firewalls.html</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/network/internet_protocol_ip_address_diagram.png" type="image/png"/>
    </item>
    <item>
      <title>TCP 三次握手和四次挥手（传输层）</title>
      <link>https://javaguide.cn/cs-basics/network/tcp-connection-and-disconnection.html</link>
      <guid>https://javaguide.cn/cs-basics/network/tcp-connection-and-disconnection.html</guid>
      <source url="https://javaguide.cn/rss.xml">TCP 三次握手和四次挥手（传输层）</source>
      <description>为了准确无误地把数据送达目标处，TCP 协议采用了三次握手策略。 建立连接-TCP 三次握手 TCP 三次握手图解 建立一个 TCP 连接需要“三次握手”，缺一不可： 一次握手:客户端发送带有 SYN（SEQ=x） 标志的数据包 -&amp;gt; 服务端，然后客户端进入 SYN_SEND 状态，等待服务器的确认； 二次握手:服务端发送带有 SYN+ACK(SEQ=y,ACK=x+1) 标志的数据包 –&amp;gt; 客户端,然后服务端进入 SYN_RECV 状态 三次握手:客户端发送带有 ACK(ACK=y+1) 标志的数据包 –&amp;gt; 服务端，然后客户端和服务器端都进入ESTABLISHED 状态，完成 TCP 三次握手。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>为了准确无误地把数据送达目标处，TCP 协议采用了三次握手策略。</p>
<h2> 建立连接-TCP 三次握手</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-shakes-hands-three-times.png" alt="TCP 三次握手图解" tabindex="0"><figcaption>TCP 三次握手图解</figcaption></figure>
<p>建立一个 TCP 连接需要“三次握手”，缺一不可：</p>
<ul>
<li><strong>一次握手</strong>:客户端发送带有 SYN（SEQ=x） 标志的数据包 -&gt; 服务端，然后客户端进入 <strong>SYN_SEND</strong> 状态，等待服务器的确认；</li>
<li><strong>二次握手</strong>:服务端发送带有 SYN+ACK(SEQ=y,ACK=x+1) 标志的数据包 –&gt; 客户端,然后服务端进入 <strong>SYN_RECV</strong> 状态</li>
<li><strong>三次握手</strong>:客户端发送带有 ACK(ACK=y+1) 标志的数据包 –&gt; 服务端，然后客户端和服务器端都进入<strong>ESTABLISHED</strong> 状态，完成 TCP 三次握手。</li>
</ul>
<p>当建立了 3 次握手之后，客户端和服务端就可以传输数据啦！</p>
<h3> 为什么要三次握手?</h3>
<p>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。</p>
<ol>
<li><strong>第一次握手</strong>：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</li>
<li><strong>第二次握手</strong>：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</li>
<li><strong>第三次握手</strong>：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常</li>
</ol>
<p>三次握手就能确认双方收发功能都正常，缺一不可。</p>
<p>更详细的解答可以看这个：<a href="https://www.zhihu.com/question/24853633/answer/115173386" target="_blank" rel="noopener noreferrer">TCP 为什么是三次握手，而不是两次或四次？ - 车小胖的回答 - 知乎</a> 。</p>
<h3> 第 2 次握手传回了 ACK，为什么还要传回 SYN？</h3>
<p>服务端传回发送端所发送的 ACK 是为了告诉客户端：“我接收到的信息确实就是你所发送的信号了”，这表明从客户端到服务端的通信是正常的。回传 SYN 则是为了建立并确认从服务端到客户端的通信。</p>
<blockquote>
<p>SYN 同步序列编号(Synchronize Sequence Numbers) 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement）消息响应。这样在客户机和服务器之间才能建立起可靠的 TCP 连接，数据才可以在客户机和服务器之间传递。</p>
</blockquote>
<h2> 断开连接-TCP 四次挥手</h2>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-waves-four-times.png" alt="TCP 四次挥手图解" tabindex="0"><figcaption>TCP 四次挥手图解</figcaption></figure>
<p>断开一个 TCP 连接则需要“四次挥手”，缺一不可：</p>
<ol>
<li><strong>第一次挥手</strong>：客户端发送一个 FIN（SEQ=x） 标志的数据包-&gt;服务端，用来关闭客户端到服务器的数据传送。然后，客户端进入 <strong>FIN-WAIT-1</strong> 状态。</li>
<li><strong>第二次挥手</strong>：服务器收到这个 FIN（SEQ=X） 标志的数据包，它发送一个 ACK （ACK=x+1）标志的数据包-&gt;客户端 。然后，此时服务端进入 <strong>CLOSE-WAIT</strong> 状态，客户端进入 <strong>FIN-WAIT-2</strong> 状态。</li>
<li><strong>第三次挥手</strong>：服务端关闭与客户端的连接并发送一个 FIN (SEQ=y)标志的数据包-&gt;客户端请求关闭连接，然后，服务端进入 <strong>LAST-ACK</strong> 状态。</li>
<li><strong>第四次挥手</strong>：客户端发送 ACK (ACK=y+1)标志的数据包-&gt;服务端并且进入<strong>TIME-WAIT</strong>状态，服务端在收到 ACK (ACK=y+1)标志的数据包后进入 CLOSE 状态。此时，如果客户端等待 <strong>2MSL</strong> 后依然没有收到回复，就证明服务端已正常关闭，随后，客户端也可以关闭连接了。</li>
</ol>
<p><strong>只要四次挥手没有结束，客户端和服务端就可以继续传输数据！</strong></p>
<h3> 为什么要四次挥手？</h3>
<p>TCP 是全双工通信，可以双向传输数据。任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了 TCP 连接。</p>
<p>举个例子：A 和 B 打电话，通话即将结束后。</p>
<ol>
<li><strong>第一次挥手</strong>：A 说“我没啥要说的了”</li>
<li><strong>第二次挥手</strong>：B 回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话</li>
<li><strong>第三次挥手</strong>：于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”</li>
<li><strong>第四次挥手</strong>：A 回答“知道了”，这样通话才算结束。</li>
</ol>
<h3> 为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？</h3>
<p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接收到了断开连接的请求。等到数据发完之后再发 FIN，断开服务器到客户端的数据传送。</p>
<h3> 如果第二次挥手时服务器的 ACK 没有送达客户端，会怎样？</h3>
<p>客户端没有收到 ACK 确认，会重新发送 FIN 请求。</p>
<h3> 为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？</h3>
<p>第四次挥手时，客户端发送给服务器的 ACK 有可能丢失，如果服务端因为某些原因而没有收到 ACK 的话，服务端就会重发 FIN，如果客户端在 2*MSL 的时间内收到了 FIN，就会重新发送 ACK 并再次等待 2MSL，防止 Server 没有收到 ACK 而不断重发 FIN。</p>
<blockquote>
<p><strong>MSL(Maximum Segment Lifetime)</strong> : 一个片段在网络中最大的存活时间，2MSL 就是一个发送和一个回复所需的最大时间。如果直到 2MSL，Client 都没有再次收到 FIN，那么 Client 推断 ACK 已经被成功接收，则结束 TCP 连接。</p>
</blockquote>
<h2> 参考</h2>
<ul>
<li>
<p>《计算机网络（第 7 版）》</p>
</li>
<li>
<p>《图解 HTTP》</p>
</li>
<li>
<p>TCP and UDP Tutorial：https://www.9tut.com/tcp-and-udp-tutorial</p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-shakes-hands-three-times.png" type="image/png"/>
    </item>
    <item>
      <title>TCP 传输可靠性保障（传输层）</title>
      <link>https://javaguide.cn/cs-basics/network/tcp-reliability-guarantee.html</link>
      <guid>https://javaguide.cn/cs-basics/network/tcp-reliability-guarantee.html</guid>
      <source url="https://javaguide.cn/rss.xml">TCP 传输可靠性保障（传输层）</source>
      <description>TCP 如何保证传输的可靠性？ 基于数据块传输：应用数据被分割成 TCP 认为最适合发送的数据块，再传输给网络层，数据块被称为报文段或段。 对失序数据包重新排序以及去重：TCP 为了保证不发生丢包，就给每个包一个序列号，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据就可以实现数据包去重。 校验和 : TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。 超时重传 : 当发送方发送数据之后，它启动一个定时器，等待目的端确认收到这个报文段。接收端实体对已成功收到的包发回一个相应的确认信息（ACK）。如果发送端实体在合理的往返时延（RTT）内未收到确认消息，那么对应的数据包就被假设为已丢失并进行重传。 流量控制 : TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议（TCP 利用滑动窗口实现流量控制）。 拥塞控制 : 当网络拥塞时，减少数据的发送。</description>
      <category>计算机基础</category>
      <pubDate>Thu, 29 Jun 2023 07:18:23 GMT</pubDate>
      <content:encoded><![CDATA[<h2> TCP 如何保证传输的可靠性？</h2>
<ol>
<li><strong>基于数据块传输</strong>：应用数据被分割成 TCP 认为最适合发送的数据块，再传输给网络层，数据块被称为报文段或段。</li>
<li><strong>对失序数据包重新排序以及去重</strong>：TCP 为了保证不发生丢包，就给每个包一个序列号，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据就可以实现数据包去重。</li>
<li><strong>校验和</strong> : TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>
<li><strong>超时重传</strong> : 当发送方发送数据之后，它启动一个定时器，等待目的端确认收到这个报文段。接收端实体对已成功收到的包发回一个相应的确认信息（ACK）。如果发送端实体在合理的往返时延（RTT）内未收到确认消息，那么对应的数据包就被假设为<a href="https://zh.wikipedia.org/wiki/%E4%B8%A2%E5%8C%85" target="_blank" rel="noopener noreferrer">已丢失</a>并进行重传。</li>
<li><strong>流量控制</strong> : TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议（TCP 利用滑动窗口实现流量控制）。</li>
<li><strong>拥塞控制</strong> : 当网络拥塞时，减少数据的发送。</li>
</ol>
<h2> TCP 如何实现流量控制？</h2>
<p><strong>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。</strong> 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p>
<p><strong>为什么需要流量控制?</strong> 这是因为双方在通信的时候，发送方的速率与接收方的速率是不一定相等，如果发送方的发送速率太快，会导致接收方处理不过来。如果接收方处理不过来的话，就只能把处理不过来的数据存在 <strong>接收缓冲区(Receiving Buffers)</strong> 里（失序的数据包也会被存放在缓存区里）。如果缓存区满了发送方还在狂发数据的话，接收方只能把收到的数据包丢掉。出现丢包问题的同时又疯狂浪费着珍贵的网络资源。因此，我们需要控制发送方的发送速率，让接收方与发送方处于一种动态平衡才好。</p>
<p>这里需要注意的是（常见误区）：</p>
<ul>
<li>发送端不等同于客户端</li>
<li>接收端不等同于服务端</li>
</ul>
<p>TCP 为全双工(Full-Duplex, FDX)通信，双方可以进行双向通信，客户端和服务端既可能是发送端又可能是服务端。因此，两端各有一个发送缓冲区与接收缓冲区，两端都各自维护一个发送窗口和一个接收窗口。接收窗口大小取决于应用、系统、硬件的限制（TCP 传输速率不能大于应用的数据处理速率）。通信双方的发送窗口和接收窗口的要求相同</p>
<p><strong>TCP 发送窗口可以划分成四个部分</strong>：</p>
<ol>
<li>已经发送并且确认的 TCP 段（已经发送并确认）；</li>
<li>已经发送但是没有确认的 TCP 段（已经发送未确认）；</li>
<li>未发送但是接收方准备接收的 TCP 段（可以发送）；</li>
<li>未发送并且接收方也并未准备接受的 TCP 段（不可发送）。</li>
</ol>
<p><strong>TCP 发送窗口结构图示</strong>：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-send-window.png" alt="TCP发送窗口结构" tabindex="0"><figcaption>TCP发送窗口结构</figcaption></figure>
<ul>
<li><strong>SND.WND</strong>：发送窗口。</li>
<li><strong>SND.UNA</strong>：Send Unacknowledged 指针，指向发送窗口的第一个字节。</li>
<li><strong>SND.NXT</strong>：Send Next 指针，指向可用窗口的第一个字节。</li>
</ul>
<p><strong>可用窗口大小</strong> = <code>SND.UNA + SND.WND - SND.NXT</code> 。</p>
<p><strong>TCP 接收窗口可以划分成三个部分</strong>：</p>
<ol>
<li>已经接收并且已经确认的 TCP 段（已经接收并确认）；</li>
<li>等待接收且允许发送方发送 TCP 段（可以接收未确认）；</li>
<li>不可接收且不允许发送方发送 TCP 段（不可接收）。</li>
</ol>
<p><strong>TCP 接收窗口结构图示</strong>：</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-receive-window.png" alt="TCP接收窗口结构" tabindex="0"><figcaption>TCP接收窗口结构</figcaption></figure>
<p><strong>接收窗口的大小是根据接收端处理数据的速度动态调整的。</strong> 如果接收端读取数据快，接收窗口可能会扩大。 否则，它可能会缩小。</p>
<p>另外，这里的滑动窗口大小只是为了演示使用，实际窗口大小通常会远远大于这个值。</p>
<h2> TCP 的拥塞控制是怎么实现的？</h2>
<p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p>
<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-congestion-control.png" alt="TCP的拥塞控制" tabindex="0"><figcaption>TCP的拥塞控制</figcaption></figure>
<p>为了进行拥塞控制，TCP 发送方要维持一个 <strong>拥塞窗口(cwnd)</strong> 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p>
<p>TCP 的拥塞控制采用了四种算法，即 <strong>慢开始</strong>、 <strong>拥塞避免</strong>、<strong>快重传</strong> 和 <strong>快恢复</strong>。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p>
<ul>
<li><strong>慢开始：</strong> 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd 初始值为 1，每经过一个传播轮次，cwnd 加倍。</li>
<li><strong>拥塞避免：</strong> 拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送方的 cwnd 加 1.</li>
<li><strong>快重传与快恢复：</strong> 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</li>
</ul>
<h2> ARQ 协议了解吗?</h2>
<p><strong>自动重传请求</strong>（Automatic Repeat-reQuest，ARQ）是 OSI 模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认信息（Acknowledgements，就是我们常说的 ACK），它通常会重新发送，直到收到确认或者重试超过一定的次数。</p>
<p>ARQ 包括停止等待 ARQ 协议和连续 ARQ 协议。</p>
<h3> 停止等待 ARQ 协议</h3>
<p>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认（回复 ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组；</p>
<p>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认。</p>
<p><strong>1) 无差错情况:</strong></p>
<p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p>
<p><strong>2) 出现差错情况（超时重传）:</strong></p>
<p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。</p>
<p><strong>3) 确认丢失和确认迟到</strong></p>
<ul>
<li><strong>确认丢失</strong>：确认消息在传输过程丢失。当 A 发送 M1 消息，B 收到后，B 向 A 发送了一个 M1 确认消息，但却在传输过程中丢失。而 A 并不知道，在超时计时过后，A 重传 M1 消息，B 再次收到该消息后采取以下两点措施：1. 丢弃这个重复的 M1 消息，不向上层交付。 2. 向 A 发送确认消息。（不会认为已经发送过了，就不再发送。A 能重传，就证明 B 的确认消息丢失）。</li>
<li><strong>确认迟到</strong>：确认消息在传输过程中迟到。A 发送 M1 消息，B 收到并发送确认。在超时时间内没有收到确认消息，A 重传 M1 消息，B 仍然收到并继续发送确认消息（B 收到了 2 份 M1）。此时 A 收到了 B 第二次发送的确认消息。接着发送其他数据。过了一会，A 收到了 B 第一次发送的对 M1 的确认消息（A 也收到了 2 份确认消息）。处理如下：1. A 收到重复的确认后，直接丢弃。2. B 收到重复的 M1 后，也直接丢弃重复的 M1。</li>
</ul>
<h3> 连续 ARQ 协议</h3>
<p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>
<p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p>
<p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5 条 消息，中间第三条丢失（3 号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p>
<h2> Reference</h2>
<ol>
<li>《计算机网络（第 7 版）》</li>
<li>《图解 HTTP》</li>
<li><a href="https://www.9tut.com/tcp-and-udp-tutorial" target="_blank" rel="noopener noreferrer">https://www.9tut.com/tcp-and-udp-tutorial</a></li>
<li><a href="https://github.com/wolverinn/Waking-Up/blob/master/Computer%20Network.md" target="_blank" rel="noopener noreferrer">https://github.com/wolverinn/Waking-Up/blob/master/Computer%20Network.md</a></li>
<li>TCP Flow Control—<a href="https://www.brianstorti.com/tcp-flow-control/" target="_blank" rel="noopener noreferrer">https://www.brianstorti.com/tcp-flow-control/</a></li>
<li>TCP 流量控制(Flow Control)：https://notfalse.net/24/tcp-flow-control</li>
<li>TCP 之滑动窗口原理 : https://cloud.tencent.com/developer/article/1857363</li>
</ol>
]]></content:encoded>
      <enclosure url="https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-send-window.png" type="image/png"/>
    </item>
  </channel>
</rss>