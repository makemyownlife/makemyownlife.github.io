import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-1c1562ff.js";const p={},e=t(`<p>布隆过滤器是一个精巧而且经典的数据结构。</p><p>你可能没想到： RocketMQ、 Hbase 、Cassandra 、LevelDB 、RocksDB 这些知名项目中都有布隆过滤器的身影。</p><p>对于后端程序员来讲，学习和理解布隆过滤器有很大的必要性。来吧，我们一起品味布隆过滤器的设计之美。</p><figure><img src="https://www.javayong.cn/pics/temp//gGTKn38KyF.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><h1 id="_1-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1-缓存穿透" aria-hidden="true">#</a> 1 缓存穿透</h1><p>我们先来看一个商品服务查询详情的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Product</span> queryProductById <span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">// 查询缓存</span>
<span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token function">queryFromCache</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> product <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 从数据库查询</span>
product <span class="token operator">=</span> <span class="token function">queryFromDataBase</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">saveCache</span><span class="token punctuation">(</span>id <span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> product<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.javayong.cn/pics/temp//szzXnQVHGA.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>假设此商品既不存储在缓存中，也不存在数据库中，则没有办法<strong>回写缓存</strong>，当有类似这样大量的请求访问服务时，数据库的压力就会极大。</p><p>这是一个典型的缓存穿透的场景。</p><p>为了解决这个问题呢，通常我们可以向分布式缓存中写入一个过期时间较短的空值占位，但这样会占用较多的存储空间，性价比不足。</p><p>问题的本质是：&quot;<strong>如何以极小的代价检索一个元素是否在一个集合中</strong>？&quot;</p><p>我们的主角<strong>布隆过滤器</strong>出场了，它就能游刃有余的<strong>平衡好时间和空间两种维度</strong>。</p><h1 id="_2-原理解析" tabindex="-1"><a class="header-anchor" href="#_2-原理解析" aria-hidden="true">#</a> 2 原理解析</h1><p><strong>布隆过滤器</strong>（英语：Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的<strong>二进制向量</strong>和一系列<strong>随机映射函数</strong>。</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是<strong>空间效率</strong>和<strong>查询时间</strong>都<strong>远远超过一般的算法</strong>，缺点是有一定的误识别率和删除困难。</p><p>布隆过滤器的原理：当一个元素被加入集合时，通过 K 个散列函数将这个元素映射成一个位数组中的 K 个点，把它们置为 1。检索时，我们只要看看这些点是不是都是 1 就（大约）知道集合中有没有它了：如果这<strong>些点有任何一个 0</strong>，则<strong>被检元素一定不在</strong>；如果<strong>都是 1</strong>，则被检元素<strong>很可能在</strong>。</p><p>简单来说就是准备一个长度为 m 的位数组并初始化所有元素为 0，用 k 个散列函数对元素进行 k 次散列运算跟 len (m) 取余得到 k 个位置并将 m 中对应位置设置为 1。</p><figure><img src="https://www.javayong.cn/pics/temp//Qcb9oB5g1v.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>如上图，位数组的长度是８，散列函数个数是 3，先后保持两个元素ｘ，ｙ。这两个元素都经过三次哈希函数生成三个哈希值，并映射到位数组的不同的位置，并置为1。元素 x 映射到位数组的第０位，第４位，第７位，元素ｙ映射到数组的位数组的第１位，第４位，第６位。</p><p>保存元素 x 后，位数组的第4位被设置为1之后，在处理元素 y 时第4位会被覆盖，同样也会设置为 1。</p><p>当布隆过滤器<strong>保存的元素越多</strong>，<strong>被置为 1 的 bit 位也会越来越多</strong>，元素 x 即便没有存储过，假设哈希函数映射到位数组的三个位都被其他值设置为 1 了，对于布隆过滤器的机制来讲，元素 x 这个值也是存在的，也就是说布隆过滤器<strong>存在一定的误判率</strong>。</p><p><strong>▍ 误判率</strong></p><p>布隆过滤器包含如下四个属性：</p><ul><li><p>k : 哈希函数个数</p></li><li><p>m : 位数组长度</p></li><li><p>n : 插入的元素个数</p></li><li><p>p : 误判率</p></li></ul><p>若位数组长度太小则会导致所有 bit 位很快都会被置为 1 ，那么检索任意值都会返回”可能存在“ ， 起不到过滤的效果。 位数组长度越大，则误判率越小。</p><p>同时，哈希函数的个数也需要考量，哈希函数的个数越大，检索的速度会越慢，误判率也越小，反之，则误判率越高。</p><figure><img src="https://www.javayong.cn/pics/temp//9JhROcXyEi.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>从张图我们可以观察到相同位数组长度的情况下，随着哈希函数的个人的增长，误判率显著的下降。</p><p>误判率 p 的公式是<img src="https://www.javayong.cn/pics/temp//NntKce0NiK.webp!large" alt=""></p><p>1. k 次哈希函数某一 bit 位未被置为 1 的概率为<img src="https://www.javayong.cn/pics/temp//AeAm0pE51W.webp!large" alt=""></p><p>2. 插入 n 个元素后某一 bit 位依旧为 0 的概率为<img src="https://www.javayong.cn/pics/temp//JWSFwFmn1w.webp!large" alt=""></p><p>3. 那么插入 n 个元素后某一 bit 位置为1的概率为<img src="https://www.javayong.cn/pics/temp//45NmbP5AEk.webp!large" alt=""> 4. 整体误判率为 <img src="https://www.javayong.cn/pics/temp//786m1xNDFG.webp!large" alt="">，当 m 足够大时，误判率会越小，该公式约等于<img src="https://www.javayong.cn/pics/temp//VsYuYA5bWH.webp!large" alt=""></p><p>我们会预估布隆过滤器的误判率 p 以及待插入的元素个数 n 分别推导出最合适的位数组长度 m 和 哈希函数个数 k。</p><img src="https://www.javayong.cn/pics/temp//up-f6c28a2073b26b6a18f7615b2a34c4fbf98.jpg" style="zoom:43%;"><p><strong>▍ 布隆过滤器支持删除吗</strong></p><p>布隆过滤器其实并不支持删除元素，因为多个元素可能哈希到一个布隆过滤器的同一个位置，如果直接删除该位置的元素，则会影响其他元素的判断。</p><p><strong>▍ 时间和空间效率</strong></p><p>布隆过滤器的空间复杂度为 O(m) ，插入和查询时间复杂度都是 O(k) 。 存储空间和插入、查询时间都不会随元素增加而增大。 空间、时间效率都很高。</p><p><strong>▍哈希函数类型</strong></p><p>Murmur3，FNV 系列和 Jenkins 等非密码学哈希函数适合，因为 Murmur3 算法简单，能够平衡好速度和随机分布，很多开源产品经常选用它作为哈希函数。</p><h1 id="_3-guava实现" tabindex="-1"><a class="header-anchor" href="#_3-guava实现" aria-hidden="true">#</a> 3 Guava实现</h1><p>Google Guava是 Google 开发和维护的开源 Java开发库，它包含许多基本的工具类，例如字符串处理、集合、并发工具、I/O和数学函数等等。</p><p><strong>1、添加Maven依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>31.0.1-jre&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、创建布隆过滤器</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> filter <span class="token operator">=</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
  <span class="token comment">//Funnel 是一个接口，用于将任意类型的对象转换为字节流，</span>
  <span class="token comment">//以便用于布隆过滤器的哈希计算。</span>
  <span class="token class-name">Funnels</span><span class="token punctuation">.</span><span class="token function">integerFunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token number">10000</span><span class="token punctuation">,</span> 	<span class="token comment">// 插入数据条目数量</span>
  <span class="token number">0.001</span> 	<span class="token comment">// 误判率</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、添加数据</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostConstruct</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;初始化布隆过滤器数据开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//插入4个元素</span>
     filter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     filter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     filter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     filter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;初始化布隆过滤器数据结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、判断数据是否存在</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">maycontain</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们查看 Guava 源码中布隆过滤器是如何实现的 ？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Funnel</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> funnel<span class="token punctuation">,</span> <span class="token keyword">long</span> expectedInsertions<span class="token punctuation">,</span> <span class="token keyword">double</span> fpp<span class="token punctuation">,</span> <span class="token class-name">BloomFilter<span class="token punctuation">.</span>Strategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略部分前置验证代码 </span>
    <span class="token comment">// 位数组长度</span>
    <span class="token keyword">long</span> numBits <span class="token operator">=</span> <span class="token function">optimalNumOfBits</span><span class="token punctuation">(</span>expectedInsertions<span class="token punctuation">,</span> fpp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 哈希函数次数</span>
    <span class="token keyword">int</span> numHashFunctions <span class="token operator">=</span> <span class="token function">optimalNumOfHashFunctions</span><span class="token punctuation">(</span>expectedInsertions<span class="token punctuation">,</span> numBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">LockFreeBitArray</span><span class="token punctuation">(</span>numBits<span class="token punctuation">)</span><span class="token punctuation">,</span> 
                    numHashFunctions<span class="token punctuation">,</span> 
                    funnel<span class="token punctuation">,</span>
                    strategy
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not create BloomFilter of &quot;</span> <span class="token operator">+</span> numBits <span class="token operator">+</span> <span class="token string">&quot; bits&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//计算位数组长度</span>
<span class="token comment">//n:插入的数据条目数量</span>
<span class="token comment">//p:期望误判率</span>
<span class="token annotation punctuation">@VisibleForTesting</span>
<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">optimalNumOfBits</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     p <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span>n <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 计算哈希次数</span>
<span class="token annotation punctuation">@VisibleForTesting</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">optimalNumOfHashFunctions</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// (m / n) * log(2), but avoid truncation due to division!</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> m <span class="token operator">/</span> n <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Guava 的计算位数组长度和哈希次数和原理解析这一节展示的公式保持一致。</p><p>重点来了，Bloom filter 是如何判断元素存在的 ？</p><p>方法名就非常有 google 特色 ， ”<strong>mightContain</strong>“ 的中文表意是：”可能存在“ 。<strong>方法的返回值为 true ，元素可能存在，但若返回值为 false ，元素必定不存在。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token operator">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token operator">&gt;</span> <span class="token keyword">boolean</span> <span class="token function">mightContain</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@ParametricNullness</span> <span class="token class-name">T</span> object<span class="token punctuation">,</span>
    <span class="token comment">//Funnel 是一个接口，用于将任意类型的对象转换为字节流，</span>
    <span class="token comment">//以便用于布隆过滤器的哈希计算。</span>
    <span class="token class-name">Funnel</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> funnel<span class="token punctuation">,</span>  
    <span class="token comment">//用于计算哈希值的哈希函数的数量</span>
    <span class="token keyword">int</span> numHashFunctions<span class="token punctuation">,</span>
    <span class="token comment">//位数组实例，用于存储布隆过滤器的位集</span>
    <span class="token class-name">LockFreeBitArray</span> bits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">long</span> bitSize <span class="token operator">=</span> bits<span class="token punctuation">.</span><span class="token function">bitSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//使用 MurmurHash3 哈希函数计算对象 object 的哈希值，</span>
  <span class="token comment">//并将其转换为一个 byte 数组。</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Hashing</span><span class="token punctuation">.</span><span class="token function">murmur3_128</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashObject</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> funnel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytesInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> hash1 <span class="token operator">=</span> <span class="token function">lowerEight</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> hash2 <span class="token operator">=</span> <span class="token function">upperEight</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">long</span> combinedHash <span class="token operator">=</span> hash1<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numHashFunctions<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// Make the combined hash positive and indexable</span>
<span class="token comment">// 计算哈希值的索引，并从位数组中查找索引处的位。</span>
<span class="token comment">// 如果索引处的位为 0，表示对象不在布隆过滤器中，返回 false。</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span>combinedHash <span class="token operator">&amp;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token operator">%</span> bitSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
<span class="token comment">// 将 hash2 加到 combinedHash 上，用于计算下一个哈希值的索引。</span>
                combinedHash <span class="token operator">+=</span> hash2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_4-redisson实现" tabindex="-1"><a class="header-anchor" href="#_4-redisson实现" aria-hidden="true">#</a> 4 Redisson实现</h1><p>Redisson 是一个用 Java 编写的 Redis 客户端，它实现了分布式对象和服务，包括集合、映射、锁、队列等。Redisson的API简单易用，使得在分布式环境下使用Redis 更加容易和高效。</p><p><strong>1、添加Maven依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.16.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、配置 Redisson 客户端</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonConfig</span> <span class="token punctuation">{</span>

 <span class="token class-name">Bean</span>
 <span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://localhost:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、初始化</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span>
                                      <span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;myBloomFilter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//10000表示插入元素的个数，0.001表示误判率</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//插入4个元素</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、判断数据是否存在</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mightcontain</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好，我们来从源码分析 Redisson 布隆过滤器是如何实现的 ？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token keyword">long</span> expectedInsertions<span class="token punctuation">,</span> <span class="token keyword">double</span> falseProbability<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 位数组大小</span>
    size <span class="token operator">=</span> <span class="token function">optimalNumOfBits</span><span class="token punctuation">(</span>expectedInsertions<span class="token punctuation">,</span> falseProbability<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 哈希函数次数</span>
    hashIterations <span class="token operator">=</span> <span class="token function">optimalNumOfHashFunctions</span><span class="token punctuation">(</span>expectedInsertions<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CommandBatchService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandBatchService</span><span class="token punctuation">(</span>commandExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行 Lua脚本，生成配置</span>
    executorService<span class="token punctuation">.</span><span class="token function">evalReadAsync</span><span class="token punctuation">(</span>configName<span class="token punctuation">,</span> codec<span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span><span class="token constant">EVAL_VOID</span><span class="token punctuation">,</span>
            <span class="token string">&quot;local size = redis.call(&#39;hget&#39;, KEYS[1], &#39;size&#39;);&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;local hashIterations = redis.call(&#39;hget&#39;, KEYS[1], &#39;hashIterations&#39;);&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;assert(size == false and hashIterations == false, &#39;Bloom filter config has been changed&#39;)&quot;</span><span class="token punctuation">,</span>
                    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token function">asList</span><span class="token punctuation">(</span>configName<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> hashIterations<span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">writeAsync</span><span class="token punctuation">(</span>configName<span class="token punctuation">,</span> <span class="token class-name">StringCodec</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span>
                                            <span class="token keyword">new</span> <span class="token class-name">RedisCommand</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;HMSET&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VoidReplayConvertor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configName<span class="token punctuation">,</span>
            <span class="token string">&quot;size&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token string">&quot;hashIterations&quot;</span><span class="token punctuation">,</span> hashIterations<span class="token punctuation">,</span>
            <span class="token string">&quot;expectedInsertions&quot;</span><span class="token punctuation">,</span> expectedInsertions<span class="token punctuation">,</span> <span class="token string">&quot;falseProbability&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>falseProbability<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPlainString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RedisException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.javayong.cn/pics/temp//nSbowXJ8Dk.webp!large" alt="Bf配置信息" tabindex="0"><figcaption>Bf配置信息</figcaption></figure><p>Redisson 布隆过滤器初始化的时候，会创建一个 Hash 数据结构的 key ，存储布隆过滤器的4个核心属性。</p><p>那么 Redisson 布隆过滤器如何保存元素呢 ？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">boolean</span> add <span class="token punctuation">(</span><span class="token class-name">T</span> object<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashes <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> hashIterations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashIterations<span class="token punctuation">;</span>
                <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>
                <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indexes <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>hashes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hashes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hashIterations<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">CommandBatchService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandBatchService</span><span class="token punctuation">(</span>commandExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">addConfigCheck</span><span class="token punctuation">(</span>hashIterations<span class="token punctuation">,</span> size<span class="token punctuation">,</span> executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建 bitset 对象， 然后调用setAsync方法，该方法的参数是索引。</span>
                <span class="token class-name">RBitSetAsync</span> bs <span class="token operator">=</span> <span class="token function">createBitSet</span><span class="token punctuation">(</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> indexes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    bs<span class="token punctuation">.</span><span class="token function">setAsync</span><span class="token punctuation">(</span>indexes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span> val <span class="token operator">:</span> result<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RedisException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码中，我们发现 Redisson 布隆过滤器操作的对象是 <strong>位图（bitMap）</strong> 。</p><p>在 Redis 中，位图本质上是 string 数据类型，Redis 中一个字符串类型的值最多能存储 512 MB 的内容，每个字符串由多个字节组成，每个字节又由 8 个 Bit 位组成。位图结构正是使用“位”来实现存储的，它通过将比特位设置为 0 或 1来达到数据存取的目的，它存储上限为 <code>2^32 </code>，我们可以使用<code>getbit/setbit</code>命令来处理这个位数组。</p><p>为了方便大家理解，我做了一个简单的测试。</p><figure><img src="https://www.javayong.cn/pics/temp//9GDwxhCukO.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>通过 Redisson API 创建 key 为 <code>mybitset </code>的 位图 ，设置索引 3 ，5，6，8 位为 1 ，右侧的<strong>二进制值</strong>也完全匹配。</p><h1 id="_5-实战要点" tabindex="-1"><a class="header-anchor" href="#_5-实战要点" aria-hidden="true">#</a> 5 实战要点</h1><p>通过 Guava 和 Redisson 创建和使用布隆过滤器比较简单，我们下面讨论实战层面的注意事项。</p><p><strong>1、缓存穿透场景</strong></p><p>首先我们需要<strong>初始化</strong>布隆过滤器，然后当用户请求时，判断过滤器中是否包含该元素，若不包含该元素，则直接返回不存在。</p><p>若包含则从缓存中查询数据，若缓存中也没有，则查询数据库并回写到缓存里，最后给前端返回。</p><figure><img src="https://www.javayong.cn/pics/temp//f6Avy1Movi.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>2、元素删除场景</strong></p><p>现实场景，元素不仅仅是只有增加，还存在删除元素的场景，比如说商品的删除。</p><p>原理解析这一节，我们已经知晓：<strong>布隆过滤器其实并不支持删除元素，因为多个元素可能哈希到一个布隆过滤器的同一个位置，如果直接删除该位置的元素，则会影响其他元素的判断</strong>。</p><p>从工程角度来看，<strong>定时重新构建布隆过滤器</strong>这个方案可行也可靠，同时也相对简单。</p><figure><img src="https://www.javayong.cn/pics/temp//wp53mfGqZW.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><ol><li>定时任务触发全量商品查询 ;</li><li>将商品编号添加到新的布隆过滤器 ;</li><li>任务完成，修改商品布隆过滤器的映射（从旧 A 修改成 新 B ）;</li><li>商品服务根据布隆过滤器的映射，选择新的布隆过滤器 B进行相关的查询操作 ；</li><li>选择合适的时间点，删除旧的布隆过滤器 A。</li></ol><h1 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6 总结</h1><p><strong>布隆过滤器</strong>是一个很长的<strong>二进制向量</strong>和一系列<strong>随机映射函数</strong>，用于<strong>检索一个元素是否在一个集合中</strong>。</p><p>它的<strong>空间效率</strong>和<strong>查询时间</strong>都<strong>远远超过一般的算法</strong>，但是有一定的误判率 （函数返回 true , 意味着元素可能存在，函数返回 false ，元素必定不存在）。</p><p>布隆过滤器的四个核心属性：</p><ul><li><p>k : 哈希函数个数</p></li><li><p>m : 位数组长度</p></li><li><p>n : 插入的元素个数</p></li><li><p>p : 误判率</p></li></ul><p>Java 世界里 ，通过 Guava 和 Redisson 创建和使用布隆过滤器非常简单。</p><p>布隆过滤器无法删除元素，但我们可以通过<strong>定时重新构建布隆过滤器</strong>方案实现删除元素的效果。</p><p>为什么这么多的开源项目中使用布隆过滤器 ？</p><p>因为它的设计精巧且简洁，工程上实现非常容易，效能高，虽然有一定的误判率，但软件设计不就是要 trade off 吗 ？</p><hr><p>参考资料：</p><blockquote><p>https://hackernoon.com/probabilistic-data-structures-bloom-filter-5374112a7832</p></blockquote>`,103),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","05boolfilter.html.vue"]]);export{r as default};
