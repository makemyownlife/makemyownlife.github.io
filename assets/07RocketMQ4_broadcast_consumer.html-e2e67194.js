const t=JSON.parse('{"key":"v-152dfdd6","path":"/mq/rocketmq4/07RocketMQ4_broadcast_consumer.html","title":"RocketMQ 广播消费","lang":"zh-CN","frontmatter":{"title":"RocketMQ 广播消费","category":"RocketMQ","tag":["RocketMQ","消息队列"],"head":[["meta",{"name":"keywords","content":"RocketMQ,消息队列,设计,精要,Nameserver,消费者,广播消费"}],["meta",{"name":"description","content":"一本RocketMQ电子书，希望对你有帮助！"}],["meta",{"property":"og:url","content":"https://javayong.cn/mq/rocketmq4/07RocketMQ4_broadcast_consumer.html"}],["meta",{"property":"og:site_name","content":"勇哥Java实战"}],["meta",{"property":"og:title","content":"RocketMQ 广播消费"}],["meta",{"property":"og:description","content":"这篇文章我们聊聊广播消费，因为广播消费在某些场景下真的有奇效。笔者会从基础概念、实现机制、实战案例三个方面一一展开，希望能帮助到大家。 1 基础概念 RocketMQ 支持两种消息模式：集群消费（ Clustering ）和广播消费（ Broadcasting ）。 集群消费： 同一 Topic 下的一条消息只会被同一消费组中的一个消费者消费。也就是说，消息被负载均衡到了同一个消费组的多个消费者实例上。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-23T00:06:39.000Z"}],["meta",{"property":"article:author","content":"勇哥"}],["meta",{"property":"article:tag","content":"RocketMQ"}],["meta",{"property":"article:tag","content":"消息队列"}],["meta",{"property":"article:modified_time","content":"2023-11-23T00:06:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ 广播消费\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-23T00:06:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"勇哥\\",\\"url\\":\\"https://javayong.cn/article/\\"}]}"]],"description":"这篇文章我们聊聊广播消费，因为广播消费在某些场景下真的有奇效。笔者会从基础概念、实现机制、实战案例三个方面一一展开，希望能帮助到大家。 1 基础概念 RocketMQ 支持两种消息模式：集群消费（ Clustering ）和广播消费（ Broadcasting ）。 集群消费： 同一 Topic 下的一条消息只会被同一消费组中的一个消费者消费。也就是说，消息被负载均衡到了同一个消费组的多个消费者实例上。"},"headers":[{"level":2,"title":"1 基础概念","slug":"_1-基础概念","link":"#_1-基础概念","children":[]},{"level":2,"title":"2 源码解析","slug":"_2-源码解析","link":"#_2-源码解析","children":[]},{"level":2,"title":"3 实战案例","slug":"_3-实战案例","link":"#_3-实战案例","children":[{"level":3,"title":"3.1 消息推送","slug":"_3-1-消息推送","link":"#_3-1-消息推送","children":[]},{"level":3,"title":"3.2 缓存同步","slug":"_3-2-缓存同步","link":"#_3-2-缓存同步","children":[]}]},{"level":2,"title":"4 总结","slug":"_4-总结","link":"#_4-总结","children":[]}],"git":{"createdTime":1700101097000,"updatedTime":1700697999000,"contributors":[{"name":"makemyownlife","email":"zhangyong7120180@163.com","commits":3}]},"readingTime":{"minutes":7.1,"words":2130},"filePathRelative":"mq/rocketmq4/07RocketMQ4_broadcast_consumer.md","localizedDate":"2023年11月16日","excerpt":"<p>这篇文章我们聊聊广播消费，因为广播消费在某些场景下真的有奇效。笔者会从<strong>基础概念</strong>、<strong>实现机制</strong>、<strong>实战案例</strong>三个方面一一展开，希望能帮助到大家。</p>\\n<h2> 1 基础概念</h2>\\n<p>RocketMQ 支持两种消息模式：<code>集群消费</code>（ Clustering ）和<code>广播消费</code>（ Broadcasting ）。</p>\\n<p><strong>集群消费</strong>：</p>\\n<p>同一 Topic 下的一条消息只会被同一消费组中的一个消费者消费。也就是说，消息被负载均衡到了同一个消费组的多个消费者实例上。</p>","copyright":{"author":"勇哥"},"autoDesc":true}');export{t as data};
