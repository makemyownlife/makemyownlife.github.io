import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as p,e as n}from"./app-9277c8b6.js";const o={},s=n(`<p>RocketMQ 是笔者非常喜欢的消息队列，4.9.X 版本是目前使用最广泛的版本，但它的消费逻辑相对较重，很多同学学习起来没有头绪。</p><p>这篇文章，笔者梳理了 RocketMQ 的消费逻辑，希望对大家有所启发。</p><figure><img src="https://www.javayong.cn/pics/temp//qaRc3GjFlL.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><h2 id="_1-架构概览" tabindex="-1"><a class="header-anchor" href="#_1-架构概览" aria-hidden="true">#</a> 1 架构概览</h2><p>在展开集群消费逻辑细节前，我们先对 RocketMQ 4.X 架构做一个概览。</p><figure><img src="https://www.javayong.cn/pics/temp//WmCfyfFaPD-20231117160806702.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>整体架构中包含<strong>四种角色</strong> :</p><p><strong>1、NameServer</strong></p><p>名字服务是是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。它是一个非常简单的 Topic 路由注册中心，其角色类似 Dubbo 中的 zookeeper ，支持 Broker 的动态注册与发现。</p><p><strong>2、BrokerServer</strong></p><p>Broker 主要负责消息的存储、投递和查询以及服务高可用保证 。</p><p><strong>3、Producer</strong></p><p>消息发布的角色，Producer 通过 MQ 的负载均衡模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</p><p><strong>4、Consumer</strong></p><p>消息消费的角色，支持以 push 推，pull 拉两种模式对消息进行消费。</p><p>RocketMQ 集群工作流程：</p><p>1、<strong>启动 NameServer</strong>，NameServer 起来后监听端口，等待 Broker、Producer 、Consumer 连上来，相当于一个路由控制中心。</p><p>2、<strong>Broker 启动</strong>，跟所有的 NameServer 保持长连接，定时发送心跳包。心跳包中包含当前 Broker信息( IP+端口等 )以及存储所有 Topic 信息。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系。</p><p>3、收发消息前，先<strong>创建 Topic</strong>，创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上，也可以在发送消息时自动创建 Topic。</p><p>4、<strong>Producer 发送消息</strong>，启动时先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中获取当前发送的 Topic 存在哪些 Broker 上，轮询从队列列表中选择一个队列，然后与队列所在的 Broker 建立长连接从而向 Broker 发消息。</p><p>5、Consumer 跟 Producer 类似，跟其中一台 NameServer 建立长连接，获取当前订阅 Topic 存在哪些 Broker 上，然后直接跟 Broker 建立连接通道，开始<strong>消费消息</strong>。</p><h2 id="_2-发布订阅" tabindex="-1"><a class="header-anchor" href="#_2-发布订阅" aria-hidden="true">#</a> 2 发布订阅</h2><p>RocketMQ 的传输模型是：<strong>发布订阅模型</strong> 。</p><p>发布订阅模型具有如下特点：</p><ul><li><p><strong>消费独立</strong></p><p>相比队列模型的匿名消费方式，发布订阅模型中消费方都会具备的身份，一般叫做订阅组（订阅关系），不同订阅组之间相互独立不会相互影响。</p></li><li><p><strong>一对多通信</strong></p><p>基于独立身份的设计，同一个主题内的消息可以被多个订阅组处理，每个订阅组都可以拿到全量消息。因此发布订阅模型可以实现一对多通信。</p></li></ul><p>RocketMQ 支持两种消息模式：<strong>集群消费</strong>（ Clustering ）和<strong>广播消费</strong>（ Broadcasting ）。</p><p><strong>集群消费</strong>：<strong>同一 Topic 下的一条消息只会被同一消费组中的一个消费者消费</strong>。也就是说，消息被负载均衡到了同一个消费组的多个消费者实例上。</p><figure><img src="https://www.javayong.cn/pics/temp//YB1Famn1EF.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>广播消费</strong>：当使用广播消费模式时，每条消息推送给集群内所有的消费者，保证消息至少被每个消费者消费一次。</p><figure><img src="https://www.javayong.cn/pics/temp//32GDhELg1w.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>为了实现这种发布订阅模型 ， RocketMQ 精心设计了它的存储模型。先进入 Broker 的文件存储目录。</p><figure><img src="https://www.javayong.cn/pics/temp//AWhYeCz1HL-20231117160806691.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>RocketMQ 采用的是<strong>混合型</strong>的存储结构。</p><p><strong>1、Broker 单个实例下所有的队列共用一个数据文件（commitlog）来存储</strong></p><p>生产者发送消息至 Broker 端，然后 Broker 端使用同步或者异步的方式对消息刷盘持久化，保存至 commitlog 文件中。只要消息被刷盘持久化至磁盘文件 commitlog 中，那么生产者发送的消息就不会丢失。</p><p>单个文件大小默认 1G , 文件名长度为 20 位，左边补零，剩余为起始偏移量，比如 00000000000000000000 代表了第一个文件，起始偏移量为 0 ，文件大小为1 G = 1073741824 。</p><figure><img src="https://www.javayong.cn/pics/temp//OXCR8q0haW-20231117160806755.webp!large" alt=" commitlog 目录" tabindex="0"><figcaption> commitlog 目录</figcaption></figure><p>这种设计有两个优点：</p><ul><li><p>充分利用顺序写，大大提升写入数据的吞吐量；</p></li><li><p>快读定位消息。</p><p>因为消息是一条一条写入到 commitlog 文件 ，写入完成后，我们可以得到这条消息的<strong>物理偏移量</strong>。</p><p>每条消息的物理偏移量是唯一的， commitlog 文件名是递增的，可以根据消息的物理偏移量通过<strong>二分查找</strong>，定位消息位于那个文件中，并获取到消息实体数据。</p></li></ul><p><strong>2、Broker 端的后台服务线程会不停地分发请求并异步构建 consumequeue（消费文件）和 indexfile（索引文件）</strong></p><p>进入消费文件存储目录 ：</p><figure><img src="https://www.javayong.cn/pics/temp//E7tgMi1WhB-20231117160806719.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>1、消费文件按照主题存储，每个主题下有不同的队列，图中主题 my-mac-topic 有 16 个队列 (0 到 15) ;</p><p>2、每个队列目录下 ，存储 consumequeue 文件，每个 consumequeue 文件也是顺序写入，数据格式见下图。</p><figure><img src="https://www.javayong.cn/pics/temp//1y4ZNBbc3K.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>每个 consumequeue 文件包含 30 万个条目，每个条目大小是 20 个字节，每个文件的大小是 30 万 * 20 = 60万字节，每个文件大小约 5.72M 。</p><p>和 commitlog 文件类似，consumequeue 文件的名称也是以偏移量来命名的，可以通过消息的逻辑偏移量定位消息位于哪一个文件里。</p><p>消费文件按照<strong>主题-队列</strong>来保存 ，这种方式特别适配<strong>发布订阅模型</strong>。</p><p>消费者从 Broker 获取订阅消息数据时，不用遍历整个 commitlog 文件，只需要根据逻辑偏移量从 consumequeue 文件查询消息偏移量 , 最后通过定位到 commitlog 文件， 获取真正的消息数据。</p><p>要实现发布订阅模型，还需要一个重要文件：<strong>消费进度</strong>文件。原因有两点：</p><ul><li><p>不同消费组之间相互独立，不会相互影响 ；</p></li><li><p>消费者下次拉取数据时，需要知道从哪个进度开始拉取 ，就像我们小时候玩单机游戏存盘一样。</p></li></ul><p>因此消费进度文件需要保存消费组所订阅主题的消费进度。</p><p>我们浏览下集群消费场景下的 Broker 端的消费进度文件 <strong>consumerOffset.json</strong> 。</p><figure><img src="https://www.javayong.cn/pics/temp//KdhMCdYePf.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><figure><img src="https://www.javayong.cn/pics/temp//jpfI145dyQ.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>在进度文件 consumerOffset.json 里，数据以 key-value 的结构存储，key 表示：主题@消费者组 ， value 是 consumequeue 中每个队列对应的逻辑偏移量 。</p><p>写到这里，我们<strong>粗糙模拟</strong>下 RocketMQ <strong>存储模型如何满足发布订阅模型</strong> 。</p><figure><img src="https://www.javayong.cn/pics/temp//cnRQMAQDa2.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>1、<strong>发送消息</strong>：生产者发送消息到 Broker ；</p><p>2、<strong>保存消息</strong>：Broker 将消息存储到 commitlog 文件 ，异步线程会构建消费文件 consumequeue ；</p><p>3、<strong>消费流程</strong>：消费者启动后，会通过负载均衡分配对应的队列，然后向 Broker 发送拉取消息请求。Broker 收到消费者拉取请求之后，根据订阅组，消费者编号，主题，队列名，逻辑偏移量等参数 ，从该主题下的 consumequeue 文件查询消息消费条目，然后从 commitlog 文件中获取消息实体。消费者在收到消息数据之后，执行消费监听器，消费完消息；</p><p>4、<strong>保存进度</strong>：消费者将消费进度提交到 Broker ，Broker 会将该消费组的消费进度存储在进度文件里。</p><h2 id="_3-消费流程" tabindex="-1"><a class="header-anchor" href="#_3-消费流程" aria-hidden="true">#</a> 3 消费流程</h2><p>我们重点讲解下集群消费的消费流程 ，因为<strong>集群消费是使用最普遍的消费模式</strong>，理解了集群消费，广播消费也就能顺理成章的掌握了。</p><figure><img src="https://www.javayong.cn/pics/temp//JMHeWL51md.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>集群消费示例代码里，启动消费者，我们需要配置三个核心属性：<strong>消费组名</strong>、<strong>订阅主题</strong>、<strong>消息监听器</strong>，最后调用 start 方法启动。</p><p>首先进入 <code>DefaultMQPushConsumerImpl</code> 类的 <code>start</code> 方法 。</p><figure><img src="https://www.javayong.cn/pics/temp//pushconsumerstart.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>消费者启动后，我们可以将整个流程简化成：</p><figure><img src="https://www.javayong.cn/pics/temp//consumerliucheng.png" alt="" tabindex="0"><figcaption></figcaption></figure><h2 id="_4-负载均衡" tabindex="-1"><a class="header-anchor" href="#_4-负载均衡" aria-hidden="true">#</a> 4 负载均衡</h2><p>消费端的负载均衡是指<strong>将 Broker 端中多个队列按照某种算法分配给同一个消费组中的不同消费者，负载均衡是客户端开始消费的起点</strong>。</p><p>RocketMQ 负载均衡的<strong>核心设计理念</strong>是</p><ul><li><p>消费队列在同一时间只允许被同一消费组内的一个消费者消费</p></li><li><p>一个消费者能同时消费多个消息队列</p></li></ul><p>负载均衡是每个<strong>客户端独立进行计算</strong>，那么何时触发呢 ？</p><figure><img src="https://www.javayong.cn/pics/temp//yxd8EaU0qS.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><ul><li><p>消费端启动时，立即进行负载均衡；</p></li><li><p>消费端定时任务每隔 20 秒触发负载均衡；</p></li><li><p>消费者上下线，Broker 端通知消费者触发负载均衡。</p></li></ul><p>负载均衡流程如下：</p><p><strong>1、发送心跳</strong></p><p>消费者启动后，它就会通过定时任务不断地向 RocketMQ 集群中的所有 Broker 实例发送心跳包（<strong>消息消费分组名称</strong>、<strong>订阅关系集合</strong>、<strong>消息通信模式</strong>和<strong>客户端实例编号</strong>等信息）。</p><p>Broker 端在收到消费者的心跳消息后，会将它维护在 ConsumerManager 的本地缓存变量 consumerTable，同时并将封装后的客户端网络<strong>通道信息</strong>保存在本地缓存变量 channelInfoTable 中，为之后做消费端的负载均衡提供可以依据的元数据信息。</p><p><strong>2、启动负载均衡服务</strong></p><p>负载均衡服务会根据消费模式为”广播模式”还是“集群模式”做不同的逻辑处理，这里主要来看下集群模式下的主要处理流程：</p><p>(1) 获取该主题下的消息消费队列集合；</p><p>(2) 查询 Broker 端获取该消费组下消费者 Id 列表；</p><p>(3) 先对 Topic 下的消息消费队列、消费者 Id 排序，然后用消息队列分配策略算法（默认为：消息队列的平均分配算法），计算出待拉取的消息队列；</p><figure><img src="https://www.javayong.cn/pics/temp//iYLyVcUAt4.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><figure><img src="https://www.javayong.cn/pics/temp//4OHEa2jquR.webp!large" alt="平均分配算法" tabindex="0"><figcaption>平均分配算法</figcaption></figure><p>这里的平均分配算法，类似于分页的算法，将所有 MessageQueue 排好序类似于记录，将所有消费端排好序类似页数，并求出每一页需要包含的平均 size 和每个页面记录的范围 range ，最后遍历整个 range 而计算出当前消费端应该分配到的记录。</p><p>(4) 分配到的消息队列集合与 processQueueTable 做一个过滤比对操作。</p><figure><img src="https://www.javayong.cn/pics/temp//xs0dDuzfwc.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>消费者实例内 ，processQueueTable 对象存储着当前负载均衡的队列 ，以及该队列的处理队列 processQueue (消费快照)。</p><ol><li><p>标红的 Entry 部分表示与分配到的消息队列集合互不包含，则需要将这些红色队列 Dropped 属性为 true , 然后从 processQueueTable 对象中移除。</p></li><li><p>绿色的 Entry 部分表示与分配到的消息队列集合的交集，processQueueTable 对象中已经存在该队列。</p></li><li><p>黄色的 Entry 部分表示这些队列需要添加到 processQueueTable 对象中，为每个分配的新队列创建一个消息拉取请求 <code>pullRequest</code> , 在消息拉取请求中保存一个处理队列 <code>processQueue</code> （队列消费快照），内部是红黑树（<code>TreeMap</code>），用来保存拉取到的消息。</p></li></ol><p>最后创建拉取消息请求列表，并<strong>将请求分发到消息拉取服务，进入拉取消息环节</strong>。</p><h2 id="_5-长轮询" tabindex="-1"><a class="header-anchor" href="#_5-长轮询" aria-hidden="true">#</a> 5 长轮询</h2><p>在负载均衡这一小节，我们已经知道<strong>负载均衡触发了拉取消息的流程</strong>。</p><p>消费者启动的时候，会创建一个<strong>拉取消息服务 PullMessageService</strong> ，它是一个单线程的服务。</p><figure><img src="https://www.javayong.cn/pics/temp//9lQ0kqqgMV.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>核心流程如下：</p><p>1、负载均衡服务将消息拉取请求放入到拉取请求队列 pullRequestQueue , 拉取消息服务从队列中获取<strong>拉取消息请求</strong> ；</p><p>2、拉取消息服务向 Brorker 服务发送拉取请求 ，拉取请求的通讯模式是<strong>异步回调模式</strong> ;</p><figure><img src="https://www.javayong.cn/pics/temp//wU7kAPifpi.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>消费者的拉取消息服务本身就是一个单线程，使用异步回调模式，发送拉取消息请求到 Broker 后，<strong>拉取消息线程并不会阻塞</strong> ，可以继续处理队列 pullRequestQueue 中的其他拉取任务。</p><p>3、Broker 收到消费者拉取消息请求后，从存储中查询出消息数据，然后返回给消费者；</p><p>4、消费者的网络通讯层会执行<strong>拉取回调函数</strong>相关逻辑，首先会将消息数据存储在队列消费快照 processQueue 里；</p><p>消费快照使用<strong>红黑树 msgTreeMap</strong> 存储拉取服务拉取到的消息 。</p><figure><img src="https://www.javayong.cn/pics/temp//XdYYK2Hqk2.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>5、回调函数将<strong>消费请求</strong>提交到<strong>消息消费服务</strong> ，而消息消费服务会<strong>异步</strong>的消费这些消息；</p><p>6、回调函数会将处理中队列的拉取请放入到定时任务中；</p><p>7、定时任务再次将消息拉取请求放入到队列 pullRequestQueue 中，<strong>形成了闭环</strong>：负载均衡后的队列总会有任务执行拉取消息请求，不会中断。</p><p>细心的同学肯定有疑问：<strong>既然消费端是拉取消息，为什么是长轮询呢</strong> ？</p><p>虽然拉模式的主动权在消费者这一侧，但是缺点很明显。</p><p>因为消费者并不知晓 Broker 端什么时候有新的消息 ，所以会不停地去 Broker 端拉取消息，但拉取频率过高， Broker 端压力就会很大，频率过低则会导致消息延迟。</p><p>所以<strong>要想消费消息的延迟低，服务端的推送必不可少</strong>。</p><p>下图展示了 RocketMQ 如何通过长轮询减小拉取消息的延迟。</p><figure><img src="https://www.javayong.cn/pics/temp//c53QfosbB2.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>核心流程如下：</p><p>1、Broker 端接收到消费者的拉取消息请求后，拉取消息处理器开始处理请求，根据拉取请求查询消息存储 ；</p><p>2、从消息存储中获取消息数据 ，若存在新消息 ，则将消息数据通过网络返回给消费者。若无新消息，则将拉取请求放入到<strong>拉取请求表 pullRequestTable</strong> 。</p><p>3、<strong>长轮询请求管理服务</strong> pullRequestHoldService 每隔 5 秒从拉取请求表中判断拉取消息请求的队列是否有新的消息。</p><p>判定标准是：拉取消息请求的偏移量是否小于当前消费队列最大偏移量，如果条件成立则说明有新消息了。</p><p>若存在新的消息 , <strong>长轮询请求管理服务</strong>会触发拉取消息处理器重新处理该拉取消息请求。</p><p>4、当 commitlog 中新增了新的消息，消息分发服务会构建消费文件和索引文件，并且会通知<strong>长轮询请求管理服务</strong>，触发<strong>拉取消息处理器重新处理该拉取消息请求</strong>。</p><h2 id="_6-消费消息" tabindex="-1"><a class="header-anchor" href="#_6-消费消息" aria-hidden="true">#</a> 6 消费消息</h2><p>在拉取消息的流程里， Broker 端返回消息数据，消费者的通讯框架层会执行回调函数。</p><p>回调线程会将数据存储在队列消费快照 processQueue（内部使用<strong>红黑树 msgTreeMap</strong>）里，然后将消息提交到消费消息服务，消费消息服务会异步消费这些消息。</p><figure><img src="https://www.javayong.cn/pics/temp//aWJXs9ZF6L.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>消息消费服务有两种类型：<strong>并发消费服务</strong>和<strong>顺序消费服务</strong> 。</p><figure><img src="https://www.javayong.cn/pics/temp//FC4h3oP2zB.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><h3 id="_6-1-并发消费" tabindex="-1"><a class="header-anchor" href="#_6-1-并发消费" aria-hidden="true">#</a> 6.1 并发消费</h3><p>并发消费是指<strong>消费者将并发消费消息，消费的时候可能是无序的</strong>。</p><p>消费消息并发服务启动后，会初始化三个组件：<strong>消费线程池</strong>、<strong>清理过期消息定时任务</strong>、<strong>处理失败消息定时任务</strong>。</p><figure><img src="https://www.javayong.cn/pics/temp//7ZT6DQW1K1.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>核心流程如下：</p><p><strong>0、通讯框架回调线程会将数据存储在消费快照里，然后将消息列表 msgList 提交到消费消息服务</strong></p><p><strong>1、 消息列表 msgList 组装成消费对象</strong></p><p><strong>2、将消费对象提交到消费线程池</strong></p><figure><img src="https://www.javayong.cn/pics/temp//B1tBLvh3fV.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>我们看到10 条消息被组装成三个消费请求对象，不同的消费线程会执行不同的消费请求对象。</p><p><strong>3、消费线程执行消息监听器</strong></p><figure><img src="https://www.javayong.cn/pics/temp//CK2wsCfJg3.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>执行完消费监听器，会返回消费结果。</p><figure><img src="https://www.javayong.cn/pics/temp//m2OC0khwGU.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>4、处理异常消息</strong></p><figure><img src="https://www.javayong.cn/pics/temp//V4g5vXlLc7.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>当消费异常时，异常消息将重新发回 Broker 端的重试队列（ RocketMQ 会为每个 topic 创建一个重试队列，以 %RETRY% 开头），达到重试时间后将消息投递到重试队列中进行消费重试。</p><blockquote><p>我们将在<strong>重试机制</strong>这一节重点讲解 RocketMQ 如何实现延迟消费功能 。</p></blockquote><p>假如异常的消息发送到 Broker 端失败，则重新将这些失败消息通过<strong>处理失败消息定时任务</strong>重新提交到消息消费服务。</p><p><strong>5、更新本地消费进度</strong></p><p>消费者消费一批消息完成之后，需要保存消费进度到进度管理器的本地内存。</p><figure><img src="https://www.javayong.cn/pics/temp//4UWT3ECS5W.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>首先我们会从队列消费快照 processQueue 中移除消息，返回消费快照 msgTreeMap 第一个偏移量 ，然后调用消费消息进度管理器 offsetStore 更新消费进度。</p><p><strong>待更新的偏移量</strong>是如何计算的呢？</p><figure><img src="https://www.javayong.cn/pics/temp//Br4RznOnaN.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><ul><li><p>场景1：快照中1001（消息1）到1010（消息10）消费了，快照中没有了消息，返回已消费的消息最大偏移量 + 1 也就是1011。</p><figure><img src="https://www.javayong.cn/pics/temp//5Nhp8CddxY.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure></li><li><p>场景2：快照中1001（消息1）到1008（消息8）消费了，快照中只剩下两条消息了，返回最小的偏移量 1009。</p></li></ul><figure><img src="https://www.javayong.cn/pics/temp//kdKZew4JsR.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><ul><li>场景3：1001（消息1）在消费对象中因为某种原因一直没有被消费，即使后面的消息1005-1010都消费完成了，返回的最小偏移量是1001。</li></ul><figure><img src="https://www.javayong.cn/pics/temp//1N0EP94TWG.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>在场景3，RocketMQ 为了保证消息肯定被消费成功，消费进度只能维持在1001（消息1），直到1001也被消费完，本地的消费进度才会一下子更新到1011。</p><p>假设1001（消息1）还没有消费完成，消费者实例<strong>突然退出（机器断电，或者被 kill ）</strong>，就存在重复消费的风险。</p><p>因为队列的消费进度还是维持在1001，当队列重新被分配给新的消费者实例的时候，新的实例从 Broker 上拿到的消费进度还是维持在1001，这时候就会又从1001开始消费，1001-1010这批消息实际上已经被消费过还是会投递一次。</p><p>所以<strong>业务必须要保证消息消费的幂等性</strong>。</p><p>写到这里，我们会有一个疑问：<strong>假设1001（消息1）因为加锁或者消费监听器逻辑非常耗时，导致极长时间没有消费完成，那么消费进度就会一直卡住 ，怎么解决呢 ？</strong></p><p>RocketMQ 提供两种方式一起配合解决：</p><ul><li><p><strong>拉取服务根据并发消费间隔配置限流</strong></p><figure><img src="https://www.javayong.cn/pics/temp//1h0U1AjiN1.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>拉取消息服务在拉取消息时候，会判断当前队列的 processQueue 消费快照里消息的最大偏移量 - 消息的最小偏移量大于消费并发间隔（2000）的时候 , 就会触发流控 , 这样就可以避免消费者无限循环的拉取新的消息。</p></li><li><p><strong>清理过期消息</strong></p><figure><img src="https://www.javayong.cn/pics/temp//MvanDXLXjS.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>消费消息并发服务启动后，会定期扫描所有消费的消息，若当前时间减去开始消费的时间大于消费超时时间，首先会将过期消息发送 sendMessageBack 命令发送到 Broker ，然后从快照中删除该消息。</p></li></ul><h3 id="_6-2-顺序消费" tabindex="-1"><a class="header-anchor" href="#_6-2-顺序消费" aria-hidden="true">#</a> 6.2 顺序消费</h3><p>顺序消息是指对于一个指定的 Topic ，消息严格按照先进先出（FIFO）的原则进行消息发布和消费，即先发布的消息先消费，后发布的消息后消费。</p><p>顺序消息分为<strong>分区顺序消息</strong>和<strong>全局顺序消息</strong>。</p><p><strong>1、分区顺序消息</strong></p><p>对于指定的一个 Topic ，所有消息根据 Sharding Key 进行区块分区，同一个分区内的消息按照严格的先进先出（FIFO）原则进行发布和消费。同一分区内的消息保证顺序，不同分区之间的消息顺序不做要求。</p><ul><li><p>适用场景：适用于性能要求高，以 Sharding Key 作为分区字段，在同一个区块中严格地按照先进先出（FIFO）原则进行消息发布和消费的场景。</p></li><li><p>示例：电商的订单创建，以订单 ID 作为 Sharding Key ，那么同一个订单相关的创建订单消息、订单支付消息、订单退款消息、订单物流消息都会按照发布的先后顺序来消费。</p></li></ul><p><strong>2、全局顺序消息</strong></p><p>对于指定的一个 Topic ，所有消息按照严格的先入先出（FIFO）的顺序来发布和消费。</p><ul><li><p>适用场景：适用于性能要求不高，所有的消息严格按照 FIFO 原则来发布和消费的场景。</p></li><li><p>示例：在证券处理中，以人民币兑换美元为 Topic，在价格相同的情况下，先出价者优先处理，则可以按照 FIFO 的方式发布和消费全局顺序消息。</p></li></ul><blockquote><p>全局顺序消息实际上是一种特殊的分区顺序消息，即 Topic 中只有一个分区，因此<strong>全局顺序和分区顺序的实现原理相同</strong>。</p><p>因为分区顺序消息有多个分区，所以<strong>分区顺序消息比全局顺序消息的并发度和性能更高</strong>。</p></blockquote><figure><img src="https://www.javayong.cn/pics/temp//wsNXq03SCB.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>消息的顺序需要由两个阶段保证：</p><ul><li><p><strong>消息发送</strong></p><p>如上图所示，A1、B1、A2、A3、B2、B3 是订单 A 和订单 B 的消息产生的顺序，业务上要求同一订单的消息保持顺序，例如订单 A 的消息发送和消费都按照 A1、A2、A3 的顺序。</p><p>如果是普通消息，订单A 的消息可能会被轮询发送到不同的队列中，不同队列的消息将无法保持顺序，而顺序消息发送时 RocketMQ 支持将 Sharding Key 相同（例如同一订单号）的消息序路由到同一个队列中。</p><p>下图是生产者发送顺序消息的封装，原理是发送消息时，实现 MessageQueueSelector 接口， <strong>根据 Sharding Key 使用 Hash 取模法来</strong>选择待发送的队列。</p><figure><img src="https://www.javayong.cn/pics/temp//zmZRavOqOB.webp!large" alt="生产者顺序发送消息封装" tabindex="0"><figcaption>生产者顺序发送消息封装</figcaption></figure></li><li><p><strong>消息消费</strong></p><p>消费者消费消息时，需要保证<strong>单线程</strong>消费每个队列的消息数据，从而实现消费顺序和发布顺序的一致。</p></li></ul><p>顺序消费服务的类是 <strong>ConsumeMessageOrderlyService</strong> ，在负载均衡阶段，并发消费和顺序消费并没有什么大的差别。</p><p>最大的差别在于：<strong>顺序消费会向 Borker 申请锁</strong> 。消费者根据分配的队列 messageQueue ，向 Borker 申请锁 ，如果申请成功，则会拉取消息，如果失败，则定时任务每隔20秒会重新尝试。</p><figure><img src="https://www.javayong.cn/pics/temp//RYjgvNzqYU.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>顺序消费核心流程如下：</p><p><strong>1、 组装成消费对象</strong></p><p><strong>2、 将请求对象提交到消费线程池</strong></p><figure><img src="https://www.javayong.cn/pics/temp//L0Fg8TEUfu.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>和并发消费不同的是，这里的消费请求包含消费快照 processQueue ，消息队列 messageQueue 两个对象，并不对消息列表做任何处理。</p><p><strong>3、 消费线程内，对消费队列加锁</strong></p><figure><img src="https://www.javayong.cn/pics/temp//BSgV66dvT9.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>顺序消费也是通过线程池消费的，synchronized 锁用来保证同一时刻对于同一个队列只有一个线程去消费它</strong></p><p><strong>4、 从消费快照中取得待消费的消息列表</strong></p><figure><img src="https://www.javayong.cn/pics/temp//fw62aVv3ei.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>消费快照 processQueue 对象里，创建了一个红黑树对象 consumingMsgOrderlyTreeMap 用于临时存储的待消费的消息。</p><p><strong>5、 执行消息监听器</strong></p><figure><img src="https://www.javayong.cn/pics/temp//htlZQC5Egi.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>消费快照的<strong>消费锁 consumeLock</strong> 的作用是：防止负载均衡线程把当前消费的 MessageQueue 对象移除掉。</p><p><strong>6、 处理消费结果</strong></p><p>消费成功时，首先计算需要提交的偏移量，然后更新本地消费进度。</p><figure><img src="https://www.javayong.cn/pics/temp//05kFcsIfVN.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>消费失败时，分两种场景：</p><ul><li><p>假如已消费次数小于最大重试次数，则将对象 consumingMsgOrderlyTreeMap 中临时存储待消费的消息，重新加入到消费快照<strong>红黑树 msgTreeMap</strong> 中，然后使用定时任务尝试重新消费。</p></li><li><p>假如已消费次数大于等于最大重试次数，则将失败消息发送到 Broker ，Broker 接收到消息后，会加入到死信队列里 , 最后计算需要提交的偏移量，然后更新本地消费进度。</p></li></ul><p>我们做一个关于顺序消费的总结 ：</p><ol><li><p>顺序消费需要由两个阶段<strong>消息发送</strong>和<strong>消息消费</strong>协同配合，底层支撑依靠的是 RocketMQ 的存储模型；</p></li><li><p>顺序消费服务启动后，队列的数据都会被消费者实例单线程的执行消费；</p></li><li><p>假如消费者扩容，消费者重启，或者 Broker 宕机 ，顺序消费也会有一定几率较短时间内乱序，所以消费者的业务逻辑还是要<strong>保障幂等</strong>。</p></li></ol><h2 id="_7-保存进度" tabindex="-1"><a class="header-anchor" href="#_7-保存进度" aria-hidden="true">#</a> 7 保存进度</h2><p>RocketMQ 消费者消费完一批数据后， 会将队列的进度保存在本地内存，但还需要将队列的消费进度持久化。</p><p><strong>1、 集群模式</strong></p><figure><img src="https://www.javayong.cn/pics/temp//lIlhh7LCc4.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>集群模式下，分两种场景：</p><ul><li><p>拉取消息服务会在拉取消息时，携带该队列的消费进度，提交给 Broker 的<strong>拉取消息处理器</strong>。</p></li><li><p>消费者定时任务，每隔5秒将本地缓存中的消费进度提交到 Broker 的<strong>消费者管理处理器</strong>。</p></li></ul><p>Broker 的这两个处理器都调用消费者进度管理器 consumerOffsetManager 的 commitOffset 方法，定时任务异步将消费进度持久化到消费进度文件 consumerOffset.json 中。</p><figure><img src="https://www.javayong.cn/pics/temp//jpfI145dyQ.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>2、 广播模式</strong></p><p>广播模式消费进度存储在消费者本地，定时任务每隔 5 秒通过 LocalFileOffsetStore 持久化到本地文件<code>offsets.json</code> ，数据格式为 <code>MessageQueue:Offset</code>。</p><figure><img src="https://www.javayong.cn/pics/temp//VDuc9BZwz3.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>广播模式下，消费进度和消费组没有关系，本地文件 <code>offsets.json</code> 存储在配置的目录，文件中包含订阅主题中所有的队列以及队列的消费进度。</p><h2 id="_8-重试机制" tabindex="-1"><a class="header-anchor" href="#_8-重试机制" aria-hidden="true">#</a> 8 重试机制</h2><p>集群消费下，<strong>重试机制</strong>的本质是 RocketMQ 的延迟消息功能。</p><p>消费消息失败后，消费者实例会通过 <strong>CONSUMER_SEND_MSG_BACK</strong> 请求，将失败消息发回到 Broker 端。</p><p>Broker 端会为每个 topic 创建一个<strong>重试队列</strong> ，队列名称是：%RETRY% + 消费者组名 ，达到重试时间后将消息投递到重试队列中进行消费重试（消费者组会自动订阅重试 Topic）。最多重试消费 16 次，重试的时间间隔逐渐变长，若达到最大重试次数后消息还没有成功被消费，则消息将被投递至死信队列。</p><table><thead><tr><th>第几次重试</th><th>与上次重试的间隔时间</th><th>第几次重试</th><th>与上次重试的间隔时间</th></tr></thead><tbody><tr><td>1</td><td>10 秒</td><td>9</td><td>7 分钟</td></tr><tr><td>2</td><td>30 秒</td><td>10</td><td>8 分钟</td></tr><tr><td>3</td><td>1 分钟</td><td>11</td><td>9 分钟</td></tr><tr><td>4</td><td>2 分钟</td><td>12</td><td>10 分钟</td></tr><tr><td>5</td><td>3 分钟</td><td>13</td><td>20 分钟</td></tr><tr><td>6</td><td>4 分钟</td><td>14</td><td>30 分钟</td></tr><tr><td>7</td><td>5 分钟</td><td>15</td><td>1 小时</td></tr><tr><td>8</td><td>6 分钟</td><td>16</td><td>2 小时</td></tr></tbody></table><figure><img src="https://www.javayong.cn/pics/temp//a4AW6Gxhxm.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>开源 RocketMQ 4.X 支持延迟消息，默认支持18 个 level 的延迟消息，这是通过 broker 端的 messageDelayLevel 配置项确定的，如下：</p><figure><img src="https://www.javayong.cn/pics/temp//JcmLurnXsq.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>Broker 在启动时，内部会创建一个内部主题：SCHEDULE_TOPIC_XXXX，根据延迟 level 的个数，创建对应数量的队列，也就是说18个 level 对应了18个队列。</p><p>我们先梳理下延迟消息的实现机制。</p><p><strong>1、生产者发送延迟消息</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">&quot;TopicA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
msg<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">&quot;Tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
msg<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;this is a delay message&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置延迟level为5，对应延迟1分钟</span>
msg<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、Broker端存储延迟消息</strong></p><p>延迟消息在 RocketMQ Broker 端的流转如下图所示：</p><figure><img src="https://www.javayong.cn/pics/temp//JLBtkWlUdG.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>第一步：修改消息 Topic 名称和队列信息</strong></p><p>Broker 端接收到生产者的写入消息请求后，首先都会将消息写到 commitlog 中。假如是正常非延迟消息，MessageStore 会根据消息中的 Topic 信息和队列信息，将其转发到目标 Topic 的指定队列 consumequeue 中。</p><p>但由于消息一旦存储到 consumequeue 中，消费者就能消费到，而延迟消息不能被立即消费，所以 RocketMQ 将 Topic 的名称修改为SCHEDULE_TOPIC_XXXX，并根据延迟级别确定要投递到哪个队列下。</p><p>同时，还会将消息原来要发送到的目标 Topic 和队列信息存储到消息的属性中。</p><figure><img src="https://www.javayong.cn/pics/temp//s4kZohhZun.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>第二步：构建 consumequeue 文件时，计算并存储投递时间</strong></p><figure><img src="https://www.javayong.cn/pics/temp//LgKhMaqAvc.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><figure><img src="https://www.javayong.cn/pics/temp//NfFXmlG1DS.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>上图是 consumequeue 文件一条消息的格式，最后 8 个字节存储 Tag 的哈希值，此时存储消息的投递时间。</p><p><strong>第三步：定时调度服务启动</strong></p><p>ScheduleMessageService 类是一个定时调度服务，读取 SCHEDULE_TOPIC_XXXX 队列的消息，并将消息投递到目标 Topic 中。</p><p>定时调度服务启动时，创建一个定时调度线程池 ，并根据延迟级别的个数，启动对应数量的 HandlePutResultTask ，每个 HandlePutResultTask 负责一个延迟级别的消费与投递。</p><figure><img src="https://www.javayong.cn/pics/temp//ywsgDHPRc2.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>第四步：投递时间到了，将消息数据重新写入到 commitlog</strong></p><p>消息到期后，需要投递到目标 Topic 。第一步已经记录了原来的 Topic 和队列信息，这里需要重新设置，再存储到 commitlog 中。</p><p><strong>第五步：将消息投递到目标 Topic 中</strong></p><p>Broker 端的后台服务线程会不停地分发请求并异步构建 consumequeue（消费文件）和 indexfile（索引文件）。因此消息会直接投递到目标 Topic 的 consumequeue 中，之后消费者就可以消费到这条消息。</p><hr><p>回顾了延迟消息的机制，消费消息失败后，消费者实例会通过 <strong>CONSUMER_SEND_MSG_BACK</strong> 请求，将失败消息发回到 Broker 端。</p><p>Broker 端 SendMessageProcessor 处理器会调用 asyncConsumerSendMsgBack 方法。</p><figure><img src="https://www.javayong.cn/pics/temp//zdjbfFwN0S.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>首先判断消息的当前重试次数是否大于等于最大重试次数，如果达到最大重试次数，或者配置的重试级别小于0，则重新创建 Topic ，规则是 <strong>%DLQ% + consumerGroup</strong>，后续处理消息发送到死信队列。</p><p>正常的消息会进入 else 分支，对于首次重试的消息，默认的 delayLevel 是 0 ，RocketMQ 会将 delayLevel + 3，也就是加到 3 ，这就是说，如果没有显示的配置延时级别，消息消费重试首次，是延迟了第三个级别发起的重试，也就是距离首次发送 10s 后重试，其主题的默认规则是 <strong>%RETRY% + consumerGroup</strong>。</p><p>当延时级别设置完成，刷新消息的重试次数为当前次数加 1 ，Broker 端将该消息刷盘，逻辑如下：</p><figure><img src="https://www.javayong.cn/pics/temp//E3CYBrG5AY.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>延迟消息写入到 commitlog 里 ，这里其实和延迟消息机制的第一步类似，后面按照延迟消息机制的流程执行即可（第二步到第六步）。</p><h2 id="_9-总结" tabindex="-1"><a class="header-anchor" href="#_9-总结" aria-hidden="true">#</a> 9 总结</h2><p>下图展示了集群模式下消费者并发消费流程 ：</p><figure><img src="https://www.javayong.cn/pics/temp//ASwgqxnuB7.webp!large" alt="" tabindex="0"><figcaption></figcaption></figure><p>核心流程如下：</p><ol><li><p>消费者启动后，触发负载均衡服务 ，负载均衡服务为消费者实例分配对应的队列 ；</p></li><li><p>分配完队列后，负载均衡服务会为每个分配的新队列创建一个消息拉取请求 <code>pullRequest</code> , 拉取请求保存一个处理队列 <code>processQueue</code>，内部是红黑树（<code>TreeMap</code>），用来保存拉取到的消息 ；</p></li><li><p>拉取消息服务单线程从拉取请求队列 <code>pullRequestQueue</code> 中弹出拉取消息，执行拉取任务 ，拉取请求是异步回调模式，将拉取到的消息放入到处理队列；</p></li><li><p>拉取请求在一次拉取消息完成之后会复用，重新被放入拉取请求队列 <code>pullRequestQueue</code> 中 ；</p></li><li><p>拉取完成后，调用消费消息服务 <code>consumeMessageService</code> 的 <code>submitConsumeRequest</code> 方法 ，消费消息服务内部有一个消费线程池；</p></li><li><p>消费线程池的消费线程从消费任务队列中获取消费请求，执行消费监听器 <code>listener.consumeMessage</code> ；</p></li><li><p>消费完成后，若消费成功，则更新偏移量 <code>updateOffset</code>，先更新到内存 <code>offsetTable</code>，定时上报到 Broker ；若消费失败，则将失败消费发送到 Broker 。</p></li><li><p>Broker 端接收到请求后， 调用消费进度管理器的 <code>commitOffset</code> 方法修改内存的消费进度，定时刷盘到 <code>consumerOffset.json</code>。</p></li></ol><p>RocketMQ 4.9.X 的消费逻辑有两个非常明显的特点：</p><ol><li><p><strong>客户端代码逻辑较重</strong>。假如要支持一种新的编程语言，那么客户端就必须实现完整的负载均衡逻辑，此外还需要实现拉消息、位点管理、消费失败后将消息发回 Broker 重试等逻辑。这给多语言客户端的支持造成很大的阻碍。</p></li><li><p><strong>保证幂等非常重要</strong>。当客户端升级或者下线时，或者 Broker 宕机，都要进行负载均衡操作，可能造成消息堆积，同时有一定几率造成重复消费。</p></li></ol>`,262),r=[s];function i(a,g){return e(),p("div",null,r)}const u=t(o,[["render",i],["__file","06RocketMQ4_consumer.html.vue"]]);export{u as default};
