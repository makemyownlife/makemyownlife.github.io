import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-9277c8b6.js";const p={},e=t(`<p>这篇文章，我们从源码的角度探寻 RocketMQ Producer 的实现机制。</p><figure><img src="https://javayong.cn/pics/rocketmq/producer.png?b-12" alt="" tabindex="0"><figcaption></figcaption></figure><h2 id="_1-基础配置" tabindex="-1"><a class="header-anchor" href="#_1-基础配置" aria-hidden="true">#</a> 1 基础配置</h2><p>我们先展示生产者发送消息的示例代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 初始化默认生产者，传递参数生产者组名</span>
<span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token constant">PRODUCER_GROUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 设置名字服务地址 </span>
producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;name-server1-ip:9876;name-server2-ip:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 启动生产者服务 </span>
producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4. 定义消息对象 </span>
<span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token constant">TOPIC</span><span class="token operator">*</span> <span class="token comment">/* Topic */</span><span class="token punctuation">,</span>
        <span class="token operator">*</span><span class="token constant">TAG</span><span class="token operator">*</span> <span class="token comment">/* Tag */</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>*<span class="token constant">DEFAULT_CHARSET</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token comment">/* Message body */</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
msg<span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 5. 发送消息</span>
<span class="token comment">// 示例普通消息</span>
<span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 示例异步回调</span>
producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do something</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do something</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 示例oneway发送</span>
producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送流程如下：</p><ol><li>初始化默认生产者，传递参数生产者组名；</li><li>设置名字服务地址 ；</li><li>启动生产者服务；</li><li>定义消息对象 ；</li><li>生产者支持<strong>普通发送</strong>、<strong>oneway 发送</strong>、<strong>异步回调</strong>三种方式发送消息 。</li></ol><h2 id="_2-发送消息流程" tabindex="-1"><a class="header-anchor" href="#_2-发送消息流程" aria-hidden="true">#</a> 2 发送消息流程</h2><h3 id="_2-1-构造函数" tabindex="-1"><a class="header-anchor" href="#_2-1-构造函数" aria-hidden="true">#</a> 2.1 构造函数</h3><p>下图展示了生产者<code>DefaultMQProducer</code> 类的构造函数，包装类 <code>DefaultMQProducerImpl</code> 是我们这一小节的核心。</p><figure><img src="https://javayong.cn/pics/rocketmq/defaultmqproducer.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>构造函数包含两个部分：</p><ol><li><p>初始化实现类 <strong>DefaultMQProducerImpl</strong> ;</p></li><li><p>根据是否开启消息轨迹参数 <code>enableMsgTrace</code> 判断是否增加消息轨迹逻辑 。</p></li></ol><h3 id="_2-2-启动生产者" tabindex="-1"><a class="header-anchor" href="#_2-2-启动生产者" aria-hidden="true">#</a> 2.2 启动生产者</h3><p><code>DefaultMQProducer</code> 类的 start 方法，本质上是调用包装类 <code>DefaultMQProducerImpl</code> 的 start 方法。</p><figure><img src="https://javayong.cn/pics/rocketmq/producerstart.png?a=1" alt="" tabindex="0"><figcaption></figcaption></figure><p>进入 <code>DefaultMQProducerImpl</code> 类，查看该类的逻辑 。</p><h4 id="_01-检测配置" tabindex="-1"><a class="header-anchor" href="#_01-检测配置" aria-hidden="true">#</a> 01 检测配置</h4><p>判断生产者组是否合法，生产者名称不能和默认生产者组名称相同。</p><figure><img src="https://javayong.cn/pics/rocketmq/producercheckconfig.png" alt="" tabindex="0"><figcaption></figcaption></figure><h4 id="_02-创建客户端实例" tabindex="-1"><a class="header-anchor" href="#_02-创建客户端实例" aria-hidden="true">#</a> 02 创建客户端实例</h4><figure><img src="https://javayong.cn/pics/rocketmq/mqclientinstance.png" alt="" tabindex="0"><figcaption></figcaption></figure><p><code>MQClientInstance</code> 对象通过 <code>MQClientManager</code> 这个单例类创建 ，标志着一个客户端实例，是非常核心的类，每一个实例对象有一个唯一的 <code>clientId</code>。</p><ul><li>生产者表/消费者表引用</li></ul><figure><img src="https://javayong.cn/pics/rocketmq/clientmap.png" alt="" tabindex="0"><figcaption></figcaption></figure><ul><li><p>路由信息</p><figure><img src="https://javayong.cn/pics/rocketmq/instanceroutertable.png" alt="" tabindex="0"><figcaption></figcaption></figure></li></ul><h4 id="_03-注册本地生产者" tabindex="-1"><a class="header-anchor" href="#_03-注册本地生产者" aria-hidden="true">#</a> 03 注册本地生产者</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> registerOK <span class="token operator">=</span> mQClientFactory<span class="token punctuation">.</span><span class="token function">registerProducer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注册本地生产者的本质是修改客户端实例的生产者表引用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MQProducerInner</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>producerTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> producer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_04-启动客户端实例" tabindex="-1"><a class="header-anchor" href="#_04-启动客户端实例" aria-hidden="true">#</a> 04 启动客户端实例</h4><figure><img src="https://javayong.cn/pics/rocketmq/instancestart.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>实例启动后，会启动通讯模块、定时任务、负载均衡服务、消费者拉取服务。</p><p>下图展示了生产者发送消息时，IDEA 里的线程 DUMP 图：</p><figure><img src="https://javayong.cn/pics/rocketmq/producerdump.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>我们需要重点讲讲定时任务 <code>startScheduledTask</code>方法 , 定时任务如下图：</p><figure><img src="https://javayong.cn/pics/rocketmq/instanceclientschedule.png?a=2" alt="" tabindex="0"><figcaption></figcaption></figure><p>我们重点关注<strong>发送心跳</strong>和<strong>更新路由</strong>两个任务。</p><ul><li><strong>发送心跳</strong>： 定时任务每隔 30 秒将客户端信息发送到 Broker 。</li></ul><figure><img src="https://javayong.cn/pics/rocketmq/HeartbeatData.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>当 Broker 收到心跳请求之后，会通过生产者管理器 <code>ProducerManager</code>、消费者管理器<code>ConsumerManager</code>分别更新生产者客户端缓存、消费者客户端缓存。</p><ul><li><strong>更新路由</strong></li></ul><p>对于生产者来讲，它需要知道需要发送消息的主题对应的路由信息 , 因此需要定时更新路由信息。</p><figure><img src="https://javayong.cn/pics/rocketmq/updateTopicRouteInfoFromNameServer.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>更新逻辑比较简单，首先从名字服务获取主题路由信息对象 <code>topicRoute</code>，然后更新 <code>DefaultMQProducerImpl</code>的<strong>主题发布信息</strong><code>topicPublishInfoTable</code>对象 。</p><h3 id="_2-3-发送消息" tabindex="-1"><a class="header-anchor" href="#_2-3-发送消息" aria-hidden="true">#</a> 2.3 发送消息</h3><p>进入 <code>DefaultMQProducerImpl</code> 类，查看发送消息方法 <code>sendDefaultImpl </code>。</p><figure><img src="https://javayong.cn/pics/rocketmq/sendimpl.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>笔者将发送消息流程简化如下：</p><ul><li><p>获取主题发布信息；</p></li><li><p>根据路由算法选择一个消息队列，也就是 <code>selectOneMessageQueue</code>方法；</p></li><li><p>调用 <code>sendKernelImpl</code>发放消息对象，封装成发送结果对象 <code>sendResult</code>。</p></li></ul><h4 id="_01-尝试获取主题发布信息" tabindex="-1"><a class="header-anchor" href="#_01-尝试获取主题发布信息" aria-hidden="true">#</a> 01 尝试获取主题发布信息</h4><p>我们知道 <code>MQClientInstance</code> 的定时任务每隔30秒会更新生产者实现类的<code>topicPublishInfoTable </code>，但若第一次发送消息时，若缓存中无数据时候，还是要重新拉取一次。</p><figure><img src="https://javayong.cn/pics/rocketmq/trytofinidtopicpublishinfo.png" alt="" tabindex="0"><figcaption></figcaption></figure><h4 id="_02-根据路由算法选择一个消息队列" tabindex="-1"><a class="header-anchor" href="#_02-根据路由算法选择一个消息队列" aria-hidden="true">#</a> 02 根据路由算法选择一个消息队列</h4><p>RocketMQ 存储模型包含三部分： <strong>数据文件 commitlog</strong> 、<strong>消费文件 consumequeue</strong> 、<strong>索引文件 indexfile</strong>。</p><figure><img src="https://javayong.cn/pics/rocketmq/filelogic.png" alt="" tabindex="0"><figcaption></figcaption></figure><figure><img src="https://javayong.cn/pics/rocketmq/filefileoverview.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>因此根据 RocketMQ 的存储模型设计，**对于生产者来讲，发送消息时，必须指定该主题对应的队列。**路由算法，我们会在路由机制这一节重点讲解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MessageQueue</span> mqSelected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">,</span> lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_03-调用实例客户端-api-发送消息" tabindex="-1"><a class="header-anchor" href="#_03-调用实例客户端-api-发送消息" aria-hidden="true">#</a> 03 调用实例客户端 API 发送消息</h4><p>通过路由机制选择一个 messageQueue 之后，调用实例客户端 API 发送消息。</p><figure><img src="https://javayong.cn/pics/rocketmq/kernelimpl.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>Broker 端在收到发送消息请求后，调用处理器 <code>SendMessageProcessor</code>处理请求，处理完成后，将响应结果返回给生产者客户端，客户端将接收到的数据组装成 <code>SendResult</code>对象。</p><h2 id="_3-路由机制" tabindex="-1"><a class="header-anchor" href="#_3-路由机制" aria-hidden="true">#</a> 3 路由机制</h2><p>进入<code>DefaultMQProducerImpl#selectOneMessageQueue</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">TopicPublishInfo</span> tpInfo<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mqFaultStrategy<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>tpInfo<span class="token punctuation">,</span> lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由机制通过调用 <code> MQFaultStrategy</code> 的 <code>selectOneMessageQueue</code> 方法 ，这里有一个 <code>sendLatencyFaultEnable</code> 开关变量，默认为 false 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MQFaultStrategy</span> <span class="token punctuation">{</span>
    <span class="token comment">//省略部分代码 日志</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LatencyFaultTolerance</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> latencyFaultTolerance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LatencyFaultToleranceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> sendLatencyFaultEnable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> latencyMax <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">50L</span><span class="token punctuation">,</span> <span class="token number">100L</span><span class="token punctuation">,</span> <span class="token number">550L</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">,</span> <span class="token number">3000L</span><span class="token punctuation">,</span> <span class="token number">15000L</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> notAvailableDuration <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">30000L</span><span class="token punctuation">,</span> <span class="token number">60000L</span><span class="token punctuation">,</span> <span class="token number">120000L</span><span class="token punctuation">,</span> <span class="token number">180000L</span><span class="token punctuation">,</span> <span class="token number">600000L</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//省略部分代码 get/set方法 </span>
    <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">TopicPublishInfo</span> tpInfo<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送延迟错误策略</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendLatencyFaultEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> index <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">%</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">final</span> <span class="token class-name">String</span> notBestBroker <span class="token operator">=</span> latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">pickOneAtLeast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> writeQueueNums <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getQueueIdByBroker</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>writeQueueNums <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>notBestBroker <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        mq<span class="token punctuation">.</span><span class="token function">setBrokerName</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        mq<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> writeQueueNums<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred when selecting message queue&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 默认策略</span>
        <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFaultItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> currentLatency<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isolation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendLatencyFaultEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> duration <span class="token operator">=</span> <span class="token function">computeNotAvailableDuration</span><span class="token punctuation">(</span>isolation <span class="token operator">?</span> <span class="token number">30000</span> <span class="token operator">:</span> currentLatency<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>brokerName<span class="token punctuation">,</span> currentLatency<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">computeNotAvailableDuration</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> currentLatency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> latencyMax<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLatency <span class="token operator">&gt;=</span> latencyMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notAvailableDuration<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有两个逻辑分支 ：</p><ol><li><code>sendLatencyFaultEnable</code> 为 false ， 通过 <code>TopicPublishInfo</code> 中的 <code> messageQueueList</code> 中选择一个队列（MessageQueue）进行发送消息 ；</li><li><code>sendLatencyFaultEnable</code> 为 true ，开启<strong>延迟容错机制</strong>。</li></ol><h3 id="_3-1-默认机制" tabindex="-1"><a class="header-anchor" href="#_3-1-默认机制" aria-hidden="true">#</a> 3.1 默认机制</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// TopicPublishInfo 类</span>
<span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastBrokerName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendWhichQueue<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendWhichQueue<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认机制有两个要点：</p><ol><li>循环遍历该主题下所有的队列 ；</li><li>若上一个失败的 Broker 参数值存在，需要过滤掉上一个失败的 Broker 。</li></ol><h3 id="_3-2-延迟容错机制" tabindex="-1"><a class="header-anchor" href="#_3-2-延迟容错机制" aria-hidden="true">#</a> 3.2 延迟容错机制</h3><p>所谓<strong>延迟容错机制</strong>，是指发送消息时，若某个队列对应的 Broker 宕机了，在默认机制下很可能下一次选择的队列还是在已经宕机的 broker ，没有办法规避故障的broker，因此消息发送很可能会再次失败，重试发送造成了不必要的性能损失。</p><p>因此 producer 提供了<strong>延迟容错机制</strong>来规避故障的 Broker 。</p><p>当<code> sendLatencyFaultEnable</code> 开关为 true 时，在随机递增取模的基础上，代码逻辑会再去过滤掉 not available 的 Broker 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所谓的&quot; <code>latencyFaultTolerance</code> &quot;，是指对之前失败的，按一定的时间做退避。</p><p>例如，如果上次请求的latency超过 550Lms，就退避 3000Lms；超过1000L，就退避 60000L ；如果关闭，采用随机递增取模的方式选择一个队列（MessageQueue）来发送消息，<code>latencyFaultTolerance</code> 机制是实现消息发送高可用的核心关键所在。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>sendResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendKernelImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> timeout <span class="token operator">-</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
endTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> endTimestamp <span class="token operator">-</span> beginTimestampPrev<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息时捕捉到异常同样会调用 <code>updateFaultItem</code> 方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>endTimestamp = System.currentTimeMillis();
this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, true);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>endTimestamp - beginTimestampPrev</code>等于消息发送耗时，如果成功发送第三个参数传的是 false ，发送失败传 true。</p><p>继续查看 <code>MQFaultStrategy#updateFaultItem </code> 源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFaultItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> currentLatency<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isolation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendLatencyFaultEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> duration <span class="token operator">=</span> <span class="token function">computeNotAvailableDuration</span><span class="token punctuation">(</span>isolation <span class="token operator">?</span> <span class="token number">30000</span> <span class="token operator">:</span> currentLatency<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">updateFaultItem</span><span class="token punctuation">(</span>brokerName<span class="token punctuation">,</span> currentLatency<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">computeNotAvailableDuration</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> currentLatency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> latencyMax<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLatency <span class="token operator">&gt;=</span> latencyMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notAvailableDuration<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>computeNotAvailableDuration</code>方法会判断当前消息发送耗时，位于哪一个延迟级别，然后选择对应的 duration 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> latencyMax <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">50L</span><span class="token punctuation">,</span> <span class="token number">100L</span><span class="token punctuation">,</span> <span class="token number">550L</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">,</span> <span class="token number">3000L</span><span class="token punctuation">,</span> <span class="token number">15000L</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> notAvailableDuration <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">30000L</span><span class="token punctuation">,</span> <span class="token number">60000L</span><span class="token punctuation">,</span> <span class="token number">120000L</span><span class="token punctuation">,</span> <span class="token number">180000L</span><span class="token punctuation">,</span> <span class="token number">600000L</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code> isolation</code> 为 true，该 broker 会得到一个10分钟规避时长 ，也就是 600000L 毫秒 。</p><p>如果 <code>isolation</code> 为 false，假设 currentLatency 为 600L , 那么规避时间 30000L 毫秒。</p><p>查看 <code>LatencyFaultToleranceImpl#updateFaultItem </code> 源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFaultItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> currentLatency<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> notAvailableDuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从缓存中获取失败条目</span>
    <span class="token class-name">FaultItem</span> old <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>faultItemTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//若缓存中没有，则创建</span>
        <span class="token keyword">final</span> <span class="token class-name">FaultItem</span> faultItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FaultItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        faultItem<span class="token punctuation">.</span><span class="token function">setCurrentLatency</span><span class="token punctuation">(</span>currentLatency<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// broker的开始可用时间=当前时间+规避时长</span>
        faultItem<span class="token punctuation">.</span><span class="token function">setStartTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> notAvailableDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>

        old <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>faultItemTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> faultItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            old<span class="token punctuation">.</span><span class="token function">setCurrentLatency</span><span class="token punctuation">(</span>currentLatency<span class="token punctuation">)</span><span class="token punctuation">;</span>
            old<span class="token punctuation">.</span><span class="token function">setStartTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> notAvailableDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新旧的失败条目</span>
        old<span class="token punctuation">.</span><span class="token function">setCurrentLatency</span><span class="token punctuation">(</span>currentLatency<span class="token punctuation">)</span><span class="token punctuation">;</span>
        old<span class="token punctuation">.</span><span class="token function">setStartTimestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> notAvailableDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FaultItem 为存储故障 broker 的类，称为失败条目，每个条目存储了 broker 的名称、消息发送延迟时长、故障规避开始时间。</p><p>该方法主要是对失败条目的一些更新操作，如果失败条目已存在，那么更新失败条目，如果失败条目不存在，那么新建失败条目，其中失败条目的<code>startTimestamp</code>为当前系统时间加上规避时长，<code> startTimestamp</code> 是判断 broker 是否可用的时间值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTimestamp<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-顺序消息" tabindex="-1"><a class="header-anchor" href="#_4-顺序消息" aria-hidden="true">#</a> 4 顺序消息</h2><p>顺序消息可以保证消息的消费顺序和发送的顺序一致，即先发送的先消费，后发送的后消费，常用于金融证券、电商业务等对消息指令顺序有严格要求的场景。</p><h3 id="_4-1-如何保证顺序消息" tabindex="-1"><a class="header-anchor" href="#_4-1-如何保证顺序消息" aria-hidden="true">#</a> 4.1 如何保证顺序消息</h3><p>消息的顺序需要由以下三个阶段保证：</p><ul><li><p><strong>消息发送</strong></p><p>如上图所示，A1、B1、A2、A3、B2、B3 是订单 A 和订单 B 的消息产生的顺序，业务上要求同一订单的消息保持顺序，例如订单A的消息发送和消费都按照 A1、A2、A3 的顺序。</p><p>如果是普通消息，订单A的消息可能会被轮询发送到不同的队列中，不同队列的消息将无法保持顺序，而顺序消息发送时 RocketMQ 支持将 Sharding Key 相同（例如同一订单号）的消息序路由到一个队列中。</p><p>RocketMQ 版服务端判定消息产生的顺序性是参照同一生产者发送消息的时序。不同生产者、不同线程并发产生的消息，云消息队列 RocketMQ 版服务端无法判定消息的先后顺序。</p><figure><img src="https://www.javayong.cn/pics/temp//wsNXq03SCB.png" alt="" tabindex="0"><figcaption></figcaption></figure></li><li><p><strong>消息存储</strong></p><p>顺序消息的 Topic 中，每个逻辑队列对应一个物理队列，当消息按照顺序发送到 Topic 中的逻辑队列时，每个分区的消息将按照同样的顺序存储到对应的物理队列中。</p><p>对于 kafka 来讲，1个主题会有多个分区，数据存储在每个分区，分区里文件以 <code>Segment</code> 文件串联起来。</p><p>对于 RocketMQ 来讲 , 存储模型包含三部分： <strong>数据文件 commitlog</strong> 、<strong>消费文件 consumequeue</strong> 、<strong>索引文件 indexfile</strong>。</p><p>kafka 和 RocketMQ 文件模型很类似，只不过 kafka 的文件数据都会存储在不同的分区里，而 RocketMQ 的数据都存储在 CommitLog 文件里 ，不同的消息会存储在不同的消费队列文件里，便于提升消费者性能（索引）。</p><p>所以我们只需要将特定的消息发送到特定的逻辑队列里，对于 kafka 来讲是分区 partition ，对于 RocketMQ 来讲，就是消费队列 messageQueue 。</p></li><li><p><strong>消息消费</strong></p><p>RocketMQ 按照存储的顺序将消息投递给 Consumer，Consumer 收到消息后也不对消息顺序做任何处理，按照接收到的顺序进行消费。</p><p>Consumer 消费消息时，同一 Sharding Key 的消息使用单线程消费，保证消息消费顺序和存储顺序一致，最终实现消费顺序和发布顺序的一致。</p></li></ul><h3 id="_4-2-生产者发送顺序消息" tabindex="-1"><a class="header-anchor" href="#_4-2-生产者发送顺序消息" aria-hidden="true">#</a> 4.2. 生产者发送顺序消息</h3><p>下面的代码展示生产者如何发生顺序消息 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagE&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> orderId <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTestjjj&quot;</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;KEY&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>
                        <span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token annotation punctuation">@Override</span>
                 <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqs<span class="token punctuation">,</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>
                        <span class="token keyword">int</span> index <span class="token operator">=</span> id <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送顺序消息需要定制<code>队列选择器 MessageQueueSelector</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SendResult</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MessageQueueSelector</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageQueueSelector</span> <span class="token punctuation">{</span>
    <span class="token class-name">MessageQueue</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqs<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入 <code>DefaultMQProducerImpl#sendSelectImpl </code>, 查看顺序消费发送的实现逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">SendResult</span> <span class="token function">sendSelectImpl</span><span class="token punctuation">(</span>
        <span class="token class-name">Message</span> msg<span class="token punctuation">,</span>
        <span class="token class-name">MessageQueueSelector</span> selector<span class="token punctuation">,</span>
        <span class="token class-name">Object</span> arg<span class="token punctuation">,</span>
        <span class="token keyword">final</span> <span class="token class-name">CommunicationMode</span> communicationMode<span class="token punctuation">,</span>
        <span class="token keyword">final</span> <span class="token class-name">SendCallback</span> sendCallback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeout
    <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">RemotingException</span><span class="token punctuation">,</span> <span class="token class-name">MQBrokerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
     <span class="token comment">// 省略代码</span>
    <span class="token class-name">TopicPublishInfo</span> topicPublishInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryToFindTopicPublishInfo</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>topicPublishInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> topicPublishInfo<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> messageQueueList <span class="token operator">=</span>
       mQClientFactory<span class="token punctuation">.</span><span class="token function">getMQAdminImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parsePublishMessageQueues</span><span class="token punctuation">(</span>topicPublishInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Message</span> userMessage <span class="token operator">=</span> <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">cloneMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> userTopic <span class="token operator">=</span> <span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>userMessage<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            userMessage<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span>userTopic<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用 selector 的select 方法，传递相关参数，选择某一个队列 </span>
            mq <span class="token operator">=</span> mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queueWithNamespace</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>messageQueueList<span class="token punctuation">,</span> userMessage<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;select message queue threw exception.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     
        <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginStartTime<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> costTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTooMuchRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;sendSelectImpl call timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mq <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendKernelImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> timeout <span class="token operator">-</span> costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;select message queue return null.&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">validateNameServerSetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MQClientException</span><span class="token punctuation">(</span><span class="token string">&quot;No route info for this topic, &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的顺序消息发送代码，我们得到两点结论：</p><ol><li>顺序消息发送时，需要实现 <code> MessageQueueSelector</code> 的 <code>select</code>方法 ；</li><li>发送顺序消息时，若发送失败没有重试。</li></ol><hr><p>参考文档：</p><blockquote><p>https://developer.aliyun.com/article/918025</p></blockquote>`,113),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","03RocketMQ4_producer.html.vue"]]);export{r as default};
