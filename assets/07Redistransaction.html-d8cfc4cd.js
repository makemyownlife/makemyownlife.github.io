const e=JSON.parse('{"key":"v-0a8b7c89","path":"/cache/07Redistransaction.html","title":"聊聊 Redis 事务","lang":"zh-CN","frontmatter":{"title":"聊聊 Redis 事务","category":"cache","tag":["cache","Redis"],"head":[["meta",{"name":"keywords","content":"布隆过滤器,缓存，Redis"}],["meta",{"name":"description","content":"Redis 事务包含两种模式 事务模式 和 Lua 脚本。"}],["meta",{"property":"og:url","content":"https://javayong.cn/cache/07Redistransaction.html"}],["meta",{"property":"og:site_name","content":"勇哥Java实战"}],["meta",{"property":"og:title","content":"聊聊 Redis 事务"}],["meta",{"property":"og:description","content":"准确的讲，Redis 事务包含两种模式 : 事务模式 和 Lua 脚本。 先说结论： Redis 的事务模式具备如下特点： 保证隔离性； 无法保证持久性； 具备了一定的原子性，但不支持回滚； 一致性的概念有分歧，假设在一致性的核心是约束的语意下，Redis 的事务可以保证一致性。 但 Lua 脚本更具备实用场景，它是另一种形式的事务，他具备一定的原子性，但脚本报错的情况下，事务并不会回滚。Lua 脚本可以保证隔离性，而且可以完美的支持后面的步骤依赖前面步骤的结果。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T07:53:52.000Z"}],["meta",{"property":"article:author","content":"勇哥"}],["meta",{"property":"article:tag","content":"cache"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2023-11-17T07:53:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聊聊 Redis 事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-17T07:53:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"勇哥\\",\\"url\\":\\"https://javayong.cn/article/\\"}]}"]],"description":"准确的讲，Redis 事务包含两种模式 : 事务模式 和 Lua 脚本。 先说结论： Redis 的事务模式具备如下特点： 保证隔离性； 无法保证持久性； 具备了一定的原子性，但不支持回滚； 一致性的概念有分歧，假设在一致性的核心是约束的语意下，Redis 的事务可以保证一致性。 但 Lua 脚本更具备实用场景，它是另一种形式的事务，他具备一定的原子性，但脚本报错的情况下，事务并不会回滚。Lua 脚本可以保证隔离性，而且可以完美的支持后面的步骤依赖前面步骤的结果。"},"headers":[{"level":2,"title":"1 事务原理","slug":"_1-事务原理","link":"#_1-事务原理","children":[]},{"level":2,"title":"2.1 原子性","slug":"_2-1-原子性","link":"#_2-1-原子性","children":[]},{"level":2,"title":"2.2 隔离性","slug":"_2-2-隔离性","link":"#_2-2-隔离性","children":[]},{"level":2,"title":"2.3 持久性","slug":"_2-3-持久性","link":"#_2-3-持久性","children":[]},{"level":2,"title":"2.4 一致性","slug":"_2-4-一致性","link":"#_2-4-一致性","children":[]},{"level":2,"title":"2.5 事务特点","slug":"_2-5-事务特点","link":"#_2-5-事务特点","children":[]},{"level":2,"title":"3.1 简介","slug":"_3-1-简介","link":"#_3-1-简介","children":[]},{"level":2,"title":"3.2 EVAL 命令","slug":"_3-2-eval-命令","link":"#_3-2-eval-命令","children":[]},{"level":2,"title":"3.3 EVALSHA 命令","slug":"_3-3-evalsha-命令","link":"#_3-3-evalsha-命令","children":[]}],"git":{"createdTime":1700122627000,"updatedTime":1700207632000,"contributors":[{"name":"makemyownlife","email":"zhangyong7120180@163.com","commits":3}]},"readingTime":{"minutes":13.77,"words":4131},"filePathRelative":"cache/07Redistransaction.md","localizedDate":"2023年11月16日","excerpt":"<p>准确的讲，Redis 事务包含两种模式 : <strong>事务模式</strong> 和 <strong>Lua 脚本</strong>。</p>\\n<p>先说结论：</p>\\n<p>Redis 的事务模式具备如下特点：</p>\\n<ul>\\n<li>保证隔离性；</li>\\n<li>无法保证持久性；</li>\\n<li>具备了一定的原子性，但不支持回滚；</li>\\n<li>一致性的概念有分歧，假设在一致性的核心是约束的语意下，Redis 的事务可以保证一致性。</li>\\n</ul>\\n<p>但 Lua 脚本更具备实用场景，它是另一种形式的事务，他具备一定的原子性，但脚本报错的情况下，事务并不会回滚。Lua 脚本可以保证隔离性，而且可以完美的支持<strong>后面的步骤依赖前面步骤的结果</strong>。</p>","copyright":{"author":"勇哥"},"autoDesc":true}');export{e as data};
