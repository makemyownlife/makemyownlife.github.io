import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,e as i}from"./app-ebb415e0.js";const t={},c=i('<figure><img src="https://javayong.cn/pics/cache/cacherisk.png" alt="" tabindex="0"><figcaption></figcaption></figure><h1 id="_1-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1-缓存穿透" aria-hidden="true">#</a> 1 缓存穿透</h1><h1 id="_2-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_2-缓存击穿" aria-hidden="true">#</a> 2 缓存击穿</h1><h1 id="_3-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3-缓存雪崩" aria-hidden="true">#</a> 3 缓存雪崩</h1><p>缓存雪崩指的是因为某些原因导致缓存中大量的数据同时失效或过期，导致后续请求都落到数据源上，令数据源在短时间内压力剧增。</p><p>为什么会出现缓存大量数据同时失效或者过期呢？</p><p><strong>1、大量缓存数据同时过期</strong></p><p><strong>2、缓存服务出现故障</strong></p><p>出现这种情况，往往是系统有专门的缓存预热功能，也可能大量公共数据是由某一次冷操作加载的，这样都可能出现由此载入缓存的大批数据具有相同的过期时间，在同一时刻一起失效。</p><p>还有一种情况是缓存服务由于某些原因崩溃后重启，此时也会造成大量数据同时失效，这种现象被称为缓存雪崩。要避免缓存雪崩问题，通常会采取下面的三种办法：</p><p>解决方案通常包括使用分布式缓存部署、设置不同的过期时间、应用程序限流等措施来避免缓存失效时间集中在同一时间段，以及使用缓存预热和自动刷新机制等手段来减轻缓存压力。</p><ol><li>提升缓存系统可用性，建设分布式缓存的集群。</li><li>启用透明多级缓存，各个服务节点一级缓存中的数据通常会具有不一样的加载时间，也就分散了它们的过期时间。</li><li>将缓存的生存期从固定时间改为一个时间段内的随机时间，譬如原本是一个小时过期，那可以缓存不同数据时，设置生存期为 55 分钟到 65 分钟之间的某个随机时间。</li></ol><h1 id="_4-缓存污染" tabindex="-1"><a class="header-anchor" href="#_4-缓存污染" aria-hidden="true">#</a> 4 缓存污染</h1>',13),n=[c];function h(s,o){return e(),r("div",null,n)}const p=a(t,[["render",h],["__file","08cacherisk.html.vue"]]);export{p as default};
