import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-9277c8b6.js";const p={},e=t(`<p>这篇文章，我们聊一聊 RocketMQ 的<strong>消息轨迹</strong>设计思路。</p><p>查询消息轨迹可作为生产环境中排查问题强有力的数据支持 ，也是研发同学解决线上问题的重要武器之一。</p><h2 id="_1-基础概念" tabindex="-1"><a class="header-anchor" href="#_1-基础概念" aria-hidden="true">#</a> 1 基础概念</h2><p>消息轨迹是指一条消息从生产者发送到 Broker , 再到消费者消费，整个过程中的各个相关节点的时间、状态等数据汇聚而成的完整链路信息。</p><figure><img src="https://javayong.cn/pics/rocketmq/rocketmqtrack.png?a=1" alt="" tabindex="0"><figcaption></figcaption></figure><p>当我们需要查询消息轨迹时，需要明白一点：<strong>消息轨迹数据是存储在 Broker 服务端，我们需要定义一个主题，在生产者，消费者端定义轨迹钩子</strong>。</p><h2 id="_2-开启轨迹" tabindex="-1"><a class="header-anchor" href="#_2-开启轨迹" aria-hidden="true">#</a> 2 开启轨迹</h2><h3 id="_2-1-修改-broker-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-1-修改-broker-配置文件" aria-hidden="true">#</a> 2.1 修改 Broker 配置文件</h3><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 开启消息轨迹</span>
<span class="token key attr-name">traceTopicEnable</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-生产者配置" tabindex="-1"><a class="header-anchor" href="#_2-2-生产者配置" aria-hidden="true">#</a> 2.2 生产者配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> producerGroup<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableMsgTrace<span class="token punctuation">)</span> 

<span class="token keyword">public</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> producerGroup<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableMsgTrace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> customizedTraceTopic<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在生产者的构造函数里，有两个核心参数：</p><ul><li><strong>enableMsgTrace</strong>：是否开启消息轨迹</li><li><strong>customizedTraceTopic</strong>：记录消息轨迹的 Topic , 默认是：<code> RMQ_SYS_TRACE_TOPIC</code> 。</li></ul><p>执行如下的生产者代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PRODUCER_GROUP</span> <span class="token operator">=</span> <span class="token string">&quot;mytestGroup&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_NAMESRVADDR</span> <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">&quot;TagA&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token constant">PRODUCER_GROUP</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_NAMESRVADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>
                    <span class="token constant">TOPIC</span><span class="token punctuation">,</span>
                    <span class="token constant">TAG</span><span class="token punctuation">,</span>
                    key<span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 这里休眠十秒，是为了异步发送轨迹消息成功。</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在生产者代码中，我们指定了消息的 key 属性， 便于对于消息进行高性能检索。</p></blockquote><p>执行成功之后，我们从控制台查看轨迹信息。</p><figure><img src="https://javayong.cn/pics/rocketmq/dashboardtrack.png" alt="" tabindex="0"><figcaption></figcaption></figure><figure><img src="https://javayong.cn/pics/rocketmq/traceproducer.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>从图中可以看到，消息轨迹中存储了消息的<code> 存储时间</code> 、<code> 存储服务器IP</code> 、<code>发送耗时</code> 。</p><h3 id="_2-3-消费者配置" tabindex="-1"><a class="header-anchor" href="#_2-3-消费者配置" aria-hidden="true">#</a> 2.3 消费者配置</h3><p>和生产者类似，消费者的构造函数可以传递轨迹参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableMsgTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableMsgTrace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> customizedTraceTopic<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行如下的消费者代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CONSUMER_GROUP</span> <span class="token operator">=</span> <span class="token string">&quot;exampleGruop&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_NAMESRVADDR</span> <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token constant">CONSUMER_GROUP</span> <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_NAMESRVADDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span><span class="token constant">CONSUME_FROM_FIRST_OFFSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s Receive New Messages: %s %n&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer Started.%n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://javayong.cn/pics/rocketmq/consumertrack.png" alt="" tabindex="0"><figcaption></figcaption></figure><h2 id="_3-实现原理" tabindex="-1"><a class="header-anchor" href="#_3-实现原理" aria-hidden="true">#</a> 3 实现原理</h2><p>轨迹的实现原理主要是在生产者发送、消费者消费时添加相关的钩子。 因此，我们只需要了解钩子的实现逻辑即可。</p><p>下面的代码是 <code>DefaultMQProducer </code> 的构造函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> namespace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> producerGroup<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">,</span>
    <span class="token keyword">boolean</span> enableMsgTrace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> customizedTraceTopic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> namespace<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>producerGroup <span class="token operator">=</span> producerGroup<span class="token punctuation">;</span>
    defaultMQProducerImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducerImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// if client open the message trace feature</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>enableMsgTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//异步轨迹分发器</span>
            <span class="token class-name">AsyncTraceDispatcher</span> dispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncTraceDispatcher</span><span class="token punctuation">(</span>producerGroup<span class="token punctuation">,</span> <span class="token class-name">TraceDispatcher<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">PRODUCE</span><span class="token punctuation">,</span> customizedTraceTopic<span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
            dispatcher<span class="token punctuation">.</span><span class="token function">setHostProducer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            traceDispatcher <span class="token operator">=</span> dispatcher<span class="token punctuation">;</span>
            <span class="token comment">// 发送消息时添加执行钩子</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">registerSendMessageHook</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">SendMessageTraceHookImpl</span><span class="token punctuation">(</span>traceDispatcher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 结束事务时添加执行钩子</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">registerEndTransactionHook</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">EndTransactionTraceHookImpl</span><span class="token punctuation">(</span>traceDispatcher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;system mqtrace hook init failed ,maybe can&#39;t send msg trace data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当是否<strong>开启轨迹开关</strong>打开时，创建<strong>异步轨迹分发器</strong> <code>AsyncTraceDispatcher</code> ，然后给默认的生产者实现类在发送消息的钩子 <code>SendMessageTraceHookImpl</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//发送消息时添加执行钩子</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">registerSendMessageHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SendMessageTraceHookImpl</span><span class="token punctuation">(</span>traceDispatcher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们把生产者发送消息的流程简化如下代码 ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//DefaultMQProducerImpl#sendKernelImpl</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeSendMessageHookBefore</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 发生消息</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getMQClientAPIImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token comment">// 生产者发送消息后会执行</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeSendMessageHookAfter</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入<code>SendMessageTraceHookImpl</code> 类 ，该类主要有两个方法 <code>sendMessageBefore</code> 和 <code> sendMessageAfter</code> 。</p><p><strong>1、sendMessageBefore 方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageBefore</span><span class="token punctuation">(</span><span class="token class-name">SendMessageContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//if it is message trace data,then it doesn&#39;t recorded</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AsyncTraceDispatcher</span><span class="token punctuation">)</span>  localDispatcher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTraceTopicName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//build the context content of TuxeTraceContext</span>
    <span class="token class-name">TraceContext</span> tuxeContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tuxeContext<span class="token punctuation">.</span><span class="token function">setTraceBeans</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceBean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">setMqTraceContext</span><span class="token punctuation">(</span>tuxeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tuxeContext<span class="token punctuation">.</span><span class="token function">setTraceType</span><span class="token punctuation">(</span><span class="token class-name">TraceType<span class="token punctuation">.</span>Pub</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tuxeContext<span class="token punctuation">.</span><span class="token function">setGroupName</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getProducerGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//build the data bean object of message trace</span>
    <span class="token class-name">TraceBean</span> traceBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">withoutNamespace</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setStoreHost</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBrokerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setBodyLength</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setMsgType</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getMsgType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tuxeContext<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>traceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息之前，先收集消息的 topic 、tag、key 、存储 Broker 的 IP 地址、消息体的长度等基础信息，并将消息轨迹数据存储在调用上下文中。</p><p><strong>2、sendMessageAfter 方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageAfter</span><span class="token punctuation">(</span><span class="token class-name">SendMessageContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...省略部分代码 </span>
    <span class="token class-name">TraceContext</span> tuxeContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TraceContext</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getMqTraceContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TraceBean</span> traceBean <span class="token operator">=</span> tuxeContext<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> costTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tuxeContext<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> tuxeContext<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tuxeContext<span class="token punctuation">.</span><span class="token function">setCostTime</span><span class="token punctuation">(</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSendResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">SendStatus</span><span class="token punctuation">.</span><span class="token constant">SEND_OK</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tuxeContext<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        tuxeContext<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    tuxeContext<span class="token punctuation">.</span><span class="token function">setRegionId</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSendResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setMsgId</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSendResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setOffsetMsgId</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSendResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOffsetMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceBean<span class="token punctuation">.</span><span class="token function">setStoreTime</span><span class="token punctuation">(</span>tuxeContext<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> costTime <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    localDispatcher<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tuxeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟踪对象里会保存 <code>costTime</code> (消息发送时间)、<code>success</code> （是否发送成功）、<code>regionId</code> (发送到 Broker 所在的分区) 、 <code>msgId</code> (消息 ID，全局唯一)、<code>offsetMsgId</code> (消息物理偏移量) ，<code>storeTime</code> (存储时间 ) 。</p><blockquote><p>存储时间并没有取消息的实际存储时间，而是估算出来的：客户端发送时间的一般的耗时表示消息的存储时间。</p></blockquote><p>最后将跟踪上下文添加到本地轨迹分发器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>localDispatcher<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tuxeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面我们分析下轨迹分发器的原理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AsyncTraceDispatcher</span><span class="token punctuation">(</span><span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> traceTopicName<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略代码 ....   </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>traceContextQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceContext</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>appenderQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>queueSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>traceTopicName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>traceTopicName <span class="token operator">=</span> traceTopicName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>traceTopicName <span class="token operator">=</span> <span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">RMQ_SYS_TRACE_TOPIC</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>traceExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token comment">//</span>
            <span class="token number">10</span><span class="token punctuation">,</span> 
            <span class="token number">20</span><span class="token punctuation">,</span> 
            <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> 
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> 
            <span class="token keyword">this</span><span class="token punctuation">.</span>appenderQueue<span class="token punctuation">,</span> 
            <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryImpl</span><span class="token punctuation">(</span><span class="token string">&quot;MQTraceSendThread_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceProducer <span class="token operator">=</span> <span class="token function">getAndCreateTraceProducer</span><span class="token punctuation">(</span>rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> nameSrvAddr<span class="token punctuation">,</span> <span class="token class-name">AccessChannel</span> accessChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStarted<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            traceProducer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>nameSrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            traceProducer<span class="token punctuation">.</span><span class="token function">setInstanceName</span><span class="token punctuation">(</span><span class="token constant">TRACE_INSTANCE_NAME</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> nameSrvAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            traceProducer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>accessChannel <span class="token operator">=</span> accessChannel<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AsyncRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;MQ-AsyncTraceDispatcher-Thread-&quot;</span> <span class="token operator">+</span> dispatcherId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>worker<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerShutDownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码展示了分发器的构造函数和启动方法，构造函数创建了一个发送消息的线程池 <code>traceExecutor</code> ，启动 start 后会启动一个 <code>worker线程</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AsyncRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> stopped<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopped<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>traceContextQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> pollingTimeMil<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> endTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">TraceContext</span> traceContext <span class="token operator">=</span> traceContextQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>
                                endTime <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span>
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>traceContext <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>traceContext<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// get the topic which the trace message will send to</span>
                            <span class="token class-name">String</span> traceTopicName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTraceTopicName</span><span class="token punctuation">(</span>traceContext<span class="token punctuation">.</span><span class="token function">getRegionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token comment">// get the traceDataSegment which will save this trace message, create if null</span>
                            <span class="token class-name">TraceDataSegment</span> traceDataSegment <span class="token operator">=</span> taskQueueByTopic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>traceTopicName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>traceDataSegment <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                traceDataSegment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TraceDataSegment</span><span class="token punctuation">(</span>traceTopicName<span class="token punctuation">,</span> traceContext<span class="token punctuation">.</span><span class="token function">getRegionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                taskQueueByTopic<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>traceTopicName<span class="token punctuation">,</span> traceDataSegment<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>

                            <span class="token comment">// encode traceContext and save it into traceDataSegment</span>
                            <span class="token comment">// NOTE if data size in traceDataSegment more than maxMsgSize,</span>
                            <span class="token comment">//  a AsyncDataSendTask will be created and submitted</span>
                            <span class="token class-name">TraceTransferBean</span> traceTransferBean <span class="token operator">=</span> <span class="token class-name">TraceDataEncoder</span><span class="token punctuation">.</span><span class="token function">encoderFromContextBean</span><span class="token punctuation">(</span>traceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            traceDataSegment<span class="token punctuation">.</span><span class="token function">addTraceTransferBean</span><span class="token punctuation">(</span>traceTransferBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;traceContextQueue#poll exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// NOTE send the data in traceDataSegment which the first TraceTransferBean</span>
                <span class="token comment">//  is longer than waitTimeThreshold</span>
                <span class="token function">sendDataByTimeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AsyncTraceDispatcher</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>stopped<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>stopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>worker 启动后，会从轨迹上下文队列 traceContextQueue 中不断的取出轨迹上下文，并将上下文转换成轨迹数据片段 <code>TraceDataSegment </code>。</p><p>为了提升系统的性能，并不是每一次从队列中获取到数据就直接发送到 MQ ，而是积累到一定程度的临界点才触发这个操作，我们可以简单的理解为<strong>批量操作</strong>。</p><p>这里面有两个维度 :</p><ol><li><p>轨迹数据片段的数据大小大于某个数据大小阈值。笔者认为这段 RocketMQ 4.9.4 版本代码存疑，因为最新的 5.0 版本做了优化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>currentMsgSize <span class="token operator">&gt;=</span> traceProducer<span class="token punctuation">.</span><span class="token function">getMaxMessageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TraceTransferBean</span><span class="token punctuation">&gt;</span></span> dataToSend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>traceTransferBeanList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">AsyncDataSendTask</span> asyncDataSendTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncDataSendTask</span><span class="token punctuation">(</span>traceTopicName<span class="token punctuation">,</span> regionId<span class="token punctuation">,</span> dataToSend<span class="token punctuation">)</span><span class="token punctuation">;</span>
    traceExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>asyncDataSendTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当前时间 - 轨迹数据片段的首次存储时间 是否大于刷新时间 ，也就是每500毫秒刷新一次。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendDataByTimeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TraceDataSegment</span> taskInfo <span class="token operator">:</span> taskQueueByTopic<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> taskInfo<span class="token punctuation">.</span>firstBeanAddTime <span class="token operator">&gt;=</span> waitTimeThresholdMil<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            taskInfo<span class="token punctuation">.</span><span class="token function">sendAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>轨迹数据存储的格式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TraceBean</span> bean <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getTraceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//append the content of context and traceBean to transferBean&#39;s TransData</span>
<span class="token keyword">case</span> <span class="token class-name">Pub</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getTraceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getRegionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getStoreHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getBodyLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getCostTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getMsgType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getOffsetMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">CONTENT_SPLITOR</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TraceConstants</span><span class="token punctuation">.</span><span class="token constant">FIELD_SPLITOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图展示了事务轨迹消息数据，每个数据字段是按照 <code>CONTENT_SPLITOR</code> 分隔。</p><figure><img src="https://javayong.cn/pics/rocketmq/tracedatademo.png" alt="轨迹消息数据" tabindex="0"><figcaption>轨迹消息数据</figcaption></figure><blockquote><p>注意：</p><p>分隔符 CONTENT_SPLITOR = (char) 1 它在内存中的值是：00000001 , 但是 char i = &#39;1&#39; 它在内存中的值是 49 ，即 00110001。</p></blockquote><hr><p>参考资料：</p><blockquote><p>阿里云文档：</p><p>https://help.aliyun.com/zh/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-4-x-series/user-guide/query-a-message-trace</p><p>石臻臻:</p><p>https://mp.weixin.qq.com/s/saYD3mG9F1z-oAU6STxewQ</p></blockquote>`,60),c=[e];function o(u,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","11RocketMQ4_messagetrack.html.vue"]]);export{r as default};
